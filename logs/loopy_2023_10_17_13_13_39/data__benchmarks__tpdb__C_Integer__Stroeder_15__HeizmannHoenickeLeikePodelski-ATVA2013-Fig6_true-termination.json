{
    "logs": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n\tx = unknown_int();\n\ty = unknown_int();\n\twhile (x >= 0 && y >= 1) {\n\t\tx = x - y;\n\t\ty = unknown_int();\n\t}\n\treturn 0;\n}",
        "success": true,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n\tx = unknown_int();\n\ty = unknown_int();\n\twhile (x >= 0 && y >= 1) {\n\t\tx = x - y;\n\t\ty = unknown_int();\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "First, let's note the initial variable assignments and conditions:\n- x and y are assigned non-deterministic integer values from the unknown_int() function.\n- The loop condition is (x >= 0 && y >= 1).\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution, x and y have non-deterministic integer values. We cannot make any assumption about them.\n\n2. In every iteration of the loop:\n   - The loop condition ensures that x >= 0 and y >= 1.\n   - x is decremented by y, but since y is a non-deterministic integer value, we cannot make any assumption about the new value of x.\n\n3. After the loop termination:\n   - The loop terminates when either x < 0 or y < 1, or both.\n\nConsidering the instructions, we can write the loop invariants as follows:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 1;\n*/\n```\n\nThese invariants hold true before the loop execution (due to the loop condition), in every iteration of the loop, and after the loop termination (since the loop terminates when either x < 0 or y < 1, or both).",
                    "First, let's note the pre-conditions and initial values:\n- x and y are initialized to unknown_int() values.\n\nNext, let's analyze the loop:\n- Loop condition: x >= 0 && y >= 1\n- Loop body: x = x - y; y = unknown_int();\n\nNow, let's find the necessary loop invariants:\n\n```\n/*@\n    loop invariant x >= 0;\n    loop invariant x >= \\old(x) - y;\n    loop invariant y >= 1 ==> x >= \\old(x) - y;\n*/\n```",
                    "First, let's note the variable assignments and pre-conditions:\n- x and y are both assigned non-deterministic integer values from the unknown_int() function.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is (x >= 0 && y >= 1).\n\nLet's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant \\forall integer k; 0 <= k < y ==> x - k*y >= 0;\n*/\n```\n\nThese loop invariants imply that x is always non-negative within the loop, y is always non-negative, and for any positive integer k such that 0 <= k < y, x - k*y is always non-negative. The loop invariants hold before the loop execution, in every iteration of the loop, and after the loop termination.",
                    "First, let's note the variable assignments and loop condition:\n- x and y are assigned unknown_int() values before the loop.\n- The loop condition is (x >= 0 && y >= 1).\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 1;\n*/\n```\nThese loop invariants are true:\n1. Before the loop execution, as they are the loop conditions.\n2. In every iteration of the loop, since x decreases and y is non-deterministically assigned a new value.\n3. After the loop termination, as the loop only terminates when x < 0 or y < 1.",
                    "First, let's make a note of the variable assignments and loop condition:\n\n- x and y are assigned unknown_int() values at the beginning, so they can be any integer.\n- The loop condition is (x >= 0 && y >= 1).\n\nNow, let's output the loop invariants:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant (y == 0) ==> (x < 0);\n*/\n```\n\nThese loop invariants are true:\n(i) before the loop execution: x and y are assigned unknown_int() values, so they can be any integer. The loop starts only when x >= 0 and y >= 1.\n(ii) in every iteration of the loop: The loop continues only if x >= 0 and y >= 1, and the body of the loop maintains these conditions.\n(iii) after the loop termination: The loop terminates when x < 0 or y < 1. Since the loop invariant states that y >= 0, the only possible value for y after the loop is 0. Thus, when y == 0, x must be less than 0."
                ],
                "output": [
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 1;\n*/",
                    "/*@\n    loop invariant x >= 0;\n    loop invariant x >= \\old(x) - y;\n    loop invariant y >= 1 ==> x >= \\old(x) - y;\n*/",
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant \\forall integer k; 0 <= k < y ==> x - k*y >= 0;\n*/",
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 1;\n*/",
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant (y == 0) ==> (x < 0);\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 1;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x >= 0 is neither established nor preserved.\nloop invariant y >= 1 is neither established nor preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@\n    loop invariant x >= 0;\n    loop invariant x >= \\old(x) - y;\n    loop invariant y >= 1 ==> x >= \\old(x) - y;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 13: \\old undefined in this context. Ignoring loop annotation"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant \\forall integer k; 0 <= k < y ==> x - k*y >= 0;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x >= 0 is neither established nor preserved.\nloop invariant y >= 0 is neither established nor preserved.\nloop invariant \\forall integer k; 0 <= k < y ==> x - k*y >= 0 is neither established nor preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 1;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x >= 0 is neither established nor preserved.\nloop invariant y >= 1 is neither established nor preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant (y == 0) ==> (x < 0);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x >= 0 is neither established nor preserved.\nloop invariant y >= 0 is neither established nor preserved.\nloop invariant (y == 0) ==> (x < 0) is neither established nor preserved.\n\n"
                    }
                ],
                "success": false
            },
            {
                "step": "Houdini for individual completion",
                "success": false,
                "completions": [
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 1;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n\tx = unknown_int();\n\ty = unknown_int();\n\t/*@\n\n\n*/\nwhile (x >= 0 && y >= 1) {\n\t\tx = x - y;\n\t\ty = unknown_int();\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 4,
                        "success": false,
                        "invariants": "/*@\n    loop invariant x >= 0;\n    loop invariant x >= \\old(x) - y;\n    loop invariant y >= 1 ==> x >= \\old(x) - y;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n\tx = unknown_int();\n\ty = unknown_int();\n\t/*@\n\n\n\n*/\nwhile (x >= 0 && y >= 1) {\n\t\tx = x - y;\n\t\ty = unknown_int();\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant \\forall integer k; 0 <= k < y ==> x - k*y >= 0;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n\tx = unknown_int();\n\ty = unknown_int();\n\t/*@\n\n\n\n*/\nwhile (x >= 0 && y >= 1) {\n\t\tx = x - y;\n\t\ty = unknown_int();\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 1;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n\tx = unknown_int();\n\ty = unknown_int();\n\t/*@\n\n\n*/\nwhile (x >= 0 && y >= 1) {\n\t\tx = x - y;\n\t\ty = unknown_int();\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant (y == 0) ==> (x < 0);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n\tx = unknown_int();\n\ty = unknown_int();\n\t/*@\n\n\n\n*/\nwhile (x >= 0 && y >= 1) {\n\t\tx = x - y;\n\t\ty = unknown_int();\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": false
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 5,
                "success": false,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n\tx = unknown_int();\n\ty = unknown_int();\n\t/*@\n\n\n\n\n\n\n\n*/\nwhile (x >= 0 && y >= 1) {\n\t\tx = x - y;\n\t\ty = unknown_int();\n\t}\n\treturn 0;\n}",
                "checker_output": false
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n\tx = unknown_int();\n\ty = unknown_int();\n\twhile (x >= 0 && y >= 1) {\n\t\tx = x - y;\n\t\ty = unknown_int();\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's identify the loop in the program:\n\n```c\nwhile (x >= 0 && y >= 1) {\n    x = x - y;\n    y = unknown_int();\n}\n```\n\nThe loop continues to execute as long as `x >= 0` and `y >= 1`. Now, let's try to find the ranking function. The variable `x` decreases in each iteration by the value of `y`. The value of `y` is unknown, but it is always greater than or equal to 1. Therefore, `x` strictly decreases in each iteration and is always non-negative.\n\nThe ranking function for this loop can be `x`. Now let's output the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x;\n*/\n```\n\nThis ranking function is valid because it satisfies the conditions for a valid ranking function:\n\n1. The value of the expression (`x`) must decrease with every successive iteration of the loop. In each iteration, `x` is decreased by `y`, which is a positive number.\n\n2. The value of the expression (`x`) must be positive for the loop to continue executing. The loop only continues executing if `x >= 0`.\n\nTherefore, the ranking function `x` proves that this loop must terminate.",
                    "First, let's identify the loop in the given program:\n\n```\nwhile (x >= 0 && y >= 1) {\n\tx = x - y;\n\ty = unknown_int();\n}\n```\n\nNext, let's analyze the loop and find a ranking function. The loop continues executing as long as x >= 0 and y >= 1. During each iteration, x is decreased by y, and y takes a new unknown integer value. Since y is always greater than or equal to 1, x is guaranteed to decrease in every iteration. Therefore, we can use x as the ranking function.\n\nNow, let's write the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x;\n*/\n```\n\nThis is a valid ranking function because x is always positive at the beginning of the loop (x >= 0) and decreases in every iteration (x = x - y), ensuring that the loop eventually terminates.",
                    "First, let's analyze the loop:\n\n```\nwhile (x >= 0 && y >= 1) {\n\tx = x - y;\n\ty = unknown_int();\n}\n```\n\nThe loop continues to execute as long as both `x` and `y` are non-negative, and `y` is at least 1.\n\nIn each iteration, `x` is decreased by the value of `y`. The value of `y` is then assigned to an unknown integer, which could be any integer value. Since `y` must be at least 1 for the loop to continue, we can assume that `y` is non-decreasing during the loop execution.\n\nNow, let's find a ranking function for this loop.\n\nSince `x` is decreased by `y` and `y` is non-decreasing, the value of `x` should decrease with every iteration for the loop to eventually terminate. Therefore, a valid ranking function for this loop would be `x`.\n\nHere's the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x;\n*/\n```\n\nThis ranking function is valid because it is a non-negative integer that decreases with every iteration of the loop, ensuring that the loop will eventually terminate.",
                    "First, let's identify the loop in the given program:\n\n```\nwhile (x >= 0 && y >= 1) {\n    x = x - y;\n    y = unknown_int();\n}\n```\n\nIn this loop, the variables x and y are changing in every iteration. To find a ranking function, we need to find an expression that decreases with every iteration of the loop and is positive for the loop to continue executing.\n\nHere is the ranking function for this loop:\n\n```\n/*@\n    loop variant x;\n*/\n```\n\nThe ranking function is x.\n\nNow let's explain why it is a valid ranking function:\n\n1. The value of x is always non-negative for the loop to continue executing, as the loop condition requires x to be greater than or equal to 0.\n2. The value of x decreases in every iteration of the loop. This is because x is updated as x = x - y, and y is always greater than or equal to 1 (as required by the loop condition). Therefore, x is always decreasing in each iteration.\n\nAs a result, the ranking function x is valid for this loop, as it is positive for the loop to continue executing and decreases with every successive iteration of the loop. This helps prove that the loop must terminate eventually.",
                    "First, let's identify the loop in the given program:\n\n```\nwhile (x >= 0 && y >= 1) {\n    x = x - y;\n    y = unknown_int();\n}\n```\n\nNow, let's find the ranking function for the loop. Since `y` is assigned an unknown value in each iteration, it's difficult to use it directly in the ranking function. However, we can observe that `x` decreases by `y` in each iteration, and `y` is always positive. Therefore, we can use `x` as our ranking function.\n\nHere's the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x;\n*/\n```\n\nThis ranking function is valid because:\n\n1. The value of `x` is non-negative when entering the loop, as the loop condition requires `x >= 0`.\n2. The value of `x` decreases in each iteration, as it is updated with `x = x - y`, and `y >= 1` for the loop to continue executing.\n3. Since `x` is a non-negative integer, it must eventually reach a value that breaks the loop condition (`x < 0`), ensuring the loop terminates."
                ],
                "output": [
                    "/*@\n    loop variant x;\n*/",
                    "/*@\n    loop variant x;\n*/",
                    "/*@\n    loop variant x;\n*/",
                    "/*@\n    loop variant x;\n*/",
                    "/*@\n    loop variant x;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n\tx = unknown_int();\n\ty = unknown_int();\n\t/*@\n\nloop variant x;\n*/\nwhile (x >= 0 && y >= 1) {\n\t\tx = x - y;\n\t\ty = unknown_int();\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n\tx = unknown_int();\n\ty = unknown_int();\n\t/*@\n\nloop variant x;\n*/\nwhile (x >= 0 && y >= 1) {\n\t\tx = x - y;\n\t\ty = unknown_int();\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n\tx = unknown_int();\n\ty = unknown_int();\n\t/*@\n\nloop variant x;\n*/\nwhile (x >= 0 && y >= 1) {\n\t\tx = x - y;\n\t\ty = unknown_int();\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n\tx = unknown_int();\n\ty = unknown_int();\n\t/*@\n\nloop variant x;\n*/\nwhile (x >= 0 && y >= 1) {\n\t\tx = x - y;\n\t\ty = unknown_int();\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n\tx = unknown_int();\n\ty = unknown_int();\n\t/*@\n\nloop variant x;\n*/\nwhile (x >= 0 && y >= 1) {\n\t\tx = x - y;\n\t\ty = unknown_int();\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "\n\nLoop variant is Valid.\n"
                    }
                ],
                "success": true
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c"
        ],
        "skipped": [],
        "total": 70,
        "success_count": 33,
        "failure_count": 37,
        "success_rate": 0.4714285714285714
    }
}