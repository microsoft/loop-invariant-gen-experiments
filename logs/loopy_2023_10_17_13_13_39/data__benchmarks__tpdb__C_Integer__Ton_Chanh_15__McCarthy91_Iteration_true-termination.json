{
    "logs": {
        "file": "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/McCarthy91_Iteration_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n  int c, n;\n  c = 1;\n  n = unknown_int();\n  while (c > 0) {\n    if (n > 100) {\n      n = n - 10;\n      c = c - 1;\n    } else {\n      n = n + 11;\n      c = c + 1;\n    }\n  }\n  return 0;\n}",
        "success": false,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n  int c, n;\n  c = 1;\n  n = unknown_int();\n  while (c > 0) {\n    if (n > 100) {\n      n = n - 10;\n      c = c - 1;\n    } else {\n      n = n + 11;\n      c = c + 1;\n    }\n  }\n  return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "Pre-conditions and variable assignments:\n- c is initialized to 1.\n- n is assigned an unknown integer value.\n\nLoop condition:\n- The loop continues as long as c > 0.\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n    loop invariant c >= 1;\n    loop invariant (n > 100) ==> (n - 10*(c - 1) > 100);\n    loop invariant (n <= 100) ==> (n + 11*(c - 1) <= 100 + 11*c);\n*/\n```",
                    "First, we note the pre-conditions and variable assignments in the program:\n- c is assigned the value 1.\n- n is assigned a non-deterministic value from the unknown_int() function.\n\nThen, we analyze the loop body and make a note of the loop condition:\n- The loop condition is (c > 0).\n\nNow, we can output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant c >= 0;\n    loop invariant n >= 0 ==> c <= n + 1;\n*/\n```",
                    "First, let's analyze the given program:\n1. Variable `c` is initialized to 1.\n2. Variable `n` is assigned a non-deterministic integer value from the function `unknown_int()`.\n3. The while loop condition is `c > 0`.\n4. Inside the loop, there are two branches:\n   a. If `n > 100`, then `n` is decremented by 10, and `c` is decremented by 1.\n   b. Else, `n` is incremented by 11, and `c` is incremented by 1.\n\nNow, we can proceed to find the loop invariants:\n\n```\n/*@ \n    loop invariant 1 <= c;\n    loop invariant (c > 0) ==> (n >= 111);\n    loop invariant (c == 1) ==> (n <= 111);\n*/\n```\nExplanation:\n1. The first loop invariant states that `c` is always greater than or equal to 1. This is true because `c` is initialized to 1, and it is always incremented or decremented by 1 in the loop.\n2. The second loop invariant states that if `c > 0` (loop condition), then `n` must be greater than or equal to 111. This is true because in the first iteration `n` is either incremented by 11 or decremented by 10, and in all following iterations, if `c > 0`, `n` will always be incremented by 11 when it is less than or equal to 100.\n3. The third loop invariant states that if `c == 1`, then `n` must be less than or equal to 111. This is true because when `c` returns to 1 after being incremented and decremented in the loop, `n` can be at most 111.",
                    "First, let's note the variable assignments and conditions in the program:\n- c is initialized to 1.\n- n is assigned an unknown integer value from unknown_int().\n- The loop condition is (c > 0).\n\nNow, let's analyze the loop body and find the loop invariants:\n\n```\n/*@ \n    loop invariant c >= 0;\n    loop invariant n >= -2147483647;\n    loop invariant (n > 100) ==> (n >= 11 * c - 10);\n    loop invariant (n <= 100) ==> (n <= 11 * c + 100);\n*/\n```\n\nThe loop invariants above are true before the loop execution, in every iteration of the loop, and after the loop termination. They also help Frama-C to verify the post-condition.",
                    "First, let's note the pre-conditions and variable assignments:\n- `c` is initialized to 1.\n- `n` is assigned a non-deterministic integer value using `unknown_int()`.\n\nNow, let's analyze the loop body and its condition:\n- The loop continues while `c > 0`.\n- Inside the loop, depending on the value of `n`, either `n` is decremented by 10, and `c` is decremented by 1, or `n` is incremented by 11, and `c` is incremented by 1.\n\nWith this information, we can derive the following loop invariants:\n```\n/*@ \n    loop invariant c >= 0;\n    loop invariant n >= 0 ==> (c <= n + 1);\n    loop invariant n > 100 ==> (n - 10 * (c - 1) >= 0);\n*/\n```"
                ],
                "output": [
                    "/*@ \n    loop invariant c >= 1;\n    loop invariant (n > 100) ==> (n - 10*(c - 1) > 100);\n    loop invariant (n <= 100) ==> (n + 11*(c - 1) <= 100 + 11*c);\n*/",
                    "/*@ \n    loop invariant c >= 0;\n    loop invariant n >= 0 ==> c <= n + 1;\n*/",
                    "/*@ \n    loop invariant 1 <= c;\n    loop invariant (c > 0) ==> (n >= 111);\n    loop invariant (c == 1) ==> (n <= 111);\n*/",
                    "/*@ \n    loop invariant c >= 0;\n    loop invariant n >= -2147483647;\n    loop invariant (n > 100) ==> (n >= 11 * c - 10);\n    loop invariant (n <= 100) ==> (n <= 11 * c + 100);\n*/",
                    "/*@ \n    loop invariant c >= 0;\n    loop invariant n >= 0 ==> (c <= n + 1);\n    loop invariant n > 100 ==> (n - 10 * (c - 1) >= 0);\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant c >= 1;\n    loop invariant (n > 100) ==> (n - 10*(c - 1) > 100);\n    loop invariant (n <= 100) ==> (n + 11*(c - 1) <= 100 + 11*c);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant c >= 1 is established but not preserved.\nloop invariant (n > 100) ==> (n - 10*(c - 1) > 100) is established but not preserved.\nloop invariant (n <= 100) ==> (n + 11*(c - 1) <= 100 + 11*c) is inductive.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant c >= 0;\n    loop invariant n >= 0 ==> c <= n + 1;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant c >= 0 is inductive.\nloop invariant n >= 0 ==> c <= n + 1 is established but not preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 1 <= c;\n    loop invariant (c > 0) ==> (n >= 111);\n    loop invariant (c == 1) ==> (n <= 111);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant 1 <= c is established but not preserved.\nloop invariant (c > 0) ==> (n >= 111) is neither established nor preserved.\nloop invariant (c == 1) ==> (n <= 111) is neither established nor preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant c >= 0;\n    loop invariant n >= -2147483647;\n    loop invariant (n > 100) ==> (n >= 11 * c - 10);\n    loop invariant (n <= 100) ==> (n <= 11 * c + 100);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant c >= 0 is inductive.\nloop invariant n >= -2147483647 is preserved but not established.\nloop invariant (n > 100) ==> (n >= 11 * c - 10) is established but not preserved.\nloop invariant (n <= 100) ==> (n <= 11 * c + 100) is inductive.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant c >= 0;\n    loop invariant n >= 0 ==> (c <= n + 1);\n    loop invariant n > 100 ==> (n - 10 * (c - 1) >= 0);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant c >= 0 is inductive.\nloop invariant n >= 0 ==> (c <= n + 1) is established but not preserved.\nloop invariant n > 100 ==> (n - 10 * (c - 1) >= 0) is established but not preserved.\n\n"
                    }
                ],
                "success": false
            },
            {
                "step": "Houdini for individual completion",
                "success": true,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant c >= 1;\n    loop invariant (n > 100) ==> (n - 10*(c - 1) > 100);\n    loop invariant (n <= 100) ==> (n + 11*(c - 1) <= 100 + 11*c);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n  int c, n;\n  c = 1;\n  n = unknown_int();\n  /*@\n\n\nloop invariant i3: (n <= 100) ==> (n + 11*(c - 1) <= 100 + 11*c);\n*/\nwhile (c > 0) {\n    if (n > 100) {\n      n = n - 10;\n      c = c - 1;\n    } else {\n      n = n + 11;\n      c = c + 1;\n    }\n  }\n  return 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant c >= 0;\n    loop invariant n >= 0 ==> c <= n + 1;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n  int c, n;\n  c = 1;\n  n = unknown_int();\n  /*@\nloop invariant i1: c >= 0;\n\n*/\nwhile (c > 0) {\n    if (n > 100) {\n      n = n - 10;\n      c = c - 1;\n    } else {\n      n = n + 11;\n      c = c + 1;\n    }\n  }\n  return 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 1 <= c;\n    loop invariant (c > 0) ==> (n >= 111);\n    loop invariant (c == 1) ==> (n <= 111);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n  int c, n;\n  c = 1;\n  n = unknown_int();\n  /*@\n\n\n\n*/\nwhile (c > 0) {\n    if (n > 100) {\n      n = n - 10;\n      c = c - 1;\n    } else {\n      n = n + 11;\n      c = c + 1;\n    }\n  }\n  return 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant c >= 0;\n    loop invariant n >= -2147483647;\n    loop invariant (n > 100) ==> (n >= 11 * c - 10);\n    loop invariant (n <= 100) ==> (n <= 11 * c + 100);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n  int c, n;\n  c = 1;\n  n = unknown_int();\n  /*@\nloop invariant i1: c >= 0;\n\n\nloop invariant i4: (n <= 100) ==> (n <= 11 * c + 100);\n*/\nwhile (c > 0) {\n    if (n > 100) {\n      n = n - 10;\n      c = c - 1;\n    } else {\n      n = n + 11;\n      c = c + 1;\n    }\n  }\n  return 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant c >= 0;\n    loop invariant n >= 0 ==> (c <= n + 1);\n    loop invariant n > 100 ==> (n - 10 * (c - 1) >= 0);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n  int c, n;\n  c = 1;\n  n = unknown_int();\n  /*@\nloop invariant i1: c >= 0;\n\n\n*/\nwhile (c > 0) {\n    if (n > 100) {\n      n = n - 10;\n      c = c - 1;\n    } else {\n      n = n + 11;\n      c = c + 1;\n    }\n  }\n  return 0;\n}",
                        "checker_output_after_prune": true
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 4,
                "success": true,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n  int c, n;\n  c = 1;\n  n = unknown_int();\n  /*@\n\n\nloop invariant i3: (n <= 100) ==> (n + 11*(c - 1) <= 100 + 11*c);\nloop invariant i4: c >= 0;\n\n\n\n\n\n\nloop invariant i12: (n <= 100) ==> (n <= 11 * c + 100);\n\n\n*/\nwhile (c > 0) {\n    if (n > 100) {\n      n = n - 10;\n      c = c - 1;\n    } else {\n      n = n + 11;\n      c = c + 1;\n    }\n  }\n  return 0;\n}",
                "checker_output": true
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n  int c, n;\n  c = 1;\n  n = unknown_int();\n  while (c > 0) {\n    if (n > 100) {\n      n = n - 10;\n      c = c - 1;\n    } else {\n      n = n + 11;\n      c = c + 1;\n    }\n  }\n  return 0;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's identify the variables that are live at the loop head: `c` and `n`. Now, let's find an expression over these variables that decreases with every iteration of the loop and is positive for the loop to continue executing.\n\nConsider the lexicographic ranking function `(c, n)`. We can show that this is a valid ranking function for the loop by analyzing the loop's behavior.\n\n1. `c` is always positive for the loop to continue executing: If `c > 0`, the loop continues. If `c <= 0`, the loop terminates.\n\n2. The lexicographic order `(c, n)` ensures that either `c` decreases or, if `c` remains the same, `n` decreases:\n\n   - If `n > 100`, `n` decreases by 10 and `c` decreases by 1, so the value of `c` decreases.\n   - If `n <= 100`, `n` increases by 11 and `c` increases by 1. However, since `c` increases, the second element in the lexicographic order, `n`, must decrease. In this case, the value of `n` is bounded by 100, so there is a limit to the number of times this branch can be taken.\n\nTherefore, the ranking function `(c, n)` is a valid lexicographic ranking function for the given loop. In ACSL syntax, the ranking function is written as:\n\n```\n/*@\n    loop variant c;\n    loop variant n;\n*/\n```",
                    "First, let's analyze the loop. The loop continues executing as long as `c > 0`. Inside the loop, there are two branches:\n\n1. If `n > 100`, then `n` is decreased by 10 and `c` is decreased by 1.\n2. If `n <= 100`, then `n` is increased by 11 and `c` is increased by 1.\n\nNow we need to find a ranking function that decreases in every iteration of the loop and is positive as long as the loop executes.\n\nWe can use the lexicographic ranking function (c, n) for this loop. Here's why it is a valid ranking function:\n\n1. The value of `c` decreases in the first branch and increases in the second branch. Since the loop executes only when `c > 0`, the value of `c` is always positive.\n\n2. In the first branch, the value of `n` decreases, and in the second branch, it increases. However, since `n` is initially unknown and can be any integer value, we cannot guarantee that the value of `n` will always be positive.\n\nAs a result, the lexicographic ranking function (c, n) is a valid ranking function for this loop. In ACSL syntax, it would be written as:\n\n```\n/*@\n    loop variant c;\n    loop variant n;\n*/\n```",
                    "First, let's analyze the loop in the given program. The loop continues as long as `c > 0`. Inside the loop, there are two cases:\n\n1. If `n > 100`, then `n` decreases by 10 and `c` decreases by 1.\n2. If `n <= 100`, then `n` increases by 11 and `c` increases by 1.\n\nNow, let's find a ranking function for the loop.\n\nA suitable lexicographic ranking function for this loop is `(c, 101 - n)`.\n\nHere is the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant c;\n    loop variant 101 - n;\n*/\n```\n\nNow let's explain why this is a valid ranking function:\n\n1. The value of `c` must be positive for the loop to continue executing. Since both `c` and `101 - n` are non-negative, the lexicographic ranking function is also non-negative.\n\n2. In each iteration of the loop, either `c` decreases or its value remains the same. If `c` remains the same, the value of `101 - n` must decrease.\n\n   - In the first case, when `n > 100`, both `c` and `101 - n` decrease, so the lexicographic ranking function decreases.\n   - In the second case, when `n <= 100`, `c` increases, but `101 - n` decreases, so the lexicographic ranking function still ensures the loop terminates.\n\nSince the lexicographic ranking function `(c, 101 - n)` satisfies the requirements of being positive for the loop to continue and decreasing with every successive iteration, it is a valid ranking function for the given loop.",
                    "First, let's analyze the loop. The loop continues to execute as long as `c > 0`. Inside the loop, there are two branches:\n\n1. If `n > 100`, then `n` is decreased by 10 and `c` is decreased by 1.\n2. If `n <= 100`, then `n` is increased by 11 and `c` is increased by 1.\n\nNow, let's find the ranking function. We will use a lexicographic ranking function with two expressions: `c` and `n`. The ranking function is:\n\n```\n/*@\n    loop variant c;\n    loop variant n;\n*/\n```\n\nLet's check if it satisfies the required properties:\n\n1. The value of `c` is always positive in the loop since the loop condition is `c > 0`.\n2. The value of `n` can be positive or negative depending on the unknown value of `n`, but it doesn't affect the termination, as we will see in the next steps.\n3. In each iteration of the loop, either `c` decreases or `n` decreases. Specifically, in the first branch, `c` decreases by 1, and in the second branch, `n` increases, but since it is less than or equal to 100, it is bounded and will eventually reach a point where it satisfies `n > 100`, leading to a decrease in `c`.\n\nThus, the lexicographic ranking function `(c, n)` is a valid ranking function for this loop, ensuring its termination.",
                    "First, let's analyze the loop:\n\n1. If `n > 100`, then `n = n - 10` and `c = c - 1`. In this case, `c` decreases, and `n` also decreases.\n2. If `n <= 100`, then `n = n + 11` and `c = c + 1`. In this case, `c` increases, but `n` is still bounded by the maximum integer value.\n\nNow let's define the ranking function:\n\n```\n/*@\n    loop variant c;\n    loop variant INT_MAX - n;\n*/\n```\n\nExplanation of the ranking function:\n\n- The first expression, `c`, is a valid ranking function because it decreases in each iteration when `n > 100`. When `n <= 100`, `c` increases, but the loop will eventually reach a state where `n > 100`, and `c` will start decreasing again. Therefore, `c` must be positive for the loop to continue executing, and the value of `c` will eventually reach 0, which guarantees loop termination.\n\n- The second expression, `INT_MAX - n`, is a valid ranking function because it decreases in each iteration when `n <= 100`. In this case, the value of `n` is increasing, but it's still bounded by the maximum integer value. This means that `INT_MAX - n` is always positive when the loop is executing and will decrease with every iteration until `n > 100`. This ensures that the loop will not execute indefinitely and must terminate eventually.\n\nAs a lexicographic ranking function, the expressions `c` and `INT_MAX - n` work together to guarantee the termination of the loop. The value of the first expression, `c`, must decrease or remain the same, and when it remains the same, the value of the second expression, `INT_MAX - n`, must decrease. This ensures that the loop cannot execute indefinitely and must eventually terminate."
                ],
                "output": [
                    "/*@\n    loop variant c;\n    loop variant n;\n*/",
                    "/*@\n    loop variant c;\n    loop variant n;\n*/",
                    "/*@\n    loop variant c;\n    loop variant 101 - n;\n*/",
                    "/*@\n    loop variant c;\n    loop variant n;\n*/",
                    "/*@\n    loop variant c;\n    loop variant INT_MAX - n;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n  int c, n;\n  c = 1;\n  n = unknown_int();\n  //@ ghost variant_expression measure = { c, n };\n/*@\nloop invariant i3: (n <= 100) ==> (n + 11*(c - 1) <= 100 + 11*c);\nloop invariant i4: c >= 0;\nloop invariant i12: (n <= 100) ==> (n <= 11 * c + 100);\nloop invariant measure.a == c && measure.b == n;\nloop variant measure for lexicographic;\n*/\nwhile (c > 0) {\n    if (n > 100) {\n      n = n - 10;\n      c = c - 1;\n    } else {\n      n = n + 11;\n      c = c + 1;\n    }\n  \n//@ ghost measure.a = c;\n//@ ghost measure.b = n;\n}\n  return 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant (n <= 100) ==> (n + 11*(c - 1) <= 100 + 11*c) is inductive.\nloop invariant c >= 0 is inductive.\nloop invariant (n <= 100) ==> (n <= 11 * c + 100) is inductive.\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n  int c, n;\n  c = 1;\n  n = unknown_int();\n  //@ ghost variant_expression measure = { c, n };\n/*@\nloop invariant i3: (n <= 100) ==> (n + 11*(c - 1) <= 100 + 11*c);\nloop invariant i4: c >= 0;\nloop invariant i12: (n <= 100) ==> (n <= 11 * c + 100);\nloop invariant measure.a == c && measure.b == n;\nloop variant measure for lexicographic;\n*/\nwhile (c > 0) {\n    if (n > 100) {\n      n = n - 10;\n      c = c - 1;\n    } else {\n      n = n + 11;\n      c = c + 1;\n    }\n  \n//@ ghost measure.a = c;\n//@ ghost measure.b = n;\n}\n  return 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant (n <= 100) ==> (n + 11*(c - 1) <= 100 + 11*c) is inductive.\nloop invariant c >= 0 is inductive.\nloop invariant (n <= 100) ==> (n <= 11 * c + 100) is inductive.\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n  int c, n;\n  c = 1;\n  n = unknown_int();\n  //@ ghost variant_expression measure = { c, 101 - n };\n/*@\nloop invariant i3: (n <= 100) ==> (n + 11*(c - 1) <= 100 + 11*c);\nloop invariant i4: c >= 0;\nloop invariant i12: (n <= 100) ==> (n <= 11 * c + 100);\nloop invariant measure.a == c && measure.b == 101 - n;\nloop variant measure for lexicographic;\n*/\nwhile (c > 0) {\n    if (n > 100) {\n      n = n - 10;\n      c = c - 1;\n    } else {\n      n = n + 11;\n      c = c + 1;\n    }\n  \n//@ ghost measure.a = c;\n//@ ghost measure.b = 101 - n;\n}\n  return 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant (n <= 100) ==> (n + 11*(c - 1) <= 100 + 11*c) is inductive.\nloop invariant c >= 0 is inductive.\nloop invariant (n <= 100) ==> (n <= 11 * c + 100) is inductive.\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n  int c, n;\n  c = 1;\n  n = unknown_int();\n  //@ ghost variant_expression measure = { c, n };\n/*@\nloop invariant i3: (n <= 100) ==> (n + 11*(c - 1) <= 100 + 11*c);\nloop invariant i4: c >= 0;\nloop invariant i12: (n <= 100) ==> (n <= 11 * c + 100);\nloop invariant measure.a == c && measure.b == n;\nloop variant measure for lexicographic;\n*/\nwhile (c > 0) {\n    if (n > 100) {\n      n = n - 10;\n      c = c - 1;\n    } else {\n      n = n + 11;\n      c = c + 1;\n    }\n  \n//@ ghost measure.a = c;\n//@ ghost measure.b = n;\n}\n  return 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant (n <= 100) ==> (n + 11*(c - 1) <= 100 + 11*c) is inductive.\nloop invariant c >= 0 is inductive.\nloop invariant (n <= 100) ==> (n <= 11 * c + 100) is inductive.\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n  int c, n;\n  c = 1;\n  n = unknown_int();\n  //@ ghost variant_expression measure = { c, INT_MAX - n };\n/*@\nloop invariant i3: (n <= 100) ==> (n + 11*(c - 1) <= 100 + 11*c);\nloop invariant i4: c >= 0;\nloop invariant i12: (n <= 100) ==> (n <= 11 * c + 100);\nloop invariant measure.a == c && measure.b == INT_MAX - n;\nloop variant measure for lexicographic;\n*/\nwhile (c > 0) {\n    if (n > 100) {\n      n = n - 10;\n      c = c - 1;\n    } else {\n      n = n + 11;\n      c = c + 1;\n    }\n  \n//@ ghost measure.a = c;\n//@ ghost measure.b = INT_MAX - n;\n}\n  return 0;\n}",
                        "checker_output": false,
                        "checker_message": "No JSON report found"
                    }
                ],
                "success": false
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB6.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusMin.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.09-no-inv_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Copenhagen_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_easySum.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Thun_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_flag.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/McCarthy91_Iteration_true-termination.c"
        ],
        "skipped": [],
        "total": 157,
        "success_count": 74,
        "failure_count": 83,
        "success_rate": 0.4713375796178344
    }
}