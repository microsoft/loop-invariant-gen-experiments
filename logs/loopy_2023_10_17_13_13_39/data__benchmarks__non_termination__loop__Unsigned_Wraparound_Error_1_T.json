{
    "logs": {
        "file": "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n    unsigned int best = unknown_uint();\n    unsigned int cur = best;\n    unsigned int pre;\n    unsigned int st_max = unknown_uint();\n    unsigned int it_min = unknown_uint();\n    if( st_max <= it_min )\n        return 0;\n    if( best == 0 )\n        return 0;\n    for( ;  ; )\n    {\n        if( st_max < cur )\n        break;\n        pre = cur;\n        cur += best;\n        if( cur <= pre )\n            break;\n    }\n    return 0;\n}",
        "success": true,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n    unsigned int best = unknown_uint();\n    unsigned int cur = best;\n    unsigned int pre;\n    unsigned int st_max = unknown_uint();\n    unsigned int it_min = unknown_uint();\n    if( st_max <= it_min )\n        return 0;\n    if( best == 0 )\n        return 0;\n    for( ;  ; )\n    {\n        if( st_max < cur )\n        break;\n        pre = cur;\n        cur += best;\n        if( cur <= pre )\n            break;\n    }\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n1. `unsigned int best = unknown_uint();`\n2. `unsigned int cur = best;`\n3. `unsigned int pre;`\n4. `unsigned int st_max = unknown_uint();`\n5. `unsigned int it_min = unknown_uint();`\n6. If `st_max <= it_min`, then the program returns 0.\n7. If `best == 0`, then the program returns 0.\n\nNow let's analyze the loop body and make a note of the loop condition:\n\nThe loop has no explicit condition, it's an infinite loop, and it breaks only when `st_max < cur` or `cur <= pre`.\n\nNow we can output the loop invariants:\n\n```\n/*@\n    loop invariant best > 0;\n    loop invariant st_max > it_min;\n    loop invariant cur >= best;\n    loop invariant pre < cur;\n    loop invariant cur <= st_max + best;\n*/\n```\n\nExplanation of the loop invariants:\n\n1. `best > 0`: This is true because if `best` was 0, the program would have returned 0 before entering the loop.\n2. `st_max > it_min`: This is true because if `st_max <= it_min`, the program would have returned 0 before entering the loop.\n3. `cur >= best`: This is true because `cur` is initialized to `best`, and it only increases in the loop.\n4. `pre < cur`: This is true because `pre` is always assigned the value of `cur` before `cur` is incremented in the loop.\n5. `cur <= st_max + best`: This is true because the loop breaks when `st_max < cur`, so after the loop, `cur` will be at most `st_max + best`.",
                    "First, let's make a note of the pre-conditions or variable assignments in the program:\n- `unsigned int best = unknown_uint();`\n- `unsigned int cur = best;`\n- `unsigned int pre;`\n- `unsigned int st_max = unknown_uint();`\n- `unsigned int it_min = unknown_uint();`\n- `if( st_max <= it_min ) return 0;`\n- `if( best == 0 ) return 0;`\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop is an infinite loop (`for( ;  ; )`), and it breaks when either `st_max < cur` or `cur <= pre`.\n\nNext, we'll output the loop invariants:\n```\n/*@ \n    loop invariant best > 0;\n    loop invariant it_min < st_max;\n    loop invariant cur >= best;\n    loop invariant cur >= pre + best ==> st_max >= pre;\n    loop invariant st_max >= cur ==> pre < cur;\n*/\n```\n\nHere's an explanation for each loop invariant:\n1. `best > 0`: This invariant is true before the loop because of the condition `if( best == 0 ) return 0;`. It is maintained during the loop because `best` does not change in the loop.\n2. `it_min < st_max`: This invariant is true before the loop because of the condition `if( st_max <= it_min ) return 0;`. It is maintained during the loop because `it_min` and `st_max` do not change in the loop.\n3. `cur >= best`: This invariant is true before the loop because `cur = best`. It is maintained during the loop because `cur` is incremented by `best` in every iteration.\n4. `cur >= pre + best ==> st_max >= pre`: This invariant is true before the loop because `cur = best`. It is maintained during the loop because when `cur >= pre + best`, it means that `st_max` must be greater than or equal to `pre` for the loop to continue.\n5. `st_max >= cur ==> pre < cur`: This invariant is true before the loop because `cur = best`. It is maintained during the loop because when `st_max >= cur`, it means that `pre` must be less than `cur` for the loop to continue.",
                    "First, let's make a note of the pre-conditions and variable assignments in the program:\n\n- `unsigned int best = unknown_uint();`\n- `unsigned int cur = best;`\n- `unsigned int pre;`\n- `unsigned int st_max = unknown_uint();`\n- `unsigned int it_min = unknown_uint();`\n- `if (st_max <= it_min) return 0;`\n- `if (best == 0) return 0;`\n\nNext, analyze the loop body and make a note of the loop condition:\n\n- The loop condition is `st_max < cur`.\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition:\n\n```\n/*@ \n    loop invariant 0 <= best;\n    loop invariant 0 <= cur;\n    loop invariant 0 <= pre;\n    loop invariant 0 <= st_max;\n    loop invariant 0 <= it_min;\n    loop invariant best != 0;\n    loop invariant st_max > it_min;\n    loop invariant cur >= best;\n    loop invariant cur >= pre;\n    loop invariant (st_max < cur) ==> pre < cur;\n*/\n```",
                    "First, let's make a note of the variable assignments and pre-conditions in the program:\n\n- `unsigned int best = unknown_uint();`\n- `unsigned int cur = best;`\n- `unsigned int pre;`\n- `unsigned int st_max = unknown_uint();`\n- `unsigned int it_min = unknown_uint();`\n- `if (st_max <= it_min) return 0;`\n- `if (best == 0) return 0;`\n\nNext, analyze the loop body and make a note of the loop condition:\n\nThe loop is a for loop without conditions, so it runs indefinitely, only breaking when one of the following conditions is met:\n\n- `st_max < cur`\n- `cur <= pre`\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition:\n\n```\n/*@ \n    loop invariant best > 0;\n    loop invariant cur >= best;\n    loop invariant pre <= cur;\n    loop invariant pre <= st_max ==> pre == cur - best;\n    loop invariant st_max < cur ==> st_max < cur - best;\n*/\n```\n\nThese loop invariants will help Frama-C verify the post-condition of the program.",
                    "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n1. best and cur are assigned non-deterministic unsigned integer values.\n2. st_max and it_min are assigned non-deterministic unsigned integer values.\n3. st_max > it_min, otherwise, the program returns 0.\n4. best > 0, otherwise, the program returns 0.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\nThe loop is an infinite loop, but it can break if either of the following conditions is met:\n1. st_max < cur\n2. cur <= pre\n\nNow, let's write the loop invariants:\n\n```\n/*@ \n    loop invariant cur >= best;\n    loop invariant pre <= cur;\n    loop invariant best > 0;\n    loop invariant st_max > it_min;\n    loop invariant (cur <= st_max) ==> (pre + best == cur);\n    loop invariant (cur > st_max) ==> (st_max >= pre && pre + best >= cur);\n*/\n```\n\nThese loop invariants are true:\n(i) before the loop execution,\n(ii) in every iteration of the loop, and\n(iii) after the loop termination, such that the loop invariants imply the post-condition."
                ],
                "output": [
                    "/*@\n    loop invariant best > 0;\n    loop invariant st_max > it_min;\n    loop invariant cur >= best;\n    loop invariant pre < cur;\n    loop invariant cur <= st_max + best;\n*/",
                    "/*@ \n    loop invariant best > 0;\n    loop invariant it_min < st_max;\n    loop invariant cur >= best;\n    loop invariant cur >= pre + best ==> st_max >= pre;\n    loop invariant st_max >= cur ==> pre < cur;\n*/",
                    "/*@ \n    loop invariant 0 <= best;\n    loop invariant 0 <= cur;\n    loop invariant 0 <= pre;\n    loop invariant 0 <= st_max;\n    loop invariant 0 <= it_min;\n    loop invariant best != 0;\n    loop invariant st_max > it_min;\n    loop invariant cur >= best;\n    loop invariant cur >= pre;\n    loop invariant (st_max < cur) ==> pre < cur;\n*/",
                    "/*@ \n    loop invariant best > 0;\n    loop invariant cur >= best;\n    loop invariant pre <= cur;\n    loop invariant pre <= st_max ==> pre == cur - best;\n    loop invariant st_max < cur ==> st_max < cur - best;\n*/",
                    "/*@ \n    loop invariant cur >= best;\n    loop invariant pre <= cur;\n    loop invariant best > 0;\n    loop invariant st_max > it_min;\n    loop invariant (cur <= st_max) ==> (pre + best == cur);\n    loop invariant (cur > st_max) ==> (st_max >= pre && pre + best >= cur);\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@\n    loop invariant best > 0;\n    loop invariant st_max > it_min;\n    loop invariant cur >= best;\n    loop invariant pre < cur;\n    loop invariant cur <= st_max + best;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant best > 0 is inductive.\nloop invariant st_max > it_min is inductive.\nloop invariant cur >= best is inductive.\nloop invariant pre < cur is preserved but not established.\nloop invariant cur <= st_max + best is inductive.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant best > 0;\n    loop invariant it_min < st_max;\n    loop invariant cur >= best;\n    loop invariant cur >= pre + best ==> st_max >= pre;\n    loop invariant st_max >= cur ==> pre < cur;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant best > 0 is inductive.\nloop invariant it_min < st_max is inductive.\nloop invariant cur >= best is inductive.\nloop invariant cur >= pre + best ==> st_max >= pre is inductive.\nloop invariant st_max >= cur ==> pre < cur is preserved but not established.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= best;\n    loop invariant 0 <= cur;\n    loop invariant 0 <= pre;\n    loop invariant 0 <= st_max;\n    loop invariant 0 <= it_min;\n    loop invariant best != 0;\n    loop invariant st_max > it_min;\n    loop invariant cur >= best;\n    loop invariant cur >= pre;\n    loop invariant (st_max < cur) ==> pre < cur;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant 0 <= best is inductive.\nloop invariant 0 <= cur is inductive.\nloop invariant 0 <= pre is inductive.\nloop invariant 0 <= st_max is inductive.\nloop invariant 0 <= it_min is inductive.\nloop invariant best != 0 is inductive.\nloop invariant st_max > it_min is inductive.\nloop invariant cur >= best is inductive.\nloop invariant cur >= pre is preserved but not established.\nloop invariant (st_max < cur) ==> pre < cur is preserved but not established.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant best > 0;\n    loop invariant cur >= best;\n    loop invariant pre <= cur;\n    loop invariant pre <= st_max ==> pre == cur - best;\n    loop invariant st_max < cur ==> st_max < cur - best;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant best > 0 is inductive.\nloop invariant cur >= best is inductive.\nloop invariant pre <= cur is preserved but not established.\nloop invariant pre <= st_max ==> pre == cur - best is neither established nor preserved.\nloop invariant st_max < cur ==> st_max < cur - best is neither established nor preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant cur >= best;\n    loop invariant pre <= cur;\n    loop invariant best > 0;\n    loop invariant st_max > it_min;\n    loop invariant (cur <= st_max) ==> (pre + best == cur);\n    loop invariant (cur > st_max) ==> (st_max >= pre && pre + best >= cur);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant cur >= best is inductive.\nloop invariant pre <= cur is preserved but not established.\nloop invariant best > 0 is inductive.\nloop invariant st_max > it_min is inductive.\nloop invariant (cur <= st_max) ==> (pre + best == cur) is neither established nor preserved.\nloop invariant (cur > st_max) ==> (st_max >= pre && pre + best >= cur) is preserved but not established.\n\n"
                    }
                ],
                "success": false
            },
            {
                "step": "Houdini for individual completion",
                "success": true,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@\n    loop invariant best > 0;\n    loop invariant st_max > it_min;\n    loop invariant cur >= best;\n    loop invariant pre < cur;\n    loop invariant cur <= st_max + best;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n    unsigned int best = unknown_uint();\n    unsigned int cur = best;\n    unsigned int pre;\n    unsigned int st_max = unknown_uint();\n    unsigned int it_min = unknown_uint();\n    if( st_max <= it_min )\n        return 0;\n    if( best == 0 )\n        return 0;\n    /*@\nloop invariant i1: best > 0;\nloop invariant i2: st_max > it_min;\nloop invariant i3: cur >= best;\n\nloop invariant i5: cur <= st_max + best;\n*/\nfor( ;  ; )\n    {\n        if( st_max < cur )\n        break;\n        pre = cur;\n        cur += best;\n        if( cur <= pre )\n            break;\n    }\n    return 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant best > 0;\n    loop invariant it_min < st_max;\n    loop invariant cur >= best;\n    loop invariant cur >= pre + best ==> st_max >= pre;\n    loop invariant st_max >= cur ==> pre < cur;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n    unsigned int best = unknown_uint();\n    unsigned int cur = best;\n    unsigned int pre;\n    unsigned int st_max = unknown_uint();\n    unsigned int it_min = unknown_uint();\n    if( st_max <= it_min )\n        return 0;\n    if( best == 0 )\n        return 0;\n    /*@\nloop invariant i1: best > 0;\nloop invariant i2: it_min < st_max;\nloop invariant i3: cur >= best;\nloop invariant i4: cur >= pre + best ==> st_max >= pre;\n\n*/\nfor( ;  ; )\n    {\n        if( st_max < cur )\n        break;\n        pre = cur;\n        cur += best;\n        if( cur <= pre )\n            break;\n    }\n    return 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= best;\n    loop invariant 0 <= cur;\n    loop invariant 0 <= pre;\n    loop invariant 0 <= st_max;\n    loop invariant 0 <= it_min;\n    loop invariant best != 0;\n    loop invariant st_max > it_min;\n    loop invariant cur >= best;\n    loop invariant cur >= pre;\n    loop invariant (st_max < cur) ==> pre < cur;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n    unsigned int best = unknown_uint();\n    unsigned int cur = best;\n    unsigned int pre;\n    unsigned int st_max = unknown_uint();\n    unsigned int it_min = unknown_uint();\n    if( st_max <= it_min )\n        return 0;\n    if( best == 0 )\n        return 0;\n    /*@\nloop invariant i1: 0 <= best;\nloop invariant i2: 0 <= cur;\nloop invariant i3: 0 <= pre;\nloop invariant i4: 0 <= st_max;\nloop invariant i5: 0 <= it_min;\nloop invariant i6: best != 0;\nloop invariant i7: st_max > it_min;\nloop invariant i8: cur >= best;\n\n\n*/\nfor( ;  ; )\n    {\n        if( st_max < cur )\n        break;\n        pre = cur;\n        cur += best;\n        if( cur <= pre )\n            break;\n    }\n    return 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant best > 0;\n    loop invariant cur >= best;\n    loop invariant pre <= cur;\n    loop invariant pre <= st_max ==> pre == cur - best;\n    loop invariant st_max < cur ==> st_max < cur - best;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n    unsigned int best = unknown_uint();\n    unsigned int cur = best;\n    unsigned int pre;\n    unsigned int st_max = unknown_uint();\n    unsigned int it_min = unknown_uint();\n    if( st_max <= it_min )\n        return 0;\n    if( best == 0 )\n        return 0;\n    /*@\nloop invariant i1: best > 0;\nloop invariant i2: cur >= best;\n\n\n\n*/\nfor( ;  ; )\n    {\n        if( st_max < cur )\n        break;\n        pre = cur;\n        cur += best;\n        if( cur <= pre )\n            break;\n    }\n    return 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant cur >= best;\n    loop invariant pre <= cur;\n    loop invariant best > 0;\n    loop invariant st_max > it_min;\n    loop invariant (cur <= st_max) ==> (pre + best == cur);\n    loop invariant (cur > st_max) ==> (st_max >= pre && pre + best >= cur);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n    unsigned int best = unknown_uint();\n    unsigned int cur = best;\n    unsigned int pre;\n    unsigned int st_max = unknown_uint();\n    unsigned int it_min = unknown_uint();\n    if( st_max <= it_min )\n        return 0;\n    if( best == 0 )\n        return 0;\n    /*@\nloop invariant i1: cur >= best;\n\nloop invariant i3: best > 0;\nloop invariant i4: st_max > it_min;\n\n\n*/\nfor( ;  ; )\n    {\n        if( st_max < cur )\n        break;\n        pre = cur;\n        cur += best;\n        if( cur <= pre )\n            break;\n    }\n    return 0;\n}",
                        "checker_output_after_prune": true
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 3,
                "success": true,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n    unsigned int best = unknown_uint();\n    unsigned int cur = best;\n    unsigned int pre;\n    unsigned int st_max = unknown_uint();\n    unsigned int it_min = unknown_uint();\n    if( st_max <= it_min )\n        return 0;\n    if( best == 0 )\n        return 0;\n    /*@\nloop invariant i1: best > 0;\nloop invariant i2: st_max > it_min;\nloop invariant i3: cur >= best;\n\nloop invariant i5: cur <= st_max + best;\nloop invariant i7: it_min < st_max;\n\n\nloop invariant i11: 0 <= best;\nloop invariant i12: 0 <= cur;\nloop invariant i13: 0 <= pre;\nloop invariant i14: 0 <= st_max;\nloop invariant i15: 0 <= it_min;\nloop invariant i16: best != 0;\n\n\n\n\n\n\n\n*/\nfor( ;  ; )\n    {\n        if( st_max < cur )\n        break;\n        pre = cur;\n        cur += best;\n        if( cur <= pre )\n            break;\n    }\n    return 0;\n}",
                "checker_output": true
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n    unsigned int best = unknown_uint();\n    unsigned int cur = best;\n    unsigned int pre;\n    unsigned int st_max = unknown_uint();\n    unsigned int it_min = unknown_uint();\n    if( st_max <= it_min )\n        return 0;\n    if( best == 0 )\n        return 0;\n    for( ;  ; )\n    {\n        if( st_max < cur )\n        break;\n        pre = cur;\n        cur += best;\n        if( cur <= pre )\n            break;\n    }\n    return 0;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's analyze the loop and its conditions. The loop has no explicit exit condition, but it can be terminated by the two break statements inside the loop. The first break statement is executed when `st_max < cur`. The second break statement is executed when `cur <= pre`.\n\nNow, let's find the ranking function for this loop. We can use a lexicographic ranking function that combines the two conditions for breaking the loop:\n\n1. `st_max - cur`: This expression decreases whenever `cur` increases. Since `cur` increases by `best` in each iteration, this expression is guaranteed to decrease as long as the loop continues executing and the second break statement is not executed. As `st_max` and `cur` are unsigned integers, this expression is always non-negative.\n\n2. `cur - pre`: This expression represents the difference between the current value of `cur` and its previous value. Since `cur` is incremented by `best` in each iteration, this expression is equal to `best`. As `best` is a constant value and always positive (given by the initial condition `if (best == 0) return 0;`), this expression is always positive.\n\nSo, the lexicographic ranking function for this loop is:\n\n```\n/*@\n    loop variant st_max - cur;\n    loop variant cur - pre;\n*/\n```\n\nThis ranking function is valid because it guarantees that the loop will terminate. The first expression (`st_max - cur`) decreases with each iteration until the first break condition is met, and the second expression (`cur - pre`) remains constant and positive, ensuring the loop will eventually reach one of the break statements and terminate.",
                    "First, let's identify the loop in the program:\n\n```\nfor( ;  ; )\n{\n    if( st_max < cur )\n        break;\n    pre = cur;\n    cur += best;\n    if( cur <= pre )\n        break;\n}\n```\n\nNow, let's find the ranking function for this loop. We can see that the loop termination is based on two conditions:\n\n1. `st_max < cur`\n2. `cur <= pre`\n\nTo find a ranking function, we need an expression that decreases with every loop iteration and is positive for the loop to continue executing. We can use the following expressions:\n\n1. `st_max - cur`\n2. `cur - pre`\n\nNow, let's write the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant st_max - cur;\n    loop variant cur - pre;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. The value of `st_max - cur` decreases with every iteration since `cur` is increased by `best` in each iteration.\n2. The value of `cur - pre` ensures that the loop will terminate when the second condition `cur <= pre` is met.\n3. Both expressions are positive for the loop to continue executing. When any of these expressions become non-positive, the loop terminates.\n\nHence, the given ranking function is valid for the given loop.",
                    "First, let's analyze the loop. The loop continues until one of the two conditions is met:\n1. `st_max < cur`\n2. `cur <= pre`\n\nNow, let's find the ranking function for this loop. We need to find an expression that decreases with every iteration and is positive when the loop continues.\n\nIn this case, a valid ranking function is `st_max - cur`. Let's explain why this is a valid ranking function:\n\n1. `st_max - cur` is positive as long as the loop continues. This is because the loop continues until `st_max < cur`, which means `st_max - cur` must be positive inside the loop.\n\n2. The value of `cur` increases with every iteration due to the statement `cur += best`. Since `best` is a positive value (as it is an unsigned integer and `best == 0` is checked before the loop), the value of `cur` increases, and the value of `st_max - cur` decreases with every iteration.\n\nSo, the ranking function for this loop is `st_max - cur`. In ACSL syntax, we can represent it as:\n\n```\n/*@\n    loop variant st_max - cur;\n*/\n```\n\nThis ranking function is valid because it is positive inside the loop and decreases with every iteration, ensuring the loop will eventually terminate.",
                    "First, let's analyze the loop in the given program. The loop runs until the condition `st_max < cur` or `cur <= pre` is met. The loop modifies `cur` and `pre` in each iteration. In particular, `cur` is increased by `best`, and `pre` is set to the old value of `cur`. Since `best` is a positive integer, `cur` will increase in each iteration.\n\nNow, let's find the ranking function for this loop. A good candidate would be the difference between `st_max` and `cur` because this value will decrease in each iteration.\n\n```\n/*@\n    loop variant st_max - cur;\n*/\n```\n\nTo show that this is a valid ranking function, we need to prove that:\n\n1. The value of the expression is positive for the loop to continue executing.\n2. The value of the expression decreases with every successive iteration of the loop.\n\nFor the first condition, let's consider the loop guard. The loop continues as long as `st_max >= cur` and `cur > pre`. Since `cur` is an unsigned integer and increases in each iteration, we can conclude that `st_max - cur` is positive.\n\nFor the second condition, we can see that in each iteration, `cur` is increased by `best`, which is a positive integer. Thus, the value of `st_max - cur` will decrease in each iteration.\n\nAs both conditions are satisfied, we can conclude that `st_max - cur` is a valid ranking function for the given loop.",
                    "First, let's identify the loop variables that are live as the loop head. These variables are `cur`, `best`, `st_max`, and `pre`. \n\nNext, we need to find an expression or sequence of expressions over these variables that decreases with every successive iteration of the loop and must be positive for the loop to continue executing. \n\nWe will use a lexicographic ranking function since it's a sequence of expressions. The lexicographic ranking function for this loop is:\n\n```\n/*@\n    loop variant st_max - cur;\n    loop variant UINT_MAX - (cur - pre);\n*/\n```\n\nExplanation:\n\n1. `st_max - cur`: This expression decreases with every iteration as `cur` is increased by `best` in each iteration. The loop continues executing as long as `st_max >= cur`, which implies `st_max - cur` is positive.\n\n2. `UINT_MAX - (cur - pre)`: This expression is used to ensure that the loop terminates when `cur` wraps around due to integer overflow. Since `cur - pre` is positive and smaller than `UINT_MAX`, the expression `UINT_MAX - (cur - pre)` is positive. Moreover, it decreases with every iteration as `(cur - pre)` increases.\n\nThis lexicographic ranking function is valid since it ensures the loop terminates and its value decreases with every iteration while remaining positive."
                ],
                "output": [
                    "/*@\n    loop variant st_max - cur;\n    loop variant cur - pre;\n*/",
                    "/*@\n    loop variant st_max - cur;\n    loop variant cur - pre;\n*/",
                    "/*@\n    loop variant st_max - cur;\n*/",
                    "/*@\n    loop variant st_max - cur;\n*/",
                    "/*@\n    loop variant st_max - cur;\n    loop variant UINT_MAX - (cur - pre);\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n    unsigned int best = unknown_uint();\n    unsigned int cur = best;\n    unsigned int pre;\n    unsigned int st_max = unknown_uint();\n    unsigned int it_min = unknown_uint();\n    if( st_max <= it_min )\n        return 0;\n    if( best == 0 )\n        return 0;\n    //@ ghost variant_expression measure = { st_max - cur, cur - pre };\n/*@\nloop invariant i1: best > 0;\nloop invariant i2: st_max > it_min;\nloop invariant i3: cur >= best;\nloop invariant i5: cur <= st_max + best;\nloop invariant i7: it_min < st_max;\nloop invariant i11: 0 <= best;\nloop invariant i12: 0 <= cur;\nloop invariant i13: 0 <= pre;\nloop invariant i14: 0 <= st_max;\nloop invariant i15: 0 <= it_min;\nloop invariant i16: best != 0;\nloop invariant measure.a == st_max - cur && measure.b == cur - pre;\nloop variant measure for lexicographic;\n*/\nfor( ;  ; )\n    {\n        if( st_max < cur )\n        break;\n        pre = cur;\n        cur += best;\n        if( cur <= pre )\n            break;\n    \n//@ ghost measure.a = st_max - cur;\n//@ ghost measure.b = cur - pre;\n}\n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant best > 0 is inductive.\nloop invariant st_max > it_min is inductive.\nloop invariant cur >= best is inductive.\nloop invariant cur <= st_max + best is inductive.\nloop invariant it_min < st_max is inductive.\nloop invariant 0 <= best is inductive.\nloop invariant 0 <= cur is inductive.\nloop invariant 0 <= pre is inductive.\nloop invariant 0 <= st_max is inductive.\nloop invariant 0 <= it_min is inductive.\nloop invariant best != 0 is inductive.\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n    unsigned int best = unknown_uint();\n    unsigned int cur = best;\n    unsigned int pre;\n    unsigned int st_max = unknown_uint();\n    unsigned int it_min = unknown_uint();\n    if( st_max <= it_min )\n        return 0;\n    if( best == 0 )\n        return 0;\n    //@ ghost variant_expression measure = { st_max - cur, cur - pre };\n/*@\nloop invariant i1: best > 0;\nloop invariant i2: st_max > it_min;\nloop invariant i3: cur >= best;\nloop invariant i5: cur <= st_max + best;\nloop invariant i7: it_min < st_max;\nloop invariant i11: 0 <= best;\nloop invariant i12: 0 <= cur;\nloop invariant i13: 0 <= pre;\nloop invariant i14: 0 <= st_max;\nloop invariant i15: 0 <= it_min;\nloop invariant i16: best != 0;\nloop invariant measure.a == st_max - cur && measure.b == cur - pre;\nloop variant measure for lexicographic;\n*/\nfor( ;  ; )\n    {\n        if( st_max < cur )\n        break;\n        pre = cur;\n        cur += best;\n        if( cur <= pre )\n            break;\n    \n//@ ghost measure.a = st_max - cur;\n//@ ghost measure.b = cur - pre;\n}\n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant best > 0 is inductive.\nloop invariant st_max > it_min is inductive.\nloop invariant cur >= best is inductive.\nloop invariant cur <= st_max + best is inductive.\nloop invariant it_min < st_max is inductive.\nloop invariant 0 <= best is inductive.\nloop invariant 0 <= cur is inductive.\nloop invariant 0 <= pre is inductive.\nloop invariant 0 <= st_max is inductive.\nloop invariant 0 <= it_min is inductive.\nloop invariant best != 0 is inductive.\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n    unsigned int best = unknown_uint();\n    unsigned int cur = best;\n    unsigned int pre;\n    unsigned int st_max = unknown_uint();\n    unsigned int it_min = unknown_uint();\n    if( st_max <= it_min )\n        return 0;\n    if( best == 0 )\n        return 0;\n    /*@\nloop invariant i1: best > 0;\nloop invariant i2: st_max > it_min;\nloop invariant i3: cur >= best;\nloop invariant i5: cur <= st_max + best;\nloop invariant i7: it_min < st_max;\nloop invariant i11: 0 <= best;\nloop invariant i12: 0 <= cur;\nloop invariant i13: 0 <= pre;\nloop invariant i14: 0 <= st_max;\nloop invariant i15: 0 <= it_min;\nloop invariant i16: best != 0;\nloop variant st_max - cur;\n*/\nfor( ;  ; )\n    {\n        if( st_max < cur )\n        break;\n        pre = cur;\n        cur += best;\n        if( cur <= pre )\n            break;\n    }\n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant best > 0 is inductive.\nloop invariant st_max > it_min is inductive.\nloop invariant cur >= best is inductive.\nloop invariant cur <= st_max + best is inductive.\nloop invariant it_min < st_max is inductive.\nloop invariant 0 <= best is inductive.\nloop invariant 0 <= cur is inductive.\nloop invariant 0 <= pre is inductive.\nloop invariant 0 <= st_max is inductive.\nloop invariant 0 <= it_min is inductive.\nloop invariant best != 0 is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n    unsigned int best = unknown_uint();\n    unsigned int cur = best;\n    unsigned int pre;\n    unsigned int st_max = unknown_uint();\n    unsigned int it_min = unknown_uint();\n    if( st_max <= it_min )\n        return 0;\n    if( best == 0 )\n        return 0;\n    /*@\nloop invariant i1: best > 0;\nloop invariant i2: st_max > it_min;\nloop invariant i3: cur >= best;\nloop invariant i5: cur <= st_max + best;\nloop invariant i7: it_min < st_max;\nloop invariant i11: 0 <= best;\nloop invariant i12: 0 <= cur;\nloop invariant i13: 0 <= pre;\nloop invariant i14: 0 <= st_max;\nloop invariant i15: 0 <= it_min;\nloop invariant i16: best != 0;\nloop variant st_max - cur;\n*/\nfor( ;  ; )\n    {\n        if( st_max < cur )\n        break;\n        pre = cur;\n        cur += best;\n        if( cur <= pre )\n            break;\n    }\n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant best > 0 is inductive.\nloop invariant st_max > it_min is inductive.\nloop invariant cur >= best is inductive.\nloop invariant cur <= st_max + best is inductive.\nloop invariant it_min < st_max is inductive.\nloop invariant 0 <= best is inductive.\nloop invariant 0 <= cur is inductive.\nloop invariant 0 <= pre is inductive.\nloop invariant 0 <= st_max is inductive.\nloop invariant 0 <= it_min is inductive.\nloop invariant best != 0 is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n    unsigned int best = unknown_uint();\n    unsigned int cur = best;\n    unsigned int pre;\n    unsigned int st_max = unknown_uint();\n    unsigned int it_min = unknown_uint();\n    if( st_max <= it_min )\n        return 0;\n    if( best == 0 )\n        return 0;\n    //@ ghost variant_expression measure = { st_max - cur, UINT_MAX - (cur - pre) };\n/*@\nloop invariant i1: best > 0;\nloop invariant i2: st_max > it_min;\nloop invariant i3: cur >= best;\nloop invariant i5: cur <= st_max + best;\nloop invariant i7: it_min < st_max;\nloop invariant i11: 0 <= best;\nloop invariant i12: 0 <= cur;\nloop invariant i13: 0 <= pre;\nloop invariant i14: 0 <= st_max;\nloop invariant i15: 0 <= it_min;\nloop invariant i16: best != 0;\nloop invariant measure.a == st_max - cur && measure.b == UINT_MAX - (cur - pre);\nloop variant measure for lexicographic;\n*/\nfor( ;  ; )\n    {\n        if( st_max < cur )\n        break;\n        pre = cur;\n        cur += best;\n        if( cur <= pre )\n            break;\n    \n//@ ghost measure.a = st_max - cur;\n//@ ghost measure.b = UINT_MAX - (cur - pre);\n}\n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "No JSON report found"
                    }
                ],
                "success": true
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB6.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusMin.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.09-no-inv_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Copenhagen_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_easySum.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA6.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Gothenburg_v2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.08.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.03.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB11.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1c_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.04.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.02.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_AG313.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.01.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/easy2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA5.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.06.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.10.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Parallel_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Waldkirch_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DivMinus.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB3.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Thun_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_flag.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/McCarthy91_Iteration_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NO_24.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Copenhagen_disj_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Bangalore_v4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ComplInterv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChooseLife.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.07_true-termination.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.10.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.21_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Singapore_true-termination.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/McCarthyIterative.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MirrorInterv.c"
        ],
        "skipped": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c"
        ],
        "total": 268,
        "success_count": 135,
        "failure_count": 133,
        "success_rate": 0.503731343283582
    }
}