{
    "logs": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x;\n    int a;\n    int b;\n    x = unknown_int();\n    a = unknown_int();\n    b = unknown_int();\n    if (a == b) {\n        while (x >= 0) {\n            x = x + a - b - 1;\n        }\n    }\n    return 0;\n}",
        "success": false,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x;\n    int a;\n    int b;\n    x = unknown_int();\n    a = unknown_int();\n    b = unknown_int();\n    if (a == b) {\n        while (x >= 0) {\n            x = x + a - b - 1;\n        }\n    }\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "First, let's make a note of the pre-conditions or variable assignments in the program. x, a, and b are assigned unknown_int() values. We don't know their exact values, but we know they are integers.\n\nNext, analyze the loop body and make a note of the loop condition. The loop condition is x >= 0, and the loop body updates x with x = x + a - b - 1.\n\nNow, let's find the necessary loop invariants:\n\n1. x is always non-negative before the loop execution and in every iteration, as the loop condition ensures this.\n2. If a == b, then x is strictly decreasing in every iteration of the loop.\n\nConsidering these invariants, we can write the loop invariants as:\n\n```\n/*@\n    loop invariant x >= 0;\n    loop invariant a == b ==> x >= 0;\n    loop invariant a == b ==> \\old(x) - x >= a - b + 1;\n*/\n```\n\nThese invariants should be true before the loop execution, in every iteration of the loop, and after the loop termination. They help Frama-C verify the post-condition that the loop terminates when a == b.",
                    "First, we note the pre-conditions or variable assignments in the program:\n- `x`, `a`, and `b` are assigned non-deterministic integer values.\n\nNext, we analyze the loop body and make a note of the loop condition:\n- The loop condition is `x >= 0`.\n\nNow, we can output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition:\n\n```\n/*@ \n    loop invariant a == b ==> x < 0;\n*/\n```\n\nExplanation:\n- If `a` is equal to `b`, the loop will terminate when `x` becomes negative. So, the loop invariant `a == b ==> x < 0` holds true before the loop execution, in every iteration of the loop, and after the loop termination.",
                    "First, let's identify the pre-conditions, loop condition, and post-condition.\n\nPre-conditions or variable assignments:\n1. x is assigned an unknown integer value.\n2. a and b are assigned unknown integer values.\n\nLoop condition:\n1. x >= 0\n\nPost-condition:\n1. There is no explicit post-condition given in the program.\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution, it is guaranteed that a == b.\n2. In every iteration of the loop, x is updated by x + a - b - 1.\n3. After the loop termination, x must be less than 0.\n\nBased on this information, we can write the loop invariants as:\n\n```\n/*@ \n    loop invariant a == b ==> x >= 0;\n    loop invariant a == b ==> x < a;\n*/\n```\n\nExplanation:\n- The first invariant states that if a == b, then x remains greater than or equal to 0 in every iteration of the loop.\n- The second invariant states that if a == b, then x is always less than a (or b) during the loop execution. This is because in each iteration, x is reduced by 1 (x + a - b - 1), so it cannot reach or exceed a (or b).",
                    "First, we make a note of the pre-conditions or variable assignments in the program:\n\n- `x`, `a`, and `b` are assigned non-deterministic integer values.\n\nNow, we analyze the loop body and make a note of the loop condition:\n\n- The loop condition is `x >= 0`.\n\nHere are the necessary loop invariants for the given program:\n\n```\n/*@ \n    loop invariant a == b ==> x >= 0;\n    loop invariant a == b ==> x < a + b;\n*/\n```",
                    "Step 1: Pre-conditions or variable assignments\n- x, a, and b are assigned non-deterministic integer values using unknown_int().\n- The loop executes only when a == b.\n\nStep 2: Analyze the loop body and make a note of the loop condition\n- The loop condition is x >= 0.\n\nNow we will identify the loop invariants.\n\nLoop Invariants:\n\n```\n/*@ \n    loop invariant a == b ==> x >= 0;\n    loop invariant a == b ==> x < a;\n*/\n```\n\nExplanation:\n- Before the loop execution, if a == b, the loop condition (x >= 0) is true.\n- In every iteration of the loop, if a == b, x is decremented by 1 (x + a - b - 1) and stays within the range [0, a).\n- After the loop termination, if a == b, x must be less than 0, and the invariants still hold true."
                ],
                "output": [
                    "/*@\n    loop invariant x >= 0;\n    loop invariant a == b ==> x >= 0;\n    loop invariant a == b ==> \\old(x) - x >= a - b + 1;\n*/",
                    "/*@ \n    loop invariant a == b ==> x < 0;\n*/",
                    "/*@ \n    loop invariant a == b ==> x >= 0;\n    loop invariant a == b ==> x < a;\n*/",
                    "/*@ \n    loop invariant a == b ==> x >= 0;\n    loop invariant a == b ==> x < a + b;\n*/",
                    "/*@ \n    loop invariant a == b ==> x >= 0;\n    loop invariant a == b ==> x < a;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@\n    loop invariant x >= 0;\n    loop invariant a == b ==> x >= 0;\n    loop invariant a == b ==> \\old(x) - x >= a - b + 1;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 19: \\old undefined in this context. Ignoring loop annotation"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant a == b ==> x < 0;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant a == b ==> x < 0 is preserved but not established.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant a == b ==> x >= 0;\n    loop invariant a == b ==> x < a;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant a == b ==> x >= 0 is neither established nor preserved.\nloop invariant a == b ==> x < a is preserved but not established.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant a == b ==> x >= 0;\n    loop invariant a == b ==> x < a + b;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant a == b ==> x >= 0 is neither established nor preserved.\nloop invariant a == b ==> x < a + b is preserved but not established.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant a == b ==> x >= 0;\n    loop invariant a == b ==> x < a;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant a == b ==> x >= 0 is neither established nor preserved.\nloop invariant a == b ==> x < a is preserved but not established.\n\n"
                    }
                ],
                "success": false
            },
            {
                "step": "Houdini for individual completion",
                "success": false,
                "completions": [
                    {
                        "num_solver_calls": 3,
                        "success": false,
                        "invariants": "/*@\n    loop invariant x >= 0;\n    loop invariant a == b ==> x >= 0;\n    loop invariant a == b ==> \\old(x) - x >= a - b + 1;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x;\n    int a;\n    int b;\n    x = unknown_int();\n    a = unknown_int();\n    b = unknown_int();\n    if (a == b) {\n        /*@\n\n\n\n*/\nwhile (x >= 0) {\n            x = x + a - b - 1;\n        }\n    }\n    return 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant a == b ==> x < 0;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x;\n    int a;\n    int b;\n    x = unknown_int();\n    a = unknown_int();\n    b = unknown_int();\n    if (a == b) {\n        /*@\n\n*/\nwhile (x >= 0) {\n            x = x + a - b - 1;\n        }\n    }\n    return 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant a == b ==> x >= 0;\n    loop invariant a == b ==> x < a;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x;\n    int a;\n    int b;\n    x = unknown_int();\n    a = unknown_int();\n    b = unknown_int();\n    if (a == b) {\n        /*@\n\n\n*/\nwhile (x >= 0) {\n            x = x + a - b - 1;\n        }\n    }\n    return 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant a == b ==> x >= 0;\n    loop invariant a == b ==> x < a + b;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x;\n    int a;\n    int b;\n    x = unknown_int();\n    a = unknown_int();\n    b = unknown_int();\n    if (a == b) {\n        /*@\n\n\n*/\nwhile (x >= 0) {\n            x = x + a - b - 1;\n        }\n    }\n    return 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant a == b ==> x >= 0;\n    loop invariant a == b ==> x < a;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x;\n    int a;\n    int b;\n    x = unknown_int();\n    a = unknown_int();\n    b = unknown_int();\n    if (a == b) {\n        /*@\n\n\n*/\nwhile (x >= 0) {\n            x = x + a - b - 1;\n        }\n    }\n    return 0;\n}",
                        "checker_output_after_prune": false
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 4,
                "success": false,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x;\n    int a;\n    int b;\n    x = unknown_int();\n    a = unknown_int();\n    b = unknown_int();\n    if (a == b) {\n        /*@\n\n\n\n\n\n\n*/\nwhile (x >= 0) {\n            x = x + a - b - 1;\n        }\n    }\n    return 0;\n}",
                "checker_output": false
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x;\n    int a;\n    int b;\n    x = unknown_int();\n    a = unknown_int();\n    b = unknown_int();\n    if (a == b) {\n        while (x >= 0) {\n            x = x + a - b - 1;\n        }\n    }\n    return 0;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's analyze the loop:\n\n```c\nwhile (x >= 0) {\n    x = x + a - b - 1;\n}\n```\n\nThe loop continues executing as long as `x >= 0`. In each iteration, `x` is updated with the value of `x + a - b - 1`. Since `a` and `b` are equal (as given by the condition `if (a == b)`), the value of `x` decreases by 1 in each iteration.\n\nNow, let's define the ranking function:\n\n```\n/*@\n    loop variant x;\n*/\n```\n\nThe ranking function `x` is a valid ranking function for the loop because:\n\n1. It is an expression over the loop variable `x`, which is live at the loop head.\n2. The value of the ranking function decreases with every iteration (`x` decreases by 1).\n3. The value of the ranking function must be positive for the loop to continue executing (`x >= 0`).\n\nSince the ranking function `x` satisfies all these conditions, it is a valid ranking function for the loop, and it helps prove that the loop must terminate.",
                    "First, let's analyze the program. The loop will only execute if `a == b`, and inside the loop, `x` is updated by adding `a - b - 1`. Since `a == b`, the value of `x` will decrease by 1 in each iteration of the loop.\n\nNow, let's find the ranking function for this loop. The ranking function should be an expression that decreases in each iteration of the loop and is positive for the loop to continue executing. In this case, the ranking function can be `x`.\n\nHere's the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x;\n*/\n```\n\nThis ranking function is valid because it satisfies the conditions for a ranking function:\n\n1. It decreases with every iteration of the loop: In each loop iteration, `x` is decreased by 1, making the value of `x` smaller.\n2. It is positive for the loop to continue executing: The loop condition is `x >= 0`, which means that `x` must be non-negative for the loop to continue. When `x` becomes negative, the loop terminates.\n\nThus, the ranking function `x` proves that the loop in the given program must terminate.",
                    "First, let's identify the loop in the given program:\n```\nwhile (x >= 0) {\n    x = x + a - b - 1;\n}\n```\n\nNow, let's find the ranking function for this loop. We know that the loop condition is `x >= 0`. We can see that in each iteration, `x` is updated by the expression `x + a - b - 1`. Since `a` and `b` are equal (as per the `if` condition), the expression simplifies to `x - 1`. In each iteration, `x` is reduced by 1.\n\nWe can use `x` as the ranking function because it decreases with every successive iteration of the loop and is positive for the loop to continue executing. So, the ranking function is:\n\n```\n/*@\n    loop variant x;\n*/\n```\n\nThis is a valid ranking function because it satisfies the conditions of being positive for the loop to execute and decreasing with each iteration. As `x` decreases with each iteration and is always non-negative for the loop to execute, the loop must eventually terminate.",
                    "First, let's analyze the loop:\n\n```\nwhile (x >= 0) {\n    x = x + a - b - 1;\n}\n```\n\nWe can see that the loop continues executing as long as `x >= 0`. In each iteration, `x` is updated as `x = x + a - b - 1`. Since `a == b`, we can simplify this update as `x = x - 1`. Now, we can determine the ranking function.\n\n```\n/*@\n    loop variant x;\n*/\n```\n\nThe ranking function `x` is a valid ranking function because:\n\n1. The value of `x` is positive (non-negative) for the loop to continue executing (`x >= 0`).\n2. The value of `x` decreases with every successive iteration of the loop (`x = x - 1`).\n\nTherefore, the ranking function `x` proves that the loop must terminate.",
                    "First, let's focus on the loop:\n\n```\nwhile (x >= 0) {\n    x = x + a - b - 1;\n}\n```\n\nThe loop executes while `x >= 0`. In each iteration, the value of `x` is updated as `x = x + a - b - 1`. Since `a == b`, we can simplify the update as `x = x - 1`. Therefore, the value of `x` decreases by 1 in each iteration.\n\nNow, let's find the ranking function. We can choose `x` as the ranking function because it decreases in each iteration and is always non-negative for the loop to continue executing. Here is the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x;\n*/\n```\n\nThis ranking function is valid because:\n\n1. The value of `x` is always non-negative for the loop to execute, as the loop condition is `x >= 0`.\n2. The value of `x` decreases by 1 in each iteration, as `x = x - 1`.\n3. Since `x` is a non-negative integer and decreases in each iteration, it will eventually become negative, causing the loop to terminate."
                ],
                "output": [
                    "/*@\n    loop variant x;\n*/",
                    "/*@\n    loop variant x;\n*/",
                    "/*@\n    loop variant x;\n*/",
                    "/*@\n    loop variant x;\n*/",
                    "/*@\n    loop variant x;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x;\n    int a;\n    int b;\n    x = unknown_int();\n    a = unknown_int();\n    b = unknown_int();\n    if (a == b) {\n        /*@\n\nloop variant x;\n*/\nwhile (x >= 0) {\n            x = x + a - b - 1;\n        }\n    }\n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x;\n    int a;\n    int b;\n    x = unknown_int();\n    a = unknown_int();\n    b = unknown_int();\n    if (a == b) {\n        /*@\n\nloop variant x;\n*/\nwhile (x >= 0) {\n            x = x + a - b - 1;\n        }\n    }\n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x;\n    int a;\n    int b;\n    x = unknown_int();\n    a = unknown_int();\n    b = unknown_int();\n    if (a == b) {\n        /*@\n\nloop variant x;\n*/\nwhile (x >= 0) {\n            x = x + a - b - 1;\n        }\n    }\n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x;\n    int a;\n    int b;\n    x = unknown_int();\n    a = unknown_int();\n    b = unknown_int();\n    if (a == b) {\n        /*@\n\nloop variant x;\n*/\nwhile (x >= 0) {\n            x = x + a - b - 1;\n        }\n    }\n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x;\n    int a;\n    int b;\n    x = unknown_int();\n    a = unknown_int();\n    b = unknown_int();\n    if (a == b) {\n        /*@\n\nloop variant x;\n*/\nwhile (x >= 0) {\n            x = x + a - b - 1;\n        }\n    }\n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "\n\nLoop variant is Invalid.\n"
                    }
                ],
                "success": false
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Thun_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c"
        ],
        "skipped": [],
        "total": 117,
        "success_count": 57,
        "failure_count": 60,
        "success_rate": 0.48717948717948717
    }
}