{
    "logs": {
        "file": "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint y = unknown_int();\n\tint x = y + 42;\n\twhile (x >= 0) {\n\t\ty = 2*y - x;\n\t\tx = (y + x) / 2;\n\t}\n\treturn 0;\n}",
        "success": true,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint y = unknown_int();\n\tint x = y + 42;\n\twhile (x >= 0) {\n\t\ty = 2*y - x;\n\t\tx = (y + x) / 2;\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "First, let's note down the important pre-conditions, variable assignments, and the loop condition:\n\n1. y is assigned an unknown value.\n2. x is assigned the value of y + 42.\n3. Loop condition: x >= 0.\n\nNow, let's analyze the loop body and determine the necessary loop invariants:\n\n1. y is updated to 2*y - x in each iteration.\n2. x is updated to (y + x) / 2 in each iteration.\n\nUsing this information, we can determine the loop invariants as follows:\n\n```\n/*@ \n    loop invariant y <= x;\n    loop invariant x >= 0;\n*/\n```",
                    "First, let's note the pre-conditions or variable assignments in the program:\n\n- y is assigned an unknown integer value.\n- x is assigned the value of y + 42.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n- Loop condition: x >= 0\n- Loop body:\n    - y is updated to 2*y - x.\n    - x is updated to (y + x) / 2.\n\nNext, we'll output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition. We'll use implications to handle the conditional nature of the code.\n\nHere are the loop invariants for the given program:\n\n```\n/*@ \n    loop invariant x >= 0 ==> y >= -42;\n    loop invariant x >= 0 ==> x >= y + 42;\n*/\n```\nThese loop invariants indicate that, as long as x is non-negative, the value of y will always be greater than or equal to -42, and x will always be greater than or equal to y + 42. These invariants hold true before the loop execution, in every iteration of the loop, and after the loop termination.",
                    "First, let's analyze the given program:\n\n1. Pre-conditions/variable assignments:\n- `y` is assigned an unknown integer value.\n- `x` is assigned `y + 42`.\n\n2. Loop condition:\n- The loop executes as long as `x >= 0`.\n\nNow, let's find the loop invariants:\n\n1. Before loop execution:\n- `x >= 0` (as this is the loop condition).\n\n2. In every iteration of the loop:\n- `y` is updated to `2*y - x`.\n- `x` is updated to `(y + x) / 2`.\n\n3. After the loop termination:\n- `x < 0` (as this is the negation of the loop condition).\n\nConsidering all the information above, we can write the loop invariants as:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant \\old(x) >= x;\n    loop invariant \\old(y) <= y;\n*/\n```\n\nThese invariants hold true before the loop execution, in every iteration of the loop, and after the loop termination.",
                    "First, let's note the pre-conditions or variable assignments in the program:\n1. y is assigned an unknown integer value.\n2. x is assigned the value of y + 42.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- Loop condition: x >= 0\n- Loop body:\n  1. y is updated to 2*y - x\n  2. x is updated to (y + x) / 2\n\nNext, we will output the loop invariants that are true before the loop execution, in every iteration of the loop and after the loop termination:\n\n```\n/*@ \n    loop invariant x >= y - 42;\n    loop invariant x >= 0;\n*/\n```\n\nThese invariants hold true:\n1. Before the loop execution: x is initialized as y + 42, so x >= y - 42 holds. The loop condition is x >= 0, so it also holds before the loop execution.\n2. In every iteration of the loop: Since x >= 0, when y is updated to 2*y - x, it will be greater than or equal to the previous value of y - 42. When x is updated to (y + x) / 2, it will still be greater than or equal to 0, as both y and x are non-negative.\n3. After the loop termination: When the loop terminates, x < 0, which implies that the post-condition x >= 0 does not hold. However, the loop invariant x >= y - 42 will still hold after the loop termination.",
                    "First, let's make a note of the variable assignments and the loop condition.\n\nVariable assignments:\n1. `int y = unknown_int();`\n2. `int x = y + 42;`\n\nLoop condition: `x >= 0`\n\nNow, let's find the loop invariants that are true before the loop execution, in every iteration, and after the loop termination.\n\nLoop invariants:\n1. `y` and `x` are always related by the equation `x = 2 * y - x_prev`, where `x_prev` is the value of `x` in the previous iteration.\n2. Before the loop starts, `x >= y + 42`. This relation holds in every iteration of the loop.\n\nHere is the loop invariant code block:\n\n```c\n/*@ \n    loop invariant x == 2 * y - x_prev;\n    loop invariant x >= y + 42;\n*/\n```\n\nNote that `x_prev` is not a variable in the program, but it represents the value of `x` in the previous iteration. The loop invariant holds true before the loop execution, in every iteration, and after the loop termination, such that they imply the post-condition."
                ],
                "output": [
                    "/*@ \n    loop invariant y <= x;\n    loop invariant x >= 0;\n*/",
                    "/*@ \n    loop invariant x >= 0 ==> y >= -42;\n    loop invariant x >= 0 ==> x >= y + 42;\n*/",
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant \\old(x) >= x;\n    loop invariant \\old(y) <= y;\n*/",
                    "/*@ \n    loop invariant x >= y - 42;\n    loop invariant x >= 0;\n*/",
                    "/*@ \n    loop invariant x == 2 * y - x_prev;\n    loop invariant x >= y + 42;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant y <= x;\n    loop invariant x >= 0;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant y <= x is inductive.\nloop invariant x >= 0 is neither established nor preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0 ==> y >= -42;\n    loop invariant x >= 0 ==> x >= y + 42;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x >= 0 ==> y >= -42 is established but not preserved.\nloop invariant x >= 0 ==> x >= y + 42 is inductive.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant \\old(x) >= x;\n    loop invariant \\old(y) <= y;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 10: \\old undefined in this context. Ignoring loop annotation"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= y - 42;\n    loop invariant x >= 0;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x >= y - 42 is inductive.\nloop invariant x >= 0 is neither established nor preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x == 2 * y - x_prev;\n    loop invariant x >= y + 42;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 9: unbound logic variable x_prev. Ignoring loop annotation"
                    }
                ],
                "success": false
            },
            {
                "step": "Houdini for individual completion",
                "success": true,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant y <= x;\n    loop invariant x >= 0;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint y = unknown_int();\n\tint x = y + 42;\n\t/*@\nloop invariant i1: y <= x;\n\n*/\nwhile (x >= 0) {\n\t\ty = 2*y - x;\n\t\tx = (y + x) / 2;\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0 ==> y >= -42;\n    loop invariant x >= 0 ==> x >= y + 42;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint y = unknown_int();\n\tint x = y + 42;\n\t/*@\n\nloop invariant i2: x >= 0 ==> x >= y + 42;\n*/\nwhile (x >= 0) {\n\t\ty = 2*y - x;\n\t\tx = (y + x) / 2;\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 4,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant \\old(x) >= x;\n    loop invariant \\old(y) <= y;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint y = unknown_int();\n\tint x = y + 42;\n\t/*@\n\n\n\n*/\nwhile (x >= 0) {\n\t\ty = 2*y - x;\n\t\tx = (y + x) / 2;\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= y - 42;\n    loop invariant x >= 0;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint y = unknown_int();\n\tint x = y + 42;\n\t/*@\nloop invariant i1: x >= y - 42;\n\n*/\nwhile (x >= 0) {\n\t\ty = 2*y - x;\n\t\tx = (y + x) / 2;\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x == 2 * y - x_prev;\n    loop invariant x >= y + 42;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint y = unknown_int();\n\tint x = y + 42;\n\t/*@\n\nloop invariant i2: x >= y + 42;\n*/\nwhile (x >= 0) {\n\t\ty = 2*y - x;\n\t\tx = (y + x) / 2;\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 4,
                "success": true,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint y = unknown_int();\n\tint x = y + 42;\n\t/*@\nloop invariant i1: y <= x;\n\n\n\n\n\nloop invariant i8: x >= y - 42;\n\nloop invariant i11: x >= y + 42;\n*/\nwhile (x >= 0) {\n\t\ty = 2*y - x;\n\t\tx = (y + x) / 2;\n\t}\n\treturn 0;\n}",
                "checker_output": true
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint y = unknown_int();\n\tint x = y + 42;\n\twhile (x >= 0) {\n\t\ty = 2*y - x;\n\t\tx = (y + x) / 2;\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's analyze the loop in the given program:\n\n```\nwhile (x >= 0) {\n\ty = 2*y - x;\n\tx = (y + x) / 2;\n}\n```\n\nWe need to find a ranking function that decreases with every iteration and is positive for the loop to continue executing.\n\nLet's consider the expression `x` as our ranking function.\n\n```\n/*@\n    loop variant x;\n*/\n```\n\nNow, let's analyze whether this is a valid ranking function.\n\n1. The value of `x` is positive for the loop to continue executing: The loop condition is `x >= 0`, which means that `x` must be positive (or zero) for the loop to continue executing. This satisfies the first condition for a valid ranking function.\n\n2. The value of `x` decreases with every successive iteration: In the loop, the value of `x` is updated as `x = (y + x) / 2`. Since `y` is updated as `2*y - x`, we can rewrite the update for `x` as `x = (2*y - x + x) / 2`. This simplifies to `x = y`, which means that the new value of `x` is equal to the old value of `y`. Now, `y` is updated as `2*y - x`, which is less than `2*y`. This implies that the new value of `x` is less than the old value of `y`. Since `y` is always less than or equal to the old value of `x`, it is guaranteed that the value of `x` decreases with every iteration.\n\nSince the ranking function `x` satisfies both conditions, it is a valid ranking function for this loop.",
                    "First, let's rewrite the loop with ACSL annotations:\n\n```\n/*@ \n  loop invariant y <= x + 42;\n  loop variant x;\n*/\nwhile (x >= 0) {\n\ty = 2*y - x;\n\tx = (y + x) / 2;\n}\n```\n\nThe ranking function for this loop is `x`.\n\nExplanation:\n\n1. The value of `x` is always non-negative inside the loop, as the loop condition is `x >= 0`.\n\n2. The value of `x` decreases in every iteration. After each iteration, the new value of `x` is calculated as `(y + x) / 2`. Since `y = 2*y - x` in the previous step, we can substitute this to get the new value of `x` as `(3*y - x) / 2`. As `y` is not increasing in the loop, the value of `(3*y - x)` will be less than `2*x`, making the new value of `x` smaller than the previous value.\n\nThus, the ranking function `x` is valid as it is always non-negative inside the loop, and its value decreases with every iteration, ensuring the loop's termination.",
                    "First, let's analyze the loop. The loop condition is `x >= 0`. Inside the loop, we have two statements:\n```\ny = 2*y - x;\nx = (y + x) / 2;\n```\n\nNow, let's find the ranking function. Since we are interested in finding a lexicographic ranking function, we can start with the first expression. We can use `x` as the first expression:\n\n```\n/*@\n    loop variant x;\n*/\n```\n\nNow, let's explain why `x` is a valid ranking function. The loop condition is `x >= 0`, which means the loop will continue executing as long as `x` is non-negative. Inside the loop, the value of `x` is updated with the statement `x = (y + x) / 2`. Since `y` is updated with the value `2*y - x` before updating `x`, the new value of `x` will always be smaller than its previous value, because `(y + x) / 2` is strictly less than `x` when `y = 2*y - x`. Therefore, the value of `x` decreases with every successive iteration of the loop.\n\nSince the value of `x` decreases with every iteration and must be non-negative for the loop to continue executing, `x` is a valid ranking function for this loop.",
                    "First, we need to identify the loop in the program. The loop is the while loop with the condition `x >= 0`.\n\nNow, let's find the ranking function for this loop. We want to find an expression over the variables `x` and `y` that decreases with every iteration of the loop and is positive as long as the loop continues executing.\n\nLet's analyze the loop body:\n\n1. `y = 2*y - x;` This updates the value of `y` based on the current values of `y` and `x`.\n2. `x = (y + x) / 2;` This updates the value of `x` based on the new value of `y` and the current value of `x`.\n\nNow, let's try to find a ranking function for this loop. We can observe that the value of `x` is decreasing in each iteration. Therefore, we can use `x` as the ranking function.\n\nHere's the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x;\n*/\n```\n\nThis ranking function is valid because:\n\n1. The value of `x` is positive as long as the loop continues executing (since the loop condition is `x >= 0`).\n2. The value of `x` decreases with every iteration of the loop, as shown by the update `x = (y + x) / 2;`. Since both `y` and `x` are non-negative, the updated value of `x` will always be less than or equal to its previous value.",
                    "First, let's analyze the loop and understand the relationship between the variables `x` and `y`:\n\n1. In each iteration, `y` is updated to `2*y - x`.\n2. Then, `x` is updated to `(y + x) / 2`.\n\nNow let's try to find a ranking function. We want an expression that decreases with every iteration and is positive as long as the loop continues. In this case, we can use the variable `x` itself as the ranking function, since it is decreasing in every iteration and the loop condition is `x >= 0`.\n\nSo, the ranking function is:\n\n```\n/*@\n    loop variant x;\n*/\n```\n\nNow, let's prove that it's a valid ranking function:\n\n1. The value of `x` is positive for the loop to continue: This is true because the loop condition is `x >= 0`. The loop will continue as long as `x` is positive.\n2. The value of `x` decreases with every iteration: This is also true. In every iteration, `x` is updated to `(y + x) / 2`, which is less than the original value of `x` since `y` is updated to `2*y - x`, and `2*y - x < y`.\n\nTherefore, `x` is a valid ranking function for this loop."
                ],
                "output": [
                    "/*@\n    loop variant x;\n*/",
                    "/*@ \n  loop invariant y <= x + 42;\n  loop variant x;\n*/\nwhile (x >= 0) {\n\ty = 2*y - x;\n\tx = (y + x) / 2;\n}",
                    "/*@\n    loop variant x;\n*/",
                    "/*@\n    loop variant x;\n*/",
                    "/*@\n    loop variant x;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint y = unknown_int();\n\tint x = y + 42;\n\t/*@\nloop invariant i1: y <= x;\nloop invariant i8: x >= y - 42;\nloop invariant i11: x >= y + 42;\nloop variant x;\n*/\nwhile (x >= 0) {\n\t\ty = 2*y - x;\n\t\tx = (y + x) / 2;\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant y <= x is inductive.\nloop invariant x >= y - 42 is inductive.\nloop invariant x >= y + 42 is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint y = unknown_int();\n\tint x = y + 42;\n\t/*@\nloop invariant i1: y <= x;\nloop invariant i8: x >= y - 42;\nloop invariant i11: x >= y + 42;\nloop variant x;\n*/\nwhile (x >= 0) {\n\t\ty = 2*y - x;\n\t\tx = (y + x) / 2;\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant y <= x is inductive.\nloop invariant x >= y - 42 is inductive.\nloop invariant x >= y + 42 is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint y = unknown_int();\n\tint x = y + 42;\n\t/*@\nloop invariant i1: y <= x;\nloop invariant i8: x >= y - 42;\nloop invariant i11: x >= y + 42;\nloop variant x;\n*/\nwhile (x >= 0) {\n\t\ty = 2*y - x;\n\t\tx = (y + x) / 2;\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant y <= x is inductive.\nloop invariant x >= y - 42 is inductive.\nloop invariant x >= y + 42 is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint y = unknown_int();\n\tint x = y + 42;\n\t/*@\nloop invariant i1: y <= x;\nloop invariant i8: x >= y - 42;\nloop invariant i11: x >= y + 42;\nloop variant x;\n*/\nwhile (x >= 0) {\n\t\ty = 2*y - x;\n\t\tx = (y + x) / 2;\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant y <= x is inductive.\nloop invariant x >= y - 42 is inductive.\nloop invariant x >= y + 42 is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint y = unknown_int();\n\tint x = y + 42;\n\t/*@\nloop invariant i1: y <= x;\nloop invariant i8: x >= y - 42;\nloop invariant i11: x >= y + 42;\nloop variant x;\n*/\nwhile (x >= 0) {\n\t\ty = 2*y - x;\n\t\tx = (y + x) / 2;\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant y <= x is inductive.\nloop invariant x >= y - 42 is inductive.\nloop invariant x >= y + 42 is inductive.\n\nLoop variant is Valid.\n"
                    }
                ],
                "success": true
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB6.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusMin.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.09-no-inv_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Copenhagen_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_easySum.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA6.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Gothenburg_v2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.08.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.03.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB11.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Thun_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_flag.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/McCarthy91_Iteration_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NO_24.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Copenhagen_disj_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Bangalore_v4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ComplInterv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChooseLife.c"
        ],
        "skipped": [],
        "total": 192,
        "success_count": 90,
        "failure_count": 102,
        "success_rate": 0.46875
    }
}