{
    "logs": {
        "file": "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\n    int linesToRead = unknown_int();\n    if( linesToRead < 0 )\n        return 0;\n    int h = unknown_int();\n    while( linesToRead && h > 0 )\n    {\n        if( linesToRead > h )\n            linesToRead = h;\n        h -= linesToRead;\n    }\n    return 0;\n\n}",
        "success": true,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\n    int linesToRead = unknown_int();\n    if( linesToRead < 0 )\n        return 0;\n    int h = unknown_int();\n    while( linesToRead && h > 0 )\n    {\n        if( linesToRead > h )\n            linesToRead = h;\n        h -= linesToRead;\n    }\n    return 0;\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "First, let's make a note of the pre-conditions or variable assignments in the program:\n- linesToRead is assigned an unknown integer value.\n- h is assigned an unknown integer value.\n- If linesToRead < 0, the program returns immediately, so within the loop, linesToRead >= 0.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- Loop condition: linesToRead && h > 0\n\nNext, let's output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n\nLoop invariants:\n```\n/*@\n    loop invariant linesToRead >= 0;\n    loop invariant h >= 0;\n    loop invariant \\forall integer x; 0 <= x <= linesToRead ==> h - x >= 0;\n*/\n```\n\nExplanation:\n- linesToRead >= 0: This invariant is true before the loop, during the loop, and after the loop because it is checked before the loop starts, and it is never decreased below 0 in the loop body.\n- h >= 0: This invariant is true before the loop, during the loop, and after the loop because the loop condition ensures that h is positive during execution, and it is only decreased within the loop.\n- \\forall integer x; 0 <= x <= linesToRead ==> h - x >= 0: This invariant is true because it states that for any integer x between 0 and linesToRead (inclusive), the value of h minus x is non-negative. This is true before the loop, during the loop (since linesToRead is always less than or equal to h), and after the loop.",
                    "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n1. `int linesToRead = unknown_int();`\n2. `int h = unknown_int();`\n3. `if( linesToRead < 0 ) return 0;` (this implies that `linesToRead >= 0`)\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n- Loop condition: `linesToRead && h > 0`\n\nNow, let's find the loop invariants:\n\n1. `linesToRead >= 0`, as it is ensured by the pre-condition.\n2. `h >= 0`, as the loop condition checks if `h > 0`.\n3. `linesToRead <= h`, because if `linesToRead > h`, then `linesToRead` is set to `h` in the loop body.\n\nFinally, let's output the loop invariants in one code block:\n\n```\n/*@ \n    loop invariant linesToRead >= 0;\n    loop invariant h >= 0;\n    loop invariant linesToRead <= h;\n*/\n```",
                    "First, let's note the pre-conditions and variable assignments:\n\n- linesToRead is assigned an unknown integer value. \n- h is assigned an unknown integer value.\n- The loop only starts if linesToRead and h are positive.\n\nNow, let's analyze the loop body and note the loop condition:\n\n- The loop condition is (linesToRead && h > 0), which means linesToRead and h must be positive for the loop to continue.\n- Inside the loop, linesToRead is set to the minimum of linesToRead and h.\n- h is decreased by linesToRead in each iteration.\n\nBased on this information, we can output the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= linesToRead;\n    loop invariant 0 <= h;\n    loop invariant linesToRead <= h ==> linesToRead == h;\n*/\n```",
                    "First, let's note the pre-conditions and variable assignments in the program:\n\n1. `linesToRead` is assigned the value of `unknown_int()`.\n2. `h` is assigned the value of `unknown_int()`.\n3. The loop condition is `linesToRead && h > 0`.\n\nNow, let's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition. \n\nLoop invariants:\n\n```\n/*@\n    loop invariant 0 <= linesToRead;\n    loop invariant 0 <= h;\n    loop invariant (h > 0) ==> (linesToRead > 0);\n    loop invariant linesToRead <= h;\n*/\n```\n\nThese loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination. They capture the relationship between `linesToRead` and `h`, ensuring that `linesToRead` is always non-negative and less than or equal to `h`, and that if `h` is positive, `linesToRead` must also be positive.",
                    "First, let's analyze the given code:\n\n1. Pre-conditions: linesToRead is non-negative (linesToRead >= 0).\n2. Variable assignments: h is assigned an unknown integer value.\n3. Loop condition: The loop executes as long as linesToRead is non-zero and h is positive (linesToRead && h > 0).\n\nNow, let's derive the loop invariants:\n\n1. Before the loop execution: \n   - linesToRead is non-negative (linesToRead >= 0).\n   - h is an unknown integer, so no specific constraints can be made.\n\n2. During every iteration of the loop:\n   - linesToRead is non-negative (linesToRead >= 0).\n   - h is non-negative (h >= 0).\n   - If linesToRead > h, then linesToRead is updated to be equal to h, ensuring linesToRead <= h.\n\n3. After the loop termination:\n   - Either linesToRead is zero (linesToRead == 0) or h is non-positive (h <= 0).\n\nNow, let's output the loop invariants as ACSL annotations:\n\n```\n/*@ \n    loop invariant linesToRead >= 0;\n    loop invariant h >= 0;\n    loop invariant linesToRead <= h;\n*/\n```"
                ],
                "output": [
                    "/*@\n    loop invariant linesToRead >= 0;\n    loop invariant h >= 0;\n    loop invariant \\forall integer x; 0 <= x <= linesToRead ==> h - x >= 0;\n*/",
                    "/*@ \n    loop invariant linesToRead >= 0;\n    loop invariant h >= 0;\n    loop invariant linesToRead <= h;\n*/",
                    "/*@ \n    loop invariant 0 <= linesToRead;\n    loop invariant 0 <= h;\n    loop invariant linesToRead <= h ==> linesToRead == h;\n*/",
                    "/*@\n    loop invariant 0 <= linesToRead;\n    loop invariant 0 <= h;\n    loop invariant (h > 0) ==> (linesToRead > 0);\n    loop invariant linesToRead <= h;\n*/",
                    "/*@ \n    loop invariant linesToRead >= 0;\n    loop invariant h >= 0;\n    loop invariant linesToRead <= h;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@\n    loop invariant linesToRead >= 0;\n    loop invariant h >= 0;\n    loop invariant \\forall integer x; 0 <= x <= linesToRead ==> h - x >= 0;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant linesToRead >= 0 is inductive.\nloop invariant h >= 0 is preserved but not established.\nloop invariant \\forall integer x; 0 <= x <= linesToRead ==> h - x >= 0 is neither established nor preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant linesToRead >= 0;\n    loop invariant h >= 0;\n    loop invariant linesToRead <= h;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant linesToRead >= 0 is inductive.\nloop invariant h >= 0 is preserved but not established.\nloop invariant linesToRead <= h is neither established nor preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= linesToRead;\n    loop invariant 0 <= h;\n    loop invariant linesToRead <= h ==> linesToRead == h;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant 0 <= linesToRead is inductive.\nloop invariant 0 <= h is preserved but not established.\nloop invariant linesToRead <= h ==> linesToRead == h is preserved but not established.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@\n    loop invariant 0 <= linesToRead;\n    loop invariant 0 <= h;\n    loop invariant (h > 0) ==> (linesToRead > 0);\n    loop invariant linesToRead <= h;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant 0 <= linesToRead is inductive.\nloop invariant 0 <= h is preserved but not established.\nloop invariant (h > 0) ==> (linesToRead > 0) is preserved but not established.\nloop invariant linesToRead <= h is neither established nor preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant linesToRead >= 0;\n    loop invariant h >= 0;\n    loop invariant linesToRead <= h;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant linesToRead >= 0 is inductive.\nloop invariant h >= 0 is preserved but not established.\nloop invariant linesToRead <= h is neither established nor preserved.\n\n"
                    }
                ],
                "success": false
            },
            {
                "step": "Houdini for individual completion",
                "success": true,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@\n    loop invariant linesToRead >= 0;\n    loop invariant h >= 0;\n    loop invariant \\forall integer x; 0 <= x <= linesToRead ==> h - x >= 0;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\n    int linesToRead = unknown_int();\n    if( linesToRead < 0 )\n        return 0;\n    int h = unknown_int();\n    /*@\nloop invariant i1: linesToRead >= 0;\n\n\n*/\nwhile( linesToRead && h > 0 )\n    {\n        if( linesToRead > h )\n            linesToRead = h;\n        h -= linesToRead;\n    }\n    return 0;\n\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant linesToRead >= 0;\n    loop invariant h >= 0;\n    loop invariant linesToRead <= h;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\n    int linesToRead = unknown_int();\n    if( linesToRead < 0 )\n        return 0;\n    int h = unknown_int();\n    /*@\nloop invariant i1: linesToRead >= 0;\n\n\n*/\nwhile( linesToRead && h > 0 )\n    {\n        if( linesToRead > h )\n            linesToRead = h;\n        h -= linesToRead;\n    }\n    return 0;\n\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= linesToRead;\n    loop invariant 0 <= h;\n    loop invariant linesToRead <= h ==> linesToRead == h;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\n    int linesToRead = unknown_int();\n    if( linesToRead < 0 )\n        return 0;\n    int h = unknown_int();\n    /*@\nloop invariant i1: 0 <= linesToRead;\n\n\n*/\nwhile( linesToRead && h > 0 )\n    {\n        if( linesToRead > h )\n            linesToRead = h;\n        h -= linesToRead;\n    }\n    return 0;\n\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@\n    loop invariant 0 <= linesToRead;\n    loop invariant 0 <= h;\n    loop invariant (h > 0) ==> (linesToRead > 0);\n    loop invariant linesToRead <= h;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\n    int linesToRead = unknown_int();\n    if( linesToRead < 0 )\n        return 0;\n    int h = unknown_int();\n    /*@\nloop invariant i1: 0 <= linesToRead;\n\n\n\n*/\nwhile( linesToRead && h > 0 )\n    {\n        if( linesToRead > h )\n            linesToRead = h;\n        h -= linesToRead;\n    }\n    return 0;\n\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant linesToRead >= 0;\n    loop invariant h >= 0;\n    loop invariant linesToRead <= h;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\n    int linesToRead = unknown_int();\n    if( linesToRead < 0 )\n        return 0;\n    int h = unknown_int();\n    /*@\nloop invariant i1: linesToRead >= 0;\n\n\n*/\nwhile( linesToRead && h > 0 )\n    {\n        if( linesToRead > h )\n            linesToRead = h;\n        h -= linesToRead;\n    }\n    return 0;\n\n}",
                        "checker_output_after_prune": true
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 3,
                "success": true,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\n    int linesToRead = unknown_int();\n    if( linesToRead < 0 )\n        return 0;\n    int h = unknown_int();\n    /*@\nloop invariant i1: linesToRead >= 0;\n\n\n\nloop invariant i7: 0 <= linesToRead;\n\n\n\n*/\nwhile( linesToRead && h > 0 )\n    {\n        if( linesToRead > h )\n            linesToRead = h;\n        h -= linesToRead;\n    }\n    return 0;\n\n}",
                "checker_output": true
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\n    int linesToRead = unknown_int();\n    if( linesToRead < 0 )\n        return 0;\n    int h = unknown_int();\n    while( linesToRead && h > 0 )\n    {\n        if( linesToRead > h )\n            linesToRead = h;\n        h -= linesToRead;\n    }\n    return 0;\n\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's identify the loop and the loop condition:\n\n```c\nwhile( linesToRead && h > 0 )\n```\n\nThe loop condition checks if both `linesToRead` and `h` are positive. Now let's find the ranking function. We can use lexicographic ranking functions since we have two variables.\n\nThe first expression we'll consider is `linesToRead`. It is positive for the loop to continue, and it either decreases or remains the same in each iteration due to the following condition:\n\n```c\nif( linesToRead > h )\n    linesToRead = h;\n```\n\nNow let's consider the second expression, which is `h`. It is also positive for the loop to continue, and it always decreases in each iteration:\n\n```c\nh -= linesToRead;\n```\n\nSo, the lexicographic ranking function for this loop is `(linesToRead, h)`:\n\n```c\n/*@\n    loop variant linesToRead;\n    loop variant h;\n*/\n```\n\nThis ranking function is valid because both `linesToRead` and `h` are positive for the loop to execute, and either `linesToRead` decreases or remains the same, and if it remains the same, `h` decreases. This guarantees that the loop will eventually terminate.",
                    "First, let's identify the loop and its conditions:\n\n```\nwhile( linesToRead && h > 0 )\n{\n    if( linesToRead > h )\n        linesToRead = h;\n    h -= linesToRead;\n}\n```\n\nThe loop continues executing while `linesToRead` is non-zero and `h > 0`. We can see that the value of `linesToRead` and `h` are both changing within the loop. So, we will consider them for our ranking function.\n\nNow, let's find a ranking function that decreases with every successive iteration of the loop and must be positive for the loop to continue executing.\n\nThe ranking function for this loop can be the tuple (linesToRead, h). The tuple represents a lexicographic ranking function.\n\nLet's write it in ACSL syntax:\n\n```\n/*@\n    loop variant linesToRead;\n    loop variant h;\n*/\n```\n\nNow let's explain why it is a valid ranking function:\n\n1. Both `linesToRead` and `h` are positive integers when the loop is executing, as the loop condition checks for `linesToRead` to be non-zero and `h > 0`.\n\n2. The value of `linesToRead` either remains the same or decreases in each iteration. If `linesToRead > h`, it is set to the value of `h`. If `linesToRead <= h`, it remains unchanged.\n\n3. The value of `h` strictly decreases in each iteration. Since `h -= linesToRead`, and `linesToRead` is always positive inside the loop, the value of `h` will decrease.\n\nTherefore, (linesToRead, h) is a valid lexicographic ranking function for this loop, as it ensures that the loop will eventually terminate.",
                    "First, let's analyze the loop:\n\nThe loop continues to execute as long as two conditions are met: `linesToRead` is positive (non-zero) and `h` is positive.\n\nWithin the loop, we have two assignments:\n1. If `linesToRead > h`, `linesToRead` is assigned the value of `h`.\n2. `h` is decremented by the value of `linesToRead`.\n\nNow, let's find a ranking function for this loop. A suitable lexicographic ranking function for this loop is `(h, linesToRead)`. Let's see why this is a valid ranking function:\n\n1. Both `h` and `linesToRead` are positive (non-zero) when entering the loop, as given by the loop condition.\n2. If `linesToRead > h`, `linesToRead` is assigned the value of `h`, and then `h` is decremented by `linesToRead`. In this case, `h` decreases, while `linesToRead` remains the same or decreases.\n3. If `linesToRead <= h`, `h` is decremented by `linesToRead`. In this case, `h` decreases, while `linesToRead` remains the same.\n\nIn all cases, either `h` decreases or remains the same, and if `h` remains the same, then `linesToRead` decreases. Therefore, the lexicographic ranking function `(h, linesToRead)` is valid for this loop.\n\nThe ranking function in ACSL syntax is:\n\n```\n/*@\n    loop variant h;\n    loop variant linesToRead;\n*/\n```",
                    "First, let's identify the loop in the program:\n\n```\nwhile( linesToRead && h > 0 )\n{\n    if( linesToRead > h )\n        linesToRead = h;\n    h -= linesToRead;\n}\n```\n\nThe loop condition is `linesToRead && h > 0`, which means the loop continues executing as long as both `linesToRead` and `h` are positive.\n\nNow, let's find the ranking function. We can use a lexicographic ranking function with two expressions:\n\n```\n/*@\n    loop variant h;\n    loop variant linesToRead;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. Both `h` and `linesToRead` are positive for the loop to execute, as required by the loop condition.\n2. In each iteration of the loop, either `h` decreases or remains the same.\n3. If `h` remains the same, then the value of `linesToRead` decreases, because `linesToRead = h` in the if statement, and then `h -= linesToRead` results in `h = 0`.\n\nTherefore, either `h` decreases or its value remains the same, and if its value remains the same, then the value of `linesToRead` decreases. This ensures that the loop will eventually terminate.",
                    "First, let's analyze the loop:\n\n```c\nwhile( linesToRead && h > 0 )\n{\n    if( linesToRead > h )\n        linesToRead = h;\n    h -= linesToRead;\n}\n```\n\nThe loop continues to execute as long as `linesToRead` is non-zero and `h` is positive. In each iteration, if `linesToRead` is greater than `h`, it is set to the value of `h`. Then, `h` is decremented by the value of `linesToRead`. Note that both `linesToRead` and `h` are non-negative integers.\n\nNow, let's find the ranking function.\n\nA valid ranking function for this loop is the tuple (h, linesToRead). It satisfies the conditions for a lexicographic ranking function:\n\n1. Both `h` and `linesToRead` are non-negative integers, so their values are always positive for the loop to execute.\n2. The value of `h` decreases in each iteration since it is decremented by `linesToRead`.\n3. If the value of `h` remains the same, then `linesToRead` must decrease since it is set to the value of `h` in the if statement.\n\nSo, the ranking function is:\n\n```\n/*@\n    loop variant h;\n    loop variant linesToRead;\n*/\n```\n\nThis ranking function is valid because it shows that the loop must terminate, as either `h` or `linesToRead` decreases in each iteration."
                ],
                "output": [
                    "/*@\n    loop variant linesToRead;\n    loop variant h;\n*/",
                    "/*@\n    loop variant linesToRead;\n    loop variant h;\n*/",
                    "/*@\n    loop variant h;\n    loop variant linesToRead;\n*/",
                    "/*@\n    loop variant h;\n    loop variant linesToRead;\n*/",
                    "/*@\n    loop variant h;\n    loop variant linesToRead;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\n    int linesToRead = unknown_int();\n    if( linesToRead < 0 )\n        return 0;\n    int h = unknown_int();\n    //@ ghost variant_expression measure = { linesToRead, h };\n/*@\nloop invariant i1: linesToRead >= 0;\nloop invariant i7: 0 <= linesToRead;\nloop invariant measure.a == linesToRead && measure.b == h;\nloop variant measure for lexicographic;\n*/\nwhile( linesToRead && h > 0 )\n    {\n        if( linesToRead > h )\n            linesToRead = h;\n        h -= linesToRead;\n    \n//@ ghost measure.a = linesToRead;\n//@ ghost measure.b = h;\n}\n    return 0;\n\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant linesToRead >= 0 is inductive.\nloop invariant 0 <= linesToRead is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\n    int linesToRead = unknown_int();\n    if( linesToRead < 0 )\n        return 0;\n    int h = unknown_int();\n    //@ ghost variant_expression measure = { linesToRead, h };\n/*@\nloop invariant i1: linesToRead >= 0;\nloop invariant i7: 0 <= linesToRead;\nloop invariant measure.a == linesToRead && measure.b == h;\nloop variant measure for lexicographic;\n*/\nwhile( linesToRead && h > 0 )\n    {\n        if( linesToRead > h )\n            linesToRead = h;\n        h -= linesToRead;\n    \n//@ ghost measure.a = linesToRead;\n//@ ghost measure.b = h;\n}\n    return 0;\n\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant linesToRead >= 0 is inductive.\nloop invariant 0 <= linesToRead is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\n    int linesToRead = unknown_int();\n    if( linesToRead < 0 )\n        return 0;\n    int h = unknown_int();\n    //@ ghost variant_expression measure = { h, linesToRead };\n/*@\nloop invariant i1: linesToRead >= 0;\nloop invariant i7: 0 <= linesToRead;\nloop invariant measure.a == h && measure.b == linesToRead;\nloop variant measure for lexicographic;\n*/\nwhile( linesToRead && h > 0 )\n    {\n        if( linesToRead > h )\n            linesToRead = h;\n        h -= linesToRead;\n    \n//@ ghost measure.a = h;\n//@ ghost measure.b = linesToRead;\n}\n    return 0;\n\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant linesToRead >= 0 is inductive.\nloop invariant 0 <= linesToRead is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\n    int linesToRead = unknown_int();\n    if( linesToRead < 0 )\n        return 0;\n    int h = unknown_int();\n    //@ ghost variant_expression measure = { h, linesToRead };\n/*@\nloop invariant i1: linesToRead >= 0;\nloop invariant i7: 0 <= linesToRead;\nloop invariant measure.a == h && measure.b == linesToRead;\nloop variant measure for lexicographic;\n*/\nwhile( linesToRead && h > 0 )\n    {\n        if( linesToRead > h )\n            linesToRead = h;\n        h -= linesToRead;\n    \n//@ ghost measure.a = h;\n//@ ghost measure.b = linesToRead;\n}\n    return 0;\n\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant linesToRead >= 0 is inductive.\nloop invariant 0 <= linesToRead is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\n    int linesToRead = unknown_int();\n    if( linesToRead < 0 )\n        return 0;\n    int h = unknown_int();\n    //@ ghost variant_expression measure = { h, linesToRead };\n/*@\nloop invariant i1: linesToRead >= 0;\nloop invariant i7: 0 <= linesToRead;\nloop invariant measure.a == h && measure.b == linesToRead;\nloop variant measure for lexicographic;\n*/\nwhile( linesToRead && h > 0 )\n    {\n        if( linesToRead > h )\n            linesToRead = h;\n        h -= linesToRead;\n    \n//@ ghost measure.a = h;\n//@ ghost measure.b = linesToRead;\n}\n    return 0;\n\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant linesToRead >= 0 is inductive.\nloop invariant 0 <= linesToRead is inductive.\n\nLoop variant is Valid.\n"
                    }
                ],
                "success": true
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB6.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusMin.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.09-no-inv_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Copenhagen_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_easySum.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA6.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Gothenburg_v2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.08.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.03.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB11.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1c_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.04.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.02.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_AG313.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Thun_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_flag.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/McCarthy91_Iteration_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NO_24.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Copenhagen_disj_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Bangalore_v4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ComplInterv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChooseLife.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c"
        ],
        "skipped": [],
        "total": 212,
        "success_count": 104,
        "failure_count": 108,
        "success_rate": 0.49056603773584906
    }
}