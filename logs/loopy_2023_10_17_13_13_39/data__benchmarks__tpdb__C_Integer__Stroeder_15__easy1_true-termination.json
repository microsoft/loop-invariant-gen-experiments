{
    "logs": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/easy1_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z;\n\tx = 0;\n    y = 100;\n    z = unknown_int();\n\twhile (x < 40) {\n\t\tif (z == 0) {\n\t\t\tx = x + 1;\n\t\t} else {\n\t\t\tx = x + 2;\n\t\t}\n\t}\n\treturn 0;\n}",
        "success": true,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z;\n\tx = 0;\n    y = 100;\n    z = unknown_int();\n\twhile (x < 40) {\n\t\tif (z == 0) {\n\t\t\tx = x + 1;\n\t\t} else {\n\t\t\tx = x + 2;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "First, let's analyze the given C program:\n\n1. Pre-conditions or variable assignments:\n   - x is initialized to 0\n   - y is initialized to 100\n   - z is assigned an unknown integer value\n\n2. Loop condition:\n   - The loop will execute while x is less than 40\n\nNow, let's output the necessary loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant 100 == y;\n    loop invariant (z == 0) ==> x % 2 == 0;\n    loop invariant (z != 0) ==> x % 2 == 1;\n*/\n```",
                    "Let's start by analyzing the given program:\n\n- Pre-conditions or variable assignments:\n  - x = 0;\n  - y = 100;\n  - z = unknown_int();\n\n- Loop condition:\n  - while (x < 40)\n\nNow, let's find the loop invariants:\n\n(i) Before the loop execution:\n- x is 0\n\n(ii) In every iteration of the loop:\n- x is non-negative\n- x is less than or equal to 40\n\n(iii) After the loop termination:\n- x is greater than or equal to 40\n\nConsidering the instructions and the above analysis, the loop invariants can be written as follows:\n\n```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= 40;\n*/\n```",
                    "Pre-conditions and variable assignments:\n- x is assigned 0\n- y is assigned 100\n- z is assigned an unknown integer value\n\nLoop condition:\n- x < 40\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= y;\n    loop invariant y == 100;\n    loop invariant (z == 0) ==> (x % 2 == 0);\n    loop invariant (z != 0) ==> (x % 2 == 1);\n*/\n```",
                    "Pre-conditions and variable assignments:\n1. x = 0\n2. y = 100\n3. z = unknown_int()\n\nLoop condition: x < 40\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= 80;\n    loop invariant x % 2 == 0 ==> z != 0;\n    loop invariant x % 2 != 0 ==> z == 0;\n*/\n```",
                    "First, let's note the pre-conditions and variable assignments in the program:\n\n1. x is initially assigned the value 0.\n2. y is assigned the value 100.\n3. z is assigned an unknown integer value.\n\nNext, let's analyze the loop body and make a note of the loop condition:\n\nThe loop condition is (x < 40).\n\nNow, let's find the necessary loop invariants of the while loop:\n\n```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= 80;\n    loop invariant x % 2 == 0 ==> z != 0;\n*/\n```\n\nExplanation:\n\n1. x is always greater than or equal to 0 (0 <= x). This is true before the loop execution, in every iteration of the loop, and after the loop termination.\n2. x is always less than or equal to 80 (x <= 80). This is true before the loop execution, in every iteration of the loop, and after the loop termination.\n3. If x is even (x % 2 == 0), then z is not equal to 0 (z != 0). This is true before the loop execution, in every iteration of the loop, and after the loop termination.\n\nThese loop invariants help Frama-C verify the post-condition."
                ],
                "output": [
                    "/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant 100 == y;\n    loop invariant (z == 0) ==> x % 2 == 0;\n    loop invariant (z != 0) ==> x % 2 == 1;\n*/",
                    "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= 40;\n*/",
                    "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= y;\n    loop invariant y == 100;\n    loop invariant (z == 0) ==> (x % 2 == 0);\n    loop invariant (z != 0) ==> (x % 2 == 1);\n*/",
                    "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= 80;\n    loop invariant x % 2 == 0 ==> z != 0;\n    loop invariant x % 2 != 0 ==> z == 0;\n*/",
                    "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= 80;\n    loop invariant x % 2 == 0 ==> z != 0;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant 100 == y;\n    loop invariant (z == 0) ==> x % 2 == 0;\n    loop invariant (z != 0) ==> x % 2 == 1;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant 0 <= x <= 100 is inductive.\nloop invariant 100 == y is inductive.\nloop invariant (z == 0) ==> x % 2 == 0 is established but not preserved.\nloop invariant (z != 0) ==> x % 2 == 1 is preserved but not established.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= 40;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant 0 <= x is inductive.\nloop invariant x <= 40 is established but not preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= y;\n    loop invariant y == 100;\n    loop invariant (z == 0) ==> (x % 2 == 0);\n    loop invariant (z != 0) ==> (x % 2 == 1);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant 0 <= x is inductive.\nloop invariant x <= y is inductive.\nloop invariant y == 100 is inductive.\nloop invariant (z == 0) ==> (x % 2 == 0) is established but not preserved.\nloop invariant (z != 0) ==> (x % 2 == 1) is preserved but not established.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= 80;\n    loop invariant x % 2 == 0 ==> z != 0;\n    loop invariant x % 2 != 0 ==> z == 0;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant 0 <= x is inductive.\nloop invariant x <= 80 is inductive.\nloop invariant x % 2 == 0 ==> z != 0 is neither established nor preserved.\nloop invariant x % 2 != 0 ==> z == 0 is inductive.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= 80;\n    loop invariant x % 2 == 0 ==> z != 0;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant 0 <= x is inductive.\nloop invariant x <= 80 is inductive.\nloop invariant x % 2 == 0 ==> z != 0 is neither established nor preserved.\n\n"
                    }
                ],
                "success": false
            },
            {
                "step": "Houdini for individual completion",
                "success": true,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant 100 == y;\n    loop invariant (z == 0) ==> x % 2 == 0;\n    loop invariant (z != 0) ==> x % 2 == 1;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z;\n\tx = 0;\n    y = 100;\n    z = unknown_int();\n\t/*@\nloop invariant i1: 0 <= x <= 100;\nloop invariant i2: 100 == y;\n\n\n*/\nwhile (x < 40) {\n\t\tif (z == 0) {\n\t\t\tx = x + 1;\n\t\t} else {\n\t\t\tx = x + 2;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= 40;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z;\n\tx = 0;\n    y = 100;\n    z = unknown_int();\n\t/*@\nloop invariant i1: 0 <= x;\n\n*/\nwhile (x < 40) {\n\t\tif (z == 0) {\n\t\t\tx = x + 1;\n\t\t} else {\n\t\t\tx = x + 2;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= y;\n    loop invariant y == 100;\n    loop invariant (z == 0) ==> (x % 2 == 0);\n    loop invariant (z != 0) ==> (x % 2 == 1);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z;\n\tx = 0;\n    y = 100;\n    z = unknown_int();\n\t/*@\nloop invariant i1: 0 <= x;\nloop invariant i2: x <= y;\nloop invariant i3: y == 100;\n\n\n*/\nwhile (x < 40) {\n\t\tif (z == 0) {\n\t\t\tx = x + 1;\n\t\t} else {\n\t\t\tx = x + 2;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= 80;\n    loop invariant x % 2 == 0 ==> z != 0;\n    loop invariant x % 2 != 0 ==> z == 0;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z;\n\tx = 0;\n    y = 100;\n    z = unknown_int();\n\t/*@\nloop invariant i1: 0 <= x;\nloop invariant i2: x <= 80;\n\nloop invariant i4: x % 2 != 0 ==> z == 0;\n*/\nwhile (x < 40) {\n\t\tif (z == 0) {\n\t\t\tx = x + 1;\n\t\t} else {\n\t\t\tx = x + 2;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= 80;\n    loop invariant x % 2 == 0 ==> z != 0;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z;\n\tx = 0;\n    y = 100;\n    z = unknown_int();\n\t/*@\nloop invariant i1: 0 <= x;\nloop invariant i2: x <= 80;\n\n*/\nwhile (x < 40) {\n\t\tif (z == 0) {\n\t\t\tx = x + 1;\n\t\t} else {\n\t\t\tx = x + 2;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 3,
                "success": true,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z;\n\tx = 0;\n    y = 100;\n    z = unknown_int();\n\t/*@\nloop invariant i1: 0 <= x <= 100;\nloop invariant i2: 100 == y;\n\n\nloop invariant i5: 0 <= x;\nloop invariant i6: x <= 40;\nloop invariant i8: x <= y;\nloop invariant i9: y == 100;\n\n\nloop invariant i13: x <= 80;\n\nloop invariant i15: x % 2 != 0 ==> z == 0;\n*/\nwhile (x < 40) {\n\t\tif (z == 0) {\n\t\t\tx = x + 1;\n\t\t} else {\n\t\t\tx = x + 2;\n\t\t}\n\t}\n\treturn 0;\n}",
                "checker_output": true
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z;\n\tx = 0;\n    y = 100;\n    z = unknown_int();\n\twhile (x < 40) {\n\t\tif (z == 0) {\n\t\t\tx = x + 1;\n\t\t} else {\n\t\t\tx = x + 2;\n\t\t}\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's identify the loop and the variables involved in it:\n\n```c\nwhile (x < 40) {\n    if (z == 0) {\n        x = x + 1;\n    } else {\n        x = x + 2;\n    }\n}\n```\n\nThe loop continues to execute as long as `x < 40`. The variables involved in the loop are `x` and `z`. We can observe that `x` is increasing in every iteration, and `z` remains the same throughout the loop execution.\n\nNow let's find the ranking function:\n\nIn this case, we can use `40 - x` as the ranking function. This is because `40 - x` is always positive when the loop is executing (since `x < 40`), and it decreases in every iteration (as `x` is increasing).\n\nSo, the ranking function is:\n\n```c\n/*@\n    loop variant 40 - x;\n*/\n```\n\nThis ranking function is valid because it meets the requirements: it is always positive when the loop is executing, and it decreases with every iteration of the loop, ensuring that the loop will eventually terminate.",
                    "First, we can rewrite the main function of the given program in a more compact form:\n\n```c\nint main() {\n    int x = 0;\n    int y = 100;\n    int z = unknown_int();\n\n    while (x < 40) {\n        if (z == 0) {\n            x = x + 1;\n        } else {\n            x = x + 2;\n        }\n    }\n\n    return 0;\n}\n```\n\nNow, let's analyze the loop and find a ranking function.\n\n```c\nwhile (x < 40) {\n    if (z == 0) {\n        x = x + 1;\n    } else {\n        x = x + 2;\n    }\n}\n```\n\nThe loop continues while `x < 40`. In each iteration, `x` is either incremented by 1 or by 2, depending on the value of `z`. Since `x` always increases, the loop will eventually terminate.\n\nWe can find a ranking function for this loop, based on the remaining distance to the loop termination condition. The ranking function is:\n\n```\n40 - x\n```\n\nThis is a valid ranking function because:\n\n1. It is an expression over the program variable `x`, which is live at the loop head.\n2. Its value decreases with every successive iteration of the loop, as `x` is always incremented.\n3. Its value is positive for the loop to continue executing, since the loop condition is `x < 40`.\n\nTherefore, the ranking function for the given loop is:\n\n```c\n/*@\n    loop variant 40 - x;\n*/\n```",
                    "First, let's identify the loop and the program variables that are live at the loop head:\n\nThe loop is `while (x < 40)`, and the live variables at the loop head are `x`, `y`, and `z`. \n\nNow we need to find an expression (or a sequence of expressions) that decreases with every successive iteration of the loop and is positive as long as the loop continues to execute.\n\nIn this case, the ranking function is `(40 - x)`.\n\nHere's the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant 40 - x;\n*/\n```\n\nThis is a valid ranking function for the following reasons:\n\n1. The value of the expression `(40 - x)` is positive as long as the loop continues to execute. Since the loop condition is `x < 40`, this ensures that the value of the ranking function is positive during the loop execution.\n\n2. The value of the expression `(40 - x)` decreases with every successive iteration of the loop. In each iteration, `x` is incremented by 1 or 2 (depending on the value of `z`). This means that the value of the expression `(40 - x)` will decrease by 1 or 2 in each iteration.\n\nAs the ranking function is positive and decreases with every iteration, we can conclude that the loop must eventually terminate.",
                    "First, let's identify the loop in the given program:\n\n```\nwhile (x < 40) {\n    if (z == 0) {\n        x = x + 1;\n    } else {\n        x = x + 2;\n    }\n}\n```\n\nNow, let's find the ranking function for the loop. The ranking function should be an expression over the loop variables (x and z in this case) that decreases with every iteration of the loop and is positive for the loop to continue executing.\n\nA possible ranking function for this loop is `40 - x`. Let's explain why it is a valid ranking function:\n\n1. The value of the expression `40 - x` is positive as long as the loop continues to execute, since `x < 40` is the loop condition.\n2. The value of the expression `40 - x` decreases with every iteration of the loop, as `x` is incremented by either 1 or 2 inside the loop.\n\nNow let's write the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant 40 - x;\n*/\n```",
                    "First, let's identify the loop in the program and the conditions for the loop to continue executing.\n\nThe loop in the program is the `while` loop, and the condition for the loop to continue executing is `x < 40`.\n\nNext, let's find an expression over the program variables that decreases with every successive iteration of the loop. In this case, we can use the expression `40 - x`, as it decreases whenever the loop executes.\n\nNow, let's check if the value of the expression is positive for the loop to continue executing. When `x < 40`, the expression `40 - x` will be positive.\n\nLastly, let's output the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant 40 - x;\n*/\n```\n\nThis is a valid ranking function because the value of the expression `40 - x` decreases with every successive iteration of the loop and is positive for the loop to continue executing. This ensures that the loop must terminate eventually."
                ],
                "output": [
                    "/*@\n    loop variant 40 - x;\n*/",
                    "/*@\n    loop variant 40 - x;\n*/",
                    "/*@\n    loop variant 40 - x;\n*/",
                    "/*@\n    loop variant 40 - x;\n*/",
                    "/*@\n    loop variant 40 - x;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z;\n\tx = 0;\n    y = 100;\n    z = unknown_int();\n\t/*@\nloop invariant i1: 0 <= x <= 100;\nloop invariant i2: 100 == y;\nloop invariant i5: 0 <= x;\nloop invariant i6: x <= 40;\nloop invariant i8: x <= y;\nloop invariant i9: y == 100;\nloop invariant i13: x <= 80;\nloop invariant i15: x % 2 != 0 ==> z == 0;\nloop variant 40 - x;\n*/\nwhile (x < 40) {\n\t\tif (z == 0) {\n\t\t\tx = x + 1;\n\t\t} else {\n\t\t\tx = x + 2;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant 0 <= x <= 100 is inductive.\nloop invariant 100 == y is inductive.\nloop invariant 0 <= x is inductive.\nloop invariant x <= 40 is inductive.\nloop invariant x <= y is inductive.\nloop invariant y == 100 is inductive.\nloop invariant x <= 80 is inductive.\nloop invariant x % 2 != 0 ==> z == 0 is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z;\n\tx = 0;\n    y = 100;\n    z = unknown_int();\n\t/*@\nloop invariant i1: 0 <= x <= 100;\nloop invariant i2: 100 == y;\nloop invariant i5: 0 <= x;\nloop invariant i6: x <= 40;\nloop invariant i8: x <= y;\nloop invariant i9: y == 100;\nloop invariant i13: x <= 80;\nloop invariant i15: x % 2 != 0 ==> z == 0;\nloop variant 40 - x;\n*/\nwhile (x < 40) {\n\t\tif (z == 0) {\n\t\t\tx = x + 1;\n\t\t} else {\n\t\t\tx = x + 2;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant 0 <= x <= 100 is inductive.\nloop invariant 100 == y is inductive.\nloop invariant 0 <= x is inductive.\nloop invariant x <= 40 is inductive.\nloop invariant x <= y is inductive.\nloop invariant y == 100 is inductive.\nloop invariant x <= 80 is inductive.\nloop invariant x % 2 != 0 ==> z == 0 is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z;\n\tx = 0;\n    y = 100;\n    z = unknown_int();\n\t/*@\nloop invariant i1: 0 <= x <= 100;\nloop invariant i2: 100 == y;\nloop invariant i5: 0 <= x;\nloop invariant i6: x <= 40;\nloop invariant i8: x <= y;\nloop invariant i9: y == 100;\nloop invariant i13: x <= 80;\nloop invariant i15: x % 2 != 0 ==> z == 0;\nloop variant 40 - x;\n*/\nwhile (x < 40) {\n\t\tif (z == 0) {\n\t\t\tx = x + 1;\n\t\t} else {\n\t\t\tx = x + 2;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant 0 <= x <= 100 is inductive.\nloop invariant 100 == y is inductive.\nloop invariant 0 <= x is inductive.\nloop invariant x <= 40 is inductive.\nloop invariant x <= y is inductive.\nloop invariant y == 100 is inductive.\nloop invariant x <= 80 is inductive.\nloop invariant x % 2 != 0 ==> z == 0 is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z;\n\tx = 0;\n    y = 100;\n    z = unknown_int();\n\t/*@\nloop invariant i1: 0 <= x <= 100;\nloop invariant i2: 100 == y;\nloop invariant i5: 0 <= x;\nloop invariant i6: x <= 40;\nloop invariant i8: x <= y;\nloop invariant i9: y == 100;\nloop invariant i13: x <= 80;\nloop invariant i15: x % 2 != 0 ==> z == 0;\nloop variant 40 - x;\n*/\nwhile (x < 40) {\n\t\tif (z == 0) {\n\t\t\tx = x + 1;\n\t\t} else {\n\t\t\tx = x + 2;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant 0 <= x <= 100 is inductive.\nloop invariant 100 == y is inductive.\nloop invariant 0 <= x is inductive.\nloop invariant x <= 40 is inductive.\nloop invariant x <= y is inductive.\nloop invariant y == 100 is inductive.\nloop invariant x <= 80 is inductive.\nloop invariant x % 2 != 0 ==> z == 0 is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z;\n\tx = 0;\n    y = 100;\n    z = unknown_int();\n\t/*@\nloop invariant i1: 0 <= x <= 100;\nloop invariant i2: 100 == y;\nloop invariant i5: 0 <= x;\nloop invariant i6: x <= 40;\nloop invariant i8: x <= y;\nloop invariant i9: y == 100;\nloop invariant i13: x <= 80;\nloop invariant i15: x % 2 != 0 ==> z == 0;\nloop variant 40 - x;\n*/\nwhile (x < 40) {\n\t\tif (z == 0) {\n\t\t\tx = x + 1;\n\t\t} else {\n\t\t\tx = x + 2;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant 0 <= x <= 100 is inductive.\nloop invariant 100 == y is inductive.\nloop invariant 0 <= x is inductive.\nloop invariant x <= 40 is inductive.\nloop invariant x <= y is inductive.\nloop invariant y == 100 is inductive.\nloop invariant x <= 80 is inductive.\nloop invariant x % 2 != 0 ==> z == 0 is inductive.\n\nLoop variant is Valid.\n"
                    }
                ],
                "success": true
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB6.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusMin.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.09-no-inv_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Copenhagen_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_easySum.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA6.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Gothenburg_v2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.08.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.03.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB11.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1c_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.04.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.02.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_AG313.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.01.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/easy2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA5.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.06.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.10.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Parallel_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Waldkirch_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DivMinus.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB3.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Cairo_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3a.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/easy1_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Thun_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_flag.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/McCarthy91_Iteration_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NO_24.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Copenhagen_disj_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Bangalore_v4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ComplInterv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChooseLife.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.07_true-termination.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.10.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.21_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Singapore_true-termination.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/McCarthyIterative.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MirrorInterv.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c"
        ],
        "skipped": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c"
        ],
        "total": 277,
        "success_count": 141,
        "failure_count": 136,
        "success_rate": 0.5090252707581228
    }
}