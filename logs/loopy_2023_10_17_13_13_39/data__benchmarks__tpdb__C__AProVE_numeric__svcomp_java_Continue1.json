{
    "logs": {
        "file": "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint i = 0;\n    int c = 0;\n\twhile (i < 20) {\n\t    i++;\n\t    if (i <= 10) continue;\n        c++;\n\t}\n    return c;\n}",
        "success": true,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint i = 0;\n    int c = 0;\n\twhile (i < 20) {\n\t    i++;\n\t    if (i <= 10) continue;\n        c++;\n\t}\n    return c;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "First, let's note the pre-conditions or variable assignments in the program:\n- i is initialized to 0\n- c is initialized to 0\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is i < 20\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution:\n   - i is 0\n   - c is 0\n\n2. In every iteration of the loop:\n   - i is always incremented\n   - c is incremented only when i > 10\n\n3. After the loop termination:\n   - i is 20\n   - c is 9 (since c is incremented only for i = 11 to 19)\n\nTaking these observations into account, we can write the loop invariants as follows:\n\n```\n/*@ \n    loop invariant 0 <= i && i <= 20;\n    loop invariant 0 <= c && c <= i && c <= 20;\n    loop invariant i <= 10 ==> c == 0;\n    loop invariant i > 10 ==> c == (i - 10);\n*/\n```",
                    "First, let's note the initial assignments and loop condition:\n- i is initialized to 0.\n- c is initialized to 0.\n- The loop condition is i < 20.\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution, i == 0 and c == 0.\n2. In every iteration of the loop, i is incremented by 1.\n3. In every iteration of the loop, c is incremented by 1 if i > 10.\n4. After the loop termination, i == 20, and c is the number of iterations where i > 10, which is 9.\n\nBased on these observations, we can write the loop invariants as:\n\n```\n/*@ \n    loop invariant 0 <= i <= 20;\n    loop invariant 0 <= c <= 9;\n    loop invariant i <= 10 ==> c == 0;\n    loop invariant i > 10 ==> c == i - 10;\n*/\n```\nThese loop invariants hold true before the loop execution, in every iteration of the loop, and after the loop termination. They can be used by Frama-C to verify the post-condition of the program.",
                    "First, let's note the pre-conditions and variable assignments in the program:\n- i = 0;\n- c = 0;\n\nNext, let's analyze the loop condition and body:\n- The loop condition is (i < 20).\n- Inside the loop, i is incremented by 1 in every iteration.\n- If i <= 10, the loop continues without incrementing c.\n- If i > 10, c is incremented by 1.\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= i && i <= 20;\n    loop invariant 0 <= c && c <= 20;\n    loop invariant c == (i > 10 ? i - 10 : 0);\n*/\n```",
                    "First, we make a note of the variable assignments in the program:\n- i is initialized to 0\n- c is initialized to 0\n\nNext, we analyze the loop body and make a note of the loop condition:\n- The loop condition is i < 20\n\nNow, we can find the loop invariants:\n\n```\n/*@\n    loop invariant 0 <= i <= 20;\n    loop invariant 0 <= c <= 10;\n    loop invariant c <= i;\n    loop invariant (i <= 10) ==> (c == 0);\n    loop invariant (i > 10) ==> (c == i - 10);\n*/\n```\n\nThese loop invariants hold:\n(i) before the loop execution,\n(ii) in every iteration of the loop, and\n(iii) after the loop termination.\n\nThey also imply the post-condition, which states that c will have a value between 0 and 10 (inclusive) after the loop terminates and that c will be equal to i - 10 when i > 10.",
                    "First, let's note the pre-conditions and variable assignments in the program:\n\n- i is initialized to 0\n- c is initialized to 0\n\nNow, let's analyze the loop body and note the loop condition:\n\n- The loop condition is `i < 20`\n\nNow, let's find the necessary loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= i <= 20;\n    loop invariant 0 <= c <= 10;\n    loop invariant i <= c + 10;\n*/\n```"
                ],
                "output": [
                    "/*@ \n    loop invariant 0 <= i && i <= 20;\n    loop invariant 0 <= c && c <= i && c <= 20;\n    loop invariant i <= 10 ==> c == 0;\n    loop invariant i > 10 ==> c == (i - 10);\n*/",
                    "/*@ \n    loop invariant 0 <= i <= 20;\n    loop invariant 0 <= c <= 9;\n    loop invariant i <= 10 ==> c == 0;\n    loop invariant i > 10 ==> c == i - 10;\n*/",
                    "/*@ \n    loop invariant 0 <= i && i <= 20;\n    loop invariant 0 <= c && c <= 20;\n    loop invariant c == (i > 10 ? i - 10 : 0);\n*/",
                    "/*@\n    loop invariant 0 <= i <= 20;\n    loop invariant 0 <= c <= 10;\n    loop invariant c <= i;\n    loop invariant (i <= 10) ==> (c == 0);\n    loop invariant (i > 10) ==> (c == i - 10);\n*/",
                    "/*@ \n    loop invariant 0 <= i <= 20;\n    loop invariant 0 <= c <= 10;\n    loop invariant i <= c + 10;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": true,
                        "invariants": "/*@ \n    loop invariant 0 <= i && i <= 20;\n    loop invariant 0 <= c && c <= i && c <= 20;\n    loop invariant i <= 10 ==> c == 0;\n    loop invariant i > 10 ==> c == (i - 10);\n*/",
                        "checker_output_for_invariants": true,
                        "checker_message_for_invariants": "loop invariant 0 <= i && i <= 20 is inductive.\nloop invariant 0 <= c && c <= i && c <= 20 is inductive.\nloop invariant i <= 10 ==> c == 0 is inductive.\nloop invariant i > 10 ==> c == (i - 10) is inductive.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= i <= 20;\n    loop invariant 0 <= c <= 9;\n    loop invariant i <= 10 ==> c == 0;\n    loop invariant i > 10 ==> c == i - 10;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant 0 <= i <= 20 is inductive.\nloop invariant 0 <= c <= 9 is established but not preserved.\nloop invariant i <= 10 ==> c == 0 is inductive.\nloop invariant i > 10 ==> c == i - 10 is inductive.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": true,
                        "invariants": "/*@ \n    loop invariant 0 <= i && i <= 20;\n    loop invariant 0 <= c && c <= 20;\n    loop invariant c == (i > 10 ? i - 10 : 0);\n*/",
                        "checker_output_for_invariants": true,
                        "checker_message_for_invariants": "loop invariant 0 <= i && i <= 20 is inductive.\nloop invariant 0 <= c && c <= 20 is inductive.\nloop invariant c == (i > 10 ? i - 10 : 0) is inductive.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": true,
                        "invariants": "/*@\n    loop invariant 0 <= i <= 20;\n    loop invariant 0 <= c <= 10;\n    loop invariant c <= i;\n    loop invariant (i <= 10) ==> (c == 0);\n    loop invariant (i > 10) ==> (c == i - 10);\n*/",
                        "checker_output_for_invariants": true,
                        "checker_message_for_invariants": "loop invariant 0 <= i <= 20 is inductive.\nloop invariant 0 <= c <= 10 is inductive.\nloop invariant c <= i is inductive.\nloop invariant (i <= 10) ==> (c == 0) is inductive.\nloop invariant (i > 10) ==> (c == i - 10) is inductive.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= i <= 20;\n    loop invariant 0 <= c <= 10;\n    loop invariant i <= c + 10;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant 0 <= i <= 20 is inductive.\nloop invariant 0 <= c <= 10 is established but not preserved.\nloop invariant i <= c + 10 is inductive.\n\n"
                    }
                ],
                "success": true
            },
            {
                "step": "Houdini for individual completion",
                "success": true,
                "completions": [
                    {
                        "num_solver_calls": 0,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= i && i <= 20;\n    loop invariant 0 <= c && c <= i && c <= 20;\n    loop invariant i <= 10 ==> c == 0;\n    loop invariant i > 10 ==> c == (i - 10);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint i = 0;\n    int c = 0;\n\t/*@\nloop invariant i1: 0 <= i && i <= 20;\nloop invariant i2: 0 <= c && c <= i && c <= 20;\nloop invariant i3: i <= 10 ==> c == 0;\nloop invariant i4: i > 10 ==> c == (i - 10);\n*/\nwhile (i < 20) {\n\t    i++;\n\t    if (i <= 10) continue;\n        c++;\n\t}\n    return c;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= i <= 20;\n    loop invariant 0 <= c <= 9;\n    loop invariant i <= 10 ==> c == 0;\n    loop invariant i > 10 ==> c == i - 10;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint i = 0;\n    int c = 0;\n\t/*@\nloop invariant i1: 0 <= i <= 20;\n\nloop invariant i3: i <= 10 ==> c == 0;\nloop invariant i4: i > 10 ==> c == i - 10;\n*/\nwhile (i < 20) {\n\t    i++;\n\t    if (i <= 10) continue;\n        c++;\n\t}\n    return c;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 0,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= i && i <= 20;\n    loop invariant 0 <= c && c <= 20;\n    loop invariant c == (i > 10 ? i - 10 : 0);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint i = 0;\n    int c = 0;\n\t/*@\nloop invariant i1: 0 <= i && i <= 20;\nloop invariant i2: 0 <= c && c <= 20;\nloop invariant i3: c == (i > 10 ? i - 10 : 0);\n*/\nwhile (i < 20) {\n\t    i++;\n\t    if (i <= 10) continue;\n        c++;\n\t}\n    return c;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 0,
                        "success": false,
                        "invariants": "/*@\n    loop invariant 0 <= i <= 20;\n    loop invariant 0 <= c <= 10;\n    loop invariant c <= i;\n    loop invariant (i <= 10) ==> (c == 0);\n    loop invariant (i > 10) ==> (c == i - 10);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint i = 0;\n    int c = 0;\n\t/*@\nloop invariant i1: 0 <= i <= 20;\nloop invariant i2: 0 <= c <= 10;\nloop invariant i3: c <= i;\nloop invariant i4: (i <= 10) ==> (c == 0);\nloop invariant i5: (i > 10) ==> (c == i - 10);\n*/\nwhile (i < 20) {\n\t    i++;\n\t    if (i <= 10) continue;\n        c++;\n\t}\n    return c;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= i <= 20;\n    loop invariant 0 <= c <= 10;\n    loop invariant i <= c + 10;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint i = 0;\n    int c = 0;\n\t/*@\nloop invariant i1: 0 <= i <= 20;\n\n\n*/\nwhile (i < 20) {\n\t    i++;\n\t    if (i <= 10) continue;\n        c++;\n\t}\n    return c;\n}",
                        "checker_output_after_prune": true
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 1,
                "success": true,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint i = 0;\n    int c = 0;\n\t/*@\nloop invariant i1: 0 <= i && i <= 20;\nloop invariant i2: 0 <= c && c <= i && c <= 20;\nloop invariant i3: i <= 10 ==> c == 0;\nloop invariant i4: i > 10 ==> c == (i - 10);\nloop invariant i5: 0 <= i <= 20;\n\nloop invariant i8: i > 10 ==> c == i - 10;\nloop invariant i10: 0 <= c && c <= 20;\nloop invariant i11: c == (i > 10 ? i - 10 : 0);\nloop invariant i13: 0 <= c <= 10;\nloop invariant i14: c <= i;\nloop invariant i15: (i <= 10) ==> (c == 0);\nloop invariant i16: (i > 10) ==> (c == i - 10);\nloop invariant i19: i <= c + 10;\n*/\nwhile (i < 20) {\n\t    i++;\n\t    if (i <= 10) continue;\n        c++;\n\t}\n    return c;\n}",
                "checker_output": true
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint i = 0;\n    int c = 0;\n\twhile (i < 20) {\n\t    i++;\n\t    if (i <= 10) continue;\n        c++;\n\t}\n    return c;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's identify the loop in the program:\n\n```\nwhile (i < 20) {\n    i++;\n    if (i <= 10) continue;\n    c++;\n}\n```\n\nNow, let's find the ranking function for this loop. We need a function that decreases in every iteration and is positive when the loop continues. In this case, we can use the difference between 20 and `i` as the ranking function. This is because `i` increases in every iteration, and the loop continues as long as `i < 20`.\n\nSo the ranking function is `20 - i`. Now let's express it in ACSL syntax:\n\n```\n/*@\n    loop variant 20 - i;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. The value of the expression `20 - i` is positive when the loop continues (i.e., when `i < 20`).\n2. The value of the expression `20 - i` decreases in every iteration since `i` increases by 1 in each iteration.\n3. Eventually, `i` will become equal to or greater than 20, and the loop will terminate.\n\nThus, this ranking function helps prove that the loop must terminate.",
                    "First, let's identify the loop and its conditions. The loop is `while (i < 20)`, and the loop condition is `i < 20`. \n\nThe ranking function should decrease in every iteration and remain positive while the loop is executing. We can observe that the variable `i` increases in each iteration (`i++`). Thus, the value `20 - i` decreases with each iteration and is always positive as long as the loop is executing. \n\nSo, the ranking function is `20 - i`. Here is the ACSL syntax for the ranking function:\n\n```\n/*@\n    loop variant 20 - i;\n*/\n```\n\nThis ranking function is valid because it satisfies the requirements:\n1. The value of the expression `20 - i` is positive as long as the loop is executing (`i < 20`).\n2. The value of the expression `20 - i` decreases with each iteration, as `i` increases by 1 in every iteration (`i++`).\n\nSince the ranking function decreases with each iteration and remains positive, it guarantees that the loop will eventually terminate.",
                    "First, let's identify the loop in the program:\n\n```c\nwhile (i < 20) {\n    i++;\n    if (i <= 10) continue;\n    c++;\n}\n```\n\nNext, we'll find the ranking function for the loop. In this case, the ranking function is a single expression: `20 - i`.\n\nNow, let's output the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant 20 - i;\n*/\n```\n\nExplanation:\n1. The value of the ranking function `20 - i` is positive as long as the loop continues executing because `i` is less than 20.\n2. The value of `i` increases with each iteration of the loop, which means the value of `20 - i` decreases with every successive iteration.\n3. The loop will terminate when `i` reaches 20, which satisfies the termination condition `i < 20`.\n\nThus, `20 - i` is a valid ranking function for the given loop, as it satisfies all the required properties.",
                    "First, we need to identify the loop variables that are live at the loop head. In this case, the loop variables are `i` and `c`. Next, we will find expressions that decrease with every iteration of the loop and are positive for the loop to continue executing.\n\nSince the loop continues executing while `i < 20`, we can use `20 - i` as our first expression in the lexicographic ranking function. This is because `20 - i` is positive when the loop is executing, and it will decrease with each iteration, as `i` is incremented.\n\nHowever, we can observe that the value of `c` is incremented only when `i > 10`. So, we can use `10 - i` as our second expression in the lexicographic ranking function. This is because when `i` is between 1 and 10, `10 - i` is positive, and it will decrease with each iteration. When `i > 10`, the value of `10 - i` remains the same, but `20 - i` decreases.\n\nNow, let's write the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant 20 - i;\n    loop variant 10 - i;\n*/\n```\n\nThis is a valid ranking function because the value of each expression is positive for the loop to execute, and either the first expression decreases or its value remains the same while the second expression decreases. This ensures that the loop must terminate.",
                    "First, let's analyze the loop. The loop continues while `i < 20`. In each iteration, `i` is incremented by 1. When `i <= 10`, the loop continues without incrementing `c`. When `i > 10`, `c` is incremented by 1.\n\nNow, let's find the ranking function for this loop. The ranking function should decrease with every iteration and must be positive for the loop to continue. In this case, we can use `20 - i` as the ranking function. \n\n```\n/*@\n    loop variant 20 - i;\n*/\n```\n\nThis is a valid ranking function because:\n1. The value of `20 - i` is positive as long as `i < 20`, which is the loop condition.\n2. In each iteration, `i` is incremented by 1, so the value of `20 - i` decreases with every iteration.\n\nSince the ranking function is positive and decreases with every iteration, it guarantees the termination of the loop."
                ],
                "output": [
                    "/*@\n    loop variant 20 - i;\n*/",
                    "/*@\n    loop variant 20 - i;\n*/",
                    "/*@\n    loop variant 20 - i;\n*/",
                    "/*@\n    loop variant 20 - i;\n    loop variant 10 - i;\n*/",
                    "/*@\n    loop variant 20 - i;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint i = 0;\n    int c = 0;\n\t/*@\nloop invariant i1: 0 <= i && i <= 20;\nloop invariant i2: 0 <= c && c <= i && c <= 20;\nloop invariant i3: i <= 10 ==> c == 0;\nloop invariant i4: i > 10 ==> c == (i - 10);\nloop invariant i5: 0 <= i <= 20;\nloop invariant i8: i > 10 ==> c == i - 10;\nloop invariant i10: 0 <= c && c <= 20;\nloop invariant i11: c == (i > 10 ? i - 10 : 0);\nloop invariant i13: 0 <= c <= 10;\nloop invariant i14: c <= i;\nloop invariant i15: (i <= 10) ==> (c == 0);\nloop invariant i16: (i > 10) ==> (c == i - 10);\nloop invariant i19: i <= c + 10;\nloop variant 20 - i;\n*/\nwhile (i < 20) {\n\t    i++;\n\t    if (i <= 10) continue;\n        c++;\n\t}\n    return c;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant 0 <= i && i <= 20 is inductive.\nloop invariant 0 <= c && c <= i && c <= 20 is inductive.\nloop invariant i <= 10 ==> c == 0 is inductive.\nloop invariant i > 10 ==> c == (i - 10) is inductive.\nloop invariant 0 <= i <= 20 is inductive.\nloop invariant i > 10 ==> c == i - 10 is inductive.\nloop invariant 0 <= c && c <= 20 is inductive.\nloop invariant c == (i > 10 ? i - 10 : 0) is inductive.\nloop invariant 0 <= c <= 10 is inductive.\nloop invariant c <= i is inductive.\nloop invariant (i <= 10) ==> (c == 0) is inductive.\nloop invariant (i > 10) ==> (c == i - 10) is inductive.\nloop invariant i <= c + 10 is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint i = 0;\n    int c = 0;\n\t/*@\nloop invariant i1: 0 <= i && i <= 20;\nloop invariant i2: 0 <= c && c <= i && c <= 20;\nloop invariant i3: i <= 10 ==> c == 0;\nloop invariant i4: i > 10 ==> c == (i - 10);\nloop invariant i5: 0 <= i <= 20;\nloop invariant i8: i > 10 ==> c == i - 10;\nloop invariant i10: 0 <= c && c <= 20;\nloop invariant i11: c == (i > 10 ? i - 10 : 0);\nloop invariant i13: 0 <= c <= 10;\nloop invariant i14: c <= i;\nloop invariant i15: (i <= 10) ==> (c == 0);\nloop invariant i16: (i > 10) ==> (c == i - 10);\nloop invariant i19: i <= c + 10;\nloop variant 20 - i;\n*/\nwhile (i < 20) {\n\t    i++;\n\t    if (i <= 10) continue;\n        c++;\n\t}\n    return c;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant 0 <= i && i <= 20 is inductive.\nloop invariant 0 <= c && c <= i && c <= 20 is inductive.\nloop invariant i <= 10 ==> c == 0 is inductive.\nloop invariant i > 10 ==> c == (i - 10) is inductive.\nloop invariant 0 <= i <= 20 is inductive.\nloop invariant i > 10 ==> c == i - 10 is inductive.\nloop invariant 0 <= c && c <= 20 is inductive.\nloop invariant c == (i > 10 ? i - 10 : 0) is inductive.\nloop invariant 0 <= c <= 10 is inductive.\nloop invariant c <= i is inductive.\nloop invariant (i <= 10) ==> (c == 0) is inductive.\nloop invariant (i > 10) ==> (c == i - 10) is inductive.\nloop invariant i <= c + 10 is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint i = 0;\n    int c = 0;\n\t/*@\nloop invariant i1: 0 <= i && i <= 20;\nloop invariant i2: 0 <= c && c <= i && c <= 20;\nloop invariant i3: i <= 10 ==> c == 0;\nloop invariant i4: i > 10 ==> c == (i - 10);\nloop invariant i5: 0 <= i <= 20;\nloop invariant i8: i > 10 ==> c == i - 10;\nloop invariant i10: 0 <= c && c <= 20;\nloop invariant i11: c == (i > 10 ? i - 10 : 0);\nloop invariant i13: 0 <= c <= 10;\nloop invariant i14: c <= i;\nloop invariant i15: (i <= 10) ==> (c == 0);\nloop invariant i16: (i > 10) ==> (c == i - 10);\nloop invariant i19: i <= c + 10;\nloop variant 20 - i;\n*/\nwhile (i < 20) {\n\t    i++;\n\t    if (i <= 10) continue;\n        c++;\n\t}\n    return c;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant 0 <= i && i <= 20 is inductive.\nloop invariant 0 <= c && c <= i && c <= 20 is inductive.\nloop invariant i <= 10 ==> c == 0 is inductive.\nloop invariant i > 10 ==> c == (i - 10) is inductive.\nloop invariant 0 <= i <= 20 is inductive.\nloop invariant i > 10 ==> c == i - 10 is inductive.\nloop invariant 0 <= c && c <= 20 is inductive.\nloop invariant c == (i > 10 ? i - 10 : 0) is inductive.\nloop invariant 0 <= c <= 10 is inductive.\nloop invariant c <= i is inductive.\nloop invariant (i <= 10) ==> (c == 0) is inductive.\nloop invariant (i > 10) ==> (c == i - 10) is inductive.\nloop invariant i <= c + 10 is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint i = 0;\n    int c = 0;\n\t//@ ghost variant_expression measure = { 20 - i, 10 - i };\n/*@\nloop invariant i1: 0 <= i && i <= 20;\nloop invariant i2: 0 <= c && c <= i && c <= 20;\nloop invariant i3: i <= 10 ==> c == 0;\nloop invariant i4: i > 10 ==> c == (i - 10);\nloop invariant i5: 0 <= i <= 20;\nloop invariant i8: i > 10 ==> c == i - 10;\nloop invariant i10: 0 <= c && c <= 20;\nloop invariant i11: c == (i > 10 ? i - 10 : 0);\nloop invariant i13: 0 <= c <= 10;\nloop invariant i14: c <= i;\nloop invariant i15: (i <= 10) ==> (c == 0);\nloop invariant i16: (i > 10) ==> (c == i - 10);\nloop invariant i19: i <= c + 10;\nloop invariant measure.a == 20 - i && measure.b == 10 - i;\nloop variant measure for lexicographic;\n*/\nwhile (i < 20) {\n\t    i++;\n\t    if (i <= 10) continue;\n        c++;\n\t\n//@ ghost measure.a = 20 - i;\n//@ ghost measure.b = 10 - i;\n}\n    return c;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant 0 <= i && i <= 20 is inductive.\nloop invariant 0 <= c && c <= i && c <= 20 is inductive.\nloop invariant i <= 10 ==> c == 0 is inductive.\nloop invariant i > 10 ==> c == (i - 10) is inductive.\nloop invariant 0 <= i <= 20 is inductive.\nloop invariant i > 10 ==> c == i - 10 is inductive.\nloop invariant 0 <= c && c <= 20 is inductive.\nloop invariant c == (i > 10 ? i - 10 : 0) is inductive.\nloop invariant 0 <= c <= 10 is inductive.\nloop invariant c <= i is inductive.\nloop invariant (i <= 10) ==> (c == 0) is inductive.\nloop invariant (i > 10) ==> (c == i - 10) is inductive.\nloop invariant i <= c + 10 is inductive.\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint i = 0;\n    int c = 0;\n\t/*@\nloop invariant i1: 0 <= i && i <= 20;\nloop invariant i2: 0 <= c && c <= i && c <= 20;\nloop invariant i3: i <= 10 ==> c == 0;\nloop invariant i4: i > 10 ==> c == (i - 10);\nloop invariant i5: 0 <= i <= 20;\nloop invariant i8: i > 10 ==> c == i - 10;\nloop invariant i10: 0 <= c && c <= 20;\nloop invariant i11: c == (i > 10 ? i - 10 : 0);\nloop invariant i13: 0 <= c <= 10;\nloop invariant i14: c <= i;\nloop invariant i15: (i <= 10) ==> (c == 0);\nloop invariant i16: (i > 10) ==> (c == i - 10);\nloop invariant i19: i <= c + 10;\nloop variant 20 - i;\n*/\nwhile (i < 20) {\n\t    i++;\n\t    if (i <= 10) continue;\n        c++;\n\t}\n    return c;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant 0 <= i && i <= 20 is inductive.\nloop invariant 0 <= c && c <= i && c <= 20 is inductive.\nloop invariant i <= 10 ==> c == 0 is inductive.\nloop invariant i > 10 ==> c == (i - 10) is inductive.\nloop invariant 0 <= i <= 20 is inductive.\nloop invariant i > 10 ==> c == i - 10 is inductive.\nloop invariant 0 <= c && c <= 20 is inductive.\nloop invariant c == (i > 10 ? i - 10 : 0) is inductive.\nloop invariant 0 <= c <= 10 is inductive.\nloop invariant c <= i is inductive.\nloop invariant (i <= 10) ==> (c == 0) is inductive.\nloop invariant (i > 10) ==> (c == i - 10) is inductive.\nloop invariant i <= c + 10 is inductive.\n\nLoop variant is Valid.\n"
                    }
                ],
                "success": true
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB6.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusMin.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.09-no-inv_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Copenhagen_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_easySum.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA6.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Gothenburg_v2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.08.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.03.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB11.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1c_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.04.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.02.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_AG313.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.01.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/easy2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA5.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.06.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.10.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Thun_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_flag.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/McCarthy91_Iteration_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NO_24.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Copenhagen_disj_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Bangalore_v4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ComplInterv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChooseLife.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.07_true-termination.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.10.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.21_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c"
        ],
        "skipped": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c"
        ],
        "total": 244,
        "success_count": 121,
        "failure_count": 123,
        "success_rate": 0.4959016393442623
    }
}