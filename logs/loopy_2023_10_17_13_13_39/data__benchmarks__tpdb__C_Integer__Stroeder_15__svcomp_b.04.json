{
    "logs": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.04.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, tmp;\n    x = unknown_int();\n    y = unknown_int();\n    tmp = unknown_int();\n    while (x > y) {\n        tmp = x;\n        x = y;\n        y = tmp;\n    }\n    return 0;\n}",
        "success": true,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, tmp;\n    x = unknown_int();\n    y = unknown_int();\n    tmp = unknown_int();\n    while (x > y) {\n        tmp = x;\n        x = y;\n        y = tmp;\n    }\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "First, let's analyze the given program:\n\n1. Pre-conditions or variable assignments: `x`, `y`, and `tmp` are assigned non-deterministic values using `unknown_int()`.\n2. Loop condition: `x > y`.\n\nNow, let's determine the loop invariants:\n\n1. Before the loop execution, the loop invariants should hold. Since we only have non-deterministic values for `x`, `y`, and `tmp`, we cannot make any direct assumptions about their initial values.\n2. In every iteration of the loop, we can observe that `tmp` is assigned the value of `x`, `x` is assigned the value of `y`, and `y` is assigned the value of `tmp`. This means that after each iteration, `x` and `y` swap their values. However, we still cannot make any direct assumptions about their values.\n3. After the loop termination, we know that `x <= y` because the loop condition `x > y` is no longer true.\n\nWith this analysis, we can determine the loop invariants:\n\n```\n/*@ \n    loop invariant x <= y ==> x == \\at(x, LoopEntry);\n    loop invariant x > y ==> x == \\at(y, LoopEntry);\n    loop invariant x <= y ==> y == \\at(y, LoopEntry);\n    loop invariant x > y ==> y == \\at(x, LoopEntry);\n*/\n```\n\nThese loop invariants state that if `x <= y`, then `x` remains the same as its value at the beginning of the loop, and if `x > y`, then `x` is equal to the initial value of `y`. Similarly, if `x <= y`, then `y` remains the same as its value at the beginning of the loop, and if `x > y`, then `y` is equal to the initial value of `x`.\n\nThese loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination, such that they imply the post condition.",
                    "First, let's analyze the given program:\n\n1. The program initializes three variables x, y, and tmp with unknown integer values.\n2. The while loop runs as long as x > y.\n3. Inside the loop, the values of x and y are swapped using the tmp variable.\n\nNow let's derive the loop invariants:\n\n1. The loop condition is x > y.\n2. Inside the loop, x and y are swapped, but their relative order changes if x > y.\n\nBased on this analysis, the loop invariants should be:\n\n```\n/*@ \n    loop invariant \\forall int p; (x <= p) ==> (y <= p);\n    loop invariant \\forall int q; (x >= q) ==> (y >= q);\n    loop invariant (x > y) ==> (y < tmp);\n*/\n```\n\nThese invariants represent the following:\n\n1. For all integers p, if x <= p, then y <= p. This means that y is always less than or equal to the maximum of x and y.\n2. For all integers q, if x >= q, then y >= q. This means that y is always greater than or equal to the minimum of x and y.\n3. If x > y, then y < tmp. This captures the relation between x, y, and tmp when x and y are swapped.",
                    "First, let's analyze the given program:\n\nPre-conditions/Variable assignments:\n- x, y, and tmp are assigned non-deterministic integer values.\n\nLoop condition:\n- The loop continues as long as x > y.\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution, x and y have non-deterministic integer values. No specific invariant needed in this case.\n\n2. In every iteration of the loop:\n    - x and y swap their values, so the sum of x and y remains constant throughout the loop.\n\n3. After the loop termination:\n    - The loop terminates when x <= y.\n\nConsidering the above points, we can write the loop invariants as follows:\n\n```c\n/*@ \n    loop invariant x <= y ==> \\old(x) + \\old(y) == x + y;\n    loop invariant x > y ==> \\old(x) + \\old(y) == x + y;\n*/\n```\n\nThese loop invariants ensure that the sum of x and y remains constant throughout the loop and help Frama-C verify the post-condition.",
                    "First, let's make a note of the pre-conditions and variable assignments:\n\n- x, y, and tmp are assigned non-deterministic integer values using `unknown_int()`.\n\nNow let's analyze the loop body and make a note of the loop condition:\n\n- The loop condition is `x > y`.\n\nNow we will output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition.\n\n```\n/*@ \n    loop invariant x >= y;\n    loop invariant y <= tmp ==> x <= tmp;\n*/\n```\n\nThese invariants satisfy the rules mentioned and are true before the loop execution, in every iteration of the loop, and after the loop termination.",
                    "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n- x, y, and tmp are assigned non-deterministic integer values at the beginning.\n\nNow let's analyze the loop body and make a note of the loop condition:\n\n- The loop condition is (x > y).\n\nNow, let's output the necessary loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition:\n\n```\n/*@ \n    loop invariant x <= y ==> \\old(x) <= y;\n    loop invariant x <= y ==> \\old(y) >= x;\n    loop invariant x > y ==> \\old(x) >= y;\n    loop invariant x > y ==> \\old(y) <= x;\n*/\n```\n\nThese loop invariants ensure that the values of x and y are always updated correctly in every iteration of the loop, and they hold true after the loop termination."
                ],
                "output": [
                    "/*@ \n    loop invariant x <= y ==> x == \\at(x, LoopEntry);\n    loop invariant x > y ==> x == \\at(y, LoopEntry);\n    loop invariant x <= y ==> y == \\at(y, LoopEntry);\n    loop invariant x > y ==> y == \\at(x, LoopEntry);\n*/",
                    "/*@ \n    loop invariant \\forall int p; (x <= p) ==> (y <= p);\n    loop invariant \\forall int q; (x >= q) ==> (y >= q);\n    loop invariant (x > y) ==> (y < tmp);\n*/",
                    "/*@ \n    loop invariant x <= y ==> \\old(x) + \\old(y) == x + y;\n    loop invariant x > y ==> \\old(x) + \\old(y) == x + y;\n*/",
                    "/*@ \n    loop invariant x >= y;\n    loop invariant y <= tmp ==> x <= tmp;\n*/",
                    "/*@ \n    loop invariant x <= y ==> \\old(x) <= y;\n    loop invariant x <= y ==> \\old(y) >= x;\n    loop invariant x > y ==> \\old(x) >= y;\n    loop invariant x > y ==> \\old(y) <= x;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x <= y ==> x == \\at(x, LoopEntry);\n    loop invariant x > y ==> x == \\at(y, LoopEntry);\n    loop invariant x <= y ==> y == \\at(y, LoopEntry);\n    loop invariant x > y ==> y == \\at(x, LoopEntry);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x <= y ==> x == \\at(x, LoopEntry) is inductive.\nloop invariant x > y ==> x == \\at(y, LoopEntry) is preserved but not established.\nloop invariant x <= y ==> y == \\at(y, LoopEntry) is inductive.\nloop invariant x > y ==> y == \\at(x, LoopEntry) is inductive.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant \\forall int p; (x <= p) ==> (y <= p);\n    loop invariant \\forall int q; (x >= q) ==> (y >= q);\n    loop invariant (x > y) ==> (y < tmp);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant \\forall int p; (x <= p) ==> (y <= p) is preserved but not established.\nloop invariant \\forall int q; (x >= q) ==> (y >= q) is preserved but not established.\nloop invariant (x > y) ==> (y < tmp) is inductive.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x <= y ==> \\old(x) + \\old(y) == x + y;\n    loop invariant x > y ==> \\old(x) + \\old(y) == x + y;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 13: \\old undefined in this context. Ignoring loop annotation"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= y;\n    loop invariant y <= tmp ==> x <= tmp;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x >= y is neither established nor preserved.\nloop invariant y <= tmp ==> x <= tmp is preserved but not established.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x <= y ==> \\old(x) <= y;\n    loop invariant x <= y ==> \\old(y) >= x;\n    loop invariant x > y ==> \\old(x) >= y;\n    loop invariant x > y ==> \\old(y) <= x;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 13: \\old undefined in this context. Ignoring loop annotation"
                    }
                ],
                "success": false
            },
            {
                "step": "Houdini for individual completion",
                "success": false,
                "completions": [
                    {
                        "num_solver_calls": 4,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x <= y ==> x == \\at(x, LoopEntry);\n    loop invariant x > y ==> x == \\at(y, LoopEntry);\n    loop invariant x <= y ==> y == \\at(y, LoopEntry);\n    loop invariant x > y ==> y == \\at(x, LoopEntry);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, tmp;\n    x = unknown_int();\n    y = unknown_int();\n    tmp = unknown_int();\n    /*@\n\n\n\n\n*/\nwhile (x > y) {\n        tmp = x;\n        x = y;\n        y = tmp;\n    }\n    return 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 3,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant \\forall int p; (x <= p) ==> (y <= p);\n    loop invariant \\forall int q; (x >= q) ==> (y >= q);\n    loop invariant (x > y) ==> (y < tmp);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, tmp;\n    x = unknown_int();\n    y = unknown_int();\n    tmp = unknown_int();\n    /*@\n\n\n\n*/\nwhile (x > y) {\n        tmp = x;\n        x = y;\n        y = tmp;\n    }\n    return 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 3,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x <= y ==> \\old(x) + \\old(y) == x + y;\n    loop invariant x > y ==> \\old(x) + \\old(y) == x + y;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, tmp;\n    x = unknown_int();\n    y = unknown_int();\n    tmp = unknown_int();\n    /*@\n\n\n*/\nwhile (x > y) {\n        tmp = x;\n        x = y;\n        y = tmp;\n    }\n    return 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= y;\n    loop invariant y <= tmp ==> x <= tmp;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, tmp;\n    x = unknown_int();\n    y = unknown_int();\n    tmp = unknown_int();\n    /*@\n\n\n*/\nwhile (x > y) {\n        tmp = x;\n        x = y;\n        y = tmp;\n    }\n    return 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 5,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x <= y ==> \\old(x) <= y;\n    loop invariant x <= y ==> \\old(y) >= x;\n    loop invariant x > y ==> \\old(x) >= y;\n    loop invariant x > y ==> \\old(y) <= x;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, tmp;\n    x = unknown_int();\n    y = unknown_int();\n    tmp = unknown_int();\n    /*@\n\n\n\n\n*/\nwhile (x > y) {\n        tmp = x;\n        x = y;\n        y = tmp;\n    }\n    return 0;\n}",
                        "checker_output_after_prune": false
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 11,
                "success": false,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, tmp;\n    x = unknown_int();\n    y = unknown_int();\n    tmp = unknown_int();\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x > y) {\n        tmp = x;\n        x = y;\n        y = tmp;\n    }\n    return 0;\n}",
                "checker_output": false
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, tmp;\n    x = unknown_int();\n    y = unknown_int();\n    tmp = unknown_int();\n    while (x > y) {\n        tmp = x;\n        x = y;\n        y = tmp;\n    }\n    return 0;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's identify the loop in the given program:\n\n```\nwhile (x > y) {\n    tmp = x;\n    x = y;\n    y = tmp;\n}\n```\n\nNow, let's find the ranking function for the loop. The loop has two variables `x` and `y`. The loop continues as long as `x > y`. In every iteration of the loop, the values of `x` and `y` are swapped. Let's use a lexicographic ranking function with two expressions `e1` and `e2`.\n\n```\ne1 = x - y\ne2 = x\n```\n\nNow let's output the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x - y;\n    loop variant x;\n*/\n```\n\nExplanation of why it is a valid ranking function:\n\n1. Both expressions are positive for the loop to execute: As the loop condition is `x > y`, it implies that `x - y > 0`. Also, since `x > y`, it's guaranteed that `x > 0`.\n\n2. In each iteration, either `e1` decreases, or if `e1` remains the same, `e2` decreases: In every iteration, the values of `x` and `y` are swapped. So, in the next iteration, `x' = y` and `y' = x`. Therefore, `e1' = y - x` and `e2' = y`. Since `x > y`, it's guaranteed that `x - y > y - x`, which means `e1 > e1'`. So, `e1` decreases in every iteration. Since `e1` decreases, there's no need to check for `e2`.\n\nHence, the given ranking function is valid for the loop in the given program.",
                    "First, let's look at the loop in the program:\n\n```\nwhile (x > y) {\n    tmp = x;\n    x = y;\n    y = tmp;\n}\n```\n\nThe loop continues to execute as long as `x > y`. In each iteration, the values of `x` and `y` are swapped. Therefore, we can create the following lexicographic ranking function:\n\n```\n/*@\n    loop variant y;\n    loop variant x;\n*/\n```\n\nNow let's explain why this is a valid ranking function:\n\n1. The value of `y` must be positive for the loop to continue executing since `x > y`. If `y` is negative or zero, the loop will terminate.\n\n2. The value of `y` either decreases or stays the same in each iteration. If the value of `y` decreases, it's a valid ranking function. If the value of `y` remains the same, we need to look at the second expression in the lexicographic ranking function, which is `x`.\n\n3. The value of `x` must also be positive for the loop to continue executing since `x > y`. If `x` is negative or zero, the loop will terminate.\n\n4. If the value of `y` remains the same, the value of `x` must decrease. This is because the values of `x` and `y` are swapped in each iteration. If `x` does not decrease, then `x > y` will no longer hold, and the loop will terminate.\n\nIn conclusion, the lexicographic ranking function `(y, x)` is a valid ranking function for the given loop because it satisfies the conditions required for a ranking function. It ensures that the loop will eventually terminate, as the values of `x` and `y` will eventually become such that `x > y` no longer holds.",
                    "First, let's analyze the loop:\n\n```\nwhile (x > y) {\n    tmp = x;\n    x = y;\n    y = tmp;\n}\n```\n\nThe loop continues executing as long as x is greater than y. In each iteration of the loop, the values of x and y are swapped. \n\nNow, let's find the ranking function for this loop. Since the loop swaps the values of x and y, we can use the difference between x and y as the ranking function.\n\n```\n/*@\n    loop variant x - y;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. The value of the ranking function (x - y) is positive for the loop to continue executing, as the loop condition is x > y.\n2. The value of the ranking function decreases with every successive iteration of the loop. When the values of x and y are swapped, the new value of x - y becomes the old value of y - x, which is smaller than the old value of x - y.\n\nThus, the ranking function (x - y) helps prove that the loop must terminate.",
                    "First, let's analyze the loop:\n\n```\nwhile (x > y) {\n    tmp = x;\n    x = y;\n    y = tmp;\n}\n```\n\nThe loop continues while `x > y`. In each iteration, the values of `x` and `y` are swapped using the `tmp` variable. The loop will terminate when `x <= y`.\n\nNow, let's find the ranking function. We can use the difference between `y` and `x` as the ranking function:\n\n```\n/*@\n    loop variant y - x;\n*/\n```\n\nExplanation:\n\n1. The value of the ranking function `y - x` is positive when the loop condition `x > y` holds.\n2. In each iteration, the values of `x` and `y` are swapped, and since `x > y` before the swap, it is guaranteed that `y - x` decreases with each iteration.\n\nSo, the ranking function `y - x` is a valid ranking function for the given loop, as it is positive when the loop executes and decreases with each iteration, ensuring the loop's termination.",
                    "First, let's analyze the loop. The loop continues to execute as long as `x > y`. Inside the loop, the values of `x` and `y` are swapped using the `tmp` variable. This means that the value of `x` decreases in each iteration, while the value of `y` increases.\n\nNow, let's find the ranking function for this loop. We can use the difference between `y` and `x` as the ranking function, because this difference increases in each iteration.\n\nHere is the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant y - x;\n*/\n```\n\nThis ranking function is valid because:\n\n1. The value of `y - x` is positive for the loop to continue executing, since `x > y`.\n2. The value of `y - x` increases in each iteration, as the values of `x` and `y` are swapped.\n\nThus, the ranking function helps prove that the loop must terminate."
                ],
                "output": [
                    "/*@\n    loop variant x - y;\n    loop variant x;\n*/",
                    "/*@\n    loop variant y;\n    loop variant x;\n*/",
                    "/*@\n    loop variant x - y;\n*/",
                    "/*@\n    loop variant y - x;\n*/",
                    "/*@\n    loop variant y - x;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, tmp;\n    x = unknown_int();\n    y = unknown_int();\n    tmp = unknown_int();\n    //@ ghost variant_expression measure = { x - y, x };\n/*@\n\nloop invariant measure.a == x - y && measure.b == x;\nloop variant measure for lexicographic;\n*/\nwhile (x > y) {\n        tmp = x;\n        x = y;\n        y = tmp;\n    \n//@ ghost measure.a = x - y;\n//@ ghost measure.b = x;\n}\n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, tmp;\n    x = unknown_int();\n    y = unknown_int();\n    tmp = unknown_int();\n    //@ ghost variant_expression measure = { y, x };\n/*@\n\nloop invariant measure.a == y && measure.b == x;\nloop variant measure for lexicographic;\n*/\nwhile (x > y) {\n        tmp = x;\n        x = y;\n        y = tmp;\n    \n//@ ghost measure.a = y;\n//@ ghost measure.b = x;\n}\n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, tmp;\n    x = unknown_int();\n    y = unknown_int();\n    tmp = unknown_int();\n    /*@\n\nloop variant x - y;\n*/\nwhile (x > y) {\n        tmp = x;\n        x = y;\n        y = tmp;\n    }\n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, tmp;\n    x = unknown_int();\n    y = unknown_int();\n    tmp = unknown_int();\n    /*@\n\nloop variant y - x;\n*/\nwhile (x > y) {\n        tmp = x;\n        x = y;\n        y = tmp;\n    }\n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, tmp;\n    x = unknown_int();\n    y = unknown_int();\n    tmp = unknown_int();\n    /*@\n\nloop variant y - x;\n*/\nwhile (x > y) {\n        tmp = x;\n        x = y;\n        y = tmp;\n    }\n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "\n\nLoop variant is Invalid.\n"
                    }
                ],
                "success": true
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB6.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusMin.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.09-no-inv_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Copenhagen_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_easySum.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA6.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Gothenburg_v2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.08.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.03.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB11.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1c_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.04.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Thun_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_flag.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/McCarthy91_Iteration_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NO_24.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Copenhagen_disj_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Bangalore_v4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ComplInterv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChooseLife.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c"
        ],
        "skipped": [],
        "total": 197,
        "success_count": 94,
        "failure_count": 103,
        "success_rate": 0.47715736040609136
    }
}