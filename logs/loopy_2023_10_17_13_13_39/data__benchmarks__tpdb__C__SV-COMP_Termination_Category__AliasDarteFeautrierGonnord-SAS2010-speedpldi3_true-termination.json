{
    "logs": {
        "file": "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint n = unknown_int();\n\tint m = unknown_int();\n\tint i, j;\n\tif (m > 0 && n > m) {\n\t\ti = 0;\n\t\tj = 0;\n\t\twhile (i < n) {\n\t\t\tif (j < m) {\n\t\t\t\tj++;\n\t\t\t} else {\n\t\t\t\tj = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}",
        "success": true,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint n = unknown_int();\n\tint m = unknown_int();\n\tint i, j;\n\tif (m > 0 && n > m) {\n\t\ti = 0;\n\t\tj = 0;\n\t\twhile (i < n) {\n\t\t\tif (j < m) {\n\t\t\t\tj++;\n\t\t\t} else {\n\t\t\t\tj = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "Pre-conditions or variable assignments:\n- `n` and `m` are assigned non-deterministic integer values.\n- `i` and `j` are assigned 0 before the loop starts.\n\nLoop condition:\n- The loop executes as long as `i < n`.\n\nPost-condition:\n- The program should terminate.\n\nLoop invariants:\n```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= j <= m;\n    loop invariant (j == m) ==> (i < n);\n    loop invariant (j < m) ==> (i < n);\n*/\n```",
                    "Pre-conditions and variable assignments:\n- n and m are assigned non-deterministic values through unknown_int().\n- i and j are initialized to 0.\n- The loop is executed only if (m > 0 && n > m).\n\nLoop condition:\n- The while loop executes as long as (i < n).\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n  loop invariant 0 <= i <= n;\n  loop invariant 0 <= j <= m;\n  loop invariant (j < m) ==> (i * m + j < n * m);\n  loop invariant (j == m) ==> (i < n);\n*/\n```",
                    "Pre-conditions and variable assignments:\n- n and m are non-deterministic integer values.\n- i and j are initialized to 0.\n- The while loop executes only if m > 0 and n > m.\n\nLoop condition:\n- The while loop condition is i < n.\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= j <= m;\n    loop invariant (j == m) ==> (i < n);\n    loop invariant (j < m) ==> (i <= n);\n*/\n```",
                    "Pre-conditions and variable assignments:\n- n and m are non-deterministic integers.\n- The loop executes if m > 0 and n > m.\n- i and j are initialized to 0.\n\nLoop condition:\n- The loop continues while i < n.\n\nLet's analyze the loop body to derive the loop invariants:\n\n1. If j < m, j is incremented.\n2. If j >= m, j is reset to 0 and i is incremented.\n\nLoop invariants:\n\n```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= j <= m;\n    loop invariant i * m + j <= n * m;\n*/\n```\n\nExplanation:\n\n1. i is always between 0 and n (inclusive).\n2. j is always between 0 and m (inclusive).\n3. The total number of steps (i * m + j) never exceeds n * m.",
                    "Pre-conditions and variable assignments:\n- n and m are assigned unknown values.\n- i and j are initialized to 0 only if (m > 0 && n > m).\n\nLoop condition:\n- The loop continues while (i < n).\n\nNow let's determine the loop invariants:\n\n1. Before the loop execution:\n   - i = 0\n   - j = 0\n\n2. In every iteration of the loop:\n   - 0 <= i <= n\n   - 0 <= j <= m\n   - if j < m, j increases by 1, otherwise j resets to 0 and i increases by 1\n\n3. After the loop termination:\n   - i = n\n   - 0 <= j <= m\n\nNow let's write the loop invariants in ACSL format:\n\n```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= j <= m;\n    loop invariant (j < m) ==> (j == \\at(j-1, LoopEntry));\n    loop invariant (j == m) ==> (j == 0 && i == \\at(i+1, LoopEntry));\n*/\n```"
                ],
                "output": [
                    "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= j <= m;\n    loop invariant (j == m) ==> (i < n);\n    loop invariant (j < m) ==> (i < n);\n*/",
                    "/*@ \n  loop invariant 0 <= i <= n;\n  loop invariant 0 <= j <= m;\n  loop invariant (j < m) ==> (i * m + j < n * m);\n  loop invariant (j == m) ==> (i < n);\n*/",
                    "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= j <= m;\n    loop invariant (j == m) ==> (i < n);\n    loop invariant (j < m) ==> (i <= n);\n*/",
                    "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= j <= m;\n    loop invariant i * m + j <= n * m;\n*/",
                    "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= j <= m;\n    loop invariant (j < m) ==> (j == \\at(j-1, LoopEntry));\n    loop invariant (j == m) ==> (j == 0 && i == \\at(i+1, LoopEntry));\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= j <= m;\n    loop invariant (j == m) ==> (i < n);\n    loop invariant (j < m) ==> (i < n);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= j <= m is inductive.\nloop invariant (j == m) ==> (i < n) is established but not preserved.\nloop invariant (j < m) ==> (i < n) is established but not preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n  loop invariant 0 <= i <= n;\n  loop invariant 0 <= j <= m;\n  loop invariant (j < m) ==> (i * m + j < n * m);\n  loop invariant (j == m) ==> (i < n);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= j <= m is inductive.\nloop invariant (j < m) ==> (i * m + j < n * m) is established but not preserved.\nloop invariant (j == m) ==> (i < n) is established but not preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= j <= m;\n    loop invariant (j == m) ==> (i < n);\n    loop invariant (j < m) ==> (i <= n);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= j <= m is inductive.\nloop invariant (j == m) ==> (i < n) is established but not preserved.\nloop invariant (j < m) ==> (i <= n) is inductive.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": true,
                        "invariants": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= j <= m;\n    loop invariant i * m + j <= n * m;\n*/",
                        "checker_output_for_invariants": true,
                        "checker_message_for_invariants": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= j <= m is inductive.\nloop invariant i * m + j <= n * m is inductive.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= j <= m;\n    loop invariant (j < m) ==> (j == \\at(j-1, LoopEntry));\n    loop invariant (j == m) ==> (j == 0 && i == \\at(i+1, LoopEntry));\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= j <= m is inductive.\nloop invariant (j < m) ==> (j == \\at(j-1, LoopEntry)) is preserved but not established.\nloop invariant (j == m) ==> (j == 0 && i == \\at(i+1, LoopEntry)) is inductive.\n\n"
                    }
                ],
                "success": true
            },
            {
                "step": "Houdini for individual completion",
                "success": true,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= j <= m;\n    loop invariant (j == m) ==> (i < n);\n    loop invariant (j < m) ==> (i < n);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint n = unknown_int();\n\tint m = unknown_int();\n\tint i, j;\n\tif (m > 0 && n > m) {\n\t\ti = 0;\n\t\tj = 0;\n\t\t/*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= j <= m;\n\n\n*/\nwhile (i < n) {\n\t\t\tif (j < m) {\n\t\t\t\tj++;\n\t\t\t} else {\n\t\t\t\tj = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n  loop invariant 0 <= i <= n;\n  loop invariant 0 <= j <= m;\n  loop invariant (j < m) ==> (i * m + j < n * m);\n  loop invariant (j == m) ==> (i < n);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint n = unknown_int();\n\tint m = unknown_int();\n\tint i, j;\n\tif (m > 0 && n > m) {\n\t\ti = 0;\n\t\tj = 0;\n\t\t/*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= j <= m;\n\n\n*/\nwhile (i < n) {\n\t\t\tif (j < m) {\n\t\t\t\tj++;\n\t\t\t} else {\n\t\t\t\tj = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= j <= m;\n    loop invariant (j == m) ==> (i < n);\n    loop invariant (j < m) ==> (i <= n);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint n = unknown_int();\n\tint m = unknown_int();\n\tint i, j;\n\tif (m > 0 && n > m) {\n\t\ti = 0;\n\t\tj = 0;\n\t\t/*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= j <= m;\n\nloop invariant i4: (j < m) ==> (i <= n);\n*/\nwhile (i < n) {\n\t\t\tif (j < m) {\n\t\t\t\tj++;\n\t\t\t} else {\n\t\t\t\tj = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 0,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= j <= m;\n    loop invariant i * m + j <= n * m;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint n = unknown_int();\n\tint m = unknown_int();\n\tint i, j;\n\tif (m > 0 && n > m) {\n\t\ti = 0;\n\t\tj = 0;\n\t\t/*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= j <= m;\nloop invariant i3: i * m + j <= n * m;\n*/\nwhile (i < n) {\n\t\t\tif (j < m) {\n\t\t\t\tj++;\n\t\t\t} else {\n\t\t\t\tj = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= j <= m;\n    loop invariant (j < m) ==> (j == \\at(j-1, LoopEntry));\n    loop invariant (j == m) ==> (j == 0 && i == \\at(i+1, LoopEntry));\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint n = unknown_int();\n\tint m = unknown_int();\n\tint i, j;\n\tif (m > 0 && n > m) {\n\t\ti = 0;\n\t\tj = 0;\n\t\t/*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= j <= m;\n\n\n*/\nwhile (i < n) {\n\t\t\tif (j < m) {\n\t\t\t\tj++;\n\t\t\t} else {\n\t\t\t\tj = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 4,
                "success": true,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint n = unknown_int();\n\tint m = unknown_int();\n\tint i, j;\n\tif (m > 0 && n > m) {\n\t\ti = 0;\n\t\tj = 0;\n\t\t/*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= j <= m;\n\n\n\nloop invariant i12: (j < m) ==> (i <= n);\nloop invariant i15: i * m + j <= n * m;\n\n\n*/\nwhile (i < n) {\n\t\t\tif (j < m) {\n\t\t\t\tj++;\n\t\t\t} else {\n\t\t\t\tj = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}",
                "checker_output": true
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint n = unknown_int();\n\tint m = unknown_int();\n\tint i, j;\n\tif (m > 0 && n > m) {\n\t\ti = 0;\n\t\tj = 0;\n\t\twhile (i < n) {\n\t\t\tif (j < m) {\n\t\t\t\tj++;\n\t\t\t} else {\n\t\t\t\tj = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's identify the loop we're working with. It's the while loop inside the if statement:\n\n```\nwhile (i < n) {\n    if (j < m) {\n        j++;\n    } else {\n        j = 0;\n        i++;\n    }\n}\n```\n\nNow let's find the ranking function for this loop. We can use a lexicographic ranking function with two expressions, e1 and e2, where e1 represents `n - i` and e2 represents `m - j`.\n\n```\n/*@\n    loop variant n - i;\n    loop variant m - j;\n*/\n```\n\nThis is a valid ranking function for the following reasons:\n\n1. The value of both expressions must be positive for the loop to continue executing. Since the loop condition is `i < n`, this means that `n - i` must be positive. Also, in the loop body, `j` is always less than `m`, which means that `m - j` is also positive.\n\n2. The value of e1, `n - i`, either decreases or remains the same in each iteration. When `j < m`, `i` remains the same, and when `j == m`, `i` is incremented, so `n - i` decreases.\n\n3. If the value of e1 remains the same, the value of e2, `m - j`, must decrease. This happens when `j < m`, in which case `j` is incremented, and thus `m - j` decreases.\n\nSince the ranking function meets all these conditions, it proves that the loop must terminate.",
                    "First, let's look at the loop conditions:\n\n1. The outer loop runs while `i < n`.\n2. The inner loop runs until `j < m`.\n\nNow we need to find a ranking function for this program. The loop conditions give us a hint that our ranking function should depend on the variables `i`, `j`, `n`, and `m`. \n\nA valid lexicographic ranking function for this program is `(n - i, m - j)`. Here's why:\n\n1. The values of `n - i` and `m - j` are initially non-negative, as `i` and `j` are both initialized to 0 and `n > m > 0`.\n2. In each iteration of the loop, either `j` is incremented or `j` is reset to 0 and `i` is incremented. This ensures that the value of `n - i` remains the same or decreases, and if it remains the same, the value of `m - j` decreases.\n\nSo, the ranking function for the loop in the given program is:\n\n```\n/*@\n    loop variant n - i;\n    loop variant m - j;\n*/\n```\n\nThis ranking function is valid because it satisfies the conditions for a lexicographic ranking function. The values are initially non-negative, and either the first expression decreases, or the first expression remains the same and the second expression decreases, ensuring that the loop will eventually terminate.",
                    "First, let's identify the loop in the program:\n\n```\nwhile (i < n) {\n    if (j < m) {\n        j++;\n    } else {\n        j = 0;\n        i++;\n    }\n}\n```\n\nThe loop continues executing while `i < n`. Now let's identify the program variables that are live at the loop head: `i`, `j`, `n`, and `m`.\n\nNext, let's find a lexicographic ranking function for this loop. We need to find a sequence of expressions involving live program variables such that the loop terminates.\n\nWe can choose the following lexicographic ranking function:\n1. `n - i`\n2. `m - j`\n\nNow let's explain why this is a valid ranking function:\n\n1. `n - i` is non-negative because the loop condition is `i < n`. It decreases when `j >= m`, as `i` increases by 1.\n2. `m - j` is non-negative because `j` is always less than or equal to `m`. It decreases when `j < m`, as `j` increases by 1.\n\nThe lexicographic ranking function ensures that either `n - i` decreases, or if `n - i` remains the same, then `m - j` decreases. Therefore, the loop must terminate.\n\nIn ACSL syntax, the ranking function can be written as:\n\n```\n/*@\n    loop variant n - i;\n    loop variant m - j;\n*/\n```\n\nSo, the lexicographic ranking function for the given program is `(n - i, m - j)`, and it is a valid ranking function because it ensures that the loop terminates.",
                    "First, let's identify the loop in the code:\n\n```\nwhile (i < n) {\n\tif (j < m) {\n\t\tj++;\n\t} else {\n\t\tj = 0;\n\t\ti++;\n\t}\n}\n```\n\nNow, we need to find a ranking function for this loop. To do that, we need to find an expression that decreases with each iteration and is positive as long as the loop continues.\n\nLet's consider the expressions `n - i` and `m - j`. \n\n`n - i` is positive when `i < n`, and `i` increases whenever `j == m`, so `n - i` decreases over time.\n\n`m - j` is positive when `j < m`, and `j` increases whenever `j < m`, so `m - j` decreases over time.\n\nHowever, when `j == m`, `j` resets to 0 and `i` increases. This means that `m - j` resets to `m`, but `n - i` decreases. \n\nThus, we can use a lexicographic ranking function with the expressions `n - i` and `m - j`. Here's the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant n - i;\n    loop variant m - j;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. Both expressions are positive as long as the loop continues (`i < n` and `j < m`).\n2. At least one of the expressions decreases with each iteration. When `j < m`, `m - j` decreases; when `j == m`, `n - i` decreases.",
                    "First, let's identify the loop in the program:\n\n```\nwhile (i < n) {\n    if (j < m) {\n        j++;\n    } else {\n        j = 0;\n        i++;\n    }\n}\n```\n\nNow, let's find the ranking function for this loop. We can see that `i` is increasing, and `j` is also increasing, but it resets to 0 when it reaches `m`. So, we can use a lexicographic ranking function with two expressions:\n\n1. `n - i`: This expression decreases as `i` increases.\n2. `m - j`: This expression decreases as `j` increases, but resets to `m` when `j` reaches `m`.\n\nNow, let's write the ranking function in ACSL syntax:\n\n```\n/*@\n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= j <= m;\n    loop variant n - i;\n    loop variant m - j;\n*/\n```\n\nThis is a valid ranking function because:\n\n- Both `n - i` and `m - j` are positive when the loop starts, as `i = 0` and `j = 0`.\n- During each iteration of the loop, either `i` increases or `j` increases (or resets to 0). This means that at least one of the expressions in the lexicographic ranking function decreases in each iteration.\n- When the loop terminates, `i >= n`, which means that the value of the first expression `n - i` becomes non-positive. This ensures loop termination."
                ],
                "output": [
                    "/*@\n    loop variant n - i;\n    loop variant m - j;\n*/",
                    "/*@\n    loop variant n - i;\n    loop variant m - j;\n*/",
                    "/*@\n    loop variant n - i;\n    loop variant m - j;\n*/",
                    "/*@\n    loop variant n - i;\n    loop variant m - j;\n*/",
                    "/*@\n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= j <= m;\n    loop variant n - i;\n    loop variant m - j;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint n = unknown_int();\n\tint m = unknown_int();\n\tint i, j;\n\tif (m > 0 && n > m) {\n\t\ti = 0;\n\t\tj = 0;\n\t\t//@ ghost variant_expression measure = { n - i, m - j };\n/*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= j <= m;\nloop invariant i12: (j < m) ==> (i <= n);\nloop invariant i15: i * m + j <= n * m;\nloop invariant measure.a == n - i && measure.b == m - j;\nloop variant measure for lexicographic;\n*/\nwhile (i < n) {\n\t\t\tif (j < m) {\n\t\t\t\tj++;\n\t\t\t} else {\n\t\t\t\tj = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t\n//@ ghost measure.a = n - i;\n//@ ghost measure.b = m - j;\n}\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= j <= m is inductive.\nloop invariant (j < m) ==> (i <= n) is inductive.\nloop invariant i * m + j <= n * m is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint n = unknown_int();\n\tint m = unknown_int();\n\tint i, j;\n\tif (m > 0 && n > m) {\n\t\ti = 0;\n\t\tj = 0;\n\t\t//@ ghost variant_expression measure = { n - i, m - j };\n/*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= j <= m;\nloop invariant i12: (j < m) ==> (i <= n);\nloop invariant i15: i * m + j <= n * m;\nloop invariant measure.a == n - i && measure.b == m - j;\nloop variant measure for lexicographic;\n*/\nwhile (i < n) {\n\t\t\tif (j < m) {\n\t\t\t\tj++;\n\t\t\t} else {\n\t\t\t\tj = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t\n//@ ghost measure.a = n - i;\n//@ ghost measure.b = m - j;\n}\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= j <= m is inductive.\nloop invariant (j < m) ==> (i <= n) is inductive.\nloop invariant i * m + j <= n * m is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint n = unknown_int();\n\tint m = unknown_int();\n\tint i, j;\n\tif (m > 0 && n > m) {\n\t\ti = 0;\n\t\tj = 0;\n\t\t//@ ghost variant_expression measure = { n - i, m - j };\n/*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= j <= m;\nloop invariant i12: (j < m) ==> (i <= n);\nloop invariant i15: i * m + j <= n * m;\nloop invariant measure.a == n - i && measure.b == m - j;\nloop variant measure for lexicographic;\n*/\nwhile (i < n) {\n\t\t\tif (j < m) {\n\t\t\t\tj++;\n\t\t\t} else {\n\t\t\t\tj = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t\n//@ ghost measure.a = n - i;\n//@ ghost measure.b = m - j;\n}\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= j <= m is inductive.\nloop invariant (j < m) ==> (i <= n) is inductive.\nloop invariant i * m + j <= n * m is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint n = unknown_int();\n\tint m = unknown_int();\n\tint i, j;\n\tif (m > 0 && n > m) {\n\t\ti = 0;\n\t\tj = 0;\n\t\t//@ ghost variant_expression measure = { n - i, m - j };\n/*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= j <= m;\nloop invariant i12: (j < m) ==> (i <= n);\nloop invariant i15: i * m + j <= n * m;\nloop invariant measure.a == n - i && measure.b == m - j;\nloop variant measure for lexicographic;\n*/\nwhile (i < n) {\n\t\t\tif (j < m) {\n\t\t\t\tj++;\n\t\t\t} else {\n\t\t\t\tj = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t\n//@ ghost measure.a = n - i;\n//@ ghost measure.b = m - j;\n}\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= j <= m is inductive.\nloop invariant (j < m) ==> (i <= n) is inductive.\nloop invariant i * m + j <= n * m is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint n = unknown_int();\n\tint m = unknown_int();\n\tint i, j;\n\tif (m > 0 && n > m) {\n\t\ti = 0;\n\t\tj = 0;\n\t\t//@ ghost variant_expression measure = { n - i, m - j };\n/*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= j <= m;\nloop invariant i12: (j < m) ==> (i <= n);\nloop invariant i15: i * m + j <= n * m;\nloop invariant measure.a == n - i && measure.b == m - j;\nloop variant measure for lexicographic;\n*/\nwhile (i < n) {\n\t\t\tif (j < m) {\n\t\t\t\tj++;\n\t\t\t} else {\n\t\t\t\tj = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t\n//@ ghost measure.a = n - i;\n//@ ghost measure.b = m - j;\n}\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= j <= m is inductive.\nloop invariant (j < m) ==> (i <= n) is inductive.\nloop invariant i * m + j <= n * m is inductive.\n\nLoop variant is Valid.\n"
                    }
                ],
                "success": true
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB6.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusMin.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.09-no-inv_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Copenhagen_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_easySum.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA6.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Gothenburg_v2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.08.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.03.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB11.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1c_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.04.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.02.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_AG313.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Thun_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_flag.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/McCarthy91_Iteration_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NO_24.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Copenhagen_disj_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Bangalore_v4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ComplInterv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChooseLife.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c"
        ],
        "skipped": [],
        "total": 211,
        "success_count": 103,
        "failure_count": 108,
        "success_rate": 0.4881516587677725
    }
}