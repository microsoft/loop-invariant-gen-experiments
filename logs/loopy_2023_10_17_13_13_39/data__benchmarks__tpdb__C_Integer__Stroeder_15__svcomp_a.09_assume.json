{
    "logs": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    while (y > 0 && x >= z) {\n        z = z + y;\n    }\n    return 0;\n}",
        "success": true,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    while (y > 0 && x >= z) {\n        z = z + y;\n    }\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "First, let's make a note of the variable assignments and loop condition:\n- x, y, and z are assigned non-deterministic integer values.\n- The loop condition is (y > 0 && x >= z).\n\nNow, let's find the loop invariants that hold true before the loop execution, in every iteration of the loop, and after the loop termination:\n\n```\n/*@ \n    loop invariant 0 <= y;\n    loop invariant z <= x;\n    loop invariant z >= \\at(z, Pre);\n*/\n```\n\nExplanation:\n1. y is always non-negative (0 <= y) because the loop only runs when y > 0, and y is not modified inside the loop.\n2. z is always less than or equal to x (z <= x) because the loop condition requires x >= z, and z can only increase inside the loop.\n3. z is always greater than or equal to its initial value before the loop (z >= \\at(z, Pre)) because z only increases inside the loop.",
                    "First, let's note down the variable assignments and preconditions in the program:\n\n- x, y, and z are assigned non-deterministic integer values.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n- The loop condition is (y > 0 && x >= z).\n\nNow, let's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination:\n\n```\n/*@ \n    loop invariant y >= 0;\n    loop invariant z <= x + y;\n*/\n```\n\nExplanation of the loop invariants:\n\n1. `y >= 0`: This invariant holds because the loop condition ensures that y is positive (y > 0) during every iteration of the loop. After the loop terminates, y will either be negative or zero, so this invariant still holds.\n\n2. `z <= x + y`: This invariant holds because, in every iteration of the loop, z is incremented by y. After the loop terminates, either y becomes negative or x becomes smaller than z, so this invariant still holds.",
                    "Pre-conditions and variable assignments:\n- x, y, and z are assigned non-deterministic integer values.\n- The loop condition is y > 0 && x >= z.\n\nConsidering these and the rules mentioned, we can find the loop invariants for the given program:\n\n```\n/*@ \n    loop invariant y >= 0;\n    loop invariant z <= x + y;\n*/\n```",
                    "First, let's analyze the given program:\n\nPre-conditions or variable assignments:\n- x, y, and z are assigned non-deterministic integer values.\n\nLoop condition:\n- y > 0 && x >= z\n\nPost-condition:\n- Not explicitly given, but we can infer that z should be greater or equal to x after the loop terminates.\n\nNow, let's find the necessary loop invariants:\n\n```\n/*@ \n    loop invariant x == \\at(x, Pre);\n    loop invariant y == \\at(y, Pre);\n    loop invariant y > 0 ==> z <= x;\n    loop invariant y <= 0 ==> z > x;\n*/\n```",
                    "First, let's note down the variable assignments and loop condition.\n\nVariable assignments:\n- x is assigned an unknown integer value.\n- y is assigned an unknown integer value.\n- z is assigned an unknown integer value.\n\nLoop condition: y > 0 && x >= z\n\nNow, let's find the loop invariants that hold true before the loop execution, in every iteration of the loop, and after the loop termination.\n\nLoop Invariants:\n\n```\n/*@ \n    loop invariant y >= 0;\n    loop invariant (y == 0) ==> (z >= x);\n*/\n```\n\nExplanation:\n1. y >= 0: Since the loop condition is y > 0, it is guaranteed that y is non-negative throughout the loop.\n2. (y == 0) ==> (z >= x): When y becomes 0 (or negative), the loop terminates. At this point, z must be greater than or equal to x as per the loop condition (x >= z). This invariant ensures that when the loop terminates, the post-condition is satisfied."
                ],
                "output": [
                    "/*@ \n    loop invariant 0 <= y;\n    loop invariant z <= x;\n    loop invariant z >= \\at(z, Pre);\n*/",
                    "/*@ \n    loop invariant y >= 0;\n    loop invariant z <= x + y;\n*/",
                    "/*@ \n    loop invariant y >= 0;\n    loop invariant z <= x + y;\n*/",
                    "/*@ \n    loop invariant x == \\at(x, Pre);\n    loop invariant y == \\at(y, Pre);\n    loop invariant y > 0 ==> z <= x;\n    loop invariant y <= 0 ==> z > x;\n*/",
                    "/*@ \n    loop invariant y >= 0;\n    loop invariant (y == 0) ==> (z >= x);\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= y;\n    loop invariant z <= x;\n    loop invariant z >= \\at(z, Pre);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 15: unbound logic variable z. Ignoring loop annotation"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant y >= 0;\n    loop invariant z <= x + y;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant y >= 0 is preserved but not established.\nloop invariant z <= x + y is preserved but not established.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant y >= 0;\n    loop invariant z <= x + y;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant y >= 0 is preserved but not established.\nloop invariant z <= x + y is preserved but not established.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x == \\at(x, Pre);\n    loop invariant y == \\at(y, Pre);\n    loop invariant y > 0 ==> z <= x;\n    loop invariant y <= 0 ==> z > x;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 13: unbound logic variable x. Ignoring loop annotation"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant y >= 0;\n    loop invariant (y == 0) ==> (z >= x);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant y >= 0 is preserved but not established.\nloop invariant (y == 0) ==> (z >= x) is preserved but not established.\n\n"
                    }
                ],
                "success": false
            },
            {
                "step": "Houdini for individual completion",
                "success": false,
                "completions": [
                    {
                        "num_solver_calls": 3,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= y;\n    loop invariant z <= x;\n    loop invariant z >= \\at(z, Pre);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    /*@\n\n\n\n*/\nwhile (y > 0 && x >= z) {\n        z = z + y;\n    }\n    return 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant y >= 0;\n    loop invariant z <= x + y;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    /*@\n\n\n*/\nwhile (y > 0 && x >= z) {\n        z = z + y;\n    }\n    return 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant y >= 0;\n    loop invariant z <= x + y;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    /*@\n\n\n*/\nwhile (y > 0 && x >= z) {\n        z = z + y;\n    }\n    return 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 4,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x == \\at(x, Pre);\n    loop invariant y == \\at(y, Pre);\n    loop invariant y > 0 ==> z <= x;\n    loop invariant y <= 0 ==> z > x;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    /*@\n\n\n\n\n*/\nwhile (y > 0 && x >= z) {\n        z = z + y;\n    }\n    return 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant y >= 0;\n    loop invariant (y == 0) ==> (z >= x);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    /*@\n\n\n*/\nwhile (y > 0 && x >= z) {\n        z = z + y;\n    }\n    return 0;\n}",
                        "checker_output_after_prune": false
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 6,
                "success": false,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    /*@\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (y > 0 && x >= z) {\n        z = z + y;\n    }\n    return 0;\n}",
                "checker_output": false
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    while (y > 0 && x >= z) {\n        z = z + y;\n    }\n    return 0;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's identify the loop in the program:\n\n```\nwhile (y > 0 && x >= z) {\n    z = z + y;\n}\n```\n\nThe loop continues to execute as long as `y > 0` and `x >= z`. In each iteration of the loop, the value of `z` increases by `y`. Since `y` is positive, the value of `z` will keep increasing until it is no longer less than or equal to `x`.\n\nNow, let's find the ranking function. We can use the difference between `x` and `z` as our ranking function. This difference decreases in every iteration of the loop because `z` increases by `y`.\n\nSo the ranking function is `x - z`. Here it is in ACSL syntax:\n\n```\n/*@\n    loop variant x - z;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. It is an expression over the loop variables `x` and `z`.\n2. The value of the expression decreases with every iteration of the loop since `z` increases by `y` and `y > 0`.\n3. The value of the expression must be positive for the loop to continue executing because the loop condition requires `x >= z`.\n\nThus, the ranking function `x - z` proves that the loop must terminate.",
                    "First, let's identify the loop in the given program:\n\n```\nwhile (y > 0 && x >= z) {\n    z = z + y;\n}\n```\n\nNow, let's find a ranking function for this loop. We need to find an expression involving the program variables, which decreases in each iteration and is positive as long as the loop continues executing.\n\nA suitable ranking function for this loop would be `x - z`.\n\nNow let's explain why this is a valid ranking function:\n\n1. Positivity: As long as the loop continues executing, we know that `x >= z`. Therefore, `x - z` is positive.\n\n2. Decreasing: In each iteration of the loop, `z` is incremented by `y`. Since `y > 0`, the value of `z` increases in every iteration. Therefore, the value of `x - z` decreases in every iteration.\n\nNow, we can write the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x - z;\n*/\n```\n\nSo, the ranking function for the given loop is `x - z`, and it is a valid ranking function because it is positive as long as the loop continues executing and decreases in every iteration.",
                    "First, let's identify the loop conditions and variables involved in the loop. The loop conditions are `y > 0` and `x >= z`. The variables involved in the loop are `x`, `y`, and `z`.\n\nNow, let's find the ranking function for the loop.\n\nWe can see that with each iteration of the loop, the value of `z` increases by `y`, while the values of `x` and `y` remain unchanged. Therefore, we can define a ranking function based on the difference between `x` and `z`. Since the value of `z` increases with each iteration, the difference between `x` and `z` will decrease, ensuring termination.\n\nThe ranking function can be expressed as `x - z`.\n\nHere's the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x - z;\n*/\n```\n\nNow let's explain why it is a valid ranking function:\n\n1. The value of the expression `x - z` is positive for the loop to continue executing since `x >= z` is a loop condition.\n2. The value of the expression `x - z` decreases with every successive iteration of the loop, as `z` increases by `y` in each iteration while `x` remains the same.\n\nAs the value of the ranking function is positive and decreasing with each iteration, it ensures that the loop will terminate, making it a valid ranking function.",
                    "First, let's identify the loop in the given program:\n\n```\nwhile (y > 0 && x >= z) {\n    z = z + y;\n}\n```\n\nWe can observe that the loop continues to execute as long as `y > 0` and `x >= z`. In each iteration of the loop, `z` is incremented by `y`. \n\nNow, we need to find the ranking function that decreases with every successive iteration of the loop and is positive for the loop to continue executing. Let's consider the expression `x - z`.\n\nThe initial value of `x - z` is positive because `x >= z`. In each iteration, `z` increases by `y` (which is positive since `y > 0`). Therefore, the value of `x - z` decreases with every iteration.\n\nSo, the ranking function is `x - z`. Let's write it in ACSL syntax:\n\n```\n/*@\n    loop variant x - z;\n*/\n```\n\nThis ranking function is valid because it meets the conditions of being positive for the loop to continue executing and decreasing with every successive iteration. As a result, it proves that the loop must terminate eventually.",
                    "First, let's identify the loop and the conditions for the loop to continue executing:\n\n```\nwhile (y > 0 && x >= z) {\n    z = z + y;\n}\n```\n\nThe loop will continue executing as long as `y > 0` and `x >= z`. We need to find a ranking function that decreases with each iteration of the loop and is positive when the loop executes.\n\nHere, the ranking function is `x - z`. Let's explain why it is a valid ranking function:\n\n1. It is positive when the loop executes: Since the loop executes when `x >= z`, the value of `x - z` will always be positive or zero when the loop is executing.\n\n2. It decreases with each iteration of the loop: In each iteration, the value of `z` is increased by `y` (since `z = z + y`). Since `y > 0`, the value of `x - z` will decrease in each iteration.\n\nThus, the ranking function for the given loop is `x - z`. In ACSL syntax:\n\n```\n/*@\n    loop variant x - z;\n*/\n```\n\nThis ranking function is valid because it is positive when the loop executes and decreases with each iteration of the loop, ensuring that the loop must terminate."
                ],
                "output": [
                    "/*@\n    loop variant x - z;\n*/",
                    "/*@\n    loop variant x - z;\n*/",
                    "/*@\n    loop variant x - z;\n*/",
                    "/*@\n    loop variant x - z;\n*/",
                    "/*@\n    loop variant x - z;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    /*@\n\nloop variant x - z;\n*/\nwhile (y > 0 && x >= z) {\n        z = z + y;\n    }\n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    /*@\n\nloop variant x - z;\n*/\nwhile (y > 0 && x >= z) {\n        z = z + y;\n    }\n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    /*@\n\nloop variant x - z;\n*/\nwhile (y > 0 && x >= z) {\n        z = z + y;\n    }\n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    /*@\n\nloop variant x - z;\n*/\nwhile (y > 0 && x >= z) {\n        z = z + y;\n    }\n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    /*@\n\nloop variant x - z;\n*/\nwhile (y > 0 && x >= z) {\n        z = z + y;\n    }\n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "\n\nLoop variant is Valid.\n"
                    }
                ],
                "success": true
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c"
        ],
        "skipped": [],
        "total": 12,
        "success_count": 6,
        "failure_count": 6,
        "success_rate": 0.5
    }
}