{
    "logs": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusMin.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int x;\n    int y;\n    int res;\n    int min;\n    x = unknown_int();\n    y = unknown_int();\n    res = 0;\n    \n    if (x < y) { min = x; }\n    else { min = y; }\n    \n    while (min == y) {\n        y = y+1;\n        res = res+1;\n        if (x < y) { min = x; }\n        else { min = y; }\n    }\n    \n    return 0;\n}",
        "success": true,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int x;\n    int y;\n    int res;\n    int min;\n    x = unknown_int();\n    y = unknown_int();\n    res = 0;\n    \n    if (x < y) { min = x; }\n    else { min = y; }\n    \n    while (min == y) {\n        y = y+1;\n        res = res+1;\n        if (x < y) { min = x; }\n        else { min = y; }\n    }\n    \n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "First, let's note down the pre-conditions and variable assignments in the program:\n- x and y are assigned unknown integer values.\n- res is initialized to 0.\n- min is assigned either x or y depending on the comparison between x and y.\n\nNext, let's analyze the loop body and loop condition:\n- The loop condition is (min == y).\n- Inside the loop, y is incremented by 1, res is incremented by 1, and min is reassigned either x or y based on their comparison.\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n    loop invariant x == \\at(x, Pre) && y <= \\at(y, Pre) + res;\n    loop invariant 0 <= res && res <= y - \\at(y, Pre);\n    loop invariant min == x || min == y;\n*/\n```",
                    "First, let's make a note of the pre-conditions or variable assignments in the program:\n1. x and y are assigned unknown integer values.\n2. res is assigned 0.\n3. min is assigned either x or y depending on the comparison.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n1. Loop condition: min == y\n2. Loop body:\n   a. y is incremented by 1.\n   b. res is incremented by 1.\n   c. min is assigned either x or y depending on the comparison.\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination:\n\n```\n/*@ \n    loop invariant min <= x;\n    loop invariant min <= y;\n    loop invariant res >= 0;\n    loop invariant y == min + res;\n*/\n```\n\nExplanation of the loop invariants:\n1. min is always less than or equal to x.\n2. min is always less than or equal to y.\n3. res is always greater than or equal to 0.\n4. y is always equal to the sum of min and res.",
                    "First, let's analyze the given program:\n\nPre-conditions and variable assignments:\n- x and y are assigned non-deterministic integer values using `unknown_int()`.\n- res is assigned 0.\n- min is assigned the minimum value between x and y.\n\nLoop condition:\n- The loop continues as long as min == y.\n\nPost-condition:\n- We are not given an explicit post-condition, but we can infer that at the end of the loop, min must be equal to x.\n\nNow, let's find the necessary loop invariants:\n\n1. Before the loop execution, min is the minimum value between x and y.\n2. In every iteration of the loop, y increases by 1 and res increases by 1.\n3. After the loop termination, min must be equal to x.\n\nTaking all these points into consideration, we can write the loop invariants as follows:\n\n```\n/*@ \n    loop invariant min <= x;\n    loop invariant min <= y;\n    loop invariant min == x || min == y;\n    loop invariant y <= x + res;\n    loop invariant res >= 0;\n*/\n```",
                    "First, let's make a note of the pre-conditions and variable assignments in the program:\n- x and y are assigned unknown_int() values\n- res is initialized to 0\n- min is assigned either x or y depending on the comparison between x and y\n\nNow, let's analyze the loop body and loop condition:\n- The loop condition is (min == y)\n- In the loop body, y is incremented by 1, res is incremented by 1, and min is assigned either x or y depending on the comparison between x and y\n\nNow, let's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant 0 <= res;\n    loop invariant res == y - \\at(y, Pre);\n    loop invariant (min == x) ==> (x <= y);\n    loop invariant (min == y) ==> (x > y);\n*/\n```\nExplanation:\n1. res is always non-negative, as it starts at 0 and is incremented by 1 in each loop iteration.\n2. res is equal to the difference between the current value of y and its initial value, as both y and res are incremented by 1 in each loop iteration.\n3. If min is equal to x, then x must be less than or equal to y, as min is updated to the minimum of x and y in each loop iteration.\n4. If min is equal to y, then x must be greater than y, as min is updated to the minimum of x and y in each loop iteration.",
                    "First, let's analyze the pre-conditions or variable assignments in the program:\n\n1. x and y are assigned non-deterministic integer values.\n2. res is initialized to 0.\n3. min is assigned the minimum value between x and y.\n\nNow, let's analyze the loop:\n\n1. The loop condition is (min == y).\n2. Inside the loop, y is incremented by 1, and res is incremented by 1.\n3. min is updated with the minimum value between x and y.\n\nNow, let's find the necessary loop invariants of the while loop:\n\n1. Before the loop execution, res is initialized to 0.\n2. In every iteration of the loop, res is incremented by 1 if (min == y).\n3. After the loop termination, (min != y) should hold.\n\nWe can now write the loop invariants for the loop in the program:\n\n```\n/*@ \n    loop invariant res >= 0;\n    loop invariant y - min <= res;\n    loop invariant (min != y) ==> (res == y - \\at(y, Pre));\n*/\n```"
                ],
                "output": [
                    "/*@ \n    loop invariant x == \\at(x, Pre) && y <= \\at(y, Pre) + res;\n    loop invariant 0 <= res && res <= y - \\at(y, Pre);\n    loop invariant min == x || min == y;\n*/",
                    "/*@ \n    loop invariant min <= x;\n    loop invariant min <= y;\n    loop invariant res >= 0;\n    loop invariant y == min + res;\n*/",
                    "/*@ \n    loop invariant min <= x;\n    loop invariant min <= y;\n    loop invariant min == x || min == y;\n    loop invariant y <= x + res;\n    loop invariant res >= 0;\n*/",
                    "/*@ \n    loop invariant 0 <= res;\n    loop invariant res == y - \\at(y, Pre);\n    loop invariant (min == x) ==> (x <= y);\n    loop invariant (min == y) ==> (x > y);\n*/",
                    "/*@ \n    loop invariant res >= 0;\n    loop invariant y - min <= res;\n    loop invariant (min != y) ==> (res == y - \\at(y, Pre));\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x == \\at(x, Pre) && y <= \\at(y, Pre) + res;\n    loop invariant 0 <= res && res <= y - \\at(y, Pre);\n    loop invariant min == x || min == y;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 20: unbound logic variable y. Ignoring loop annotation"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant min <= x;\n    loop invariant min <= y;\n    loop invariant res >= 0;\n    loop invariant y == min + res;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant min <= x is inductive.\nloop invariant min <= y is inductive.\nloop invariant res >= 0 is inductive.\nloop invariant y == min + res is neither established nor preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant min <= x;\n    loop invariant min <= y;\n    loop invariant min == x || min == y;\n    loop invariant y <= x + res;\n    loop invariant res >= 0;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant min <= x is inductive.\nloop invariant min <= y is inductive.\nloop invariant min == x || min == y is inductive.\nloop invariant y <= x + res is preserved but not established.\nloop invariant res >= 0 is inductive.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= res;\n    loop invariant res == y - \\at(y, Pre);\n    loop invariant (min == x) ==> (x <= y);\n    loop invariant (min == y) ==> (x > y);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 21: unbound logic variable y. Ignoring loop annotation"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant res >= 0;\n    loop invariant y - min <= res;\n    loop invariant (min != y) ==> (res == y - \\at(y, Pre));\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 22: unbound logic variable y. Ignoring loop annotation"
                    }
                ],
                "success": false
            },
            {
                "step": "Houdini for individual completion",
                "success": true,
                "completions": [
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x == \\at(x, Pre) && y <= \\at(y, Pre) + res;\n    loop invariant 0 <= res && res <= y - \\at(y, Pre);\n    loop invariant min == x || min == y;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int x;\n    int y;\n    int res;\n    int min;\n    x = unknown_int();\n    y = unknown_int();\n    res = 0;\n    \n    if (x < y) { min = x; }\n    else { min = y; }\n    \n    /*@\n\n\nloop invariant i3: min == x || min == y;\n*/\nwhile (min == y) {\n        y = y+1;\n        res = res+1;\n        if (x < y) { min = x; }\n        else { min = y; }\n    }\n    \n    return 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant min <= x;\n    loop invariant min <= y;\n    loop invariant res >= 0;\n    loop invariant y == min + res;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int x;\n    int y;\n    int res;\n    int min;\n    x = unknown_int();\n    y = unknown_int();\n    res = 0;\n    \n    if (x < y) { min = x; }\n    else { min = y; }\n    \n    /*@\nloop invariant i1: min <= x;\nloop invariant i2: min <= y;\nloop invariant i3: res >= 0;\n\n*/\nwhile (min == y) {\n        y = y+1;\n        res = res+1;\n        if (x < y) { min = x; }\n        else { min = y; }\n    }\n    \n    return 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant min <= x;\n    loop invariant min <= y;\n    loop invariant min == x || min == y;\n    loop invariant y <= x + res;\n    loop invariant res >= 0;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int x;\n    int y;\n    int res;\n    int min;\n    x = unknown_int();\n    y = unknown_int();\n    res = 0;\n    \n    if (x < y) { min = x; }\n    else { min = y; }\n    \n    /*@\nloop invariant i1: min <= x;\nloop invariant i2: min <= y;\nloop invariant i3: min == x || min == y;\n\nloop invariant i5: res >= 0;\n*/\nwhile (min == y) {\n        y = y+1;\n        res = res+1;\n        if (x < y) { min = x; }\n        else { min = y; }\n    }\n    \n    return 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= res;\n    loop invariant res == y - \\at(y, Pre);\n    loop invariant (min == x) ==> (x <= y);\n    loop invariant (min == y) ==> (x > y);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int x;\n    int y;\n    int res;\n    int min;\n    x = unknown_int();\n    y = unknown_int();\n    res = 0;\n    \n    if (x < y) { min = x; }\n    else { min = y; }\n    \n    /*@\nloop invariant i1: 0 <= res;\n\nloop invariant i3: (min == x) ==> (x <= y);\n\n*/\nwhile (min == y) {\n        y = y+1;\n        res = res+1;\n        if (x < y) { min = x; }\n        else { min = y; }\n    }\n    \n    return 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant res >= 0;\n    loop invariant y - min <= res;\n    loop invariant (min != y) ==> (res == y - \\at(y, Pre));\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int x;\n    int y;\n    int res;\n    int min;\n    x = unknown_int();\n    y = unknown_int();\n    res = 0;\n    \n    if (x < y) { min = x; }\n    else { min = y; }\n    \n    /*@\nloop invariant i1: res >= 0;\n\n\n*/\nwhile (min == y) {\n        y = y+1;\n        res = res+1;\n        if (x < y) { min = x; }\n        else { min = y; }\n    }\n    \n    return 0;\n}",
                        "checker_output_after_prune": true
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 7,
                "success": true,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int x;\n    int y;\n    int res;\n    int min;\n    x = unknown_int();\n    y = unknown_int();\n    res = 0;\n    \n    if (x < y) { min = x; }\n    else { min = y; }\n    \n    /*@\n\n\nloop invariant i3: min == x || min == y;\nloop invariant i4: min <= x;\nloop invariant i5: min <= y;\nloop invariant i6: res >= 0;\n\n\nloop invariant i13: 0 <= res;\n\nloop invariant i15: (min == x) ==> (x <= y);\n\n\n\n*/\nwhile (min == y) {\n        y = y+1;\n        res = res+1;\n        if (x < y) { min = x; }\n        else { min = y; }\n    }\n    \n    return 0;\n}",
                "checker_output": true
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int x;\n    int y;\n    int res;\n    int min;\n    x = unknown_int();\n    y = unknown_int();\n    res = 0;\n    \n    if (x < y) { min = x; }\n    else { min = y; }\n    \n    while (min == y) {\n        y = y+1;\n        res = res+1;\n        if (x < y) { min = x; }\n        else { min = y; }\n    }\n    \n    return 0;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, we need to identify the loop in the given program. The loop is:\n\n```\nwhile (min == y) {\n    y = y+1;\n    res = res+1;\n    if (x < y) { min = x; }\n    else { min = y; }\n}\n```\n\nNow, let's find the ranking function for this loop. We can notice that the value of `y` increases in every iteration of the loop (`y = y+1`). The loop continues executing as long as `min == y`. The value of `min` will be updated based on the comparison between `x` and `y`. When `x < y`, `min` will be set to `x`, and the loop will terminate.\n\nA suitable ranking function for this loop is `y`. This is because `y` is positive for the loop to continue executing, and its value decreases with every successive iteration (since it is incremented by 1 in each iteration).\n\nThe ranking function in ACSL syntax would be:\n\n```\n/*@\n    loop variant y;\n*/\n```\n\nThis ranking function is valid because it satisfies the conditions required for a ranking function: it is positive for the loop to continue executing, and its value decreases with every successive iteration.",
                    "First, let's identify the loop in the given program:\n\n```\nwhile (min == y) {\n    y = y+1;\n    res = res+1;\n    if (x < y) { min = x; }\n    else { min = y; }\n}\n```\n\nNow, let's find the ranking function for this loop. We can use the variable `y` as the ranking function, as it decreases in each iteration of the loop. The loop continues as long as `min == y`. Since `y` increases in each iteration, the loop must eventually terminate when `min != y`. So, the ranking function is `y`.\n\nIn ACSL syntax, the ranking function can be written as:\n\n```\n/*@\n    loop variant y;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. The value of `y` is positive for the loop to continue executing (`min == y`).\n2. The value of `y` increases with every successive iteration of the loop, and the loop terminates when `min != y`.",
                    "First, let's analyze the loop:\n\n```\nwhile (min == y) {\n    y = y+1;\n    res = res+1;\n    if (x < y) { min = x; }\n    else { min = y; }\n}\n```\n\nThe loop continues to execute as long as `min == y`. Inside the loop, `y` is incremented by 1 in each iteration. The value of `min` is updated based on the comparison of `x` and `y`. \n\nNow, let's find the ranking function. We need an expression that decreases with each iteration and is positive for the loop to continue executing. In this case, we can use the difference between `x` and `y` as the ranking function:\n\n```\n/*@\n    loop variant x - y;\n*/\n```\n\nThe value of `x - y` is positive when `x > y`, and since `min == y`, the loop will continue executing. In each iteration, `y` is incremented by 1, causing the value of `x - y` to decrease. Since the value of `x` doesn't change inside the loop, the value of the ranking function must eventually reach a non-positive value, causing the loop to terminate.\n\nThus, `x - y` is a valid ranking function for this loop.",
                    "First, let's analyze the loop conditions and variables involved in the loop:\n\n1. The loop continues executing as long as `min == y`.\n2. Inside the loop, `y` is incremented by 1 in each iteration.\n3. `min` is set to the minimum of `x` and `y` in each iteration.\n\nNow, let's find a ranking function for this loop. We want an expression that decreases with every successive iteration of the loop and is positive for the loop to continue executing.\n\nWe can use the difference between `x` and `y` as the ranking function. Let's denote this difference as `v = x - y`.\n\nNow let's verify if this is a valid ranking function:\n\n1. The value of `v` is positive for the loop to continue executing: As long as `min == y`, which means `x > y`, the difference `v = x - y` will be positive.\n2. The value of `v` decreases with every successive iteration of the loop: Since `y` is incremented by 1 in each iteration, the difference `v = x - y` will decrease by 1 in each iteration.\n\nNow let's write the ranking function in ACSL syntax:\n\n```c\n/*@\n    loop variant x - y;\n*/\n```\n\nSo the ranking function is `x - y`, and it is valid because it is positive for the loop to continue executing and decreases with every successive iteration of the loop, which guarantees the termination of the loop.",
                    "First, let's identify the loop in the program:\n\n```\nwhile (min == y) {\n    y = y+1;\n    res = res+1;\n    if (x < y) { min = x; }\n    else { min = y; }\n}\n```\n\nNow, let's find the ranking function for this loop. We can see that the value of `y` increases by 1 in every iteration of the loop. The loop continues to execute as long as `min == y`. Since `y` is always increasing and `min` is either assigned the value of `x` or `y`, the loop will eventually terminate when `min` is assigned the value of `x`.\n\nA possible ranking function for this loop is the difference between the values of `x` and `y`. Here's the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x - y;\n*/\n```\n\nThis ranking function is valid because:\n\n1. The value of the expression `x - y` is positive for the loop to continue executing, as `min == y` implies `x > y`.\n2. The value of the expression `x - y` decreases with every successive iteration of the loop since `y` increases by 1 in every iteration and `x` remains constant."
                ],
                "output": [
                    "/*@\n    loop variant y;\n*/",
                    "/*@\n    loop variant y;\n*/",
                    "/*@\n    loop variant x - y;\n*/",
                    "/*@\n    loop variant x - y;\n*/",
                    "/*@\n    loop variant x - y;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int x;\n    int y;\n    int res;\n    int min;\n    x = unknown_int();\n    y = unknown_int();\n    res = 0;\n    \n    if (x < y) { min = x; }\n    else { min = y; }\n    \n    /*@\nloop invariant i3: min == x || min == y;\nloop invariant i4: min <= x;\nloop invariant i5: min <= y;\nloop invariant i6: res >= 0;\nloop invariant i13: 0 <= res;\nloop invariant i15: (min == x) ==> (x <= y);\nloop variant y;\n*/\nwhile (min == y) {\n        y = y+1;\n        res = res+1;\n        if (x < y) { min = x; }\n        else { min = y; }\n    }\n    \n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant min == x || min == y is inductive.\nloop invariant min <= x is inductive.\nloop invariant min <= y is inductive.\nloop invariant res >= 0 is inductive.\nloop invariant 0 <= res is inductive.\nloop invariant (min == x) ==> (x <= y) is inductive.\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int x;\n    int y;\n    int res;\n    int min;\n    x = unknown_int();\n    y = unknown_int();\n    res = 0;\n    \n    if (x < y) { min = x; }\n    else { min = y; }\n    \n    /*@\nloop invariant i3: min == x || min == y;\nloop invariant i4: min <= x;\nloop invariant i5: min <= y;\nloop invariant i6: res >= 0;\nloop invariant i13: 0 <= res;\nloop invariant i15: (min == x) ==> (x <= y);\nloop variant y;\n*/\nwhile (min == y) {\n        y = y+1;\n        res = res+1;\n        if (x < y) { min = x; }\n        else { min = y; }\n    }\n    \n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant min == x || min == y is inductive.\nloop invariant min <= x is inductive.\nloop invariant min <= y is inductive.\nloop invariant res >= 0 is inductive.\nloop invariant 0 <= res is inductive.\nloop invariant (min == x) ==> (x <= y) is inductive.\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int x;\n    int y;\n    int res;\n    int min;\n    x = unknown_int();\n    y = unknown_int();\n    res = 0;\n    \n    if (x < y) { min = x; }\n    else { min = y; }\n    \n    /*@\nloop invariant i3: min == x || min == y;\nloop invariant i4: min <= x;\nloop invariant i5: min <= y;\nloop invariant i6: res >= 0;\nloop invariant i13: 0 <= res;\nloop invariant i15: (min == x) ==> (x <= y);\nloop variant x - y;\n*/\nwhile (min == y) {\n        y = y+1;\n        res = res+1;\n        if (x < y) { min = x; }\n        else { min = y; }\n    }\n    \n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant min == x || min == y is inductive.\nloop invariant min <= x is inductive.\nloop invariant min <= y is inductive.\nloop invariant res >= 0 is inductive.\nloop invariant 0 <= res is inductive.\nloop invariant (min == x) ==> (x <= y) is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int x;\n    int y;\n    int res;\n    int min;\n    x = unknown_int();\n    y = unknown_int();\n    res = 0;\n    \n    if (x < y) { min = x; }\n    else { min = y; }\n    \n    /*@\nloop invariant i3: min == x || min == y;\nloop invariant i4: min <= x;\nloop invariant i5: min <= y;\nloop invariant i6: res >= 0;\nloop invariant i13: 0 <= res;\nloop invariant i15: (min == x) ==> (x <= y);\nloop variant x - y;\n*/\nwhile (min == y) {\n        y = y+1;\n        res = res+1;\n        if (x < y) { min = x; }\n        else { min = y; }\n    }\n    \n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant min == x || min == y is inductive.\nloop invariant min <= x is inductive.\nloop invariant min <= y is inductive.\nloop invariant res >= 0 is inductive.\nloop invariant 0 <= res is inductive.\nloop invariant (min == x) ==> (x <= y) is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int x;\n    int y;\n    int res;\n    int min;\n    x = unknown_int();\n    y = unknown_int();\n    res = 0;\n    \n    if (x < y) { min = x; }\n    else { min = y; }\n    \n    /*@\nloop invariant i3: min == x || min == y;\nloop invariant i4: min <= x;\nloop invariant i5: min <= y;\nloop invariant i6: res >= 0;\nloop invariant i13: 0 <= res;\nloop invariant i15: (min == x) ==> (x <= y);\nloop variant x - y;\n*/\nwhile (min == y) {\n        y = y+1;\n        res = res+1;\n        if (x < y) { min = x; }\n        else { min = y; }\n    }\n    \n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant min == x || min == y is inductive.\nloop invariant min <= x is inductive.\nloop invariant min <= y is inductive.\nloop invariant res >= 0 is inductive.\nloop invariant 0 <= res is inductive.\nloop invariant (min == x) ==> (x <= y) is inductive.\n\nLoop variant is Valid.\n"
                    }
                ],
                "success": true
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB6.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusMin.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Thun_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_flag.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex2_true-termination.c"
        ],
        "skipped": [],
        "total": 149,
        "success_count": 69,
        "failure_count": 80,
        "success_rate": 0.46308724832214765
    }
}