{
    "logs": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, j, an, bn;\n\ti = unknown_int();\n\tj = unknown_int();\n\tan = unknown_int();\n\tbn = unknown_int();\n\twhile ((an >= i && bn >= j) || (an >= i && bn <= j) || (an <= i && bn >= j)) {\n\t\tif (an >= i && bn >= j) {\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\tj = j + 1;\n\t\t\t} else {\n\t\t\t\ti = i + 1;\n\t\t\t}\n\t\t} else {if (an >= i && bn <= j) {\n\t\t\ti = i + 1;\n\t\t} else {if (an <= i && bn >= j) {\n\t\t\tj = j + 1;\n\t\t}}}\n\t}\n\treturn 0;\n}",
        "success": true,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, j, an, bn;\n\ti = unknown_int();\n\tj = unknown_int();\n\tan = unknown_int();\n\tbn = unknown_int();\n\twhile ((an >= i && bn >= j) || (an >= i && bn <= j) || (an <= i && bn >= j)) {\n\t\tif (an >= i && bn >= j) {\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\tj = j + 1;\n\t\t\t} else {\n\t\t\t\ti = i + 1;\n\t\t\t}\n\t\t} else {if (an >= i && bn <= j) {\n\t\t\ti = i + 1;\n\t\t} else {if (an <= i && bn >= j) {\n\t\t\tj = j + 1;\n\t\t}}}\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "First, let's analyze the pre-conditions or variable assignments in the program:\n- i, j, an, and bn are assigned non-deterministic integer values.\n- The while loop condition is a disjunction of three conditions: (an >= i && bn >= j), (an >= i && bn <= j), and (an <= i && bn >= j).\n\nNow, let's find the loop invariants. We need invariants that hold before the loop execution, in every iteration, and after the loop termination. \n\nIn this case, we have a loop invariant for the relation between an, bn, i, and j:\n\n```\n/*@ \n    loop invariant (an >= i && bn >= j) || (an >= i && bn <= j) || (an <= i && bn >= j);\n    loop invariant i <= an;\n    loop invariant j <= bn;\n*/\n```\n\nThese invariants imply the post condition. The loop invariant (an >= i && bn >= j) || (an >= i && bn <= j) || (an <= i && bn >= j) is the same as the loop condition, and it holds before the loop execution, in every iteration, and after the loop termination. The invariants i <= an and j <= bn establish the relationship between i, j, an, and bn. They are maintained by the loop body, ensuring that i and j never exceed an and bn, respectively.",
                    "First, let's note the initial values of variables and the loop condition:\n- i, j, an, and bn are assigned non-deterministic values.\n- Loop condition: (an >= i && bn >= j) || (an >= i && bn <= j) || (an <= i && bn >= j)\n\nNow, let's determine the loop invariants:\n- i and j are non-negative.\n- an and bn are non-negative.\n- Either an >= i or bn >= j, as the loop condition requires it.\n\nHere are the loop invariants for the given program:\n\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant j >= 0;\n    loop invariant an >= 0;\n    loop invariant bn >= 0;\n    loop invariant an >= i || bn >= j;\n*/\n```",
                    "First, let's note the pre-conditions or variable assignments in the program:\n- i, j, an, and bn are assigned non-deterministic integer values.\n\nNext, analyze the loop body and make a note of the loop condition:\n- The loop condition is `(an >= i && bn >= j) || (an >= i && bn <= j) || (an <= i && bn >= j)`.\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant (an >= i && bn >= j) ==> (j <= bn);\n    loop invariant (an >= i && bn <= j) ==> (i <= an);\n    loop invariant (an <= i && bn >= j) ==> (j <= bn);\n*/\n```\n\nThese loop invariants hold true before the loop execution, in every iteration of the loop, and after the loop termination. They help Frama-C verify the post-condition.",
                    "First, let's analyze the pre-conditions or variable assignments in the program:\ni, j, an, and bn are all assigned non-deterministic values through unknown_int().\n\nNow, let's analyze the loop condition:\nThe loop condition is (an >= i && bn >= j) || (an >= i && bn <= j) || (an <= i && bn >= j).\n\nNow, let's write the loop invariants:\n```\n/*@ \n    loop invariant i <= an;\n    loop invariant j <= bn;\n    loop invariant (an >= i && bn >= j) ==> j <= bn;\n    loop invariant (an >= i && bn >= j) ==> i <= an;\n    loop invariant (an >= i && bn <= j) ==> i <= an;\n    loop invariant (an <= i && bn >= j) ==> j <= bn;\n*/\n```\n\nThese loop invariants are true:\n(i) before the loop execution, \n(ii) in every iteration of the loop, and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.",
                    "First, let's make a note of the variable assignments and pre-conditions in the program:\n\n1. i = unknown_int();\n2. j = unknown_int();\n3. an = unknown_int();\n4. bn = unknown_int();\n\nNext, let's analyze the loop body and make a note of the loop condition:\n\nThe loop condition is (an >= i && bn >= j) || (an >= i && bn <= j) || (an <= i && bn >= j).\n\nNow, we can output the loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant (an >= i && bn >= j) ==> (an >= i) && (bn >= j);\n    loop invariant (an >= i && bn <= j) ==> (an >= i) && (bn <= j);\n    loop invariant (an <= i && bn >= j) ==> (an <= i) && (bn >= j);\n*/\n```\n\nThese loop invariants are true:\n(i) before the loop execution,\n(ii) in every iteration of the loop, and\n(iii) after the loop termination, such that the loop invariants imply the post-condition."
                ],
                "output": [
                    "/*@ \n    loop invariant (an >= i && bn >= j) || (an >= i && bn <= j) || (an <= i && bn >= j);\n    loop invariant i <= an;\n    loop invariant j <= bn;\n*/",
                    "/*@ \n    loop invariant i >= 0;\n    loop invariant j >= 0;\n    loop invariant an >= 0;\n    loop invariant bn >= 0;\n    loop invariant an >= i || bn >= j;\n*/",
                    "/*@ \n    loop invariant (an >= i && bn >= j) ==> (j <= bn);\n    loop invariant (an >= i && bn <= j) ==> (i <= an);\n    loop invariant (an <= i && bn >= j) ==> (j <= bn);\n*/",
                    "/*@ \n    loop invariant i <= an;\n    loop invariant j <= bn;\n    loop invariant (an >= i && bn >= j) ==> j <= bn;\n    loop invariant (an >= i && bn >= j) ==> i <= an;\n    loop invariant (an >= i && bn <= j) ==> i <= an;\n    loop invariant (an <= i && bn >= j) ==> j <= bn;\n*/",
                    "/*@ \n    loop invariant (an >= i && bn >= j) ==> (an >= i) && (bn >= j);\n    loop invariant (an >= i && bn <= j) ==> (an >= i) && (bn <= j);\n    loop invariant (an <= i && bn >= j) ==> (an <= i) && (bn >= j);\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant (an >= i && bn >= j) || (an >= i && bn <= j) || (an <= i && bn >= j);\n    loop invariant i <= an;\n    loop invariant j <= bn;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant (an >= i && bn >= j) || (an >= i && bn <= j) || (an <= i && bn >= j) is preserved but not established.\nloop invariant i <= an is neither established nor preserved.\nloop invariant j <= bn is neither established nor preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant i >= 0;\n    loop invariant j >= 0;\n    loop invariant an >= 0;\n    loop invariant bn >= 0;\n    loop invariant an >= i || bn >= j;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant i >= 0 is preserved but not established.\nloop invariant j >= 0 is preserved but not established.\nloop invariant an >= 0 is preserved but not established.\nloop invariant bn >= 0 is preserved but not established.\nloop invariant an >= i || bn >= j is neither established nor preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": true,
                        "invariants": "/*@ \n    loop invariant (an >= i && bn >= j) ==> (j <= bn);\n    loop invariant (an >= i && bn <= j) ==> (i <= an);\n    loop invariant (an <= i && bn >= j) ==> (j <= bn);\n*/",
                        "checker_output_for_invariants": true,
                        "checker_message_for_invariants": "loop invariant (an >= i && bn >= j) ==> (j <= bn) is inductive.\nloop invariant (an >= i && bn <= j) ==> (i <= an) is inductive.\nloop invariant (an <= i && bn >= j) ==> (j <= bn) is inductive.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant i <= an;\n    loop invariant j <= bn;\n    loop invariant (an >= i && bn >= j) ==> j <= bn;\n    loop invariant (an >= i && bn >= j) ==> i <= an;\n    loop invariant (an >= i && bn <= j) ==> i <= an;\n    loop invariant (an <= i && bn >= j) ==> j <= bn;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant i <= an is neither established nor preserved.\nloop invariant j <= bn is neither established nor preserved.\nloop invariant (an >= i && bn >= j) ==> j <= bn is inductive.\nloop invariant (an >= i && bn >= j) ==> i <= an is inductive.\nloop invariant (an >= i && bn <= j) ==> i <= an is inductive.\nloop invariant (an <= i && bn >= j) ==> j <= bn is inductive.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": true,
                        "invariants": "/*@ \n    loop invariant (an >= i && bn >= j) ==> (an >= i) && (bn >= j);\n    loop invariant (an >= i && bn <= j) ==> (an >= i) && (bn <= j);\n    loop invariant (an <= i && bn >= j) ==> (an <= i) && (bn >= j);\n*/",
                        "checker_output_for_invariants": true,
                        "checker_message_for_invariants": "loop invariant (an >= i && bn >= j) ==> (an >= i) && (bn >= j) is inductive.\nloop invariant (an >= i && bn <= j) ==> (an >= i) && (bn <= j) is inductive.\nloop invariant (an <= i && bn >= j) ==> (an <= i) && (bn >= j) is inductive.\n\n"
                    }
                ],
                "success": true
            },
            {
                "step": "Houdini for individual completion",
                "success": true,
                "completions": [
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant (an >= i && bn >= j) || (an >= i && bn <= j) || (an <= i && bn >= j);\n    loop invariant i <= an;\n    loop invariant j <= bn;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, j, an, bn;\n\ti = unknown_int();\n\tj = unknown_int();\n\tan = unknown_int();\n\tbn = unknown_int();\n\t/*@\n\n\n\n*/\nwhile ((an >= i && bn >= j) || (an >= i && bn <= j) || (an <= i && bn >= j)) {\n\t\tif (an >= i && bn >= j) {\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\tj = j + 1;\n\t\t\t} else {\n\t\t\t\ti = i + 1;\n\t\t\t}\n\t\t} else {if (an >= i && bn <= j) {\n\t\t\ti = i + 1;\n\t\t} else {if (an <= i && bn >= j) {\n\t\t\tj = j + 1;\n\t\t}}}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant i >= 0;\n    loop invariant j >= 0;\n    loop invariant an >= 0;\n    loop invariant bn >= 0;\n    loop invariant an >= i || bn >= j;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, j, an, bn;\n\ti = unknown_int();\n\tj = unknown_int();\n\tan = unknown_int();\n\tbn = unknown_int();\n\t/*@\n\n\n\n\n\n*/\nwhile ((an >= i && bn >= j) || (an >= i && bn <= j) || (an <= i && bn >= j)) {\n\t\tif (an >= i && bn >= j) {\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\tj = j + 1;\n\t\t\t} else {\n\t\t\t\ti = i + 1;\n\t\t\t}\n\t\t} else {if (an >= i && bn <= j) {\n\t\t\ti = i + 1;\n\t\t} else {if (an <= i && bn >= j) {\n\t\t\tj = j + 1;\n\t\t}}}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 0,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant (an >= i && bn >= j) ==> (j <= bn);\n    loop invariant (an >= i && bn <= j) ==> (i <= an);\n    loop invariant (an <= i && bn >= j) ==> (j <= bn);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, j, an, bn;\n\ti = unknown_int();\n\tj = unknown_int();\n\tan = unknown_int();\n\tbn = unknown_int();\n\t/*@\nloop invariant i1: (an >= i && bn >= j) ==> (j <= bn);\nloop invariant i2: (an >= i && bn <= j) ==> (i <= an);\nloop invariant i3: (an <= i && bn >= j) ==> (j <= bn);\n*/\nwhile ((an >= i && bn >= j) || (an >= i && bn <= j) || (an <= i && bn >= j)) {\n\t\tif (an >= i && bn >= j) {\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\tj = j + 1;\n\t\t\t} else {\n\t\t\t\ti = i + 1;\n\t\t\t}\n\t\t} else {if (an >= i && bn <= j) {\n\t\t\ti = i + 1;\n\t\t} else {if (an <= i && bn >= j) {\n\t\t\tj = j + 1;\n\t\t}}}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant i <= an;\n    loop invariant j <= bn;\n    loop invariant (an >= i && bn >= j) ==> j <= bn;\n    loop invariant (an >= i && bn >= j) ==> i <= an;\n    loop invariant (an >= i && bn <= j) ==> i <= an;\n    loop invariant (an <= i && bn >= j) ==> j <= bn;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, j, an, bn;\n\ti = unknown_int();\n\tj = unknown_int();\n\tan = unknown_int();\n\tbn = unknown_int();\n\t/*@\n\n\n\n\n\n\n*/\nwhile ((an >= i && bn >= j) || (an >= i && bn <= j) || (an <= i && bn >= j)) {\n\t\tif (an >= i && bn >= j) {\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\tj = j + 1;\n\t\t\t} else {\n\t\t\t\ti = i + 1;\n\t\t\t}\n\t\t} else {if (an >= i && bn <= j) {\n\t\t\ti = i + 1;\n\t\t} else {if (an <= i && bn >= j) {\n\t\t\tj = j + 1;\n\t\t}}}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 0,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant (an >= i && bn >= j) ==> (an >= i) && (bn >= j);\n    loop invariant (an >= i && bn <= j) ==> (an >= i) && (bn <= j);\n    loop invariant (an <= i && bn >= j) ==> (an <= i) && (bn >= j);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, j, an, bn;\n\ti = unknown_int();\n\tj = unknown_int();\n\tan = unknown_int();\n\tbn = unknown_int();\n\t/*@\nloop invariant i1: (an >= i && bn >= j) ==> (an >= i) && (bn >= j);\nloop invariant i2: (an >= i && bn <= j) ==> (an >= i) && (bn <= j);\nloop invariant i3: (an <= i && bn >= j) ==> (an <= i) && (bn >= j);\n*/\nwhile ((an >= i && bn >= j) || (an >= i && bn <= j) || (an <= i && bn >= j)) {\n\t\tif (an >= i && bn >= j) {\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\tj = j + 1;\n\t\t\t} else {\n\t\t\t\ti = i + 1;\n\t\t\t}\n\t\t} else {if (an >= i && bn <= j) {\n\t\t\ti = i + 1;\n\t\t} else {if (an <= i && bn >= j) {\n\t\t\tj = j + 1;\n\t\t}}}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 2,
                "success": true,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, j, an, bn;\n\ti = unknown_int();\n\tj = unknown_int();\n\tan = unknown_int();\n\tbn = unknown_int();\n\t/*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i18: (an >= i && bn >= j) ==> (an >= i) && (bn >= j);\nloop invariant i19: (an >= i && bn <= j) ==> (an >= i) && (bn <= j);\nloop invariant i20: (an <= i && bn >= j) ==> (an <= i) && (bn >= j);\n*/\nwhile ((an >= i && bn >= j) || (an >= i && bn <= j) || (an <= i && bn >= j)) {\n\t\tif (an >= i && bn >= j) {\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\tj = j + 1;\n\t\t\t} else {\n\t\t\t\ti = i + 1;\n\t\t\t}\n\t\t} else {if (an >= i && bn <= j) {\n\t\t\ti = i + 1;\n\t\t} else {if (an <= i && bn >= j) {\n\t\t\tj = j + 1;\n\t\t}}}\n\t}\n\treturn 0;\n}",
                "checker_output": true
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, j, an, bn;\n\ti = unknown_int();\n\tj = unknown_int();\n\tan = unknown_int();\n\tbn = unknown_int();\n\twhile ((an >= i && bn >= j) || (an >= i && bn <= j) || (an <= i && bn >= j)) {\n\t\tif (an >= i && bn >= j) {\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\tj = j + 1;\n\t\t\t} else {\n\t\t\t\ti = i + 1;\n\t\t\t}\n\t\t} else {if (an >= i && bn <= j) {\n\t\t\ti = i + 1;\n\t\t} else {if (an <= i && bn >= j) {\n\t\t\tj = j + 1;\n\t\t}}}\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, we need to identify the loop invariant and the conditions that must hold for the loop to continue executing. In this case, the loop continues executing while at least one of the following conditions is true:\n\n1. an >= i && bn >= j\n2. an >= i && bn <= j\n3. an <= i && bn >= j\n\nNow, we need to find a ranking function that decreases with every successive iteration of the loop and is positive for the loop to continue executing.\n\nWe can use the lexicographic ranking function (i, j) for this loop. Here's the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant an - i;\n    loop variant bn - j;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. The values of `an - i` and `bn - j` are positive for the loop to continue executing, as per the conditions mentioned above.\n2. With each iteration of the loop, either `i` increases, or `j` increases, or both. This means that the value of `an - i` and/or `bn - j` must decrease in each iteration.\n\nUsing this lexicographic ranking function, we can prove that the loop must terminate, as the values of `an - i` and `bn - j` will eventually become non-positive, causing the loop to exit.",
                    "First, let's simplify the loop condition. The loop condition can be rewritten as (an >= i || bn >= j), because if any one of the conditions inside the parentheses is true, the loop will continue.\n\nNow, let's find the ranking function for the given loop.\n\nThe loop has three branches with different updates to the variables i and j. In the first branch, either i is incremented or j is incremented. In the second branch, i is incremented. In the third branch, j is incremented.\n\nLet's consider the lexicographic ranking function (an - i, bn - j). This ranking function is valid for the given loop because:\n\n1. The values of the expressions are positive for the loop to execute. Since the loop condition is (an >= i || bn >= j), either (an - i) is positive or (bn - j) is positive, or both are positive.\n\n2. The value of the first expression (an - i) can decrease or remain the same. If the second or third branch is executed, i is incremented, and (an - i) decreases. If the first branch is executed and j is incremented, (an - i) remains the same.\n\n3. If the value of the first expression (an - i) remains the same, the value of the second expression (bn - j) must decrease. This happens when the first branch is executed and j is incremented. In this case, (bn - j) decreases.\n\nNow, let's write the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant an - i;\n    loop variant bn - j;\n*/\n```\n\nThis is a valid ranking function because it satisfies all the conditions for a lexicographic ranking function, and it guarantees the termination of the loop.",
                    "First, let's analyze the loop condition:\n\nThe loop continues executing while at least one of the following conditions is true:\n1. an >= i and bn >= j\n2. an >= i and bn <= j\n3. an <= i and bn >= j\n\nNow let's consider the possible cases inside the loop:\n\n1. If an >= i and bn >= j, either i increases by 1 or j increases by 1.\n2. If an >= i and bn <= j, i increases by 1.\n3. If an <= i and bn >= j, j increases by 1.\n\nWe can express the ranking function as the lexicographic tuple (an - i, bn - j). Now let's show that this is a valid ranking function:\n\n1. The values of an - i and bn - j are positive when entering the loop: This is true because the loop condition ensures that at least one of the conditions (an >= i or bn >= j) is true.\n\n2. The value of the ranking function decreases with every iteration of the loop: In each iteration, either i or j increases by 1, which means either an - i or bn - j decreases. Furthermore, since i and j never decrease, the decrease in the ranking function is guaranteed.\n\nTherefore, the ranking function (an - i, bn - j) is valid. We can express it in ACSL syntax as:\n\n```\n/*@\n    loop variant an - i, bn - j;\n*/\n```",
                    "First, let's analyze the loop conditions. The loop will continue executing as long as at least one of the following conditions is true:\n\n1. an >= i and bn >= j\n2. an >= i and bn <= j\n3. an <= i and bn >= j\n\nNow, let's consider the loop body. There are three cases:\n\n1. If an >= i and bn >= j: i or j will increase by 1.\n2. If an >= i and bn <= j: i will increase by 1.\n3. If an <= i and bn >= j: j will increase by 1.\n\nFrom the analysis, we can find the ranking function for this loop as follows:\n\n```\n/*@\n    loop variant an - i + bn - j;\n*/\n```\n\nThis ranking function is valid because:\n\n1. The value of the ranking function is initially non-negative since `an - i` and `bn - j` are both non-negative due to the loop condition.\n2. In each iteration, the value of the ranking function decreases by at least 1, as either i or j will increase by 1.\n3. The loop will not execute when the value of the ranking function becomes negative, which means that the loop must terminate eventually.",
                    "First, let's analyze the loop. The loop has three cases that need to be considered. In each case, either `i` or `j` will be incremented by 1:\n\n1. `an >= i && bn >= j`\n2. `an >= i && bn <= j`\n3. `an <= i && bn >= j`\n\nNow we need to find a ranking function that decreases in each iteration of the loop and is positive as long as the loop continues executing. We can use the lexicographic ranking function with two expressions: `(an - i)` and `(bn - j)`.\n\nThe ranking function is valid because:\n\n- Both `(an - i)` and `(bn - j)` are positive as long as the loop continues executing.\n- In each iteration of the loop, either `i` or `j` is incremented, which means either `(an - i)` or `(bn - j)` will decrease.\n\nHere is the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant an - i;\n    loop variant bn - j;\n*/\n```"
                ],
                "output": [
                    "/*@\n    loop variant an - i;\n    loop variant bn - j;\n*/",
                    "/*@\n    loop variant an - i;\n    loop variant bn - j;\n*/",
                    "/*@\n    loop variant an - i, bn - j;\n*/",
                    "/*@\n    loop variant an - i + bn - j;\n*/",
                    "/*@\n    loop variant an - i;\n    loop variant bn - j;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, j, an, bn;\n\ti = unknown_int();\n\tj = unknown_int();\n\tan = unknown_int();\n\tbn = unknown_int();\n\t//@ ghost variant_expression measure = { an - i, bn - j };\n/*@\nloop invariant i18: (an >= i && bn >= j) ==> (an >= i) && (bn >= j);\nloop invariant i19: (an >= i && bn <= j) ==> (an >= i) && (bn <= j);\nloop invariant i20: (an <= i && bn >= j) ==> (an <= i) && (bn >= j);\nloop invariant measure.a == an - i && measure.b == bn - j;\nloop variant measure for lexicographic;\n*/\nwhile ((an >= i && bn >= j) || (an >= i && bn <= j) || (an <= i && bn >= j)) {\n\t\tif (an >= i && bn >= j) {\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\tj = j + 1;\n\t\t\t} else {\n\t\t\t\ti = i + 1;\n\t\t\t}\n\t\t} else {if (an >= i && bn <= j) {\n\t\t\ti = i + 1;\n\t\t} else {if (an <= i && bn >= j) {\n\t\t\tj = j + 1;\n\t\t}}}\n\t\n//@ ghost measure.a = an - i;\n//@ ghost measure.b = bn - j;\n}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant (an >= i && bn >= j) ==> (an >= i) && (bn >= j) is inductive.\nloop invariant (an >= i && bn <= j) ==> (an >= i) && (bn <= j) is inductive.\nloop invariant (an <= i && bn >= j) ==> (an <= i) && (bn >= j) is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, j, an, bn;\n\ti = unknown_int();\n\tj = unknown_int();\n\tan = unknown_int();\n\tbn = unknown_int();\n\t//@ ghost variant_expression measure = { an - i, bn - j };\n/*@\nloop invariant i18: (an >= i && bn >= j) ==> (an >= i) && (bn >= j);\nloop invariant i19: (an >= i && bn <= j) ==> (an >= i) && (bn <= j);\nloop invariant i20: (an <= i && bn >= j) ==> (an <= i) && (bn >= j);\nloop invariant measure.a == an - i && measure.b == bn - j;\nloop variant measure for lexicographic;\n*/\nwhile ((an >= i && bn >= j) || (an >= i && bn <= j) || (an <= i && bn >= j)) {\n\t\tif (an >= i && bn >= j) {\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\tj = j + 1;\n\t\t\t} else {\n\t\t\t\ti = i + 1;\n\t\t\t}\n\t\t} else {if (an >= i && bn <= j) {\n\t\t\ti = i + 1;\n\t\t} else {if (an <= i && bn >= j) {\n\t\t\tj = j + 1;\n\t\t}}}\n\t\n//@ ghost measure.a = an - i;\n//@ ghost measure.b = bn - j;\n}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant (an >= i && bn >= j) ==> (an >= i) && (bn >= j) is inductive.\nloop invariant (an >= i && bn <= j) ==> (an >= i) && (bn <= j) is inductive.\nloop invariant (an <= i && bn >= j) ==> (an <= i) && (bn >= j) is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, j, an, bn;\n\ti = unknown_int();\n\tj = unknown_int();\n\tan = unknown_int();\n\tbn = unknown_int();\n\t/*@\nloop invariant i18: (an >= i && bn >= j) ==> (an >= i) && (bn >= j);\nloop invariant i19: (an >= i && bn <= j) ==> (an >= i) && (bn <= j);\nloop invariant i20: (an <= i && bn >= j) ==> (an <= i) && (bn >= j);\nloop variant an - i, bn - j;\n*/\nwhile ((an >= i && bn >= j) || (an >= i && bn <= j) || (an <= i && bn >= j)) {\n\t\tif (an >= i && bn >= j) {\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\tj = j + 1;\n\t\t\t} else {\n\t\t\t\ti = i + 1;\n\t\t\t}\n\t\t} else {if (an >= i && bn <= j) {\n\t\t\ti = i + 1;\n\t\t} else {if (an <= i && bn >= j) {\n\t\t\tj = j + 1;\n\t\t}}}\n\t}\n\treturn 0;\n}",
                        "checker_output": false,
                        "checker_message": "Annotation error on line 17: unexpected token ','"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, j, an, bn;\n\ti = unknown_int();\n\tj = unknown_int();\n\tan = unknown_int();\n\tbn = unknown_int();\n\t/*@\nloop invariant i18: (an >= i && bn >= j) ==> (an >= i) && (bn >= j);\nloop invariant i19: (an >= i && bn <= j) ==> (an >= i) && (bn <= j);\nloop invariant i20: (an <= i && bn >= j) ==> (an <= i) && (bn >= j);\nloop variant an - i + bn - j;\n*/\nwhile ((an >= i && bn >= j) || (an >= i && bn <= j) || (an <= i && bn >= j)) {\n\t\tif (an >= i && bn >= j) {\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\tj = j + 1;\n\t\t\t} else {\n\t\t\t\ti = i + 1;\n\t\t\t}\n\t\t} else {if (an >= i && bn <= j) {\n\t\t\ti = i + 1;\n\t\t} else {if (an <= i && bn >= j) {\n\t\t\tj = j + 1;\n\t\t}}}\n\t}\n\treturn 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant (an >= i && bn >= j) ==> (an >= i) && (bn >= j) is inductive.\nloop invariant (an >= i && bn <= j) ==> (an >= i) && (bn <= j) is inductive.\nloop invariant (an <= i && bn >= j) ==> (an <= i) && (bn >= j) is inductive.\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, j, an, bn;\n\ti = unknown_int();\n\tj = unknown_int();\n\tan = unknown_int();\n\tbn = unknown_int();\n\t//@ ghost variant_expression measure = { an - i, bn - j };\n/*@\nloop invariant i18: (an >= i && bn >= j) ==> (an >= i) && (bn >= j);\nloop invariant i19: (an >= i && bn <= j) ==> (an >= i) && (bn <= j);\nloop invariant i20: (an <= i && bn >= j) ==> (an <= i) && (bn >= j);\nloop invariant measure.a == an - i && measure.b == bn - j;\nloop variant measure for lexicographic;\n*/\nwhile ((an >= i && bn >= j) || (an >= i && bn <= j) || (an <= i && bn >= j)) {\n\t\tif (an >= i && bn >= j) {\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\tj = j + 1;\n\t\t\t} else {\n\t\t\t\ti = i + 1;\n\t\t\t}\n\t\t} else {if (an >= i && bn <= j) {\n\t\t\ti = i + 1;\n\t\t} else {if (an <= i && bn >= j) {\n\t\t\tj = j + 1;\n\t\t}}}\n\t\n//@ ghost measure.a = an - i;\n//@ ghost measure.b = bn - j;\n}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant (an >= i && bn >= j) ==> (an >= i) && (bn >= j) is inductive.\nloop invariant (an >= i && bn <= j) ==> (an >= i) && (bn <= j) is inductive.\nloop invariant (an <= i && bn >= j) ==> (an <= i) && (bn >= j) is inductive.\n\nLoop variant is Valid.\n"
                    }
                ],
                "success": true
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB6.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusMin.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.09-no-inv_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Copenhagen_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_easySum.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA6.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Gothenburg_v2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.08.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.03.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB11.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1c_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.04.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.02.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_AG313.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.01.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/easy2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA5.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.06.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.10.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Parallel_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Waldkirch_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Thun_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_flag.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/McCarthy91_Iteration_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NO_24.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Copenhagen_disj_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Bangalore_v4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ComplInterv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChooseLife.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.07_true-termination.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.10.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.21_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Singapore_true-termination.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/McCarthyIterative.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c"
        ],
        "skipped": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c"
        ],
        "total": 258,
        "success_count": 128,
        "failure_count": 130,
        "success_rate": 0.49612403100775193
    }
}