{
    "logs": {
        "file": "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main()\n{\n    unsigned char l = unknown_uchar();\n\n    while( l-- )\n    {\n        if( l && l-- )\n        {\n            \n        }\n    }\n    return 0;\n}",
        "success": true,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main()\n{\n    unsigned char l = unknown_uchar();\n\n    while( l-- )\n    {\n        if( l && l-- )\n        {\n            \n        }\n    }\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "First, let's make a note of the variable assignments and loop condition:\n- l is an unsigned char and its value is assigned by the unknown_uchar() function.\n- The loop condition is l != 0 (since l-- is non-zero).\n\nNow, let's analyze the loop body:\n- If l is non-zero, l is decremented by 1.\n- In every iteration, l is decremented by at least 1.\n\nBased on this analysis, we can write the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= l <= UCHAR_MAX;\n    loop invariant \\forall unsigned char k; 0 <= k < l ==> \\at(l, Pre) >= 2 * k;\n*/\n```\n\nThese loop invariants state that:\n1. l is always between 0 and UCHAR_MAX (the maximum value of an unsigned char).\n2. At any point in the loop, the current value of l is at least twice the value of any previous value of k in the range [0, l), which indicates that l has been decremented by at least 2 * k from its initial value. This ensures that l will eventually reach 0, causing the loop to terminate.",
                    "First, let's note the pre-conditions and variable assignments in the program:\n- `unsigned char l = unknown_uchar();`\n\nNow, let's analyze the loop body and note the loop condition:\n- Loop condition: `l--`\n\nNow we can state the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination. We will also bound the values of `l` and use implication for the conditional nature of the code.\n\nHere are the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= l <= UCHAR_MAX;\n    loop invariant l % 2 == 0 ==> l > 0;\n*/\n```",
                    "First, we note the variable assignment in the program:\n- `unsigned char l` is assigned a value using `unknown_uchar()`. Since the function definition is not given, we should not make any assumptions about its return value, except that `l` can take any value within the range of `unsigned char`.\n\nNow, we analyze the loop body and make a note of the loop condition:\n- The loop condition is `l--`, which decrements `l` each iteration until `l` becomes `0`.\n\nWith this information, we can now output the loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant 0 <= l <= UCHAR_MAX;\n    loop invariant \\forall unsigned char k; 0 <= k < l ==> k < UCHAR_MAX;\n*/\n```",
                    "First, let's analyze the given program:\n\nPre-conditions or variable assignments:\n1. `unsigned char l` is initialized with a value from `unknown_uchar()`. We don't know the value, but since it's an `unsigned char`, it is in the range of 0 to 255.\n\nLoop condition:\n1. The loop continues as long as `l` is not equal to 0 (since it is decremented before entering the loop body).\n\nNow, let's find the necessary loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= l <= 255;\n    loop invariant \\forall integer k; 0 <= k < l ==> k % 2 == 0;\n*/\n```\n\nExplanation:\n1. `0 <= l <= 255`: `l` is an unsigned char, so its value is always between 0 and 255.\n2. `\\forall integer k; 0 <= k < l ==> k % 2 == 0`: For every integer k in the range of 0 to l-1, k must be even. This is because in each iteration of the loop, `l` is decremented by 1 or 2. When the loop starts, `l` could be any value between 0 and 255, but it will always be decremented by an even number during the loop iterations.",
                    "First, let's make a note of the variable assignments and the loop condition:\n\n1. `unsigned char l` is assigned a value from the `unknown_uchar()` function.\n2. The loop condition is `l--`, which means the loop will execute as long as `l` is not zero, and `l` will be decremented in each iteration.\n\nNow, let's find the necessary loop invariants for the while loop:\n\n1. `l` is always within the range of `unsigned char`, that is, between 0 and 255.\n2. In each iteration, `l` is non-increasing, which means that the value of `l` in the current iteration is less than or equal to the value of `l` in the previous iteration.\n\nWith these invariants, we can write the loop invariants as follows:\n\n```\n/*@ \n    loop invariant 0 <= l <= 255;\n    loop invariant \\forall integer k; 0 <= k <= l ==> 0 <= k <= 255;\n*/\n```"
                ],
                "output": [
                    "/*@ \n    loop invariant 0 <= l <= UCHAR_MAX;\n    loop invariant \\forall unsigned char k; 0 <= k < l ==> \\at(l, Pre) >= 2 * k;\n*/",
                    "/*@ \n    loop invariant 0 <= l <= UCHAR_MAX;\n    loop invariant l % 2 == 0 ==> l > 0;\n*/",
                    "/*@ \n    loop invariant 0 <= l <= UCHAR_MAX;\n    loop invariant \\forall unsigned char k; 0 <= k < l ==> k < UCHAR_MAX;\n*/",
                    "/*@ \n    loop invariant 0 <= l <= 255;\n    loop invariant \\forall integer k; 0 <= k < l ==> k % 2 == 0;\n*/",
                    "/*@ \n    loop invariant 0 <= l <= 255;\n    loop invariant \\forall integer k; 0 <= k <= l ==> 0 <= k <= 255;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= l <= UCHAR_MAX;\n    loop invariant \\forall unsigned char k; 0 <= k < l ==> \\at(l, Pre) >= 2 * k;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 9: unbound logic variable UCHAR_MAX. Ignoring loop annotation"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= l <= UCHAR_MAX;\n    loop invariant l % 2 == 0 ==> l > 0;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 9: unbound logic variable UCHAR_MAX. Ignoring loop annotation"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= l <= UCHAR_MAX;\n    loop invariant \\forall unsigned char k; 0 <= k < l ==> k < UCHAR_MAX;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 9: unbound logic variable UCHAR_MAX. Ignoring loop annotation"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= l <= 255;\n    loop invariant \\forall integer k; 0 <= k < l ==> k % 2 == 0;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant 0 <= l <= 255 is inductive.\nloop invariant \\forall integer k; 0 <= k < l ==> k % 2 == 0 is preserved but not established.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": true,
                        "invariants": "/*@ \n    loop invariant 0 <= l <= 255;\n    loop invariant \\forall integer k; 0 <= k <= l ==> 0 <= k <= 255;\n*/",
                        "checker_output_for_invariants": true,
                        "checker_message_for_invariants": "loop invariant 0 <= l <= 255 is inductive.\nloop invariant \\forall integer k; 0 <= k <= l ==> 0 <= k <= 255 is inductive.\n\n"
                    }
                ],
                "success": true
            },
            {
                "step": "Houdini for individual completion",
                "success": true,
                "completions": [
                    {
                        "num_solver_calls": 3,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= l <= UCHAR_MAX;\n    loop invariant \\forall unsigned char k; 0 <= k < l ==> \\at(l, Pre) >= 2 * k;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main()\n{\n    unsigned char l = unknown_uchar();\n\n    /*@\n\n\n*/\nwhile( l-- )\n    {\n        if( l && l-- )\n        {\n            \n        }\n    }\n    return 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 3,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= l <= UCHAR_MAX;\n    loop invariant l % 2 == 0 ==> l > 0;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main()\n{\n    unsigned char l = unknown_uchar();\n\n    /*@\n\n\n*/\nwhile( l-- )\n    {\n        if( l && l-- )\n        {\n            \n        }\n    }\n    return 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 3,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= l <= UCHAR_MAX;\n    loop invariant \\forall unsigned char k; 0 <= k < l ==> k < UCHAR_MAX;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main()\n{\n    unsigned char l = unknown_uchar();\n\n    /*@\n\n\n*/\nwhile( l-- )\n    {\n        if( l && l-- )\n        {\n            \n        }\n    }\n    return 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= l <= 255;\n    loop invariant \\forall integer k; 0 <= k < l ==> k % 2 == 0;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main()\n{\n    unsigned char l = unknown_uchar();\n\n    /*@\nloop invariant i1: 0 <= l <= 255;\n\n*/\nwhile( l-- )\n    {\n        if( l && l-- )\n        {\n            \n        }\n    }\n    return 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 0,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= l <= 255;\n    loop invariant \\forall integer k; 0 <= k <= l ==> 0 <= k <= 255;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main()\n{\n    unsigned char l = unknown_uchar();\n\n    /*@\nloop invariant i1: 0 <= l <= 255;\nloop invariant i2: \\forall integer k; 0 <= k <= l ==> 0 <= k <= 255;\n*/\nwhile( l-- )\n    {\n        if( l && l-- )\n        {\n            \n        }\n    }\n    return 0;\n}",
                        "checker_output_after_prune": true
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 4,
                "success": true,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main()\n{\n    unsigned char l = unknown_uchar();\n\n    /*@\n\n\n\n\nloop invariant i7: 0 <= l <= 255;\n\nloop invariant i10: \\forall integer k; 0 <= k <= l ==> 0 <= k <= 255;\n*/\nwhile( l-- )\n    {\n        if( l && l-- )\n        {\n            \n        }\n    }\n    return 0;\n}",
                "checker_output": true
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main()\n{\n    unsigned char l = unknown_uchar();\n\n    while( l-- )\n    {\n        if( l && l-- )\n        {\n            \n        }\n    }\n    return 0;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's analyze the loop:\n\n1. The loop continues as long as `l` is not equal to 0.\n2. The loop body has a conditional statement that checks if `l` is not equal to 0, and if true, decrements `l` again.\n3. In each iteration, `l` is decremented at least once (by the loop control) and at most twice (by the loop control and the conditional statement).\n\nNow, let's find the ranking function:\n\nSince `l` is an unsigned char, it can take values in the range [0, 255]. We know that `l` is decremented at least once in each iteration. Therefore, the value of `l` decreases with each iteration until it reaches 0, at which point the loop terminates.\n\nBased on this observation, we can use `l` as the ranking function:\n\n```c\n/*@\n    loop variant l;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. The value of `l` is always non-negative (since it's an unsigned char).\n2. The value of `l` decreases with each iteration of the loop.\n3. The loop terminates when `l` becomes 0.\n\nThus, the ranking function `l` guarantees that the loop will terminate.",
                    "First, let's identify the loop in the program:\n\n```\nwhile( l-- )\n{\n    if( l && l-- )\n    {\n        \n    }\n}\n```\n\nThe loop variable is `l`, which is an unsigned char. The loop continues to execute while `l` is positive (non-zero). The value of `l` is decremented in the while loop condition and possibly decremented again in the if statement inside the loop. \n\nNow let's determine the ranking function for this loop:\n\n```\n/*@\n    loop variant l;\n*/\n```\n\nThe ranking function is `l`, which is the loop variable. This is a valid ranking function because:\n\n1. The value of `l` is positive (non-zero) for the loop to continue executing.\n2. The value of `l` decreases with each iteration of the loop, as it is decremented in the while loop condition and possibly in the if statement.\n\nSince `l` is an unsigned char, it has a finite range of values (0 to 255). As `l` decreases with each iteration of the loop, it will eventually reach 0, at which point the loop will terminate. Therefore, the ranking function `l` helps prove that the loop must terminate.",
                    "First, let's identify the loop in the given program. The loop is a while loop with the condition `l--`. The loop has an if statement inside it, which checks if `l` is non-zero and decrements `l` again. Now, we need to find a ranking function for this loop.\n\nSince `l` is an unsigned char, its value is always non-negative. Also, the value of `l` is decremented in each iteration of the loop. Therefore, the value of `l` is guaranteed to decrease, and the loop is bound to terminate. So, the ranking function for this loop is `l`.\n\nHere's the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant l;\n*/\n```\n\nThis ranking function is valid because the value of `l` decreases with each iteration of the loop, and it is always non-negative. As a result, the loop will eventually terminate when the value of `l` becomes zero.",
                    "First, let's analyze the loop in the given program. The loop uses the `l--` operation in the loop condition, which means that the value of `l` decreases in every iteration. Furthermore, the `if` statement inside the loop checks if `l` is not zero, and if it's true, it decreases `l` again. \n\nSince `l` is an unsigned char, it can hold values from 0 to 255. In the worst-case scenario, `l` will be decremented twice in one iteration (once in the loop condition and once inside the `if` statement).\n\nNow let's define the ranking function for this loop:\n\n```\n/*@\n    loop variant l;\n*/\n```\n\nThis ranking function is valid because:\n\n1. The value of `l` is positive (non-negative) for the loop to continue executing, as it checks for `l--`, which means the loop will stop when `l` becomes 0.\n2. The value of `l` decreases in every iteration, either by 1 (when the `if` condition is false) or by 2 (when the `if` condition is true).\n3. Since `l` is an unsigned char with a limited range of values (0 to 255), it must eventually become 0, ensuring that the loop will terminate.\n\nThe ranking function `l` satisfies all the necessary conditions, proving that the loop must terminate.",
                    "First, let's analyze the loop. The loop runs as long as the unsigned char `l` is greater than 0. In each iteration, `l` is decremented by 1. Additionally, if `l` is still greater than 0 after the first decrement, it is decremented once more. So, in each iteration, `l` is decremented by 1 or 2.\n\nNow, let's find the ranking function. Since `l` is an unsigned char, its value is always non-negative and has a maximum value of 255. Thus, we can use `l` as the ranking function:\n\n```\n/*@\n    loop variant l;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. The value of `l` is positive for the loop to continue executing (as `l` is an unsigned char and the loop runs as long as `l` is greater than 0).\n2. The value of `l` decreases with every successive iteration of the loop, as it is decremented by 1 or 2 in each iteration.\n3. The value of `l` is bounded, ensuring that the loop will eventually terminate (since the maximum value of an unsigned char is 255, and it is decremented in each iteration)."
                ],
                "output": [
                    "/*@\n    loop variant l;\n*/",
                    "/*@\n    loop variant l;\n*/",
                    "/*@\n    loop variant l;\n*/",
                    "/*@\n    loop variant l;\n*/",
                    "/*@\n    loop variant l;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main()\n{\n    unsigned char l = unknown_uchar();\n\n    /*@\nloop invariant i7: 0 <= l <= 255;\nloop invariant i10: \\forall integer k; 0 <= k <= l ==> 0 <= k <= 255;\nloop variant l;\n*/\nwhile( l-- )\n    {\n        if( l && l-- )\n        {\n            \n        }\n    }\n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant 0 <= l <= 255 is inductive.\nloop invariant \\forall integer k; 0 <= k <= l ==> 0 <= k <= 255 is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main()\n{\n    unsigned char l = unknown_uchar();\n\n    /*@\nloop invariant i7: 0 <= l <= 255;\nloop invariant i10: \\forall integer k; 0 <= k <= l ==> 0 <= k <= 255;\nloop variant l;\n*/\nwhile( l-- )\n    {\n        if( l && l-- )\n        {\n            \n        }\n    }\n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant 0 <= l <= 255 is inductive.\nloop invariant \\forall integer k; 0 <= k <= l ==> 0 <= k <= 255 is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main()\n{\n    unsigned char l = unknown_uchar();\n\n    /*@\nloop invariant i7: 0 <= l <= 255;\nloop invariant i10: \\forall integer k; 0 <= k <= l ==> 0 <= k <= 255;\nloop variant l;\n*/\nwhile( l-- )\n    {\n        if( l && l-- )\n        {\n            \n        }\n    }\n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant 0 <= l <= 255 is inductive.\nloop invariant \\forall integer k; 0 <= k <= l ==> 0 <= k <= 255 is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main()\n{\n    unsigned char l = unknown_uchar();\n\n    /*@\nloop invariant i7: 0 <= l <= 255;\nloop invariant i10: \\forall integer k; 0 <= k <= l ==> 0 <= k <= 255;\nloop variant l;\n*/\nwhile( l-- )\n    {\n        if( l && l-- )\n        {\n            \n        }\n    }\n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant 0 <= l <= 255 is inductive.\nloop invariant \\forall integer k; 0 <= k <= l ==> 0 <= k <= 255 is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main()\n{\n    unsigned char l = unknown_uchar();\n\n    /*@\nloop invariant i7: 0 <= l <= 255;\nloop invariant i10: \\forall integer k; 0 <= k <= l ==> 0 <= k <= 255;\nloop variant l;\n*/\nwhile( l-- )\n    {\n        if( l && l-- )\n        {\n            \n        }\n    }\n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant 0 <= l <= 255 is inductive.\nloop invariant \\forall integer k; 0 <= k <= l ==> 0 <= k <= 255 is inductive.\n\nLoop variant is Valid.\n"
                    }
                ],
                "success": true
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB6.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusMin.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.09-no-inv_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Copenhagen_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_easySum.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA6.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Gothenburg_v2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.08.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.03.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Thun_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_flag.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/McCarthy91_Iteration_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NO_24.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Copenhagen_disj_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Bangalore_v4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron3_true-termination.c"
        ],
        "skipped": [],
        "total": 184,
        "success_count": 87,
        "failure_count": 97,
        "success_rate": 0.47282608695652173
    }
}