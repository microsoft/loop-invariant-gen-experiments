{
    "logs": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.09-no-inv_assume.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c;\n    int x, y;\n    x = unknown_int();\n    y = unknown_int();\n    c = 0;\n    if (x > 0 && y > 0) {\n        while (!(x == 0)) {\n            if (x > y) {\n                x = y;\n            } else {\n                x = x - 1;\n            }\n            c = c + 1;\n        }\n    }\n    return 0;\n}",
        "success": true,
        "variants": [
            [
                "x"
            ],
            [
                "x",
                "y - x"
            ]
        ],
        "variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n- If the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. \n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c;\n    int x, y;\n    x = unknown_int();\n    y = unknown_int();\n    c = 0;\n    if (x > 0 && y > 0) {\n        while (!(x == 0)) {\n            if (x > y) {\n                x = y;\n            } else {\n                x = x - 1;\n            }\n            c = c + 1;\n        }\n    }\n    return 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function (or the sequence of expressions) is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "1. Make note of the starting values or constraints for the variables that are live at the loop head.\n\nWe have three variables that are live at the loop head: `c`, `x`, and `y`. At the start of the loop, we have the following constraints:\n\n```\nx > 0\ny > 0\nc = 0\n```\n\n2. Analyze the loop body and find a ranking function involving the variables in the loop body.\n\nIn each iteration of the loop, either `x` is set to `y` (if `x > y`) or `x` is decreased by 1 (if `x <= y`). In both cases, `x` is strictly decreasing. The loop continues as long as `x` is not equal to 0.\n\n3. Output the ranking function in one code block, in ACSL syntax.\n\nBased on the analysis above, we can use `x` as the ranking function since it is always positive while the loop is executing and strictly decreasing with each iteration. Here is the ranking function in ACSL syntax:\n\n```c\n/*@ \n    loop variant x;\n*/\n```\n\nThis ranking function is valid because it meets the requirements of being positive while the loop is executing and strictly decreasing with each iteration.",
            "1. The loop header is \"while (!(x == 0))\".\n2. The loop condition requires x to not be 0.\n3. The loop body contains two branches, one where x = y and another where x = x - 1.\n4. In both branches, the value of x is either decreased or set to a smaller value.\n5. The starting values of x and y are both positive.\n\nNow, let's find a ranking function for this loop.\n\nA valid ranking function for this loop is x itself. This is because:\n\n1. x is positive at the beginning of the loop (x > 0).\n2. The value of x decreases with every iteration of the loop (either x = y where y < x, or x = x - 1).\n3. The loop terminates when x reaches 0.\n\nSo, the ranking function for this loop can be written as:\n\n```\n/*@\n    loop variant x;\n*/\n```\n\nThis ranking function is valid because it satisfies the conditions of being positive while the loop is executing and decreasing with every iteration of the loop.",
            "First, let's make note of the starting values or constraints for the variables that are live at the loop head:\n- x > 0 (from the if condition)\n- y > 0 (from the if condition)\n- c = 0 (initial value)\n\nNow, let's analyze the loop body and find a ranking function involving the variables in the loop body:\nIn each iteration of the loop, either x is assigned the value of y (if x > y) or x is decremented by 1 (if x <= y). In both cases, x is decreasing.\n\nSince x is always greater than 0 before entering the loop, and x is decreasing in each iteration, we can use x as our ranking function.\n\nHere is the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x;\n*/\n```",
            "1. Starting values or constraints for the variables that are live at the loop head:\n\n- x > 0\n- y > 0\n\n2. Analyze the loop body:\n\n- The loop continues while x is not equal to 0.\n- In each iteration of the loop, either x takes the value of y (if x > y) or x decreases by 1 (if x <= y).\n\n3. Ranking function:\n\nBased on the analysis, the ranking function should involve both x and y. We can use a lexicographic ranking function with two expressions. The first expression should involve x, and the second should involve y.\n\nThe first expression is x, as it is always decreasing or remaining the same in each iteration of the loop. The second expression is y - x, as it is always decreasing when x remains the same. In both cases, the expressions are positive, as x > 0 and y > 0.\n\nThe ranking function can be written as:\n\n```\n/*@\n    loop variant x;\n    loop variant y - x;\n*/\n```\n\nThis ranking function is valid because x is decreasing or remaining the same in each iteration, and when x remains the same, y - x is decreasing. Both expressions are positive while the loop is executing, ensuring the loop terminates.",
            "First, let's identify the loop head and the variables that are live at the loop head. In this case, the loop head is the `while (!(x == 0))` statement. The live variables at the loop head are `x` and `y`.\n\nNow, let's analyze the loop body and find a ranking function involving the variables in the loop body. There are two branches in the loop body: one where `x > y`, and one where `x <= y`. In the first branch, `x` is assigned the value of `y`, and in the second branch, `x` is decremented by 1.\n\nWe can use a lexicographic ranking function with two expressions: `(x, y - x)`. This is because:\n\n1. In the first branch, `x` is assigned the value of `y`. Since `x > y`, the new value of `x` is smaller than its old value, so `x` decreases.\n2. In the second branch, `x` is decremented by 1, so it also decreases. Furthermore, since `x <= y`, the expression `y - x` is non-negative.\n\nBoth expressions in the lexicographic ranking function are positive while the loop is executing because `x > 0` and `y > 0` as per the loop condition. Therefore, the ranking function is valid.\n\nThe ranking function in ACSL syntax is:\n\n```\n/*@\n    loop variant x;\n    loop variant y - x;\n*/\n```"
        ],
        "variant_log": [
            {
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. Lexicographic ranking functions are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c;\n    int x, y;\n    x = unknown_int();\n    y = unknown_int();\n    c = 0;\n    if (x > 0 && y > 0) {\n        while (!(x == 0)) {\n            if (x > y) {\n                x = y;\n            } else {\n                x = x - 1;\n            }\n            c = c + 1;\n        }\n    }\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(x)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, let's note the starting values or constraints for the variables that are live at the loop head:\n- x and y are initialized with unknown_int() values, so we do not know their exact initial values.\n- c is initialized to 0.\n\nNext, analyze the loop body and make a note of the loop condition and the given ranking function:\n- The loop condition is !(x == 0), which means the loop will run as long as x is not equal to 0.\n- The given ranking function is (x).\n\nNow, let's output the loop invariants that support the validity of the ranking function and prove the termination of the loop:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y > 0;\n    loop invariant c >= 0;\n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant x <= y;\n*/\n```\n\nThese loop invariants ensure that:\n1. x is always non-negative (x >= 0).\n2. y is always positive (y > 0).\n3. c is always non-negative (c >= 0).\n4. x is always less than or equal to its value at the beginning of the loop (x <= \\at(x, LoopEntry)).\n5. x is always less than or equal to y (x <= y).\n\nThese invariants hold true before the loop execution, in every iteration of the loop, and after the loop termination. They also imply that the ranking function (x) decreases with every iteration, which proves the termination of the loop.",
                    "First, let's identify the loop head and the variables that are live at the loop head. The loop head is the `while` statement, and the live variables at the loop head are `x`, `y`, and `c`.\n\nNext, analyze the loop body and make a note of the loop condition and the given ranking function. The loop condition is `!(x == 0)`, which is equivalent to `x != 0`. The given ranking function is `(x)`.\n\nNow, let's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration.\n\n```c\n/*@ \n    loop invariant 0 <= x <= y;\n    loop invariant 0 <= c;\n    loop invariant x + c <= \\at(x, LoopEntry);\n*/\n```\n\nThese loop invariants ensure that:\n1. `x` is always non-negative and less than or equal to `y`.\n2. `c` is always non-negative.\n3. The sum of `x` and `c` is less than or equal to the initial value of `x`.\n\nThese invariants hold true before the loop execution, in every iteration of the loop, and after the loop termination. They also imply that the ranking function `(x)` decreases with every iteration of the loop, proving the loop's termination.",
                    "Let's analyze the given program step by step.\n\n1. Variables `x` and `y` are assigned unknown integer values.\n2. The variable `c` is initialized to 0.\n3. The loop executes only if `x > 0` and `y > 0`.\n4. The loop condition is `!(x == 0)`, meaning that the loop continues until `x` becomes 0.\n5. Inside the loop, there are two cases:\n   a) If `x > y`, then `x` is assigned the value of `y`.\n   b) If `x <= y`, then `x` is decremented by 1.\n6. In each iteration, `c` is incremented by 1.\n\nNow, let's find loop invariants that support the loop variant `(x)`:\n\n1. The loop invariants must hold before the loop execution:\n   a) `x > 0` and `y > 0` must hold, as they are the loop preconditions.\n2. The loop invariants must hold during every iteration of the loop:\n   a) `x` is always non-negative, as it is either assigned `y` or decremented by 1.\n   b) `x` is always less than or equal to `y`, as `x` is either assigned `y` or does not change.\n3. The loop invariants must hold after the loop termination:\n   a) `x == 0` must hold, as it is the loop termination condition.\n\nNow, we can combine these invariants into a single code block:\n\n```\n/*@ \n    loop invariant x > 0 ==> y > 0;\n    loop invariant x >= 0;\n    loop invariant x <= y;\n*/\n```",
                    "First, let's identify the loop condition and the starting values or constraints for the variables that are live at the loop head.\n\nLoop condition: `!(x == 0)`\nStarting values or constraints: `x > 0`, `y > 0`, `c = 0`\n\nNow, let's analyze the loop body and find loop invariants that support the ranking function `(x)`.\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y > 0;\n    loop invariant c >= 0;\n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant x <= y ==> c >= \\at(x, LoopEntry) - x;\n*/\n```\n\nThese loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination. They also imply that the ranking function `(x)` decreases with every iteration, which proves the termination of the loop.",
                    "First, let's make note of the starting values or constraints for the variables that are live at the loop head:\n\n- x and y are both unknown integers, but we know that they are positive at the start of the loop due to the condition `if (x > 0 && y > 0)`.\n- c is initialized to 0.\n\nNext, let's analyze the loop body, loop condition, and given ranking function:\n\n- Loop condition: `!(x == 0)`, which means `x != 0`.\n- Loop body:\n  - If `x > y`, then `x = y`.\n  - Else, `x = x - 1`.\n  - Update `c = c + 1`.\n- Ranking function: `x`.\n\nNow, let's output the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant 0 <= c;\n    loop invariant \\at(x, LoopEntry) >= x;\n    loop invariant \\at(y, LoopEntry) >= y;\n    loop invariant \\at(c, LoopEntry) == 0;\n    loop invariant \\at(x, LoopEntry) > 0 ==> x > 0;\n    loop invariant \\at(y, LoopEntry) > 0 ==> y > 0;\n*/\n```"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant y > 0;\n    loop invariant c >= 0;\n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant x <= y;\n*/",
                    "/*@ \n    loop invariant 0 <= x <= y;\n    loop invariant 0 <= c;\n    loop invariant x + c <= \\at(x, LoopEntry);\n*/",
                    "/*@ \n    loop invariant x > 0 ==> y > 0;\n    loop invariant x >= 0;\n    loop invariant x <= y;\n*/",
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant y > 0;\n    loop invariant c >= 0;\n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant x <= y ==> c >= \\at(x, LoopEntry) - x;\n*/",
                    "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant 0 <= c;\n    loop invariant \\at(x, LoopEntry) >= x;\n    loop invariant \\at(y, LoopEntry) >= y;\n    loop invariant \\at(c, LoopEntry) == 0;\n    loop invariant \\at(x, LoopEntry) > 0 ==> x > 0;\n    loop invariant \\at(y, LoopEntry) > 0 ==> y > 0;\n*/"
                ],
                "inductive_invariants": "loop invariant i1: x >= 0;\nloop invariant i2: y > 0;\nloop invariant i3: c >= 0;\nloop invariant i4: x <= \\at(x, LoopEntry);\nloop invariant i7: 0 <= c;\nloop invariant i8: x + c <= \\at(x, LoopEntry);\nloop invariant i9: x > 0 ==> y > 0;\nloop invariant i17: 0 <= x;\nloop invariant i18: 0 <= y;\nloop invariant i20: \\at(x, LoopEntry) >= x;\nloop invariant i21: \\at(y, LoopEntry) >= y;\nloop invariant i22: \\at(c, LoopEntry) == 0;\nloop invariant i24: \\at(y, LoopEntry) > 0 ==> y > 0;",
                "final_checker_input": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c;\n    int x, y;\n    x = unknown_int();\n    y = unknown_int();\n    c = 0;\n    if (x > 0 && y > 0) {\n        /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y > 0;\nloop invariant i3: c >= 0;\nloop invariant i4: x <= \\at(x, LoopEntry);\nloop invariant i7: 0 <= c;\nloop invariant i8: x + c <= \\at(x, LoopEntry);\nloop invariant i9: x > 0 ==> y > 0;\nloop invariant i17: 0 <= x;\nloop invariant i18: 0 <= y;\nloop invariant i20: \\at(x, LoopEntry) >= x;\nloop invariant i21: \\at(y, LoopEntry) >= y;\nloop invariant i22: \\at(c, LoopEntry) == 0;\nloop invariant i24: \\at(y, LoopEntry) > 0 ==> y > 0;\nloop variant x;\n*/\nwhile (!(x == 0)) {\n            if (x > y) {\n                x = y;\n            } else {\n                x = x - 1;\n            }\n            c = c + 1;\n        }\n    }\n    return 0;\n}",
                "checker_message": "loop invariant x >= 0 is inductive.\nloop invariant y > 0 is inductive.\nloop invariant c >= 0 is inductive.\nloop invariant x <= \\at(x, LoopEntry) is inductive.\nloop invariant 0 <= c is inductive.\nloop invariant x + c <= \\at(x, LoopEntry) is inductive.\nloop invariant x > 0 ==> y > 0 is inductive.\nloop invariant 0 <= x is inductive.\nloop invariant 0 <= y is inductive.\nloop invariant \\at(x, LoopEntry) >= x is inductive.\nloop invariant \\at(y, LoopEntry) >= y is inductive.\nloop invariant \\at(c, LoopEntry) == 0 is inductive.\nloop invariant \\at(y, LoopEntry) > 0 ==> y > 0 is inductive.\n\nLoop variant is Valid.\n",
                "success": true
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB6.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Mysore_true-termination.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusMin.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.09-no-inv_assume.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Thun_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_flag.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex2_true-termination.c"
        ],
        "skipped": [],
        "total": 153,
        "success_count": 81,
        "failure_count": 72,
        "success_rate": 0.5294117647058824
    }
}