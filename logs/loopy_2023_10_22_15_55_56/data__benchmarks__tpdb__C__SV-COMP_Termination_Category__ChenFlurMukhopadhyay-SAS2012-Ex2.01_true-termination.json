{
    "logs": {
        "file": "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x = unknown_int();\n    int y = unknown_int();\n    while (x > 0) {\n        x = x + y;\n        y--;\n    }\n    return 0;\n}",
        "success": false,
        "variants": [
            [
                "x",
                "y"
            ],
            [
                "x"
            ]
        ],
        "variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n- If the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. \n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x = unknown_int();\n    int y = unknown_int();\n    while (x > 0) {\n        x = x + y;\n        y--;\n    }\n    return 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function (or the sequence of expressions) is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "First, we make note of the starting values or constraints for the variables that are live at the loop head:\n- `x` is an unknown integer.\n- `y` is an unknown integer.\n- The loop condition is `x > 0`.\n\nNow, let's analyze the loop body and find a ranking function involving the variables in the loop body:\n- `x` is updated as `x = x + y`.\n- `y` is updated as `y = y - 1`.\n\nWe need to find a ranking function that decreases with every iteration and is positive while the loop is executing.\n\nIn this case, we can consider the lexicographic ranking function (x, y). With each iteration, either x decreases or remains the same. If x remains the same, y decreases.\n\nHere's the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x;\n    loop variant y;\n*/\n```\n\nThis ranking function is valid because it satisfies the conditions of being lexicographically decreasing and positive while the loop is executing.",
            "First, let's make a note of the starting values or constraints for the variables that are live at the loop head:\n- `x` is an unknown integer value.\n- `y` is an unknown integer value.\n- Loop condition: `x > 0`.\n\nNow, let's analyze the loop body and find a ranking function involving the variables in the loop body:\n- `x = x + y;`\n- `y--;`\n\nWe can observe that the value of `x` is being updated with the addition of `y`, and `y` is being decremented in every iteration. The loop termination depends on `x` becoming non-positive. Thus, we can use a lexicographic ranking function involving `x` and `y` to show the loop termination.\n\nHere's the ranking function for the loop:\n\n```\n/*@\n    loop variant x;\n    loop variant y;\n*/\n```\n\nThis is a valid ranking function because:\n1. `x` is positive at the beginning of each loop iteration (due to the loop condition `x > 0`). As `x` is being updated with the addition of `y` and `y` is being decremented, it is guaranteed that `x` will eventually become non-positive, causing the loop to terminate.\n2. The value of `y` is decreasing with every iteration as it is being decremented (`y--`). This ensures that the ranking function is decreasing with every iteration of the loop.",
            "First, make note of the starting values or constraints for the variables that are live at the loop head:\n- x and y are assigned with unknown_int(), so they can have any integer value.\n\nNow, analyze the loop body and find a ranking function involving the variables in the loop body:\n- Loop condition: x > 0\n- In the loop body: x is updated as x = x + y, and y is decremented by 1 (y--).\n\nSince x is decreasing (when y is negative) and the loop condition is x > 0, the ranking function can be x.\n\nOutput the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x;\n*/\n```",
            "1. The variables live at the loop head are `x` and `y`.\n2. The loop condition is `x > 0`.\n3. In the loop body, `x` is updated with `x + y`, and `y` is decremented by 1 (`y--`).\n\nBased on this information, we can find a lexicographic ranking function using `x` and `y`.\n\nThe loop ranking function would be:\n\n```\n/*@\n    loop variant x;\n    loop variant y;\n*/\n```\n\nThis ranking function is valid because:\n\n1. `x` is always decreasing in each iteration, as it is updated with `x + y` and `y` is decremented.\n2. As long as the loop is executing, the value of `x` will always be positive, as stated in the loop condition `x > 0`.\n3. Since `y` is decremented in each iteration, it ensures the value of `x` will eventually be non-positive, causing the loop to terminate.",
            "1. Identify the variables that are live at the loop head:\n   - x and y\n\n2. Starting values or constraints for the variables:\n   - x and y are both unknown integers, so no specific starting values or constraints are given.\n\n3. Analyze the loop body:\n   - x is updated with x + y\n   - y is decremented by 1\n\nWe need to find a ranking function that decreases with every iteration of the loop and remains positive while the loop is executing.\n\nLoop condition: x > 0\n\nRanking function:\n\n```\n/*@\n    loop variant x;\n    loop invariant y >= -1;\n*/\n```"
        ],
        "variant_log": [
            {
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. Lexicographic ranking functions are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x = unknown_int();\n    int y = unknown_int();\n    while (x > 0) {\n        x = x + y;\n        y--;\n    }\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(x, y)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, let's analyze the given program and identify the loop head, loop body, and loop condition.\n\nLoop head: `while (x > 0)`\nLoop condition: `x > 0`\nLoop body: \n```\nx = x + y;\ny--;\n```\n\nNow, let's find loop invariants that support the ranking function (x, y) for the loop in the program. We need to find invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination.\n\nWe can use the following loop invariants:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= \\at(y, LoopEntry) + \\at(x, LoopEntry) - x;\n*/\n```\n\nExplanation:\n\n1. `x >= 0`: The value of x is always non-negative. It starts as an unknown value, and the loop condition ensures that it remains non-negative throughout the loop execution.\n\n2. `y >= \\at(y, LoopEntry) + \\at(x, LoopEntry) - x`: The value of y decreases in each iteration of the loop by one. Since x is decreasing and y is decreasing as well, this invariant holds true. After the loop terminates, x will be less than or equal to 0, and the invariant still holds true.",
                    "First, let's note the starting values or constraints for the variables that are live at the loop head:\n- x and y are initialized with unknown_int() which means they can be any integer value.\n\nNow let's analyze the loop body and make a note of the loop condition and the given ranking function:\n- Loop condition: x > 0\n- Ranking function: (x, y)\n\nWe need to find loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration.\n\nHere are the loop invariants for the given program:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y <= \\at(y, LoopEntry);\n    loop invariant x <= \\at(x, LoopEntry) + \\at(y, LoopEntry);\n*/\n```",
                    "First, let's note the starting values and constraints for the variables:\n\n- x and y are initialized with unknown integers.\n\nNow, let's analyze the loop:\n\n- The loop condition is x > 0.\n- The loop body updates x as x = x + y and y as y = y - 1.\n- The ranking function is (x, y).\n\nNow, let's find the loop invariants:\n\n- Before the loop execution and in every iteration of the loop, x is non-negative (x >= 0).\n- In every iteration, if x > 0, then y is non-negative (y >= 0).\n- In every iteration, if x > 0, then the value of x + y is greater than the value of x at the beginning of the loop (x + y > \\at(x, LoopEntry)).\n\nHere are the loop invariants in ACSL annotation:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant x > 0 ==> y >= 0;\n    loop invariant x > 0 ==> x + y > \\at(x, LoopEntry);\n*/\n```",
                    "First, let's analyze the given program:\n\n- Variables x and y are assigned with unknown integers.\n- The loop condition is x > 0.\n- In each loop iteration, x is updated with x + y, and y is decremented by 1.\n\nNow, we will find the loop invariants:\n\n1. Before loop execution: x and y are assigned with unknown integers, no specific relation or bounds are given.\n2. In every loop iteration: x is decreasing if y < -1, y is decreasing by 1 in every iteration.\n3. After loop termination: The loop terminates when x <= 0, and y has been decreased by the number of iterations.\n\nBased on the above analysis, we can write the loop invariants as:\n\n```\n/*@ \n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant y > \\at(y, LoopEntry) - 1 ==> x < \\at(x, LoopEntry);\n    loop invariant y <= \\at(y, LoopEntry);\n*/\n```\n\nThese loop invariants support the lexicographic ranking function (x, y) and prove the termination of the loop.",
                    "First, let's note the starting values or constraints for the variables that are live at the loop head:\n- `x` and `y` have unknown initial values.\n\nNow, let's analyze the loop condition and the given ranking function:\n- Loop condition: `x > 0`\n- Ranking function: `(x, y)`\n\nNext, we need to find loop invariants that support the validity of the ranking function and prove the termination of the loop. We can output the loop invariants as follows:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y <= \\at(y, LoopEntry);\n*/\n```"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= \\at(y, LoopEntry) + \\at(x, LoopEntry) - x;\n*/",
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant y <= \\at(y, LoopEntry);\n    loop invariant x <= \\at(x, LoopEntry) + \\at(y, LoopEntry);\n*/",
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant x > 0 ==> y >= 0;\n    loop invariant x > 0 ==> x + y > \\at(x, LoopEntry);\n*/",
                    "/*@ \n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant y > \\at(y, LoopEntry) - 1 ==> x < \\at(x, LoopEntry);\n    loop invariant y <= \\at(y, LoopEntry);\n*/",
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant y <= \\at(y, LoopEntry);\n*/"
                ],
                "inductive_invariants": "loop invariant i4: y <= \\at(y, LoopEntry);",
                "final_checker_input": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x = unknown_int();\n    int y = unknown_int();\n    //@ ghost variant_expression measure = { x, y };\n/*@\nloop invariant i4: y <= \\at(y, LoopEntry);\nloop invariant measure.a == x && measure.b == y;\nloop variant measure for lexicographic;\n*/\nwhile (x > 0) {\n        x = x + y;\n        y--;\n    \n//@ ghost measure.a = x;\n//@ ghost measure.b = y;\n}\n    return 0;\n}",
                "checker_message": "loop invariant y <= \\at(y, LoopEntry) is inductive.\n\nLoop variant is Invalid.\n",
                "success": false
            },
            {
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. Lexicographic ranking functions are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x = unknown_int();\n    int y = unknown_int();\n    while (x > 0) {\n        x = x + y;\n        y--;\n    }\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(x)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, let's note the starting values or constraints for the variables that are live at the loop head. x and y are assigned unknown_int() values, which means we cannot make any assumptions about their initial values.\n\nNow, let's analyze the loop body and make a note of the loop condition and the given ranking function. The loop condition is x > 0, and the ranking function is (x). Inside the loop, x is updated as x = x + y, and y is decremented by 1 (y--).\n\nWe need to find loop invariants that support the validity of the ranking function (x) and prove the termination of the loop. We need to find invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination.\n\nHere are the loop invariants:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant \\at(x, LoopEntry) - x <= \\at(y, LoopEntry);\n    loop invariant y <= \\at(y, LoopEntry);\n*/\n```\n\nThese invariants ensure that x is non-negative, x decreases with every iteration (as y decreases), and y does not increase during the loop execution. These invariants support the validity of the ranking function (x) and prove the termination of the loop.",
                    "First, let's note the starting values or constraints for the variables that are live at the loop head:\n- x and y are assigned values from unknown_int(), which means they can be any integer.\n\nNow, let's analyze the loop condition and the given ranking function:\n- Loop condition: x > 0\n- Ranking function: (x)\n\nNext, we need to find the loop invariants that support the validity of the ranking function:\n\n(i) Before the loop execution:\n- x and y can be any integer.\n\n(ii) In every iteration of the loop:\n- x = x + y\n- y = y - 1\n\n(iii) After the loop termination:\n- x <= 0\n\nNow, let's output the loop invariants:\n\n```\n/*@ \n    loop invariant \\forall int k; 0 <= k <= x ==> \\at(y + k, LoopEntry) > 0;\n    loop invariant y <= \\at(y, LoopEntry);\n*/\n```",
                    "First, let's note the starting values or constraints for the variables that are live at the loop head:\n- x and y are assigned unknown_int() values, so we do not have any specific constraints on their initial values.\n\nNow, let's analyze the loop body and make a note of the loop condition and the given ranking function:\n- Loop condition: x > 0\n- Ranking function: x\n\nThe loop invariants should support that the ranking function (x) decreases with every iteration. Here are the loop invariants:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y <= \\at(y, LoopEntry);\n    loop invariant x <= \\at(x, LoopEntry) + \\at(y, LoopEntry);\n*/\n```\n\nExplanation:\n- x >= 0: x is always non-negative since the loop condition is x > 0.\n- y <= \\at(y, LoopEntry): y is non-increasing because it is decremented in each iteration.\n- x <= \\at(x, LoopEntry) + \\at(y, LoopEntry): The maximum value x can have is when it is incremented by the initial value of y.",
                    "First, let's make note of the starting values or constraints for the variables that are live at the loop head. In this case, x and y are live at the loop head, and both have unknown initial values.\n\nNow, let's analyze the loop body and make a note of the loop condition and the given ranking function. The loop condition is x > 0, and the given ranking function is (x).\n\nFinally, let's output loop invariants that are true (i) before the loop execution, (ii) in every iteration of the loop, and (iii) after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration.\n\n```\n/*@ \n    loop invariant \\at(x, LoopEntry) >= 0;\n    loop invariant x >= 0;\n    loop invariant y <= \\at(y, LoopEntry);\n*/\n```",
                    "First, let's make a note of the starting values or constraints for the variables that are live at the loop head:\n- x and y are both initialized with unknown_int(), which means they can take any integer value.\n\nNext, let's analyze the loop body and make a note of the loop condition and the given ranking function:\n- Loop condition: x > 0\n- Ranking function: x\n\nNow, let's output the loop invariants that are true:\n(i) before the loop execution,\n(ii) in every iteration of the loop, and\n(iii) after the loop termination,\nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n\n```c\n/*@ \n    loop invariant x >= 0;\n    loop invariant y <= \\at(y, LoopEntry) + 1;\n    loop invariant x <= \\at(x, LoopEntry) * (\\at(y, LoopEntry) + 1);\n*/\n```\n\nThese loop invariants imply that:\n- x is always non-negative.\n- y is always less than or equal to its initial value plus 1.\n- x is always less than or equal to its initial value multiplied by the initial value of y plus 1.\n\nThese invariants ensure that the ranking function (x) decreases with every iteration and the loop terminates."
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant \\at(x, LoopEntry) - x <= \\at(y, LoopEntry);\n    loop invariant y <= \\at(y, LoopEntry);\n*/",
                    "/*@ \n    loop invariant \\forall int k; 0 <= k <= x ==> \\at(y + k, LoopEntry) > 0;\n    loop invariant y <= \\at(y, LoopEntry);\n*/",
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant y <= \\at(y, LoopEntry);\n    loop invariant x <= \\at(x, LoopEntry) + \\at(y, LoopEntry);\n*/",
                    "/*@ \n    loop invariant \\at(x, LoopEntry) >= 0;\n    loop invariant x >= 0;\n    loop invariant y <= \\at(y, LoopEntry);\n*/",
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant y <= \\at(y, LoopEntry) + 1;\n    loop invariant x <= \\at(x, LoopEntry) * (\\at(y, LoopEntry) + 1);\n*/"
                ],
                "inductive_invariants": "loop invariant i3: y <= \\at(y, LoopEntry);\nloop invariant i13: y <= \\at(y, LoopEntry) + 1;",
                "final_checker_input": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x = unknown_int();\n    int y = unknown_int();\n    /*@\nloop invariant i3: y <= \\at(y, LoopEntry);\nloop invariant i13: y <= \\at(y, LoopEntry) + 1;\nloop variant x;\n*/\nwhile (x > 0) {\n        x = x + y;\n        y--;\n    }\n    return 0;\n}",
                "checker_message": "loop invariant y <= \\at(y, LoopEntry) is inductive.\nloop invariant y <= \\at(y, LoopEntry) + 1 is inductive.\n\nLoop variant is Invalid.\n",
                "success": false
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.07.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Thun_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c"
        ],
        "skipped": [],
        "total": 130,
        "success_count": 65,
        "failure_count": 65,
        "success_rate": 0.5
    }
}