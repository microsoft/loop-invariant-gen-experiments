{
    "logs": {
        "file": "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint y = unknown_int();\n\tint z = unknown_int();\n    int x;\n    if (unknown_int()) {\n        x = 1;\n    } else {\n        x = -1;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    while (y<100 && z<100) {\n        y = y+x;\n        z = z-x;\n    }\n    return 0;\n}",
        "success": false,
        "variants": [
            [
                "100 - y",
                "100 - z"
            ],
            [
                "100 - (y < 0 ? -y : y)"
            ],
            [
                "abs(y - z)"
            ]
        ],
        "variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n- If the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. \n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint y = unknown_int();\n\tint z = unknown_int();\n    int x;\n    if (unknown_int()) {\n        x = 1;\n    } else {\n        x = -1;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    while (y<100 && z<100) {\n        y = y+x;\n        z = z-x;\n    }\n    return 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function (or the sequence of expressions) is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "1. First, let's identify the variables that are live at the loop head: y and z.\n\n2. Analyze the loop body:\n```\nwhile (y<100 && z<100) {\n    y = y+x;\n    z = z-x;\n}\n```\n\n3. Now, let's find a ranking function involving the variables in the loop body. The loop continues executing as long as both y and z are less than 100. In each iteration, y increases by x and z decreases by x. Since x remains constant throughout the loop, we can use the difference between 100 and the current values of y and z as the ranking function.\n\nHere is the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant 100 - y;\n    loop variant 100 - z;\n*/\n```\n\nThis is a valid ranking function because:\n\n- Both expressions are positive while the loop is executing, as y and z are both less than 100.\n- The value of `100 - y` decreases with every iteration as y increases by x.\n- The value of `100 - z` decreases with every iteration as z decreases by x.",
            "First, let's identify the starting values or constraints for the variables that are live at the loop head:\n\n- `y` and `z` are initialized with `unknown_int()`, which means their initial values can be any integer.\n- `x` is initialized to either `1` or `-1` based on the `unknown_int()` condition, and then it is incremented or decremented 9 times. This means `x` can be either `10` or `-10`.\n\nNow, let's analyze the loop body and find a ranking function involving the variables in the loop body:\n\n- In each iteration of the loop, `y` is updated to `y + x` and `z` is updated to `z - x`.\n- Since `x` can be either `10` or `-10`, the loop updates `y` and `z` in opposite directions.\n\nWe can now define the ranking function for the loop:\n\n```\n/*@\n    loop variant 100 - (y < 0 ? -y : y);\n*/\n```\n\nThis ranking function is valid because:\n\n1. It is decreasing with every iteration of the loop. When `x > 0`, `y` increases by `x` and the loop variant decreases. When `x < 0`, `y` decreases by `x` (i.e., increases by `-x`), and the loop variant also decreases.\n2. It evaluates to a positive value while the loop is executing. Since the loop condition is `y < 100 && z < 100`, the value of `y` must be less than 100 during the loop execution. So, `100 - (y < 0 ? -y : y)` is always positive.",
            "1. Make note of the starting values or constraints for the variables that are live at the loop head:\n- y and z are initialized with unknown_int()\n- x is initialized with either 1 or -1 and then incremented/decremented 9 times, which means x can only be 10 or -10.\n\n2. Analyze the loop body and find a ranking function involving the variables in the loop body:\n- y and z are both updated in the loop body: y = y + x and z = z - x.\n- If x is positive, y increases and z decreases.\n- If x is negative, y decreases and z increases.\n\n3. Find the ranking function:\n- The loop terminates when either y or z reaches 100.\n- We can consider the absolute difference between y and z as the ranking function.\n\nThe ranking function is:\n```\n/*@\n    loop variant abs(y - z);\n*/\n```\n\nExplanation:\n- The value of abs(y - z) is always positive as long as the loop is executing.\n- With each iteration of the loop, either y increases or z increases. So, the absolute difference between y and z will decrease, ensuring termination of the loop.",
            "First, let's make note of the starting values or constraints for the variables that are live at the loop head:\n- x: It can take values 1, -1, 3, or -3 after the sequence of if-else statements\n- y: unknown_int() value, no specific constraint\n- z: unknown_int() value, no specific constraint\n\nNow, let's analyze the loop body:\n```\nwhile (y<100 && z<100) {\n    y = y+x;\n    z = z-x;\n}\n```\n\nWe can see that in each iteration of the loop, the value of y increases by x and the value of z decreases by x. Since x can be positive or negative, we cannot be sure about the direction of the change in y and z. However, we can look at their absolute differences.\n\nConsider the expression `abs(y - z)` as the ranking function. In each iteration, the absolute difference between y and z increases by the absolute value of x, i.e., `abs(x)`.\n\nThe loop terminates when either y or z is greater than or equal to 100. Hence, the ranking function will always be positive during the loop execution.\n\nThe ranking function for the given loop is:\n```\n/*@\n    loop variant abs(y - z);\n*/\n```\n\nThis ranking function is valid because it is always positive during the loop execution, and it decreases with every iteration of the loop.",
            "1. First, let's identify the variables that are live at the loop head. These are `x`, `y`, and `z`.\n\n2. Next, we analyze the loop body. The loop body consists of the following updates:\n   ```\n   y = y + x;\n   z = z - x;\n   ```\n\nNow, we will find a ranking function involving the variables in the loop body.\n\nRanking function:\n```\n/*@\n    loop variant 100 - y;\n    loop variant 100 - z;\n*/\n```\n\nExplanation:\n\nThe values of `y` and `z` are updated in every iteration, while the value of `x` remains constant throughout the loop. The loop continues executing as long as both `y` and `z` are less than 100. Since `x` is either incremented or decremented in the preceding code, it will always be non-zero, so either `y` or `z` will always increase in every iteration.\n\nTherefore, we have two expressions in our lexicographic ranking function: `100 - y` and `100 - z`. These expressions will always be positive while the loop is executing, as `y` and `z` are less than 100. In each iteration, at least one of the expressions must decrease, ensuring the termination of the loop."
        ],
        "variant_log": [
            {
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. Lexicographic ranking functions are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint y = unknown_int();\n\tint z = unknown_int();\n    int x;\n    if (unknown_int()) {\n        x = 1;\n    } else {\n        x = -1;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    while (y<100 && z<100) {\n        y = y+x;\n        z = z-x;\n    }\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(100 - y, 100 - z)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, let's make note of the starting values or constraints for the variables that are live at the loop head: y, z, and x.\n\n- y and z are initialized with unknown_int(), so they can be any integer value.\n- x is either initialized with 1 or -1, and then it's incremented or decremented in each if-block. There are 9 if-blocks in total, so the possible values for x are {-9, -7, -5, -3, -1, 1, 3, 5, 7, 9}.\n\nNow, let's analyze the loop condition and the given ranking function.\n\nLoop condition: y < 100 && z < 100\nRanking function: (100 - y, 100 - z)\n\nNow let's output the loop invariants:\n\n```\n/*@ \n    loop invariant y >= \\at(y, LoopEntry);\n    loop invariant z <= \\at(z, LoopEntry);\n    loop invariant \\at(x, LoopEntry) == x;\n    loop invariant x >= -9 && x <= 9;\n    loop invariant x % 2 == 1;\n    loop invariant 100 - y >= 0;\n    loop invariant 100 - z >= 0;\n*/\n```\n\nThese loop invariants are true:\n(i) before the loop execution, since y and z are initialized with unknown_int() and x is either incremented or decremented by 1, 9 times,\n(ii) in every iteration of the loop, as y is incremented by x and z is decremented by x, and\n(iii) after the loop termination, since the loop terminates when either y >= 100 or z >= 100, and the ranking function ensures that both y and z are bound by 100.",
                    "First, let's note the starting values or constraints for the variables that are live at the loop head:\n- y and z are assigned unknown_int(), so they can be any integer value initially.\n- x goes through a series of conditional increments/decrements, but overall, it can either be 1 or -1 at the loop head.\n\nNow let's analyze the loop body and the loop condition:\n- The loop condition is \"y < 100 && z < 100\".\n- The loop body updates y and z as follows: y = y + x and z = z - x.\n\nGiven this information, let's output the loop invariants to support the loop variant (100 - y, 100 - z):\n\n```\n/*@ \n    loop invariant \\forall int k; k >= 1 && k <= 9 ==> x == (k % 2 == 0 ? 1 : -1);\n    loop invariant y <= 100;\n    loop invariant z <= 100;\n    loop invariant (x == 1) ==> (y <= z);\n    loop invariant (x == -1) ==> (z <= y);\n*/\n```",
                    "First, let's identify the starting values or constraints for the variables that are live at the loop head.\n\n- y and z are assigned unknown_int() values, so we cannot say anything about their initial values.\n- x goes through several if-else statements, where it is either incremented or decremented. We can observe that the value of x never changes after those if-else statements.\n\nNow, let's analyze the loop condition and the given ranking function.\n\nLoop condition: y < 100 && z < 100\n\nRanking function: (100 - y, 100 - z)\n\nHere are the loop invariants that support the loop variant (100 - y, 100 - z):\n\n```\n/*@ \n    loop invariant y <= 100;\n    loop invariant z <= 100;\n    loop invariant \\at(x, LoopEntry) == x;\n*/\n```\n\nThese loop invariants hold true before the loop execution, in every iteration of the loop, and after the loop termination. They imply that the ranking function decreases with every iteration, ensuring the termination of the loop.",
                    "First, let's note the starting values and constraints for the variables that are live at the loop head:\n\n- x is initialized to either 1 or -1, and then incremented or decremented 9 times. Therefore, x can have two possible values: 10 or -10.\n- y and z are initialized to unknown integer values.\n\nNow, let's analyze the loop condition and body:\n\n- Loop condition: `y < 100 && z < 100`\n- Loop body: `y = y + x; z = z - x;`\n- Given ranking function: `(100 - y, 100 - z)`\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination:\n\n```\n/*@ \n    loop invariant 10 <= x <= 10 || -10 <= x <= -10;\n    loop invariant y <= 100;\n    loop invariant z <= 100;\n    loop invariant \\at(y, LoopEntry) + \\at(z, LoopEntry) == y + z;\n*/\n```",
                    "First, let's analyze the initial values of the variables and the loop condition:\n- y and z are initialized with unknown_int() and can have any integer values.\n- x is either 1 or -1 initially, and then it goes through a series of if-else statements that always increment or decrement x. After all these if-else statements, x is either 9 or -9.\n- The loop condition is (y < 100 && z < 100).\n\nNow, let's output the loop invariants that support the loop variant (100 - y, 100 - z):\n\n```\n/*@ \n    loop invariant y <= 100;\n    loop invariant z <= 100;\n    loop invariant x == 9 || x == -9;\n    loop invariant y >= \\at(y, LoopEntry);\n    loop invariant z <= \\at(z, LoopEntry);\n*/\n```\n\nThese loop invariants ensure that the loop variant (100 - y, 100 - z) is non-negative and decreases with every iteration of the loop, proving the termination of the loop."
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant y >= \\at(y, LoopEntry);\n    loop invariant z <= \\at(z, LoopEntry);\n    loop invariant \\at(x, LoopEntry) == x;\n    loop invariant x >= -9 && x <= 9;\n    loop invariant x % 2 == 1;\n    loop invariant 100 - y >= 0;\n    loop invariant 100 - z >= 0;\n*/",
                    "/*@ \n    loop invariant \\forall int k; k >= 1 && k <= 9 ==> x == (k % 2 == 0 ? 1 : -1);\n    loop invariant y <= 100;\n    loop invariant z <= 100;\n    loop invariant (x == 1) ==> (y <= z);\n    loop invariant (x == -1) ==> (z <= y);\n*/",
                    "/*@ \n    loop invariant y <= 100;\n    loop invariant z <= 100;\n    loop invariant \\at(x, LoopEntry) == x;\n*/",
                    "/*@ \n    loop invariant 10 <= x <= 10 || -10 <= x <= -10;\n    loop invariant y <= 100;\n    loop invariant z <= 100;\n    loop invariant \\at(y, LoopEntry) + \\at(z, LoopEntry) == y + z;\n*/",
                    "/*@ \n    loop invariant y <= 100;\n    loop invariant z <= 100;\n    loop invariant x == 9 || x == -9;\n    loop invariant y >= \\at(y, LoopEntry);\n    loop invariant z <= \\at(z, LoopEntry);\n*/"
                ],
                "inductive_invariants": "loop invariant i3: \\at(x, LoopEntry) == x;\nloop invariant i4: x >= -9 && x <= 9;\nloop invariant i11: (x == 1) ==> (y <= z);\nloop invariant i12: (x == -1) ==> (z <= y);\nloop invariant i19: \\at(y, LoopEntry) + \\at(z, LoopEntry) == y + z;\nloop invariant i22: x == 9 || x == -9;",
                "final_checker_input": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint y = unknown_int();\n\tint z = unknown_int();\n    int x;\n    if (unknown_int()) {\n        x = 1;\n    } else {\n        x = -1;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    //@ ghost variant_expression measure = { 100 - y, 100 - z };\n/*@\nloop invariant i3: \\at(x, LoopEntry) == x;\nloop invariant i4: x >= -9 && x <= 9;\nloop invariant i11: (x == 1) ==> (y <= z);\nloop invariant i12: (x == -1) ==> (z <= y);\nloop invariant i19: \\at(y, LoopEntry) + \\at(z, LoopEntry) == y + z;\nloop invariant i22: x == 9 || x == -9;\nloop invariant measure.a == 100 - y && measure.b == 100 - z;\nloop variant measure for lexicographic;\n*/\nwhile (y<100 && z<100) {\n        y = y+x;\n        z = z-x;\n    \n//@ ghost measure.a = 100 - y;\n//@ ghost measure.b = 100 - z;\n}\n    return 0;\n}",
                "checker_message": "loop invariant \\at(x, LoopEntry) == x is inductive.\nloop invariant x >= -9 && x <= 9 is inductive.\nloop invariant (x == 1) ==> (y <= z) is inductive.\nloop invariant (x == -1) ==> (z <= y) is inductive.\nloop invariant \\at(y, LoopEntry) + \\at(z, LoopEntry) == y + z is inductive.\nloop invariant x == 9 || x == -9 is inductive.\n\nLoop variant is Invalid.\n",
                "success": false
            },
            {
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. Lexicographic ranking functions are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint y = unknown_int();\n\tint z = unknown_int();\n    int x;\n    if (unknown_int()) {\n        x = 1;\n    } else {\n        x = -1;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    while (y<100 && z<100) {\n        y = y+x;\n        z = z-x;\n    }\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(100 - (y < 0 ? -y : y))**, for the loop in the program above. Let's think step by step."
                    },
                    "First, let's analyze the initial values and constraints of the variables:\n\n- y and z are initialized with unknown_int(), so they can be any integer value.\n- x is initialized with either 1 or -1, depending on the result of unknown_int(). Then, it goes through a series of if statements that either increment or decrement x. After each if statement, x can be either 2 or -2. After all 9 if statements, x will still be either 2 or -2.\n\nNow, let's analyze the loop condition and body:\n\n- The loop condition is (y < 100 && z < 100), which means that the loop will continue executing as long as both y and z are less than 100.\n- Inside the loop, y is updated with (y + x) and z is updated with (z - x). Since x is either 2 or -2, the values of y and z will change by 2 or -2 in each iteration.\n\nNow, let's find the loop invariants to support the given loop variant (100 - (y < 0 ? -y : y)):\n\n- y and z are always less than 100 during the loop execution.\n- x is always 2 or -2 during the loop execution.\n- The value of y always changes by 2 or -2 in each iteration. Similarly, the value of z always changes by -2 or 2 in each iteration.\n\nBased on this analysis, we can write the following loop invariants:\n\n```\n/*@ \n    loop invariant y < 100;\n    loop invariant z < 100;\n    loop invariant x == 2 || x == -2;\n    loop invariant \\at(y, LoopEntry) % 2 == y % 2;\n    loop invariant \\at(z, LoopEntry) % 2 == z % 2;\n*/\n```",
                    "We will first make note of the starting values or constraints for the variables that are live at the loop head. Here, `y` and `z` are initialized with unknown values, and `x` is initialized and modified through a series of if-else statements. Since `x` can only be incremented or decremented, its possible values are {-2, -1, 0, 1, 2}. The loop condition is `y < 100 && z < 100`.\n\nNow, let's find the loop invariants that support the ranking function `(100 - (y < 0 ? -y : y))`. We need to show that the value of this ranking function decreases with every iteration of the loop.\n\n```\n/*@ \n    loop invariant 0 <= y <= 100;\n    loop invariant 0 <= z <= 100;\n    loop invariant -2 <= x <= 2;\n    loop invariant \\at(y, LoopEntry) + x == y;\n    loop invariant \\at(z, LoopEntry) - x == z;\n*/\n```\n\nThe loop invariants are:\n1. `0 <= y <= 100`: Since the loop condition is `y < 100`, the value of `y` will always be within this range.\n2. `0 <= z <= 100`: Similarly, since the loop condition is `z < 100`, the value of `z` will always be within this range.\n3. `-2 <= x <= 2`: As discussed earlier, the possible values of `x` are {-2, -1, 0, 1, 2} due to the if-else statements.\n4. `\\at(y, LoopEntry) + x == y`: This invariant shows that the value of `y` is updated by adding `x` in each iteration.\n5. `\\at(z, LoopEntry) - x == z`: This invariant shows that the value of `z` is updated by subtracting `x` in each iteration.\n\nThese loop invariants imply that the ranking function `(100 - (y < 0 ? -y : y))` decreases with every iteration of the loop, thus proving the termination of the loop.",
                    "We first note the starting values or constraints for the variables that are live at the loop head:\n\n- y and z are unknown integers.\n- x can be either 3 or -3 based on the conditionals before the loop.\n\nNow, let's analyze the loop body and the given ranking function (100 - (y < 0 ? -y : y)):\n\n- The loop condition is (y < 100 && z < 100).\n- In each iteration of the loop, y is increased by x and z is decreased by x. Since x can be either 3 or -3, the loop body can either increase or decrease y and z by 3.\n\nNow, we output the loop invariants:\n\n```\n/*@ \n    loop invariant y == \\at(y, LoopEntry) + x * (int)((\\at(y, LoopEntry) - y) / x);\n    loop invariant z == \\at(z, LoopEntry) - x * (int)((\\at(y, LoopEntry) - y) / x);\n    loop invariant (x == 3) || (x == -3);\n    loop invariant (y < 100) && (z < 100);\n    loop invariant (y >= 0) ==> (100 - y <= \\at((100 - y), LoopEntry));\n    loop invariant (y < 0) ==> (100 - (-y) <= \\at((100 - (-y)), LoopEntry));\n*/\n```\n\nThese loop invariants are true:\n(i) before the loop execution,\n(ii) in every iteration of the loop, and\n(iii) after the loop termination.\n\nThey imply that the ranking function (100 - (y < 0 ? -y : y)) decreases with every iteration and help prove the termination of the loop in the program.",
                    "First, let's analyze the starting values and constraints for the variables that are live at the loop head:\n- y and z are initialized with unknown_int(), so they can have any integer value.\n- x goes through a series of conditional increments or decrements depending on its value. x will be either 1, -1, 3, or -3 after all these operations.\n\nNow, let's analyze the loop condition and loop body:\n- The loop condition is (y < 100 && z < 100).\n- In the loop body, y is incremented by x, and z is decremented by x.\n\nNow, we will output the loop invariants that support the loop variant (100 - (y < 0 ? -y : y)):\n\n```\n/*@ \n    loop invariant y >= -100 && y <= 100;\n    loop invariant z >= -100 && z <= 100;\n    loop invariant x == 1 || x == -1 || x == 3 || x == -3;\n    loop invariant \\at(y, LoopEntry) <= y ==> x > 0;\n    loop invariant \\at(y, LoopEntry) >= y ==> x < 0;\n    loop invariant \\at(z, LoopEntry) <= z ==> x < 0;\n    loop invariant \\at(z, LoopEntry) >= z ==> x > 0;\n*/\n```",
                    "We start by making note of the starting values or constraints for the variables that are live at the loop head.\n\n- `x` can either be 9 or -9 based on the conditions before the loop.\n- `y` and `z` are unknown integers.\n\nNow, let's analyze the loop body and make a note of the loop condition and the given ranking function.\n\nLoop condition: `y < 100 && z < 100`\nRanking function: `(100 - (y < 0 ? -y : y))`\n\nNext, let's output loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration.\n\n```\n/*@ \n    loop invariant y >= -100 && y <= 100;\n    loop invariant z >= -100 && z <= 100;\n    loop invariant x == 9 || x == -9;\n    loop invariant \\at(y, LoopEntry) == y - x && \\at(z, LoopEntry) == z + x;\n*/\n```\n\nHere's the explanation for each invariant:\n\n1. `y >= -100 && y <= 100`: Since the loop condition is `y < 100 && z < 100`, we can infer that `y` will always be in the range of -100 to 100.\n2. `z >= -100 && z <= 100`: Similar to `y`, `z` will also be in the range of -100 to 100.\n3. `x == 9 || x == -9`: Before entering the loop, `x` can either be 9 or -9 based on the conditions.\n4. `\\at(y, LoopEntry) == y - x && \\at(z, LoopEntry) == z + x`: This invariant represents the relation between the initial values of `y` and `z` at the loop entry and their updated values during the loop iteration."
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant y < 100;\n    loop invariant z < 100;\n    loop invariant x == 2 || x == -2;\n    loop invariant \\at(y, LoopEntry) % 2 == y % 2;\n    loop invariant \\at(z, LoopEntry) % 2 == z % 2;\n*/",
                    "/*@ \n    loop invariant 0 <= y <= 100;\n    loop invariant 0 <= z <= 100;\n    loop invariant -2 <= x <= 2;\n    loop invariant \\at(y, LoopEntry) + x == y;\n    loop invariant \\at(z, LoopEntry) - x == z;\n*/",
                    "/*@ \n    loop invariant y == \\at(y, LoopEntry) + x * (int)((\\at(y, LoopEntry) - y) / x);\n    loop invariant z == \\at(z, LoopEntry) - x * (int)((\\at(y, LoopEntry) - y) / x);\n    loop invariant (x == 3) || (x == -3);\n    loop invariant (y < 100) && (z < 100);\n    loop invariant (y >= 0) ==> (100 - y <= \\at((100 - y), LoopEntry));\n    loop invariant (y < 0) ==> (100 - (-y) <= \\at((100 - (-y)), LoopEntry));\n*/",
                    "/*@ \n    loop invariant y >= -100 && y <= 100;\n    loop invariant z >= -100 && z <= 100;\n    loop invariant x == 1 || x == -1 || x == 3 || x == -3;\n    loop invariant \\at(y, LoopEntry) <= y ==> x > 0;\n    loop invariant \\at(y, LoopEntry) >= y ==> x < 0;\n    loop invariant \\at(z, LoopEntry) <= z ==> x < 0;\n    loop invariant \\at(z, LoopEntry) >= z ==> x > 0;\n*/",
                    "/*@ \n    loop invariant y >= -100 && y <= 100;\n    loop invariant z >= -100 && z <= 100;\n    loop invariant x == 9 || x == -9;\n    loop invariant \\at(y, LoopEntry) == y - x && \\at(z, LoopEntry) == z + x;\n*/"
                ],
                "inductive_invariants": "loop invariant i26: x == 9 || x == -9;",
                "final_checker_input": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint y = unknown_int();\n\tint z = unknown_int();\n    int x;\n    if (unknown_int()) {\n        x = 1;\n    } else {\n        x = -1;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    /*@\nloop invariant i26: x == 9 || x == -9;\nloop variant 100 - (y < 0 ? -y : y);\n*/\nwhile (y<100 && z<100) {\n        y = y+x;\n        z = z-x;\n    }\n    return 0;\n}",
                "checker_message": "loop invariant x == 9 || x == -9 is inductive.\n\nLoop variant is Invalid.\n",
                "success": false
            },
            {
                "checker_input": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint y = unknown_int();\n\tint z = unknown_int();\n    int x;\n    if (unknown_int()) {\n        x = 1;\n    } else {\n        x = -1;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    /*@\n\nloop variant abs(y - z);\n*/\nwhile (y<100 && z<100) {\n        y = y+x;\n        z = z-x;\n    }\n    return 0;\n}",
                "checker_message": "Annotation error on line 56: unbound logic function abs. Ignoring loop annotation",
                "success": false
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB6.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Mysore_true-termination.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusMin.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.09-no-inv_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Copenhagen_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Thun_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_flag.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c"
        ],
        "skipped": [],
        "total": 155,
        "success_count": 82,
        "failure_count": 73,
        "success_rate": 0.5290322580645161
    }
}