{
    "logs": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int a, b, q, olda;\n\tq = unknown_int();\n\ta = unknown_int();\n\tb = unknown_int();\n\twhile (q > 0) {\n\t\tq = q + a - 1;\n\t\tolda = a;\n\t\ta = 3*olda - 4*b;\n\t\tb = 4*olda + 3*b;\n\t}\n\treturn 0;\n}",
        "success": false,
        "variants": [
            [
                "0 - q"
            ],
            [
                "q + a - 1"
            ],
            [
                "q",
                "a",
                "b"
            ],
            [
                "q"
            ]
        ],
        "variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n- If the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. \n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int a, b, q, olda;\n\tq = unknown_int();\n\ta = unknown_int();\n\tb = unknown_int();\n\twhile (q > 0) {\n\t\tq = q + a - 1;\n\t\tolda = a;\n\t\ta = 3*olda - 4*b;\n\t\tb = 4*olda + 3*b;\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function (or the sequence of expressions) is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "1. Note the starting values or constraints for the variables that are live at the loop head.\n- `q`, `a`, and `b` are live at the loop head, and their initial values are unknown.\n\n2. Analyze the loop body and find a ranking function involving the variables in the loop body.\n- In the loop, `q` is updated as `q = q + a - 1`.\n- `a` is updated as `olda = a` and `a = 3*olda - 4*b`.\n- `b` is updated as `b = 4*olda + 3*b`.\n\nNow, we need to find an expression that decreases with every iteration and is positive while the loop is executing. It is not clear whether there exists a lexicographic ranking function that satisfies these conditions.\n\nHowever, we can observe that `q > 0` is the loop condition, and `q` is updated as `q = q + a - 1`. Since `a` is unknown, we cannot guarantee that `q` always decreases, but we know that if `a <= 0`, the loop will eventually terminate.\n\nSo, we can use the upper bound of `a` (i.e., `0`) and the old value of `q` in every iteration as the ranking function:\n\n```\n/*@\n    loop variant 0 - q;\n*/\n```\n\nThe ranking function `0 - q` is decreasing with every iteration when `a <= 0` and is positive while the loop is executing (`q > 0`).",
            "First, let's make note of the starting values or constraints for the variables that are live at the loop head.\n\n1. `q` is initialized with `unknown_int()`, so it can be any integer value.\n2. `a` is initialized with `unknown_int()`, so it can be any integer value.\n3. `b` is initialized with `unknown_int()`, so it can be any integer value.\n\nNow, let's analyze the loop body and find a ranking function involving the variables in the loop body.\n\nIn the loop body, we have the following updates:\n\n1. `q = q + a - 1`\n2. `a = 3*olda - 4*b`\n3. `b = 4*olda + 3*b`\n\nSince the loop condition is `q > 0`, we need to find a ranking function that is decreasing with every iteration of the loop and evaluates to a positive value while the loop is executing.\n\nLet's consider the expression `q + a - 1` as our ranking function. This expression is decreasing with every iteration because `q` is being replaced by `q + a - 1`, and `a` is updated to `3*olda - 4*b`, which is also decreasing.\n\nThe ranking function is:\n\n```\n/*@\n    loop variant q + a - 1;\n*/\n```\n\nThis ranking function is valid because it is decreasing with every iteration of the loop, and it evaluates to a positive value while the loop is executing.",
            "First, let's make note of the starting values or constraints for the variables that are live at the loop head:\n\n- q is an unknown integer\n- a is an unknown integer\n- b is an unknown integer\n\nNow, let's analyze the loop body and find a ranking function involving the variables in the loop body:\n\n1. q = q + a - 1;\n2. olda = a;\n3. a = 3 * olda - 4 * b;\n4. b = 4 * olda + 3 * b;\n\nLet's consider the lexicographic tuple (q, a, b) as the ranking function candidate:\n\n- The value of q decreases in every iteration because q = q + a - 1 and a is a positive integer.\n- The value of a is updated in each iteration using olda and b, but it does not necessarily decrease in every iteration.\n- The value of b is updated in each iteration using olda and b, but it does not necessarily decrease in every iteration.\n\nHowever, since the loop termination condition is q > 0, the value of q must be positive for the loop to continue executing. Therefore, the lexicographic tuple (q, a, b) is a valid ranking function for the given loop.\n\nOutput the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant q;\n    loop variant a;\n    loop variant b;\n*/\n```",
            "1. Make note of the starting values or constraints for the variables that are live at the loop head.\n\nThe live variables at the loop head are `a`, `b`, and `q`. Their starting values are unknown as they are assigned using `unknown_int()`.\n\n2. Analyze the loop body and find a ranking function involving the variables in the loop body.\n\nIn the loop body, `q` is updated as `q = q + a - 1`, `a` is updated as `a = 3*olda - 4*b`, and `b` is updated as `b = 4*olda + 3*b`. The loop continues executing as long as `q > 0`.\n\n3. Output the ranking function in one code block, in ACSL syntax.\n\nSince we have no information about the initial values of `a`, `b`, and `q`, it is not possible to find a ranking function that is guaranteed to decrease with every iteration and be positive while the loop is executing. The ranking function would depend on the initial values of the variables, which are unknown in this case.",
            "First, let's identify the variables that are live at the loop head:\n- `q`\n- `a`\n- `b`\n\nNow, let's analyze the loop body and find a ranking function involving the variables in the loop body.\n\nWe can notice that `q` is always decreasing in the loop, as it is updated as `q = q + a - 1`, and `a` and `b` are updated as `a = 3*olda - 4*b` and `b = 4*olda + 3*b` respectively. \n\nThe loop condition is `q > 0`. To find a ranking function, we can use the value of `q` itself:\n\n```\n/*@\n    loop variant q;\n*/\n```\n\nThis is a valid ranking function because it ensures that `q` is always positive and decreasing with every iteration of the loop."
        ],
        "variant_log": [
            {
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. Lexicographic ranking functions are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int a, b, q, olda;\n\tq = unknown_int();\n\ta = unknown_int();\n\tb = unknown_int();\n\twhile (q > 0) {\n\t\tq = q + a - 1;\n\t\tolda = a;\n\t\ta = 3*olda - 4*b;\n\t\tb = 4*olda + 3*b;\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(0 - q)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, let's analyze the variables and loop conditions:\n\n- Variables `q`, `a`, and `b` are non-negative integers.\n- The loop continues as long as `q > 0`.\n\nNow, let's analyze the loop body:\n\n1. `q` is updated to `q + a - 1`\n2. `olda` is assigned the value of `a`\n3. `a` is updated to `3*olda - 4*b`\n4. `b` is updated to `4*olda + 3*b`\n\nGiven the ranking function `(0 - q)`, we need to find loop invariants that support this ranking function and prove the termination of the loop. Here are the loop invariants:\n\n```\n/*@ \n    loop invariant q >= 0;\n    loop invariant a >= 0;\n    loop invariant b >= 0;\n    loop invariant \\at(q, LoopEntry) - q >= 1;\n    loop invariant \\at(a, LoopEntry) - a >= -4 * \\at(b, LoopEntry);\n    loop invariant \\at(b, LoopEntry) + a <= 4 * \\at(a, LoopEntry);\n*/\n```\n\nThese loop invariants ensure that:\n\n1. `q`, `a`, and `b` are always non-negative.\n2. `q` decreases by at least 1 in each iteration.\n3. The difference between the starting value of `a` and the updated value of `a` is bounded.\n4. The sum of the starting value of `b` and the updated value of `a` is bounded.\n\nThese invariants support the ranking function `(0 - q)` and prove the termination of the loop.",
                    "1. Note the starting values or constraints for the variables that are live at the loop head:\n- q, a, and b are initialized with unknown_int() and can take any integer value.\n\n2. Analyze the loop body and make a note of the loop condition and the given ranking function:\n- Loop condition: q > 0\n- Ranking function: (0 - q)\n\n3. Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration:\n\n```c\n/*@ \n    loop invariant 0 <= \\at(q, LoopEntry);\n    loop invariant 0 - q < \\at(0 - q, LoopEntry);\n    loop invariant a == 3 * \\at(a, LoopEntry) - 4 * \\at(b, LoopEntry);\n    loop invariant b == 4 * \\at(a, LoopEntry) + 3 * \\at(b, LoopEntry);\n*/\n```\nThese loop invariants ensure that the loop terminates and they support the validity of the ranking function (0 - q).",
                    "First, let's identify the variables that are live at the loop head and their starting values or constraints:\n\n- q: unknown_int()\n- a: unknown_int()\n- b: unknown_int()\n\nNext, let's analyze the loop body and make a note of the loop condition and the given ranking function:\n\n- Loop condition: q > 0\n- Ranking function: (0 - q)\n\nNow, let's find the loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\n1. At loop entry, the value of q is the same as \\at(q, LoopEntry).\n2. In every iteration of the loop, the value of olda becomes the previous value of a.\n3. In every iteration of the loop, the value of a changes according to the formula: a = 3*olda - 4*b.\n4. In every iteration of the loop, the value of b changes according to the formula: b = 4*olda + 3*b.\n5. In every iteration of the loop, the value of q changes according to the formula: q = q + a - 1.\n\nNow, let's put these loop invariants together:\n\n```\n/*@ \n    loop invariant q == \\at(q, LoopEntry) || q <= \\at(q, LoopEntry);\n    loop invariant olda == \\at(a, PreLoop) || olda == a;\n    loop invariant a == 3*olda - 4*b || a == \\at(a, LoopEntry);\n    loop invariant b == 4*olda + 3*b || b == \\at(b, LoopEntry);\n    loop invariant q == q + a - 1 || q == \\at(q, LoopEntry);\n*/\n```\n\nThese loop invariants support the validity of the ranking function (0 - q) and prove the termination of the loop.",
                    "First, let's identify the loop head, loop condition, and the variables that are live at the loop head.\n\nLoop head: The statement \"q = q + a - 1;\"\nLoop condition: q > 0\nVariables live at the loop head: a, b, q, olda\n\nNow, let's analyze the loop body and find the loop invariants that support the ranking function (0 - q).\n\nLoop invariants:\n\n1. q is non-negative before the loop execution, in every iteration, and after the loop termination.\n2. a and b are integers, and their values change in every iteration.\n3. olda is always equal to the value of a at the beginning of the loop.\n\nThe loop invariants that support the ranking function (0 - q) are:\n\n```\n/*@ \n    loop invariant q >= 0;\n    loop invariant \\at(a, LoopEntry) == olda;\n    loop invariant a == 3*olda - 4*b;\n    loop invariant b == 4*olda + 3*b;\n*/\n```\n\nThese loop invariants imply that the ranking function (0 - q) decreases with every iteration, and thus the loop terminates.",
                    "First, let's identify the loop head and the loop condition:\n\nLoop head: `while (q > 0)`\nLoop condition: `q > 0`\nRanking function: `0 - q`\n\nNow, let's analyze the loop body and note the updates to the variables:\n\n1. `q = q + a - 1`\n2. `olda = a`\n3. `a = 3 * olda - 4 * b`\n4. `b = 4 * olda + 3 * b`\n\nNow, let's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination.\n\nLoop invariants:\n\n```\n/*@ \n    loop invariant q >= 0;\n    loop invariant a == 3 * \\at(a, LoopEntry) - 4 * \\at(b, LoopEntry) + 4 * q;\n    loop invariant b == 4 * \\at(a, LoopEntry) + 3 * \\at(b, LoopEntry) - 3 * q;\n*/\n```\n\nExplanation:\n\n1. The value of `q` is always non-negative. This is true because the loop only executes when `q > 0`, and when the loop terminates, `q <= 0`.\n2. The value of `a` can be derived from its initial value, the initial value of `b`, and the value of `q`. This is true in every iteration of the loop.\n3. Similarly, the value of `b` can be derived from its initial value, the initial value of `a`, and the value of `q`. This is true in every iteration of the loop.\n\nThese loop invariants, together with the ranking function `(0 - q)`, prove the termination of the loop."
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant q >= 0;\n    loop invariant a >= 0;\n    loop invariant b >= 0;\n    loop invariant \\at(q, LoopEntry) - q >= 1;\n    loop invariant \\at(a, LoopEntry) - a >= -4 * \\at(b, LoopEntry);\n    loop invariant \\at(b, LoopEntry) + a <= 4 * \\at(a, LoopEntry);\n*/",
                    "/*@ \n    loop invariant 0 <= \\at(q, LoopEntry);\n    loop invariant 0 - q < \\at(0 - q, LoopEntry);\n    loop invariant a == 3 * \\at(a, LoopEntry) - 4 * \\at(b, LoopEntry);\n    loop invariant b == 4 * \\at(a, LoopEntry) + 3 * \\at(b, LoopEntry);\n*/",
                    "/*@ \n    loop invariant q == \\at(q, LoopEntry) || q <= \\at(q, LoopEntry);\n    loop invariant olda == \\at(a, PreLoop) || olda == a;\n    loop invariant a == 3*olda - 4*b || a == \\at(a, LoopEntry);\n    loop invariant b == 4*olda + 3*b || b == \\at(b, LoopEntry);\n    loop invariant q == q + a - 1 || q == \\at(q, LoopEntry);\n*/",
                    "/*@ \n    loop invariant q >= 0;\n    loop invariant \\at(a, LoopEntry) == olda;\n    loop invariant a == 3*olda - 4*b;\n    loop invariant b == 4*olda + 3*b;\n*/",
                    "/*@ \n    loop invariant q >= 0;\n    loop invariant a == 3 * \\at(a, LoopEntry) - 4 * \\at(b, LoopEntry) + 4 * q;\n    loop invariant b == 4 * \\at(a, LoopEntry) + 3 * \\at(b, LoopEntry) - 3 * q;\n*/"
                ],
                "inductive_invariants": "",
                "final_checker_input": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int a, b, q, olda;\n\tq = unknown_int();\n\ta = unknown_int();\n\tb = unknown_int();\n\t/*@\n\nloop variant 0 - q;\n*/\nwhile (q > 0) {\n\t\tq = q + a - 1;\n\t\tolda = a;\n\t\ta = 3*olda - 4*b;\n\t\tb = 4*olda + 3*b;\n\t}\n\treturn 0;\n}",
                "checker_message": "\n\nLoop variant is Invalid.\n",
                "success": false
            },
            {
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. Lexicographic ranking functions are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int a, b, q, olda;\n\tq = unknown_int();\n\ta = unknown_int();\n\tb = unknown_int();\n\twhile (q > 0) {\n\t\tq = q + a - 1;\n\t\tolda = a;\n\t\ta = 3*olda - 4*b;\n\t\tb = 4*olda + 3*b;\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(q + a - 1)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, let's note the starting values or constraints for the variables that are live at the loop head:\n\n- q, a, and b are initialized with unknown_int(), which means they can take any integer value.\n\nNow let's analyze the loop body and make a note of the loop condition and the given ranking function:\n\n- Loop condition: q > 0\n- Ranking function: (q + a - 1)\n\nWe want to find loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration.\n\n```\n/*@ \n    loop invariant q >= 0;\n    loop invariant \\at(a, LoopEntry) >= 1;\n    loop invariant \\at(a, LoopEntry) <= a;\n    loop invariant \\at(b, LoopEntry) <= b;\n*/\n```",
                    "First, let's analyze the loop body and the given ranking function:\n\n1. The loop condition is `q > 0`.\n2. The ranking function is `q + a - 1`.\n\nNow, let's find the loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\n```\n/*@ \n    loop invariant \\at(q, LoopEntry) + \\at(a, LoopEntry) - 1 >= 0;\n    loop invariant a - b < 0;\n    loop invariant b - 4*\\at(a, LoopEntry) - 3*\\at(b, LoopEntry) < 0;\n*/\n```",
                    "First, we note the initial constraints and the loop condition:\n- q, a, and b are assigned values from unknown_int(), so they can be any integer.\n- The loop condition is q > 0.\n\nNow, let's analyze the loop body and the provided ranking function (q + a - 1):\n- In each iteration, q is updated to q + a - 1.\n- olda is assigned the current value of a.\n- a is updated to 3 * olda - 4 * b.\n- b is updated to 4 * olda + 3 * b.\n\nNow, let's find the loop invariants that support the validity of the ranking function (q + a - 1):\n\n```\n/*@ \n    loop invariant 0 <= q;\n    loop invariant 0 <= a;\n    loop invariant \\at(a, LoopEntry) == 3 * a - 4 * b;\n    loop invariant \\at(b, LoopEntry) == 4 * a + 3 * b;\n    loop invariant q + a - 1 >= 0;\n*/\n```\n\nThese loop invariants hold true before the loop execution, in every iteration of the loop, and after the loop termination. They imply that the ranking function (q + a - 1) decreases with every iteration, which proves the termination of the loop.",
                    "We'll first note the starting values or constraints for the variables that are live at the loop head: q, a, and b are assigned values from unknown_int(), which means they can have any integer value.\n\nNext, we analyze the loop body and make a note of the loop condition and the given ranking function. The loop condition is \"q > 0\", and the given ranking function is \"(q + a - 1)\".\n\nNow, we'll find the loop invariants that support the validity of the ranking function and prove the termination of the loop:\n\n/*@ \n    loop invariant q >= 0;\n    loop invariant a == 3*\\at(a, LoopEntry) - 4*\\at(b, LoopEntry);\n    loop invariant b == 4*\\at(a, LoopEntry) + 3*\\at(b, LoopEntry);\n    loop invariant q + a - 1 == \\at(q, LoopEntry) + \\at(a, LoopEntry) - 1;\n*/\n",
                    "First, let's note the starting values and constraints for the variables live at the loop head:\n- q is initialized with unknown_int(), so it can have any integer value.\n- a is initialized with unknown_int(), so it can have any integer value.\n- b is initialized with unknown_int(), so it can have any integer value.\n\nNext, let's analyze the loop body and the given ranking function:\n- Loop condition: q > 0\n- Loop body:\n  - q = q + a - 1;\n  - olda = a;\n  - a = 3 * olda - 4 * b;\n  - b = 4 * olda + 3 * b;\n- Ranking function: (q + a - 1)\n\nNow, let's output the loop invariants that support the validity of the ranking function and prove the termination of the loop:\n\n```\n/*@ \n    loop invariant q >= 0;\n    loop invariant a >= \\at(a, LoopEntry);\n    loop invariant b >= \\at(b, LoopEntry);\n    loop invariant q <= \\at(q, LoopEntry) + \\at(a, LoopEntry) - 1;\n*/\n```"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant q >= 0;\n    loop invariant \\at(a, LoopEntry) >= 1;\n    loop invariant \\at(a, LoopEntry) <= a;\n    loop invariant \\at(b, LoopEntry) <= b;\n*/",
                    "/*@ \n    loop invariant \\at(q, LoopEntry) + \\at(a, LoopEntry) - 1 >= 0;\n    loop invariant a - b < 0;\n    loop invariant b - 4*\\at(a, LoopEntry) - 3*\\at(b, LoopEntry) < 0;\n*/",
                    "/*@ \n    loop invariant 0 <= q;\n    loop invariant 0 <= a;\n    loop invariant \\at(a, LoopEntry) == 3 * a - 4 * b;\n    loop invariant \\at(b, LoopEntry) == 4 * a + 3 * b;\n    loop invariant q + a - 1 >= 0;\n*/",
                    [
                        "ERROR: Output does not contain at least 1 complete code block",
                        "We'll first note the starting values or constraints for the variables that are live at the loop head: q, a, and b are assigned values from unknown_int(), which means they can have any integer value.\n\nNext, we analyze the loop body and make a note of the loop condition and the given ranking function. The loop condition is \"q > 0\", and the given ranking function is \"(q + a - 1)\".\n\nNow, we'll find the loop invariants that support the validity of the ranking function and prove the termination of the loop:\n\n/*@ \n    loop invariant q >= 0;\n    loop invariant a == 3*\\at(a, LoopEntry) - 4*\\at(b, LoopEntry);\n    loop invariant b == 4*\\at(a, LoopEntry) + 3*\\at(b, LoopEntry);\n    loop invariant q + a - 1 == \\at(q, LoopEntry) + \\at(a, LoopEntry) - 1;\n*/\n"
                    ],
                    "/*@ \n    loop invariant q >= 0;\n    loop invariant a >= \\at(a, LoopEntry);\n    loop invariant b >= \\at(b, LoopEntry);\n    loop invariant q <= \\at(q, LoopEntry) + \\at(a, LoopEntry) - 1;\n*/"
                ],
                "inductive_invariants": "",
                "final_checker_input": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int a, b, q, olda;\n\tq = unknown_int();\n\ta = unknown_int();\n\tb = unknown_int();\n\t/*@\n\nloop variant q + a - 1;\n*/\nwhile (q > 0) {\n\t\tq = q + a - 1;\n\t\tolda = a;\n\t\ta = 3*olda - 4*b;\n\t\tb = 4*olda + 3*b;\n\t}\n\treturn 0;\n}",
                "checker_message": "\n\nLoop variant is Invalid.\n",
                "success": false
            },
            {
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. Lexicographic ranking functions are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int a, b, q, olda;\n\tq = unknown_int();\n\ta = unknown_int();\n\tb = unknown_int();\n\twhile (q > 0) {\n\t\tq = q + a - 1;\n\t\tolda = a;\n\t\ta = 3*olda - 4*b;\n\t\tb = 4*olda + 3*b;\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(q, a, b)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, let's note the starting values or constraints for the variables that are live at the loop head:\n\n- q = unknown_int() (no specific constraints)\n- a = unknown_int() (no specific constraints)\n- b = unknown_int() (no specific constraints)\n\nNow, let's analyze the loop body and make a note of the loop condition and the given ranking function:\n\nLoop condition: q > 0\nRanking function: (q, a, b)\n\nNow, let's find the loop invariants that support the ranking function and prove the termination of the loop:\n\n```\n/*@ \n    loop invariant q == \\at(q, LoopEntry) + a - 1 - olda;\n    loop invariant a == 3*olda - 4*b + 4*\\at(b, LoopEntry);\n    loop invariant b == 4*olda + 3*\\at(b, LoopEntry);\n*/\n```\n\nThese loop invariants imply that the ranking function (q, a, b) decreases with every iteration of the loop, ensuring termination.",
                    "First, let's analyze the given program and loop:\n\n- Variables live at the loop head: q, a, b\n- Loop condition: q > 0\n- Loop body:\n  - q = q + a - 1\n  - olda = a\n  - a = 3 * olda - 4 * b\n  - b = 4 * olda + 3 * b\n\nNow let's find the loop invariants that support the lexicographic ranking function (q, a, b):\n\n1. Initial values or constraints:\n   - q, a, and b are uninitialized, so no specific constraints on their initial values.\n\n2. Loop condition:\n   - q > 0\n\n3. Loop body:\n   - q decreases by 1 - a, which is non-negative since q > 0 and q = q + a - 1.\n   - a and b change their values based on their previous values and each other.\n\nConsidering these properties, we can write the loop invariants:\n\n```\n/*@ \n    loop invariant q >= 0;\n    loop invariant a == 3 * \\at(a, LoopEntry) - 4 * \\at(b, LoopEntry);\n    loop invariant b == 4 * \\at(a, LoopEntry) + 3 * \\at(b, LoopEntry);\n*/\n```\n\nThese loop invariants are true:\n- before the loop execution, as there are no specific constraints on the initial values of q, a, and b.\n- in every iteration of the loop, as the loop condition ensures that q > 0, and the loop body updates a and b based on their previous values and each other.\n- after the loop termination, as the loop terminates when q <= 0, and the loop invariants still hold for the final values of a and b.",
                    "First, let's make a note of the starting values and constraints for the variables that are live at the loop head:\n\n- q, a, and b are all assigned non-deterministic integer values from `unknown_int()` function.\n- There are no specific constraints on their initial values.\n\nNext, let's analyze the loop body:\n\n- The loop condition is `q > 0`.\n- The given lexicographic ranking function is (q, a, b).\n- In each iteration of the loop, the following updates are performed:\n  - `q` is updated to `q + a - 1`.\n  - `olda` is assigned the current value of `a`.\n  - `a` is updated to `3 * olda - 4 * b`.\n  - `b` is updated to `4 * olda + 3 * b`.\n\nNow, let's output the loop invariants that hold before the loop execution, in every iteration of the loop, and after the loop termination, such that they imply that the ranking function decreases with every iteration:\n\n```\n/*@ \n    loop invariant \\at(q, LoopEntry) >= 0;\n    loop invariant q >= 0 ==> q <= \\at(q, LoopEntry);\n    loop invariant q <= 0 ==> q >= \\at(q, LoopEntry) - a + 1;\n*/\n```",
                    "First, let's make a note of the starting values or constraints for the variables that are live at the loop head. We have:\n\n- `q` is an integer with an unknown initial value.\n- `a` is an integer with an unknown initial value.\n- `b` is an integer with an unknown initial value.\n\nNow, let's analyze the loop body and make a note of the loop condition and the given ranking function. The loop condition is `q > 0`, and the ranking function is `(q, a, b)`.\n\nNow we can output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration:\n\n```\n/*@ \n    loop invariant q >= 0;\n    loop invariant \\at(q, LoopEntry) >= q;\n    loop invariant \\at(a, LoopEntry) == 3*a - 4*b - 1;\n    loop invariant \\at(b, LoopEntry) == 4*a + 3*b;\n*/\n```",
                    "First, let's identify the variables live at the loop head and their starting values or constraints:\n- q, a, and b are live at the loop head and are initialized to unknown_int() values.\n\nNow, let's analyze the loop body, loop condition, and the given ranking function:\n- Loop condition: q > 0\n- Loop body:\n  - q = q + a - 1\n  - olda = a\n  - a = 3*olda - 4*b\n  - b = 4*olda + 3*b\n- Ranking function: (q, a, b)\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration:\n\n```\n/*@ \n    loop invariant q >= 0;\n    loop invariant q <= \\at(q, LoopEntry) + \\at(a, LoopEntry) - 1;\n    loop invariant a == 3*\\at(a, LoopEntry) - 4*\\at(b, LoopEntry) + 4*(b - 3*\\at(b, LoopEntry));\n    loop invariant b == 4*\\at(a, LoopEntry) + 3*\\at(b, LoopEntry) - 3*(a - 3*\\at(a, LoopEntry) + 4*\\at(b, LoopEntry));\n*/\n```\n\nThese loop invariants imply that the ranking function (q, a, b) decreases with every iteration, thus proving the termination of the loop."
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant q == \\at(q, LoopEntry) + a - 1 - olda;\n    loop invariant a == 3*olda - 4*b + 4*\\at(b, LoopEntry);\n    loop invariant b == 4*olda + 3*\\at(b, LoopEntry);\n*/",
                    "/*@ \n    loop invariant q >= 0;\n    loop invariant a == 3 * \\at(a, LoopEntry) - 4 * \\at(b, LoopEntry);\n    loop invariant b == 4 * \\at(a, LoopEntry) + 3 * \\at(b, LoopEntry);\n*/",
                    "/*@ \n    loop invariant \\at(q, LoopEntry) >= 0;\n    loop invariant q >= 0 ==> q <= \\at(q, LoopEntry);\n    loop invariant q <= 0 ==> q >= \\at(q, LoopEntry) - a + 1;\n*/",
                    "/*@ \n    loop invariant q >= 0;\n    loop invariant \\at(q, LoopEntry) >= q;\n    loop invariant \\at(a, LoopEntry) == 3*a - 4*b - 1;\n    loop invariant \\at(b, LoopEntry) == 4*a + 3*b;\n*/",
                    "/*@ \n    loop invariant q >= 0;\n    loop invariant q <= \\at(q, LoopEntry) + \\at(a, LoopEntry) - 1;\n    loop invariant a == 3*\\at(a, LoopEntry) - 4*\\at(b, LoopEntry) + 4*(b - 3*\\at(b, LoopEntry));\n    loop invariant b == 4*\\at(a, LoopEntry) + 3*\\at(b, LoopEntry) - 3*(a - 3*\\at(a, LoopEntry) + 4*\\at(b, LoopEntry));\n*/"
                ],
                "inductive_invariants": "",
                "final_checker_input": "\n        typedef struct {\n        int a;\nint b;\nint c;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b) ||\n (v1.c >= 0 && v1.a == v2.a && v1.b == v2.b && v1.c > v2.c);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int a, b, q, olda;\n\tq = unknown_int();\n\ta = unknown_int();\n\tb = unknown_int();\n\t//@ ghost variant_expression measure = { q, a, b };\n/*@\n\nloop invariant measure.a == q && measure.b == a && measure.c == b;\nloop variant measure for lexicographic;\n*/\nwhile (q > 0) {\n\t\tq = q + a - 1;\n\t\tolda = a;\n\t\ta = 3*olda - 4*b;\n\t\tb = 4*olda + 3*b;\n\t\n//@ ghost measure.a = q;\n//@ ghost measure.b = a;\n//@ ghost measure.c = b;\n}\n\treturn 0;\n}",
                "checker_message": "\n\nLoop variant is Invalid.\n",
                "success": false
            },
            {
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. Lexicographic ranking functions are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int a, b, q, olda;\n\tq = unknown_int();\n\ta = unknown_int();\n\tb = unknown_int();\n\twhile (q > 0) {\n\t\tq = q + a - 1;\n\t\tolda = a;\n\t\ta = 3*olda - 4*b;\n\t\tb = 4*olda + 3*b;\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(q)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, let's analyze the loop condition and the given ranking function. The loop condition is `q > 0` and the ranking function is `(q)`. Now, we need to find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\n```\n/*@ \n    loop invariant \\at(q, LoopEntry) > 0;\n    loop invariant q <= \\at(q, LoopEntry) + \\at(a, LoopEntry) - 1;\n    loop invariant a == 3 * \\at(a, LoopEntry) - 4 * \\at(b, LoopEntry) ==> q < \\at(q, LoopEntry);\n*/\n```",
                    "First, let's note the starting values or constraints for the variables that are live at the loop head:\n- q is an integer with an unknown value.\n- a is an integer with an unknown value.\n- b is an integer with an unknown value.\n\nNext, let's analyze the loop body and make a note of the loop condition and the given ranking function:\n- Loop condition: q > 0\n- Ranking function: q\n\nNow, let's output loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration.\n\n```\n/*@ \n    loop invariant q >= 0;\n    loop invariant a == \\at(a, LoopEntry) + (3 * \\at(a, LoopEntry) - 4 * \\at(b, LoopEntry)) * (q - \\at(q, LoopEntry));\n    loop invariant b == \\at(b, LoopEntry) + (4 * \\at(a, LoopEntry) + 3 * \\at(b, LoopEntry)) * (q - \\at(q, LoopEntry));\n*/\n```",
                    "First, let's analyze the loop conditions and note the ranking function:\n\nThe loop condition is (q > 0), and the ranking function is q. We need to find the loop invariants that support the validity of the ranking function and ensure the loop terminates.\n\nNow, let's output the loop invariants:\n\n```\n/*@ \n    loop invariant q >= 0;\n    loop invariant \\at(a, LoopEntry) == 3*a - 4*b + 4*\\at(b, LoopEntry);\n    loop invariant \\at(b, LoopEntry) == 4*a + 3*b - 3*\\at(a, LoopEntry);\n*/\n```",
                    "We have the loop with the following loop head and loop body:\n\nLoop head: `while (q > 0)`\n\nLoop body: \n```\n{\n\tq = q + a - 1;\n\tolda = a;\n\ta = 3*olda - 4*b;\n\tb = 4*olda + 3*b;\n}\n```\n\nAnd the given ranking function is (q).\n\nNow, we need to find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nLoop invariants:\n\n1. Before the loop execution, q, a, and b are initialized with unknown integers. So we can't make any assumptions about their initial values.\n\n2. In every iteration of the loop, the value of q is updated with the expression (q + a - 1), the value of a is updated with the expression (3 * olda - 4 * b), and the value of b is updated with the expression (4 * olda + 3 * b).\n\n3. After the loop termination, q must be less than or equal to 0, because the loop condition is (q > 0).\n\nNow, let's output the loop invariants:\n\n```\n/*@ \n    loop invariant q >= \\at(q, LoopEntry);\n    loop invariant a == 3*\\at(a, LoopEntry) - 4*\\at(b, LoopEntry) + 4*(\\at(a, LoopEntry) - \\at(b, LoopEntry))*(\\at(q, LoopEntry) - q);\n    loop invariant b == 4*\\at(a, LoopEntry) + 3*\\at(b, LoopEntry) + 3*(\\at(a, LoopEntry) - \\at(b, LoopEntry))*(\\at(q, LoopEntry) - q);\n*/\n```",
                    "/*@ \n    loop invariant 0 <= q;\n    loop invariant 0 <= a - \\at(a, LoopEntry);\n    loop invariant 0 <= b - \\at(b, LoopEntry);\n    loop invariant 0 <= b + a - \\at(a, LoopEntry) - \\at(b, LoopEntry);\n*/\n"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant \\at(q, LoopEntry) > 0;\n    loop invariant q <= \\at(q, LoopEntry) + \\at(a, LoopEntry) - 1;\n    loop invariant a == 3 * \\at(a, LoopEntry) - 4 * \\at(b, LoopEntry) ==> q < \\at(q, LoopEntry);\n*/",
                    "/*@ \n    loop invariant q >= 0;\n    loop invariant a == \\at(a, LoopEntry) + (3 * \\at(a, LoopEntry) - 4 * \\at(b, LoopEntry)) * (q - \\at(q, LoopEntry));\n    loop invariant b == \\at(b, LoopEntry) + (4 * \\at(a, LoopEntry) + 3 * \\at(b, LoopEntry)) * (q - \\at(q, LoopEntry));\n*/",
                    "/*@ \n    loop invariant q >= 0;\n    loop invariant \\at(a, LoopEntry) == 3*a - 4*b + 4*\\at(b, LoopEntry);\n    loop invariant \\at(b, LoopEntry) == 4*a + 3*b - 3*\\at(a, LoopEntry);\n*/",
                    "/*@ \n    loop invariant q >= \\at(q, LoopEntry);\n    loop invariant a == 3*\\at(a, LoopEntry) - 4*\\at(b, LoopEntry) + 4*(\\at(a, LoopEntry) - \\at(b, LoopEntry))*(\\at(q, LoopEntry) - q);\n    loop invariant b == 4*\\at(a, LoopEntry) + 3*\\at(b, LoopEntry) + 3*(\\at(a, LoopEntry) - \\at(b, LoopEntry))*(\\at(q, LoopEntry) - q);\n*/",
                    [
                        "ERROR: Output does not contain at least 1 complete code block",
                        "/*@ \n    loop invariant 0 <= q;\n    loop invariant 0 <= a - \\at(a, LoopEntry);\n    loop invariant 0 <= b - \\at(b, LoopEntry);\n    loop invariant 0 <= b + a - \\at(a, LoopEntry) - \\at(b, LoopEntry);\n*/\n"
                    ]
                ],
                "inductive_invariants": "",
                "final_checker_input": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int a, b, q, olda;\n\tq = unknown_int();\n\ta = unknown_int();\n\tb = unknown_int();\n\t/*@\n\nloop variant q;\n*/\nwhile (q > 0) {\n\t\tq = q + a - 1;\n\t\tolda = a;\n\t\ta = 3*olda - 4*b;\n\t\tb = 4*olda + 3*b;\n\t}\n\treturn 0;\n}",
                "checker_message": "\n\nLoop variant is Invalid.\n",
                "success": false
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB6.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Mysore_true-termination.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusMin.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.09-no-inv_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Copenhagen_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_easySum.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA6.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Gothenburg_v2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.08.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.03.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB11.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1c_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.04.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.02.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_AG313.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig1_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Thun_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_flag.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/McCarthy91_Iteration_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NO_24.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Copenhagen_disj_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Bangalore_v4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ComplInterv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChooseLife.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c"
        ],
        "skipped": [],
        "total": 215,
        "success_count": 114,
        "failure_count": 101,
        "success_rate": 0.5302325581395348
    }
}