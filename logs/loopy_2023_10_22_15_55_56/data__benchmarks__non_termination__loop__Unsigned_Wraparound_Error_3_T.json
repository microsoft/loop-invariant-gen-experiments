{
    "logs": {
        "file": "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n    unsigned int pathlen = unknown_uint();\n    unsigned int newbufsize = unknown_uint();\n    unsigned int len = unknown_uint();\n    if( newbufsize + len + 1 == 0xffffffff )\n        return 0;\n    if( newbufsize == 0 )\n        return 0;\n    while( newbufsize < pathlen + len + 1 )\n    {\n        if( newbufsize >= 0x80000000 )\n            newbufsize = 0xffffffff;\n        else\n            newbufsize *= 2;\n    }\n    return 0;\n}",
        "success": true,
        "variants": [
            [
                "(pathlen + len + 1) - newbufsize"
            ],
            [
                "0xffffffff - newbufsize"
            ],
            [
                "pathlen + len + 1 - newbufsize"
            ],
            [
                "(0xffffffff - newbufsize)"
            ]
        ],
        "variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n- If the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. \n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n    unsigned int pathlen = unknown_uint();\n    unsigned int newbufsize = unknown_uint();\n    unsigned int len = unknown_uint();\n    if( newbufsize + len + 1 == 0xffffffff )\n        return 0;\n    if( newbufsize == 0 )\n        return 0;\n    while( newbufsize < pathlen + len + 1 )\n    {\n        if( newbufsize >= 0x80000000 )\n            newbufsize = 0xffffffff;\n        else\n            newbufsize *= 2;\n    }\n    return 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function (or the sequence of expressions) is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "1. The loop condition is `newbufsize < pathlen + len + 1`. The variables involved in the loop condition are `newbufsize`, `pathlen`, and `len`.\n\n2. Inside the loop, `newbufsize` is either doubled or set to `0xffffffff`. In both cases, the value of `newbufsize` increases.\n\n3. The loop will continue executing as long as `newbufsize < pathlen + len + 1`. So, the difference `(pathlen + len + 1) - newbufsize` should be positive. Also, this difference should decrease with every iteration of the loop.\n\n4. The ranking function can be `(pathlen + len + 1) - newbufsize`. Since `newbufsize` increases with every iteration, the ranking function is decreasing, and it's always positive because of the loop condition.\n\nHere's the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant (pathlen + len + 1) - newbufsize;\n*/\n```",
            "1. Note the starting values or constraints for the variables that are live at the loop head:\n- newbufsize: unknown_uint(), but newbufsize > 0 (from the if condition before the loop)\n- pathlen: unknown_uint()\n- len: unknown_uint()\n\n2. Analyze the loop body and find a ranking function involving the variables in the loop body:\n- The loop condition is newbufsize < pathlen + len + 1, meaning the loop will continue executing until newbufsize >= pathlen + len + 1.\n- Inside the loop, newbufsize is either doubled (newbufsize *= 2) or set to its maximum value (newbufsize = 0xffffffff).\n\n3. Output the ranking function in one code block, in ACSL syntax:\n\n```c\n/*@\n    loop variant (pathlen + len + 1) - newbufsize;\n*/\n```\n\n4. Explain why it is a valid ranking function:\n- The expression (pathlen + len + 1) - newbufsize is positive because newbufsize < pathlen + len + 1 according to the loop condition.\n- The value of the expression decreases with every iteration since newbufsize is either doubled or set to its maximum value, both of which result in a smaller (pathlen + len + 1) - newbufsize value.\n- The loop will terminate when newbufsize >= pathlen + len + 1, which is guaranteed since newbufsize is always increasing in the loop.",
            "1. Make note of the starting values or constraints for the variables that are live at the loop head.\n- pathlen, newbufsize, and len are live at the loop head.\n- pathlen, newbufsize, and len are all unsigned integers.\n- newbufsize + len + 1 != 0xffffffff (from the if condition)\n- newbufsize > 0 (from the if condition)\n\n2. Analyze the loop body and find a ranking function involving the variables in the loop body.\n- Loop condition: newbufsize < pathlen + len + 1\n- Loop body: If newbufsize >= 0x80000000, newbufsize becomes 0xffffffff. Otherwise, newbufsize *= 2.\n\n3. Output the ranking function in one code block, in ACSL syntax.\n- We observe that newbufsize always increases in the loop body.\n- The loop terminates when newbufsize >= pathlen + len + 1.\n- Since newbufsize is an unsigned integer, it has an upper bound (0xffffffff).\n\nThe ranking function is the difference between the upper bound (0xffffffff) and newbufsize. This difference decreases with every iteration and is always positive as long as the loop is executing.\n\nHere is the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant 0xffffffff - newbufsize;\n*/\n```",
            "First, let's make note of the starting values or constraints for the variables that are live at the loop head:\n- newbufsize is a positive unsigned integer (newbufsize > 0)\n- pathlen and len are non-negative unsigned integers\n- newbufsize + len + 1 < 0xffffffff\n\nNow let's analyze the loop body:\n- The loop continues executing while newbufsize < pathlen + len + 1\n- Inside the loop, newbufsize either doubles (if newbufsize < 0x80000000) or becomes 0xffffffff (if newbufsize >= 0x80000000)\n\nTo find a ranking function, we need an expression that involves the loop variables (newbufsize, pathlen, and len) and decreases with every iteration of the loop. We can use the difference between the loop condition upper bound (pathlen + len + 1) and the loop variable newbufsize:\n\n```\n/*@\n    loop variant pathlen + len + 1 - newbufsize;\n*/\n```\n\nThis ranking function is valid because:\n- It is positive while the loop is executing, as newbufsize < pathlen + len + 1 during loop execution.\n- It decreases with every iteration of the loop, as newbufsize either doubles or becomes 0xffffffff, both of which reduce the value of the expression.\n- When the value of the ranking function becomes 0 or negative, the loop stops executing, as the loop condition is no longer satisfied.\n\nSo the ranking function for the loop in the given program is:\n\n```\n/*@\n    loop variant pathlen + len + 1 - newbufsize;\n*/\n```",
            "First, let's make note of the starting values or constraints for the variables that are live at the loop head:\n\n1. `newbufsize` is an unsigned integer.\n2. `pathlen` and `len` are also unsigned integers.\n3. The loop condition is `newbufsize < pathlen + len + 1`.\n\nNow, let's analyze the loop body and find a ranking function involving the variables in the loop body:\n\nIn every iteration of the loop, either `newbufsize` is doubled (`newbufsize *= 2`) or it is set to its maximum value (`newbufsize = 0xffffffff`). Therefore, the value of `newbufsize` is strictly increasing with every iteration.\n\nSince `newbufsize` is an unsigned integer, its maximum value is `0xffffffff`. The loop condition `newbufsize < pathlen + len + 1` guarantees that the loop will terminate when `newbufsize` becomes greater than or equal to `pathlen + len + 1`.\n\nA valid ranking function for this loop would be the difference between the maximum value of `newbufsize` and its current value:\n\n```\n/*@\n    loop variant (0xffffffff - newbufsize);\n*/\n```\n\nThis ranking function is decreasing with every iteration of the loop, as `newbufsize` is increasing. It is also positive while the loop is executing because `newbufsize` is always smaller than `0xffffffff`."
        ],
        "variant_log": [
            {
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. Lexicographic ranking functions are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n    unsigned int pathlen = unknown_uint();\n    unsigned int newbufsize = unknown_uint();\n    unsigned int len = unknown_uint();\n    if( newbufsize + len + 1 == 0xffffffff )\n        return 0;\n    if( newbufsize == 0 )\n        return 0;\n    while( newbufsize < pathlen + len + 1 )\n    {\n        if( newbufsize >= 0x80000000 )\n            newbufsize = 0xffffffff;\n        else\n            newbufsize *= 2;\n    }\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **((pathlen + len + 1) - newbufsize)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, let's note the starting values or constraints for the variables that are live at the loop head:\n- `pathlen` is an unsigned int, so its value is in the range [0, 0xffffffff].\n- `newbufsize` is an unsigned int and is not equal to 0, so its value is in the range [1, 0xffffffff].\n- `len` is an unsigned int, so its value is in the range [0, 0xffffffff].\n\nNow let's analyze the loop condition and the loop body:\n- The loop condition is `newbufsize < pathlen + len + 1`.\n- In the loop body, `newbufsize` is either doubled or set to 0xffffffff.\n- The given ranking function is `((pathlen + len + 1) - newbufsize)`.\n\nBased on this information, we can output the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= pathlen <= 0xffffffff;\n    loop invariant 1 <= newbufsize <= 0xffffffff;\n    loop invariant 0 <= len <= 0xffffffff;\n    loop invariant newbufsize < pathlen + len + 1;\n    loop invariant pathlen + len + 1 <= 0xffffffff;\n    loop invariant \\at(newbufsize, LoopEntry) <= newbufsize;\n*/\n```",
                    "First, note the starting values and constraints for the variables that are live at the loop head:\n- pathlen, newbufsize, and len are unsigned integers obtained from unknown_uint(), so they can take any value in the range [0, UINT_MAX].\n- newbufsize + len + 1 != 0xffffffff and newbufsize != 0.\n\nNow, let's analyze the loop condition and the given ranking function:\n- Loop condition: newbufsize < pathlen + len + 1\n- Ranking function: ((pathlen + len + 1) - newbufsize)\n\nNext, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration:\n\n```\n/*@ \n    loop invariant 0 <= pathlen && pathlen <= UINT_MAX;\n    loop invariant 0 < newbufsize && newbufsize <= UINT_MAX;\n    loop invariant 0 <= len && len <= UINT_MAX;\n    loop invariant newbufsize + len + 1 != 0xffffffff;\n    loop invariant newbufsize < UINT_MAX - len;\n    loop invariant \\at(newbufsize, LoopEntry) <= newbufsize;\n    loop invariant \\at(pathlen, LoopEntry) == pathlen;\n    loop invariant \\at(len, LoopEntry) == len;\n    loop invariant (newbufsize < 0x80000000) ==> (newbufsize <= 2 * \\at(newbufsize, LoopEntry));\n    loop invariant (newbufsize >= 0x80000000) ==> (newbufsize == 0xffffffff);\n*/\n```\n\nThese loop invariants support the validity of the ranking function ((pathlen + len + 1) - newbufsize) and prove the termination of the loop.",
                    "First, let's note the starting values or constraints for the variables that are live at the loop head:\n- pathlen is an unsigned integer, so its range is [0, 2^32 - 1].\n- newbufsize is an unsigned integer, and given that newbufsize != 0, its range is [1, 2^32 - 1].\n- len is an unsigned integer, so its range is [0, 2^32 - 1].\n- newbufsize + len + 1 != 0xffffffff, which means newbufsize + len + 1 <= 0xfffffffe.\n\nNext, let's analyze the loop body and make a note of the loop condition and the given ranking function:\n- Loop condition: newbufsize < pathlen + len + 1\n- Ranking function: (pathlen + len + 1) - newbufsize\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration:\n\n```\n/*@ \n    loop invariant 0 <= pathlen <= 0xffffffff;\n    loop invariant 1 <= newbufsize <= 0xffffffff;\n    loop invariant 0 <= len <= 0xffffffff;\n    loop invariant newbufsize + len + 1 <= 0xfffffffe;\n    loop invariant newbufsize < \\at(newbufsize, LoopEntry) ==> newbufsize >= 0x80000000;\n*/\n```",
                    "We need to find loop invariants that hold true before the loop execution, in every iteration of the loop, and after the loop termination, which imply that the ranking function ((pathlen + len + 1) - newbufsize) decreases with every iteration.\n\nStarting values/constraints for live variables at the loop head:\n- pathlen, len, newbufsize are unsigned integers.\n- newbufsize + len + 1 != 0xffffffff (due to the first if condition)\n- newbufsize != 0 (due to the second if condition)\n\nLoop condition: newbufsize < pathlen + len + 1\n\nRanking function: ((pathlen + len + 1) - newbufsize)\n\nLoop invariants:\n```\n/*@ \n    loop invariant newbufsize != 0;\n    loop invariant newbufsize + len + 1 != 0xffffffff;\n    loop invariant newbufsize <= 0xffffffff;\n    loop invariant pathlen <= 0xffffffff;\n    loop invariant len <= 0xffffffff;\n    loop invariant \\at(newbufsize, LoopEntry) <= newbufsize;\n    loop invariant newbufsize <= pathlen + len + 1;\n*/\n```",
                    "First, let's note the starting values and constraints for the variables that are live at the loop head:\n\n1. pathlen is an unsigned integer, initialized by unknown_uint().\n2. newbufsize is an unsigned integer, initialized by unknown_uint().\n3. len is an unsigned integer, initialized by unknown_uint().\n4. newbufsize + len + 1 != 0xffffffff (from the first if statement).\n5. newbufsize != 0 (from the second if statement).\n\nNow, let's analyze the loop condition and the loop body:\n\nLoop condition: newbufsize < pathlen + len + 1\n\nLoop body:\n- If newbufsize >= 0x80000000, then newbufsize = 0xffffffff.\n- Else, newbufsize *= 2.\n\nGiven the loop variant ((pathlen + len + 1) - newbufsize), let's output the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= pathlen;\n    loop invariant 0 <= len;\n    loop invariant newbufsize != 0;\n    loop invariant newbufsize + len + 1 != 0xffffffff;\n    loop invariant newbufsize < \\at(newbufsize, LoopEntry) * 2 ==> newbufsize < \\at(newbufsize, LoopEntry) + (pathlen + len + 1 - \\at(newbufsize, LoopEntry));\n    loop invariant newbufsize >= \\at(newbufsize, LoopEntry) * 2 ==> newbufsize == 0xffffffff;\n*/\n```"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant 0 <= pathlen <= 0xffffffff;\n    loop invariant 1 <= newbufsize <= 0xffffffff;\n    loop invariant 0 <= len <= 0xffffffff;\n    loop invariant newbufsize < pathlen + len + 1;\n    loop invariant pathlen + len + 1 <= 0xffffffff;\n    loop invariant \\at(newbufsize, LoopEntry) <= newbufsize;\n*/",
                    "/*@ \n    loop invariant 0 <= pathlen && pathlen <= UINT_MAX;\n    loop invariant 0 < newbufsize && newbufsize <= UINT_MAX;\n    loop invariant 0 <= len && len <= UINT_MAX;\n    loop invariant newbufsize + len + 1 != 0xffffffff;\n    loop invariant newbufsize < UINT_MAX - len;\n    loop invariant \\at(newbufsize, LoopEntry) <= newbufsize;\n    loop invariant \\at(pathlen, LoopEntry) == pathlen;\n    loop invariant \\at(len, LoopEntry) == len;\n    loop invariant (newbufsize < 0x80000000) ==> (newbufsize <= 2 * \\at(newbufsize, LoopEntry));\n    loop invariant (newbufsize >= 0x80000000) ==> (newbufsize == 0xffffffff);\n*/",
                    "/*@ \n    loop invariant 0 <= pathlen <= 0xffffffff;\n    loop invariant 1 <= newbufsize <= 0xffffffff;\n    loop invariant 0 <= len <= 0xffffffff;\n    loop invariant newbufsize + len + 1 <= 0xfffffffe;\n    loop invariant newbufsize < \\at(newbufsize, LoopEntry) ==> newbufsize >= 0x80000000;\n*/",
                    "/*@ \n    loop invariant newbufsize != 0;\n    loop invariant newbufsize + len + 1 != 0xffffffff;\n    loop invariant newbufsize <= 0xffffffff;\n    loop invariant pathlen <= 0xffffffff;\n    loop invariant len <= 0xffffffff;\n    loop invariant \\at(newbufsize, LoopEntry) <= newbufsize;\n    loop invariant newbufsize <= pathlen + len + 1;\n*/",
                    "/*@ \n    loop invariant 0 <= pathlen;\n    loop invariant 0 <= len;\n    loop invariant newbufsize != 0;\n    loop invariant newbufsize + len + 1 != 0xffffffff;\n    loop invariant newbufsize < \\at(newbufsize, LoopEntry) * 2 ==> newbufsize < \\at(newbufsize, LoopEntry) + (pathlen + len + 1 - \\at(newbufsize, LoopEntry));\n    loop invariant newbufsize >= \\at(newbufsize, LoopEntry) * 2 ==> newbufsize == 0xffffffff;\n*/"
                ],
                "inductive_invariants": "loop invariant i1: 0 <= pathlen <= 0xffffffff;\nloop invariant i2: 1 <= newbufsize <= 0xffffffff;\nloop invariant i3: 0 <= len <= 0xffffffff;\nloop invariant i6: \\at(newbufsize, LoopEntry) <= newbufsize;\nloop invariant i13: \\at(pathlen, LoopEntry) == pathlen;\nloop invariant i14: \\at(len, LoopEntry) == len;\nloop invariant i21: newbufsize < \\at(newbufsize, LoopEntry) ==> newbufsize >= 0x80000000;\nloop invariant i22: newbufsize != 0;\nloop invariant i24: newbufsize <= 0xffffffff;\nloop invariant i25: pathlen <= 0xffffffff;\nloop invariant i26: len <= 0xffffffff;\nloop invariant i29: 0 <= pathlen;\nloop invariant i30: 0 <= len;",
                "final_checker_input": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n    unsigned int pathlen = unknown_uint();\n    unsigned int newbufsize = unknown_uint();\n    unsigned int len = unknown_uint();\n    if( newbufsize + len + 1 == 0xffffffff )\n        return 0;\n    if( newbufsize == 0 )\n        return 0;\n    /*@\nloop invariant i1: 0 <= pathlen <= 0xffffffff;\nloop invariant i2: 1 <= newbufsize <= 0xffffffff;\nloop invariant i3: 0 <= len <= 0xffffffff;\nloop invariant i6: \\at(newbufsize, LoopEntry) <= newbufsize;\nloop invariant i13: \\at(pathlen, LoopEntry) == pathlen;\nloop invariant i14: \\at(len, LoopEntry) == len;\nloop invariant i21: newbufsize < \\at(newbufsize, LoopEntry) ==> newbufsize >= 0x80000000;\nloop invariant i22: newbufsize != 0;\nloop invariant i24: newbufsize <= 0xffffffff;\nloop invariant i25: pathlen <= 0xffffffff;\nloop invariant i26: len <= 0xffffffff;\nloop invariant i29: 0 <= pathlen;\nloop invariant i30: 0 <= len;\nloop variant (pathlen + len + 1) - newbufsize;\n*/\nwhile( newbufsize < pathlen + len + 1 )\n    {\n        if( newbufsize >= 0x80000000 )\n            newbufsize = 0xffffffff;\n        else\n            newbufsize *= 2;\n    }\n    return 0;\n}",
                "checker_message": "loop invariant 0 <= pathlen <= 0xffffffff is inductive.\nloop invariant 1 <= newbufsize <= 0xffffffff is inductive.\nloop invariant 0 <= len <= 0xffffffff is inductive.\nloop invariant \\at(newbufsize, LoopEntry) <= newbufsize is inductive.\nloop invariant \\at(pathlen, LoopEntry) == pathlen is inductive.\nloop invariant \\at(len, LoopEntry) == len is inductive.\nloop invariant newbufsize < \\at(newbufsize, LoopEntry) ==> newbufsize >= 0x80000000 is inductive.\nloop invariant newbufsize != 0 is inductive.\nloop invariant newbufsize <= 0xffffffff is inductive.\nloop invariant pathlen <= 0xffffffff is inductive.\nloop invariant len <= 0xffffffff is inductive.\nloop invariant 0 <= pathlen is inductive.\nloop invariant 0 <= len is inductive.\n\nLoop variant is Valid.\n",
                "success": true
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB6.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Mysore_true-termination.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusMin.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.09-no-inv_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Copenhagen_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_easySum.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Thun_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_flag.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/McCarthy91_Iteration_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NO_24.c"
        ],
        "skipped": [],
        "total": 159,
        "success_count": 84,
        "failure_count": 75,
        "success_rate": 0.5283018867924528
    }
}