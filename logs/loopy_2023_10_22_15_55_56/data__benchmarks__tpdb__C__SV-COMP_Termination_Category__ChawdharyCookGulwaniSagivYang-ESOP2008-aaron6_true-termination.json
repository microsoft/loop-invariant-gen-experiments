{
    "logs": {
        "file": "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint tx = unknown_int();\n\tint y = unknown_int();\n\tint ty = unknown_int();\n\tint n = unknown_int();\n\tif (x + y >= 0) {\n\t\twhile (x <= n && x >= 2 * tx + y && y >= ty + 1 && x >= tx + 1) {\n\t\t\tif (unknown_int()) {\n\t\t\t\ttx = x;\n\t\t\t\tty = y;\n\t\t\t\tx = unknown_int();\n\t\t\t\ty = unknown_int();\n\t\t\t} else {\n\t\t\t\ttx = x;\n\t\t\t\tx = unknown_int();\n\t\t\t}\n\t\t}\n\t}\t\n\treturn 0;\n}",
        "success": true,
        "variants": [
            [
                "n - x",
                "y"
            ],
            [
                "n - tx"
            ],
            [
                "n - x",
                "tx - x"
            ],
            [
                "n - x",
                "x - tx"
            ]
        ],
        "variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n- If the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. \n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint tx = unknown_int();\n\tint y = unknown_int();\n\tint ty = unknown_int();\n\tint n = unknown_int();\n\tif (x + y >= 0) {\n\t\twhile (x <= n && x >= 2 * tx + y && y >= ty + 1 && x >= tx + 1) {\n\t\t\tif (unknown_int()) {\n\t\t\t\ttx = x;\n\t\t\t\tty = y;\n\t\t\t\tx = unknown_int();\n\t\t\t\ty = unknown_int();\n\t\t\t} else {\n\t\t\t\ttx = x;\n\t\t\t\tx = unknown_int();\n\t\t\t}\n\t\t}\n\t}\t\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function (or the sequence of expressions) is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "First, let's note the starting values or constraints for the variables that are live at the loop head:\n\n- `x` is an unknown integer.\n- `tx` is an unknown integer.\n- `y` is an unknown integer.\n- `ty` is an unknown integer.\n- `n` is an unknown integer.\n\nNow let's analyze the loop body and find a ranking function involving the variables in the loop body:\n\nThe loop condition is:\n```\nx <= n && x >= 2 * tx + y && y >= ty + 1 && x >= tx + 1\n```\n\nFor the loop to execute, the above condition must be true. We can find a lexicographic ranking function for this loop as follows:\n\n1. Either `x` decreases or remains the same.\n2. If `x` remains the same, then `y` must decrease.\n\nBased on these observations, we can construct a lexicographic ranking function as a sequence of expressions:\n\n1. `n - x`\n2. `y`\n\nNow let's output the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant n - x;\n    loop variant y;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. `n - x` is always positive (since `x <= n` for the loop to execute) and non-increasing (because `x` either remains the same or decreases in each iteration).\n2. `y` is always positive (since `y >= ty + 1` for the loop to execute) and strictly decreasing if `x` remains the same.\n\nThus, this ranking function helps prove that the loop must terminate.",
            "1. Starting values or constraints for variables live at the loop head:\n   - x, tx, y, and ty are all non-negative integers.\n   - x + y >= 0\n   - x <= n\n   - x >= 2 * tx + y\n   - y >= ty + 1\n   - x >= tx + 1\n\n2. Analyze the loop body:\n   - If the unknown_int() call returns a non-zero value, x and y are updated to new unknown_int() values. Since tx = x and ty = y before the assignment, the constraints x >= 2 * tx + y and y >= ty + 1 still hold.\n   - If the unknown_int() call returns zero, only x is updated to a new unknown_int() value. The constraint x >= tx + 1 still holds.\n\n3. Ranking function:\n   Since x and y can be updated to any non-negative integer value, it is not possible to find a ranking function for the loop that guarantees termination. The loop can continue indefinitely depending on the values returned by unknown_int().",
            "1. First, let's identify the variables that are live at the loop head: `x`, `tx`, `y`, `ty`, and `n`.\n\n2. Next, let's analyze the loop body. In each iteration, either `x` and `y` are updated (in the `if` branch) or only `x` is updated (in the `else` branch). In either case, `tx` is assigned the value of `x` before the update. Since `x` is a non-deterministic value after the update, we cannot guarantee that it always decreases or increases. However, we can observe that `tx` always holds the old value of `x`.\n\n3. We are given a hint to consider an expression involving the upper bound and the old value of the loop variable. The upper bound in this case is `n`. So, let's consider the expression `n - tx`.\n\nNow, let's output the ranking function in ACSL syntax:\n\n```c\n/*@\n    loop variant n - tx;\n*/\n```\n\nThis ranking function is valid because:\n\n1. The value of `n - tx` is always positive while the loop is executing, as `x <= n` is a loop condition, and `tx` is always assigned the value of `x` before the update.\n\n2. The value of `n - tx` decreases with every iteration of the loop. Since `tx` holds the old value of `x` in each iteration, and `x` is updated to a non-deterministic value, the difference between `n` and the old value of `x` (i.e., `n - tx`) is guaranteed to decrease.",
            "1. Identify the variables that are live at the loop head: x, tx, y, ty, and n.\n2. Analyze the loop body and find a ranking function involving the variables in the loop body.\n\nIn this loop, x, tx, y, and ty are being updated within the loop body. The loop condition involves x, tx, y, and ty. We can consider the difference between n and x as a ranking function since x <= n is part of the loop condition.\n\nThe ranking function for the given loop can be given as (n - x). However, since x is being updated by the unknown_int() function, we cannot guarantee that it is strictly decreasing. We can still give a lexicographic ranking function using the difference between the old and new values of x:\n\n```\n/*@\n    loop variant n - x;\n    loop variant tx - x;\n*/\n```\n\nThis lexicographic ranking function ensures that the loop terminates because:\n1. n - x is a positive value while the loop is executing, and it is part of the loop condition.\n2. tx - x is a positive value while the loop is executing, as x is being updated within the loop body and x >= tx + 1 is part of the loop condition.",
            "First, let's identify the variables that are live at the loop head:\n- x\n- tx\n- y\n- ty\n- n\n\nNow let's analyze the loop body and find a ranking function involving the variables in the loop body. The loop condition is:\n\n```\nx <= n && x >= 2 * tx + y && y >= ty + 1 && x >= tx + 1\n```\n\nWithin the loop, we have two branches, and in both branches, `tx` is updated to the value of `x`. In the first branch, both `x` and `y` are updated to unknown values, and in the second branch, only `x` is updated to an unknown value.\n\nSince we don't know the values of `x` and `y` after each update, we cannot determine a specific ranking function that is guaranteed to decrease. However, we can still provide a lexicographic ranking function that involves the upper bound `n` and the old value of `x` in each iteration:\n\n```\n/*@\n    loop variant n - x;\n    loop variant x - tx;\n*/\n```\n\nThis lexicographic ranking function is valid because:\n1. `n - x` is non-negative at the start of each iteration due to the loop condition `x <= n`. It is decreasing since `x` is updated to an unknown value in each iteration, and the loop condition requires `x` to not exceed `n`.\n2. `x - tx` is positive at the start of each iteration due to the loop condition `x >= tx + 1`. It is decreasing since `tx` is updated to the value of `x` in each iteration."
        ],
        "variant_log": [
            {
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. Lexicographic ranking functions are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint tx = unknown_int();\n\tint y = unknown_int();\n\tint ty = unknown_int();\n\tint n = unknown_int();\n\tif (x + y >= 0) {\n\t\twhile (x <= n && x >= 2 * tx + y && y >= ty + 1 && x >= tx + 1) {\n\t\t\tif (unknown_int()) {\n\t\t\t\ttx = x;\n\t\t\t\tty = y;\n\t\t\t\tx = unknown_int();\n\t\t\t\ty = unknown_int();\n\t\t\t} else {\n\t\t\t\ttx = x;\n\t\t\t\tx = unknown_int();\n\t\t\t}\n\t\t}\n\t}\t\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(n - x, y)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, let's note the starting values and constraints of the variables that are live at the loop head:\n\n- x is an integer value from unknown_int()\n- tx is an integer value from unknown_int()\n- y is an integer value from unknown_int()\n- ty is an integer value from unknown_int()\n- n is an integer value from unknown_int()\n- x + y >= 0 (from the if condition)\n\nNow, let's analyze the loop body and loop condition:\n\nLoop condition: x <= n && x >= 2 * tx + y && y >= ty + 1 && x >= tx + 1\n\nGiven ranking function: (n - x, y)\n\nNow, let's output the loop invariants:\n\n```\n/*@ \n    loop invariant x <= n;\n    loop invariant x >= 2 * \\at(tx, LoopEntry) + \\at(y, LoopEntry);\n    loop invariant \\at(y, LoopEntry) >= \\at(ty, LoopEntry) + 1;\n    loop invariant x >= \\at(tx, LoopEntry) + 1;\n    loop invariant x + y >= 0;\n*/\n```\n\nThese loop invariants hold true before the loop execution, in every iteration of the loop, and after the loop termination. They imply that the ranking function (n - x, y) decreases with every iteration, proving the loop's termination.",
                    "First, let's analyze the given loop and the variables involved:\n\n1. Variables `x`, `tx`, `y`, and `ty` are all initialized with unknown values.\n2. The loop condition is: `x <= n && x >= 2 * tx + y && y >= ty + 1 && x >= tx + 1`.\n3. The loop body has two branches with unknown conditions:\n   - In the first branch: `tx` is assigned the value of `x`, `ty` is assigned the value of `y`, and both `x` and `y` are assigned unknown values.\n   - In the second branch: `tx` is assigned the value of `x`, and `x` is assigned an unknown value.\n\nNow, we can derive the loop invariants based on the given loop variant `(n - x, y)`:\n\n```\n/*@ \n    loop invariant x <= n;\n    loop invariant x >= 2 * tx + y;\n    loop invariant y >= ty + 1;\n    loop invariant x >= tx + 1;\n    loop invariant x >= \\at(x, LoopEntry) ==> tx == \\at(tx, LoopEntry) && ty == \\at(ty, LoopEntry);\n    loop invariant !(x >= \\at(x, LoopEntry)) ==> tx == \\at(x, LoopEntry);\n*/\n```\n\nThese loop invariants help support the validity of the loop variant `(n - x, y)` and prove the termination of the loop.",
                    "First, let's identify the initial values or constraints for the variables that are live at the loop head:\n- x, tx, y, and ty are initialized with unknown_int(), which means they can have any integer value.\n- n is also initialized with unknown_int(), which means it can have any integer value.\n- The loop executes only if x + y >= 0.\n\nNow, let's analyze the loop body and make a note of the loop condition and the given ranking function:\n- Loop condition: x <= n && x >= 2 * tx + y && y >= ty + 1 && x >= tx + 1\n- Ranking function: (n - x, y)\n\nFinally, let's output the loop invariants that support the validity of the ranking function and prove the termination of the loop:\n\n```\n/*@ \n    loop invariant x <= n;\n    loop invariant x >= 2 * tx + y;\n    loop invariant y >= ty + 1;\n    loop invariant x >= tx + 1;\n    loop invariant x + y >= 0;\n    loop invariant x >= \\at(x, LoopEntry) ==> x <= \\at(tx, LoopEntry);\n    loop invariant x < \\at(x, LoopEntry) ==> x >= \\at(tx, LoopEntry);\n    loop invariant y >= \\at(y, LoopEntry) ==> y <= \\at(ty, LoopEntry);\n    loop invariant y < \\at(y, LoopEntry) ==> y >= \\at(ty, LoopEntry);\n*/\n```\n\nThese loop invariants support the validity of the ranking function (n - x, y) and prove the termination of the loop.",
                    "We can start by analyzing the loop and identifying the loop invariants. First, let's make a note of the initial values and constraints for the variables that are live at the loop head:\n\n- x, tx, y, ty, and n are all integers with unknown initial values.\n- The loop condition is x <= n && x >= 2 * tx + y && y >= ty + 1 && x >= tx + 1.\n- The loop variant is (n - x, y).\n\nNow let's analyze the loop body and output the loop invariants that support the validity of the ranking function and prove the termination of the loop:\n\n```\n/*@ \n    loop invariant n >= \\at(n, LoopEntry);\n    loop invariant x >= \\at(x, LoopEntry);\n    loop invariant x >= 2 * tx + y;\n    loop invariant y >= ty + 1;\n    loop invariant x >= tx + 1;\n*/\n```\n\nThese loop invariants imply that the ranking function (n - x, y) decreases with every iteration of the loop. The first invariant states that n does not decrease during the loop, and the second invariant states that x does not decrease below its initial value. The third, fourth, and fifth invariants are conditions of the loop that must hold for every iteration. Since x <= n, x will eventually reach a value that does not satisfy the loop condition, causing the loop to terminate. Similarly, y will eventually reach a value that does not satisfy the loop condition, also causing the loop to terminate.",
                    "First, let's analyze the given program and note the starting values, constraints, and loop condition:\n\n1. x, tx, y, and ty are assigned non-deterministic integer values.\n2. n is also assigned a non-deterministic integer value.\n3. The loop executes while `x <= n && x >= 2 * tx + y && y >= ty + 1 && x >= tx + 1`.\n\nNow let's output the loop invariants that support the loop variant `(n - x, y)`:\n\n```\n/*@ \n    loop invariant x <= n;\n    loop invariant x >= 2 * tx + y;\n    loop invariant y >= ty + 1;\n    loop invariant x >= tx + 1;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant tx >= 0;\n    loop invariant ty >= 0;\n    loop invariant x >= \\at(x, LoopEntry);\n    loop invariant y >= \\at(y, LoopEntry);\n*/\n```"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant x <= n;\n    loop invariant x >= 2 * \\at(tx, LoopEntry) + \\at(y, LoopEntry);\n    loop invariant \\at(y, LoopEntry) >= \\at(ty, LoopEntry) + 1;\n    loop invariant x >= \\at(tx, LoopEntry) + 1;\n    loop invariant x + y >= 0;\n*/",
                    "/*@ \n    loop invariant x <= n;\n    loop invariant x >= 2 * tx + y;\n    loop invariant y >= ty + 1;\n    loop invariant x >= tx + 1;\n    loop invariant x >= \\at(x, LoopEntry) ==> tx == \\at(tx, LoopEntry) && ty == \\at(ty, LoopEntry);\n    loop invariant !(x >= \\at(x, LoopEntry)) ==> tx == \\at(x, LoopEntry);\n*/",
                    "/*@ \n    loop invariant x <= n;\n    loop invariant x >= 2 * tx + y;\n    loop invariant y >= ty + 1;\n    loop invariant x >= tx + 1;\n    loop invariant x + y >= 0;\n    loop invariant x >= \\at(x, LoopEntry) ==> x <= \\at(tx, LoopEntry);\n    loop invariant x < \\at(x, LoopEntry) ==> x >= \\at(tx, LoopEntry);\n    loop invariant y >= \\at(y, LoopEntry) ==> y <= \\at(ty, LoopEntry);\n    loop invariant y < \\at(y, LoopEntry) ==> y >= \\at(ty, LoopEntry);\n*/",
                    "/*@ \n    loop invariant n >= \\at(n, LoopEntry);\n    loop invariant x >= \\at(x, LoopEntry);\n    loop invariant x >= 2 * tx + y;\n    loop invariant y >= ty + 1;\n    loop invariant x >= tx + 1;\n*/",
                    "/*@ \n    loop invariant x <= n;\n    loop invariant x >= 2 * tx + y;\n    loop invariant y >= ty + 1;\n    loop invariant x >= tx + 1;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant tx >= 0;\n    loop invariant ty >= 0;\n    loop invariant x >= \\at(x, LoopEntry);\n    loop invariant y >= \\at(y, LoopEntry);\n*/"
                ],
                "inductive_invariants": "loop invariant i21: n >= \\at(n, LoopEntry);",
                "final_checker_input": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint tx = unknown_int();\n\tint y = unknown_int();\n\tint ty = unknown_int();\n\tint n = unknown_int();\n\tif (x + y >= 0) {\n\t\t//@ ghost variant_expression measure = { n - x, y };\n/*@\nloop invariant i21: n >= \\at(n, LoopEntry);\nloop invariant measure.a == n - x && measure.b == y;\nloop variant measure for lexicographic;\n*/\nwhile (x <= n && x >= 2 * tx + y && y >= ty + 1 && x >= tx + 1) {\n\t\t\tif (unknown_int()) {\n\t\t\t\ttx = x;\n\t\t\t\tty = y;\n\t\t\t\tx = unknown_int();\n\t\t\t\ty = unknown_int();\n\t\t\t} else {\n\t\t\t\ttx = x;\n\t\t\t\tx = unknown_int();\n\t\t\t}\n\t\t\n//@ ghost measure.a = n - x;\n//@ ghost measure.b = y;\n}\n\t}\t\n\treturn 0;\n}",
                "checker_message": "loop invariant n >= \\at(n, LoopEntry) is inductive.\n\nLoop variant is Invalid.\n",
                "success": false
            },
            {
                "invariant_code_blocks": [],
                "invariant_llm_output": [],
                "inductive_invariants": [
                    "Invariants not needed"
                ],
                "final_checker_input": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint tx = unknown_int();\n\tint y = unknown_int();\n\tint ty = unknown_int();\n\tint n = unknown_int();\n\tif (x + y >= 0) {\n\t\t/*@\n\nloop variant n - tx;\n*/\nwhile (x <= n && x >= 2 * tx + y && y >= ty + 1 && x >= tx + 1) {\n\t\t\tif (unknown_int()) {\n\t\t\t\ttx = x;\n\t\t\t\tty = y;\n\t\t\t\tx = unknown_int();\n\t\t\t\ty = unknown_int();\n\t\t\t} else {\n\t\t\t\ttx = x;\n\t\t\t\tx = unknown_int();\n\t\t\t}\n\t\t}\n\t}\t\n\treturn 0;\n}",
                "success": true
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB6.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Mysore_true-termination.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusMin.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Thun_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_flag.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex2_true-termination.c"
        ],
        "skipped": [],
        "total": 151,
        "success_count": 79,
        "failure_count": 72,
        "success_rate": 0.5231788079470199
    }
}