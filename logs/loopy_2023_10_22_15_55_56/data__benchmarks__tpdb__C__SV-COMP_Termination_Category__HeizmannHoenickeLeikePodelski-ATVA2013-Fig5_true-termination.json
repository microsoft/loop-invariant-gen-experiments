{
    "logs": {
        "file": "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = 2;\n\twhile (x >= 0) {\n\t\tx = x - y;\n\t\ty = (y + 1) / 2;\n\t}\n\treturn 0;\n}",
        "success": true,
        "variants": [
            [
                "x + y"
            ],
            [
                "x",
                "y"
            ],
            [
                "x"
            ]
        ],
        "variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n- If the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. \n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = 2;\n\twhile (x >= 0) {\n\t\tx = x - y;\n\t\ty = (y + 1) / 2;\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function (or the sequence of expressions) is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "1. Make note of the starting values or constraints for the variables that are live at the loop head:\n\nAt the loop head, we have the variables x and y. The starting value of x is unknown, and the starting value of y is 2. The loop condition is x >= 0.\n\n2. Analyze the loop body and find a ranking function involving the variables in the loop body:\n\nIn the loop body, x is decreased by y, and y is updated as (y + 1) / 2. We need to find a ranking function that decreases with every iteration and is positive while the loop is executing.\n\nA possible ranking function is x + y.\n\nNow, let's check if it satisfies the conditions of a ranking function:\n- The value of x + y is positive while the loop is executing, as x >= 0 and y is always positive.\n- The value of x + y decreases with every iteration since x is decreased by y, and y is updated as (y + 1) / 2, which is smaller than the previous value of y.\n\nNow, let's output the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x + y;\n*/\n```",
            "1. Make note of the starting values or constraints for the variables that are live at the loop head.\n   - x is an unknown integer.\n   - y is initialized to 2.\n\n2. Analyze the loop body and find a ranking function involving the variables in the loop body.\n   - Loop condition: x >= 0\n   - Loop body:\n     - x = x - y;\n     - y = (y + 1) / 2;\n\nLet's find a ranking function involving x and y. One possible ranking function is the sum of x and y. \n\nRanking function: x + y\n\nNow let's verify if this ranking function is valid:\n\n- The value of the ranking function must be positive for the loop to continue executing: x >= 0 and y > 0, so x + y > 0.\n- The value of the ranking function must decrease with every successive iteration of the loop:\n  - In every iteration, x decreases by y, and y decreases or remains the same ((y + 1) / 2 <= y).\n  - So, the value of x + y decreases in every iteration.\n\nHence, the ranking function x + y is valid.\n\nOutput the ranking function in one code block, in ACSL syntax:\n\n```\n/*@\n    loop variant x + y;\n*/\n```",
            "1. Starting values or constraints for the variables:\n   - x = unknown_int(); (x can be any integer)\n   - y = 2;\n\n2. Loop body:\n   - x = x - y;\n   - y = (y + 1) / 2;\n\n3. Ranking function:\n   - We need to find a function that decreases with every iteration of the loop and is positive while the loop is executing.\n\nLet's consider two ranking functions: x and y.\n\nHere's the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x;\n    loop variant y;\n*/\n```\n\nExplanation:\n- x decreases with every iteration (x = x - y) and is positive while the loop is executing (loop condition: x >= 0).\n- y is always positive and decreases with every iteration as well (y = (y + 1) / 2).",
            "1. Make note of the starting values or constraints for the variables that are live at the loop head:\n   - x is assigned an unknown integer value.\n   - y is assigned the value 2.\n\n2. Analyze the loop body and find a ranking function involving the variables in the loop body:\n   - The loop condition is x >= 0.\n   - Inside the loop, x is updated as x = x - y, and y is updated as y = (y + 1) / 2.\n\nLet's consider the lexicographic ranking function `(x, y)`:\n\n1. x decreases with every iteration of the loop since it is updated as x = x - y, and y is always positive (initially 2, and always increasing).\n2. y is always positive since it starts at 2 and is updated as y = (y + 1) / 2.\n\nThus, the lexicographic ranking function for this loop is:\n```\n/*@\n    loop variant x;\n    loop variant y;\n*/\n```",
            "1. Make note of the starting values or constraints for the variables that are live at the loop head.\n\nAt the start of the loop, x is an unknown integer and y is 2.\n\n2. Analyze the loop body and find a ranking function involving the variables in the loop body.\n\nIn the loop body, x is decreased by y, and y is updated as (y + 1) / 2.\n\n3. Output the ranking function in one code block, in ACSL syntax.\n\nBased on the analysis, we can find the ranking function as follows:\n\n```\n/*@\n    loop variant x;\n    loop invariant y > 0;\n*/\n```\n\nThe ranking function x is decreasing with every iteration of the loop, as x is decreased by y (which is always positive). The value of x is positive while the loop is executing, as the loop condition is x >= 0."
        ],
        "variant_log": [
            {
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. Lexicographic ranking functions are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = 2;\n\twhile (x >= 0) {\n\t\tx = x - y;\n\t\ty = (y + 1) / 2;\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(x + y)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, let's analyze the program and make note of the starting values and constraints for the variables that are live at the loop head:\n\n- x starts with an unknown value.\n- y starts with the value 2.\n\nNext, let's analyze the loop body and make note of the loop condition and the given ranking function:\n\n- Loop condition: x >= 0\n- Ranking function: (x + y)\n\nNow, let's derive the loop invariants that support the ranking function:\n\n1. Before the loop execution: x is an integer, and y = 2.\n2. In every iteration of the loop: \n   - x decreases by y.\n   - y is updated to (y + 1) / 2, so y is always positive.\n   - x + y is non-negative.\n3. After the loop termination: x < 0, and y is a positive integer.\n\nSo, the loop invariants are:\n\n```\n/*@ \n    loop invariant \\at(x, LoopEntry) == x;\n    loop invariant \\at(y, LoopEntry) == 2;\n    loop invariant y > 0;\n    loop invariant x + y >= 0;\n*/\n```\n\nThese loop invariants imply that the ranking function (x + y) decreases with every iteration, supporting the termination of the loop.",
                    "First, let's analyze the loop in the given program:\n\n1. Initial values:\n   - x = unknown_int()\n   - y = 2\n\n2. Loop condition: x >= 0\n\n3. Loop body:\n   - x = x - y;\n   - y = (y + 1) / 2;\n\n4. Given ranking function: x + y\n\nNow, let's find the loop invariants that support the validity of the ranking function:\n\n1. Before the loop execution, the value of y is 2.\n\n2. During each iteration of the loop, the value of x decreases by y, and y is updated to (y + 1) / 2, which always remains positive.\n\n3. After the loop termination, x must be negative.\n\nConsidering the above properties, we can write the loop invariants as:\n\n```\n/*@ \n    loop invariant x >= -1;\n    loop invariant y >= 1;\n    loop invariant x + y >= 0;\n*/\n```\n\nThese loop invariants hold true before the loop execution, in every iteration of the loop, and after the loop termination. They also imply that the ranking function (x + y) decreases with every iteration, which proves the termination of the loop.",
                    "First, let's identify the variables that are live at the loop head and their starting values or constraints:\n- x is initialized with an unknown integer value.\n- y is initialized with the value 2.\n\nNext, let's analyze the loop body, loop condition, and the given ranking function:\n- Loop condition: x >= 0\n- Loop body:\n    1. x = x - y;\n    2. y = (y + 1) / 2;\n- Ranking function: (x + y)\n\nNow, let's output the loop invariants that support the loop variant (x + y):\n\n```\n/*@ \n    loop invariant x >= -y;\n    loop invariant y >= 1;\n    loop invariant y <= 2;\n*/\n```",
                    "First, let's analyze the given C program and the loop:\n\n- The loop condition is `x >= 0`.\n- The loop body updates `x` by subtracting `y` from its current value: `x = x - y`.\n- The loop body updates `y` by adding `1` to its current value and then dividing by `2`: `y = (y + 1) / 2`.\n- The given ranking function is `(x + y)`.\n\nNow, let's find loop invariants that support the validity of the ranking function and the termination of the loop:\n\n- At the beginning of the loop, `x` is an arbitrary integer value and `y = 2`.\n- In every iteration, `x` decreases by at least `y`, and `y` is always non-negative.\n- In every iteration, `y` either remains the same or decreases.\n- After the loop termination, `x` must be less than 0.\n\nLet's write the loop invariants for the given program:\n\n```\n/*@ \n    loop invariant x >= -y;\n    loop invariant y >= 2;\n    loop invariant \\at(x, LoopEntry) + \\at(y, LoopEntry) >= x + y;\n*/\n```",
                    "First, let's make note of the starting values or constraints for the variables that are live at the loop head:\n\n- x is initialized to unknown_int(), which can be any integer value.\n- y is initialized to 2.\n\nNext, let's analyze the loop body and make a note of the loop condition and the given ranking function:\n\n- Loop condition: x >= 0\n- Loop body:\n  - x = x - y\n  - y = (y + 1) / 2\n- Given ranking function: (x + y)\n\nNow, let's output the loop invariants that support the validity of the ranking function and prove the termination of the loop:\n\n```\n/*@ \n    loop invariant x >= -y;\n    loop invariant y >= 1;\n    loop invariant y <= 2;\n*/\n```\n\nThese loop invariants hold:\n- Before the loop execution: x is any integer, y is 2, so x >= -y (x >= -2), y >= 1, and y <= 2.\n- In every iteration of the loop: x is decreasing, y is either staying the same or decreasing, but never going below 1 or above 2.\n- After the loop termination: when the loop exits, x < 0, and y is still between 1 and 2.\n\nThese loop invariants imply that the ranking function (x + y) decreases with every iteration, proving the termination of the loop."
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant \\at(x, LoopEntry) == x;\n    loop invariant \\at(y, LoopEntry) == 2;\n    loop invariant y > 0;\n    loop invariant x + y >= 0;\n*/",
                    "/*@ \n    loop invariant x >= -1;\n    loop invariant y >= 1;\n    loop invariant x + y >= 0;\n*/",
                    "/*@ \n    loop invariant x >= -y;\n    loop invariant y >= 1;\n    loop invariant y <= 2;\n*/",
                    "/*@ \n    loop invariant x >= -y;\n    loop invariant y >= 2;\n    loop invariant \\at(x, LoopEntry) + \\at(y, LoopEntry) >= x + y;\n*/",
                    "/*@ \n    loop invariant x >= -y;\n    loop invariant y >= 1;\n    loop invariant y <= 2;\n*/"
                ],
                "inductive_invariants": "loop invariant i2: \\at(y, LoopEntry) == 2;\nloop invariant i3: y > 0;\nloop invariant i6: y >= 1;\nloop invariant i10: y <= 2;\nloop invariant i13: \\at(x, LoopEntry) + \\at(y, LoopEntry) >= x + y;",
                "final_checker_input": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = 2;\n\t/*@\nloop invariant i2: \\at(y, LoopEntry) == 2;\nloop invariant i3: y > 0;\nloop invariant i6: y >= 1;\nloop invariant i10: y <= 2;\nloop invariant i13: \\at(x, LoopEntry) + \\at(y, LoopEntry) >= x + y;\nloop variant x + y;\n*/\nwhile (x >= 0) {\n\t\tx = x - y;\n\t\ty = (y + 1) / 2;\n\t}\n\treturn 0;\n}",
                "checker_message": "loop invariant \\at(y, LoopEntry) == 2 is inductive.\nloop invariant y > 0 is inductive.\nloop invariant y >= 1 is inductive.\nloop invariant y <= 2 is inductive.\nloop invariant \\at(x, LoopEntry) + \\at(y, LoopEntry) >= x + y is inductive.\n\nLoop variant is Valid.\n",
                "success": true
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c"
        ],
        "skipped": [],
        "total": 107,
        "success_count": 56,
        "failure_count": 51,
        "success_rate": 0.5233644859813084
    }
}