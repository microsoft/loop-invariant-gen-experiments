{
    "logs": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, x, n, b, t;\n\ti = unknown_int();\n\tx = unknown_int();\n\tn = unknown_int();\n\tb = unknown_int();\n\tif (b >= 1) {\n\t\tt = 1;\n\t} else {\n\t\tt = -1;\n    }\n\twhile (x <= n) {\n\t\tif (b >= 1) {\n\t\t\tx = x + t;\n\t\t} else {\n\t\t\tx = x - t;\n\t\t}\n\t}\n\treturn 0;\n}",
        "success": true,
        "variants": [
            [
                "n - x"
            ],
            [
                "(x > n) ? (x - n) : (n - x)"
            ],
            [
                "(t >= 0 ? n - x : x - n)"
            ],
            [
                "(b >= 1) ? (n - x) : (x - n)"
            ],
            [
                "n - x + 1"
            ]
        ],
        "variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n- If the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. \n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, x, n, b, t;\n\ti = unknown_int();\n\tx = unknown_int();\n\tn = unknown_int();\n\tb = unknown_int();\n\tif (b >= 1) {\n\t\tt = 1;\n\t} else {\n\t\tt = -1;\n    }\n\twhile (x <= n) {\n\t\tif (b >= 1) {\n\t\t\tx = x + t;\n\t\t} else {\n\t\t\tx = x - t;\n\t\t}\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function (or the sequence of expressions) is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "1. The variables that are live at the loop head are `x`, `n`, and `t`. The loop condition is `x <= n`.\n\n2. Analyzing the loop body, we can see that the value of `x` is either incremented by `t` (if `b >= 1`) or decremented by `t` (if `b < 1`). Since `t` is either `1` or `-1`, the value of `x` always increases by 1 in every iteration.\n\n3. The ranking function should involve `n`, `x`, and the difference between them, to ensure that it decreases with every iteration and is positive while the loop executes. \n\nWe can use the following ranking function:\n\n```\n/*@\n    loop variant n - x;\n*/\n```\n\nThis ranking function is valid because:\n\n- It involves the variables in the loop body.\n- It is positive while the loop executes (`x <= n`).\n- It decreases with every iteration, as the value of `x` increases by 1 in each iteration.",
            "First, let's make note of the starting values or constraints for the variables that are live at the loop head:\n- `x` is an integer with an unknown value.\n- `n` is an integer with an unknown value.\n- `t` is either 1 or -1, depending on the value of `b`.\n\nNow, let's analyze the loop body and find a ranking function involving the variables in the loop body:\n\nThe loop condition is `x <= n`. Inside the loop, the value of `x` is updated based on the value of `t`. If `t` is 1, `x` increases; if `t` is -1, `x` decreases. In both cases, the value of `x` is changing with respect to the loop condition. Since `t` is either 1 or -1, the difference between `x` and `n` will always decrease by `t` in each iteration.\n\nA valid ranking function for this loop would be the absolute difference between `x` and `n`, which we can represent using the ternary operator as follows:\n\n```\n/*@\n    loop variant (x > n) ? (x - n) : (n - x);\n*/\n```\n\nThis ranking function is valid because it satisfies the following conditions:\n1. The value of the ranking function is positive while the loop is executing, as the absolute difference between `x` and `n` will always be non-negative.\n2. The value of the ranking function decreases with every successive iteration of the loop, as the difference between `x` and `n` will always decrease by `t` in each iteration.",
            "First, let's identify the variables that are live at the loop head:\n- x\n- n\n- t\n\nNow let's analyze the loop body. In each iteration, `x` is either incremented or decremented by `t`. The loop condition is `x <= n`, so the loop executes as long as `x` is less than or equal to `n`.\n\nWe can create a ranking function based on the difference between `n` and `x`. Since `t` can be either 1 or -1, we need to consider both cases. We'll use the ternary operator to express the absolute value of the difference between `n` and `x`.\n\nHere's the ranking function:\n\n```\n/*@\n    loop variant (t >= 0 ? n - x : x - n);\n*/\n```\n\nThis ranking function is valid because:\n1. It is positive while the loop is executing, as the loop condition ensures that `x <= n`.\n2. It decreases with every iteration of the loop since `x` is either incremented or decremented by `t`.",
            "1. Make note of the starting values or constraints for the variables that are live at the loop head:\n   - `x` is an unknown integer.\n   - `n` is an unknown integer.\n   - `t` is 1 if `b >= 1`, otherwise `t` is -1.\n\n2. Analyze the loop body and find a ranking function involving the variables in the loop body:\n   - The loop condition is `x <= n`.\n   - If `b >= 1`, `x` is incremented by `t` (which is 1) in each iteration.\n   - If `b < 1`, `x` is decremented by `t` (which is -1) in each iteration.\n\nNow, let's find the ranking function:\n\nIf `b >= 1`, `x` increases in each iteration until it becomes greater than `n`. So, the ranking function should involve `n - x`.\n\nIf `b < 1`, `x` decreases in each iteration until it becomes greater than `n`. Since `t = -1`, the ranking function should involve `x - n`.\n\nWe can use a ternary operator to describe the ranking function based on the value of `b`:\n\n```\n/*@ \n    loop variant (b >= 1) ? (n - x) : (x - n);\n*/\n```\n\nThis ranking function is valid because:\n- The value is positive while the loop is executing, as per the loop condition `x <= n`.\n- The value decreases with every iteration of the loop:\n  - If `b >= 1`, `x` increases and `n - x` decreases.\n  - If `b < 1`, `x` decreases and `x - n` decreases.",
            "First, let's identify the loop head and the variables that are live at the loop head:\n- The loop condition is `x <= n`.\n- The variables that are live at the loop head are `x`, `n`, `t`, and `b`.\n\nNow, let's analyze the loop body and find a ranking function involving these variables:\n- When `b >= 1`, `t = 1`, and `x` is incremented by `t` in each iteration.\n- When `b < 1`, `t = -1`, and `x` is incremented by `-t` in each iteration.\n\nSince `t` is either 1 or -1, and it does not change during the loop execution, we can use the absolute value of `t` as the increment for `x`.\n\nWe want to find a ranking function that decreases with every iteration of the loop and is positive while the loop is executing. We can use the expression `n - x + 1` as the ranking function:\n\n- When the loop is executing, `x <= n`, so `n - x + 1 > 0`.\n- In each iteration, `x` is incremented by either `t` (when `b >= 1`) or `-t` (when `b < 1`). In both cases, `x` is incremented by the absolute value of `t`, which is 1. So, the value of `n - x + 1` decreases by 1 in every iteration.\n\nNow, let's write the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant n - x + 1;\n*/\n```\n\nThis is a valid ranking function because it decreases with every iteration of the loop and is positive while the loop is executing."
        ],
        "variant_log": [
            {
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. Lexicographic ranking functions are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, x, n, b, t;\n\ti = unknown_int();\n\tx = unknown_int();\n\tn = unknown_int();\n\tb = unknown_int();\n\tif (b >= 1) {\n\t\tt = 1;\n\t} else {\n\t\tt = -1;\n    }\n\twhile (x <= n) {\n\t\tif (b >= 1) {\n\t\t\tx = x + t;\n\t\t} else {\n\t\t\tx = x - t;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(n - x)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, let's identify the starting values or constraints for the variables that are live at the loop head.\n\n- `i`, `x`, `n`, and `b` are initialized with unknown values.\n- `t` is either 1 or -1 depending on the value of `b`.\n\nNow, let's analyze the loop body and make a note of the loop condition and the given ranking function.\n\n- Loop condition: `x <= n`\n- Ranking function: `(n - x)`\n\nLet's output loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration.\n\n```\n/*@ \n    loop invariant 0 <= n - x;\n    loop invariant t == 1 ==> b >= 1;\n    loop invariant t == -1 ==> b < 1;\n    loop invariant x <= n;\n*/\n```",
                    "First, let's analyze the starting values and constraints for the variables that are live at the loop head:\n- i: unknown_int(), can be any integer value.\n- x: unknown_int(), can be any integer value.\n- n: unknown_int(), can be any integer value.\n- b: unknown_int(), can be any integer value.\n- t: 1 if b >= 1, -1 otherwise.\n\nNow, let's analyze the loop condition and body:\n- Loop condition: x <= n\n- Loop body:\n  - If b >= 1: x = x + t\n  - Else: x = x - t\n\nGiven the loop variant (n - x), here are the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= t && t <= 1;\n    loop invariant (b >= 1) ==> (t == 1);\n    loop invariant (b < 1) ==> (t == -1);\n    loop invariant x <= n;\n    loop invariant (b >= 1) ==> (x + t <= n + 1);\n    loop invariant (b < 1) ==> (x - t <= n + 1);\n*/\n```",
                    "First, let's identify the starting values or constraints for the variables that are live at the loop head:\n\n- i, x, n, and b are initially assigned non-deterministic values from unknown_int() and can be any integer.\n- t is assigned 1 if b >= 1, and -1 otherwise.\n\nNow, let's analyze the loop body and note the loop condition and the given ranking function:\n\n- The loop condition is x <= n.\n- The given ranking function is (n - x).\n\nNow, let's output the loop invariants that support the validity of the ranking function and prove the termination of the loop:\n\n```\n/*@ \n    loop invariant 0 <= n - x;\n    loop invariant b >= 1 ==> t == 1;\n    loop invariant b < 1 ==> t == -1;\n*/\n```\n\nThese loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination, and they imply that the ranking function (n - x) decreases with every iteration.",
                    "First, let's note the starting values and constraints for the variables that are live at the loop head:\n- i, n, and x are unknown integers.\n- b is also an unknown integer, but it influences the value of t.\n- t is set to 1 if b >= 1, else t is set to -1.\n\nThe loop condition is x <= n, and the given ranking function is (n - x).\n\nNow, let's output the loop invariants:\n\n```\n/*@ \n    loop invariant n >= x;\n    loop invariant (b >= 1) ==> (t == 1);\n    loop invariant (b < 1) ==> (t == -1);\n*/\n```",
                    "First, let's make a note of the starting values or constraints for the variables that are live at the loop head:\n\n- i, x, n, and b are initialized to unknown_int() which can return any integer value.\n- t is either 1 or -1 depending on the value of b.\n\nNow let's analyze the loop body, loop condition, and the given ranking function (n - x):\n\n- Loop condition: x <= n\n- Loop body: \n  - If b >= 1, x = x + t (which means x = x + 1)\n  - Else, x = x - t (which means x = x - (-1), so x = x + 1)\n- Ranking function: n - x\n\nNow we can output loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration:\n\n```\n/*@ \n    loop invariant x <= n;\n    loop invariant (b >= 1) ==> t == 1;\n    loop invariant (b < 1) ==> t == -1;\n    loop invariant x >= \\at(x, LoopEntry);\n*/\n```\n\nThese loop invariants imply that the ranking function (n - x) decreases with every iteration, and thus prove the termination of the loop."
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant 0 <= n - x;\n    loop invariant t == 1 ==> b >= 1;\n    loop invariant t == -1 ==> b < 1;\n    loop invariant x <= n;\n*/",
                    "/*@ \n    loop invariant 0 <= t && t <= 1;\n    loop invariant (b >= 1) ==> (t == 1);\n    loop invariant (b < 1) ==> (t == -1);\n    loop invariant x <= n;\n    loop invariant (b >= 1) ==> (x + t <= n + 1);\n    loop invariant (b < 1) ==> (x - t <= n + 1);\n*/",
                    "/*@ \n    loop invariant 0 <= n - x;\n    loop invariant b >= 1 ==> t == 1;\n    loop invariant b < 1 ==> t == -1;\n*/",
                    "/*@ \n    loop invariant n >= x;\n    loop invariant (b >= 1) ==> (t == 1);\n    loop invariant (b < 1) ==> (t == -1);\n*/",
                    "/*@ \n    loop invariant x <= n;\n    loop invariant (b >= 1) ==> t == 1;\n    loop invariant (b < 1) ==> t == -1;\n    loop invariant x >= \\at(x, LoopEntry);\n*/"
                ],
                "inductive_invariants": "loop invariant i2: t == 1 ==> b >= 1;\nloop invariant i3: t == -1 ==> b < 1;\nloop invariant i6: (b >= 1) ==> (t == 1);\nloop invariant i7: (b < 1) ==> (t == -1);\nloop invariant i12: b >= 1 ==> t == 1;\nloop invariant i13: b < 1 ==> t == -1;\nloop invariant i18: (b >= 1) ==> t == 1;\nloop invariant i19: (b < 1) ==> t == -1;\nloop invariant i20: x >= \\at(x, LoopEntry);",
                "final_checker_input": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, x, n, b, t;\n\ti = unknown_int();\n\tx = unknown_int();\n\tn = unknown_int();\n\tb = unknown_int();\n\tif (b >= 1) {\n\t\tt = 1;\n\t} else {\n\t\tt = -1;\n    }\n\t/*@\nloop invariant i2: t == 1 ==> b >= 1;\nloop invariant i3: t == -1 ==> b < 1;\nloop invariant i6: (b >= 1) ==> (t == 1);\nloop invariant i7: (b < 1) ==> (t == -1);\nloop invariant i12: b >= 1 ==> t == 1;\nloop invariant i13: b < 1 ==> t == -1;\nloop invariant i18: (b >= 1) ==> t == 1;\nloop invariant i19: (b < 1) ==> t == -1;\nloop invariant i20: x >= \\at(x, LoopEntry);\nloop variant n - x;\n*/\nwhile (x <= n) {\n\t\tif (b >= 1) {\n\t\t\tx = x + t;\n\t\t} else {\n\t\t\tx = x - t;\n\t\t}\n\t}\n\treturn 0;\n}",
                "checker_message": "loop invariant t == 1 ==> b >= 1 is inductive.\nloop invariant t == -1 ==> b < 1 is inductive.\nloop invariant (b >= 1) ==> (t == 1) is inductive.\nloop invariant (b < 1) ==> (t == -1) is inductive.\nloop invariant b >= 1 ==> t == 1 is inductive.\nloop invariant b < 1 ==> t == -1 is inductive.\nloop invariant (b >= 1) ==> t == 1 is inductive.\nloop invariant (b < 1) ==> t == -1 is inductive.\nloop invariant x >= \\at(x, LoopEntry) is inductive.\n\nLoop variant is Valid.\n",
                "success": true
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB6.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Mysore_true-termination.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusMin.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Thun_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_flag.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex2_true-termination.c"
        ],
        "skipped": [],
        "total": 152,
        "success_count": 80,
        "failure_count": 72,
        "success_rate": 0.5263157894736842
    }
}