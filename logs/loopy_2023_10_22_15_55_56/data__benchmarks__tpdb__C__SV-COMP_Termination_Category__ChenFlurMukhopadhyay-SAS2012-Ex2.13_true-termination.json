{
    "logs": {
        "file": "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x = unknown_int();\n    int y = unknown_int();\n    while (x - y > 0) {\n        x = y - x;\n        y++;\n    }\n    return 0;\n}",
        "success": false,
        "variants": [
            [
                "x - y"
            ],
            [
                "(x - y > 0 ? x - y : 0)",
                "y - x"
            ]
        ],
        "variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n- If the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. \n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x = unknown_int();\n    int y = unknown_int();\n    while (x - y > 0) {\n        x = y - x;\n        y++;\n    }\n    return 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function (or the sequence of expressions) is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "1. Starting values or constraints for the variables that are live at the loop head:\n   - `x` and `y` are both assigned with unknown integer values.\n\n2. Analyze the loop body and find a ranking function involving the variables in the loop body:\n   - The loop condition is `x - y > 0`.\n   - Inside the loop, `x` is updated to `y - x`, and `y` is incremented by 1.\n\nLet's consider the ranking function `f = x - y`.\n\nIn every iteration of the loop, the new value of `x` is `y - x`, and the new value of `y` is `y + 1`. Therefore, the new value of the ranking function `f` is `(y - x) - (y + 1)`, which simplifies to `-x - 1`.\n\nNow let's prove that this ranking function is valid:\n\n1. The value of the ranking function is positive while the loop is executing.\n   - Since the loop condition is `x - y > 0`, we have that `f = x - y` is positive.\n\n2. The ranking function is decreasing with every iteration of the loop.\n   - We have the old value of the ranking function `f = x - y` and the new value `-x - 1`.\n   - Since `x - y > 0`, we have that `x > y`.\n   - Therefore, `-x - 1 < -y - 1`.\n   - Hence, the new value of the ranking function is less than the old value, which means that the ranking function is decreasing.\n\nSo, the ranking function is valid. The loop variant for the given program is:\n\n```\n/*@\n    loop variant x - y;\n*/\n```",
            "1. Note the starting values or constraints for the variables that are live at the loop head.\n\n`x` and `y` are unknown integers.\n\n2. Analyze the loop body and find a ranking function involving the variables in the loop body\n\nThe loop condition is `x - y > 0`. Inside the loop, `x` is updated to `y - x`, and `y` is incremented by 1.\n\n3. Output the ranking function in one code block, in ACSL syntax.\n\nBased on the loop body, we can see that the value of `x - y` decreases in each iteration, and it must be positive for the loop to continue executing. Therefore, the ranking function is `x - y`.\n\nHere is the ACSL syntax:\n```\n/*@\n    loop variant x - y;\n*/\n```",
            "1. Note the starting values or constraints for the variables that are live at the loop head:\n   - x and y are both initialized to unknown_int(), which means they can take any integer value.\n\n2. Analyze the loop body and find a ranking function involving the variables in the loop body:\n   - The loop condition is \"x - y > 0\", which means the loop executes as long as x > y.\n   - In the loop body, x is updated to (y - x) and y is incremented by 1.\n\nNow, let's find the ranking function.",
            "First, let's make note of the starting values or constraints for the variables that are live at the loop head:\n- x and y are initialized to unknown_int(), which means their values are arbitrary integers.\n\nNow, let's analyze the loop body and find a ranking function involving the variables in the loop body. The loop condition is (x - y > 0), and inside the loop, we have:\n\n1. x = y - x;\n2. y++;\n\nWe can observe that the difference between x and y changes in every iteration. We can use the absolute value of (x - y) as a part of our ranking function. Since x is assigned the value of (y - x), the new value of x is non-positive. Also, y is incremented by 1 in each iteration. Therefore, we can also use (y - x) as another part of our ranking function.\n\nNow, let's output the ranking function in ACSL syntax:\n\n```c\n/*@\n    loop variant (x - y > 0 ? x - y : 0);\n    loop variant y - x;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. The value of (x - y > 0 ? x - y : 0) is always non-negative and decreases with each iteration when the loop condition is satisfied (x - y > 0). When the loop condition is not satisfied, the value of the expression becomes 0, which ensures that the loop terminates.\n2. The value of (y - x) is always non-negative and strictly increases with each iteration, ensuring that the loop will eventually terminate as the value of x gets closer to or equal to the value of y.",
            "First, we need to note the starting values or constraints for the variables that are live at the loop head.\n\nIn this program, `x` and `y` are the live variables at the loop head. They are initialized with unknown values, so we don't have specific starting values or constraints for them.\n\nNow, let's analyze the loop body and find a ranking function involving the variables in the loop body.\n\nThe loop condition is `x - y > 0`, which means that the loop will continue executing as long as `x` is greater than `y`. In the loop body, `x` is updated to `y - x`, and `y` is incremented by `1`. This means that the value of `x` will decrease or stay the same in each iteration, and the value of `y` will always increase.\n\nA possible ranking function for this loop is `x - y`. This expression will always be positive while the loop is executing, and it will decrease with every iteration of the loop.\n\nSo, the ranking function for this loop is:\n\n```\n/*@\n    loop variant x - y;\n*/\n```\n\nThis is a valid ranking function because it meets the requirements of being positive while the loop is executing and decreasing with every iteration of the loop."
        ],
        "variant_log": [
            {
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. Lexicographic ranking functions are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x = unknown_int();\n    int y = unknown_int();\n    while (x - y > 0) {\n        x = y - x;\n        y++;\n    }\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(x - y)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, let's note the starting values and constraints for the variables that are live at the loop head. Both x and y are initialized with unknown_int(), which means they can take any integer value.\n\nNow, let's analyze the loop body and make a note of the loop condition and the given ranking function. The loop condition is (x - y > 0) and the given ranking function is (x - y).\n\nHere are the loop invariants that support the validity of the ranking function and prove the termination of the loop:\n\n```\n/*@ \n    loop invariant \\at(x, LoopEntry) >= \\at(y, LoopEntry);\n    loop invariant x - y >= 0 ==> x <= y;\n*/\n```\n\nThese loop invariants imply that the ranking function (x - y) decreases with every iteration of the loop, ensuring termination.",
                    "First, let's make a note of the starting values or constraints for the variables that are live at the loop head. We have:\n\n- x is assigned an unknown integer value.\n- y is assigned an unknown integer value.\n\nNext, let's analyze the loop body and make a note of the loop condition and the given ranking function:\n\n- Loop condition: x - y > 0\n- Ranking function: (x - y)\n\nNow let's output the loop invariants that support the validity of the ranking function and prove the termination of the loop:\n\n```\n/*@ \n    loop invariant 0 <= y <= INT_MAX;\n    loop invariant x <= y || x >= y - INT_MAX;\n*/\n```\n\nHere, we have two loop invariants:\n1. The value of y is always non-negative and within the bounds of an integer.\n2. The value of x is either less than or equal to y or greater than or equal to (y - INT_MAX). This ensures that the value of the ranking function (x - y) remains within the bounds of an integer and decreases with every iteration of the loop.",
                    "We will first analyze the given program and then derive the loop invariants.\n\n1. x and y are initialized with unknown_int(), which means they can be any integer values.\n2. The loop condition is (x - y > 0), which means the loop will continue to execute as long as x is greater than y.\n3. Inside the loop, x is updated to (y - x), and y is incremented by 1.\n\nNow, let's derive the loop invariants:\n\n- Before the loop execution, we know that x and y can be any integer values.\n- In every iteration of the loop, x is updated to (y - x), and y is incremented by 1. We can observe that the value of x is always decreasing in every iteration, as it is always assigned a value smaller than its current value (y - x < x), and y is always increasing.\n- After the loop termination, the condition (x - y > 0) will be false, which means x is no longer greater than y.\n\nSo, the loop invariants are:\n\n```\n/*@ \n    loop invariant \\at(x, LoopEntry) >= x;\n    loop invariant y >= \\at(y, LoopEntry) + 1;\n    loop invariant x - y <= 0 ==> x <= y;\n*/\n```",
                    "First, let's note the starting values or constraints for the variables that are live at the loop head:\n- x and y are non-deterministically assigned integers, which means they can be any integer value.\n\nNow let's analyze the loop body and make a note of the loop condition and the given ranking function:\n- Loop condition: (x - y > 0)\n- Ranking function: (x - y)\n\nWe need to find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nLoop invariants:\n- i1: x - y is non-negative (0 <= (x - y)) before the loop execution, in every iteration of the loop, and after the loop termination.\n- i2: The value of x at the beginning of the loop is equal to the value of y - x at the end of the loop (\\at(x, LoopEntry) == y - x).\n- i3: The value of y at the beginning of the loop is one less than the value of y at the end of the loop (\\at(y, LoopEntry) + 1 == y).\n\nOutput the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= (x - y);\n    loop invariant \\at(x, LoopEntry) == y - x;\n    loop invariant \\at(y, LoopEntry) + 1 == y;\n*/\n```",
                    "First, let's note the starting values or constraints for the variables live at the loop head:\n\n- x and y are both initialized with unknown_int() which can return any integer value.\n\nNow, let's analyze the loop body and make a note of the loop condition and the given ranking function:\n\n- The loop condition is (x - y > 0).\n- The given ranking function is (x - y).\n\nNow, let's output the loop invariants that support the validity of the ranking function and prove the termination of the loop:\n\n```\n/*@ \n    loop invariant x >= y;\n    loop invariant x - \\at(x, LoopEntry) <= 0;\n    loop invariant y - \\at(y, LoopEntry) >= 0;\n*/\n```"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant \\at(x, LoopEntry) >= \\at(y, LoopEntry);\n    loop invariant x - y >= 0 ==> x <= y;\n*/",
                    "/*@ \n    loop invariant 0 <= y <= INT_MAX;\n    loop invariant x <= y || x >= y - INT_MAX;\n*/",
                    "/*@ \n    loop invariant \\at(x, LoopEntry) >= x;\n    loop invariant y >= \\at(y, LoopEntry) + 1;\n    loop invariant x - y <= 0 ==> x <= y;\n*/",
                    "/*@ \n    loop invariant 0 <= (x - y);\n    loop invariant \\at(x, LoopEntry) == y - x;\n    loop invariant \\at(y, LoopEntry) + 1 == y;\n*/",
                    "/*@ \n    loop invariant x >= y;\n    loop invariant x - \\at(x, LoopEntry) <= 0;\n    loop invariant y - \\at(y, LoopEntry) >= 0;\n*/"
                ],
                "inductive_invariants": "loop invariant i7: x - y <= 0 ==> x <= y;\nloop invariant i13: y - \\at(y, LoopEntry) >= 0;",
                "final_checker_input": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x = unknown_int();\n    int y = unknown_int();\n    /*@\nloop invariant i7: x - y <= 0 ==> x <= y;\nloop invariant i13: y - \\at(y, LoopEntry) >= 0;\nloop variant x - y;\n*/\nwhile (x - y > 0) {\n        x = y - x;\n        y++;\n    }\n    return 0;\n}",
                "checker_message": "loop invariant x - y <= 0 ==> x <= y is inductive.\nloop invariant y - \\at(y, LoopEntry) >= 0 is inductive.\n\nLoop variant is Invalid.\n",
                "success": false
            },
            {
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. Lexicographic ranking functions are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x = unknown_int();\n    int y = unknown_int();\n    while (x - y > 0) {\n        x = y - x;\n        y++;\n    }\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **((x - y > 0 ? x - y : 0), y - x)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, let's identify the starting values or constraints for the variables that are live at the loop head. We have:\n\n- x and y are initialized with unknown_int(), which means they can have any integer value.\n\nNow, let's analyze the loop body and make a note of the loop condition and the given ranking function:\n\n- Loop condition: x - y > 0\n- Loop body: x = y - x; y++;\n- Ranking function: ((x - y > 0 ? x - y : 0), y - x)\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration.\n\n```\n/*@ \n    loop invariant \\at(x, LoopEntry) - \\at(y, LoopEntry) >= 0 ==> x >= y;\n    loop invariant \\at(x, LoopEntry) - \\at(y, LoopEntry) <= 0 ==> x <= y;\n    loop invariant x - y > 0 ==> y - x < 0;\n*/\n```",
                    "First, let's identify the starting values and constraints for the variables that are live at the loop head. The variables `x` and `y` are live at the loop head, and their values are assigned by the `unknown_int()` function. We do not know the exact values of `x` and `y`, but they are integers.\n\nNow, let's analyze the loop body, loop condition, and the given ranking function. The loop condition is `(x - y > 0)`, and the loop body updates `x` and `y` as follows:\n\n```\nx = y - x;\ny++;\n```\n\nThe given ranking function is `((x - y > 0 ? x - y : 0), y - x)`.\n\nNow, we can output the loop invariants:\n\n```\n/*@ \n    loop invariant \\at(x, LoopEntry) >= \\at(y, LoopEntry) ==> x >= y;\n    loop invariant \\at(x, LoopEntry) < \\at(y, LoopEntry) ==> x < y;\n    loop invariant \\at(x, LoopEntry) == x + y;\n*/\n```",
                    "First, let's note the starting values or constraints for the variables that are live at the loop head. In this case, they are `x` and `y`, both of which are initialized with unknown values.\n\nNext, let's analyze the loop body and make a note of the loop condition and the given ranking function. The loop condition is `x - y > 0`, and the given ranking function is `((x - y > 0 ? x - y : 0), y - x)`.\n\nNow, let's output the loop invariants that support the validity of the ranking function and prove the termination of the loop:\n\n```\n/*@ \n    loop invariant x >= \\at(x, LoopEntry);\n    loop invariant y >= \\at(y, LoopEntry);\n    loop invariant x - y <= \\at(x, LoopEntry) - \\at(y, LoopEntry);\n*/\n```\n\nThese invariants ensure that the loop terminates, as they hold true before the loop execution, in every iteration of the loop, and after the loop termination. They also imply that the ranking function decreases with every iteration.",
                    "First, let's note the starting values and constraints for the variables live at the loop head:\n\n- x and y are both initialized with unknown_int(), which means they can have any integer value.\n\nNow let's analyze the loop body and make a note of the loop condition and the given ranking function:\n\n- Loop condition: `x - y > 0`\n- Ranking function: `((x - y > 0 ? x - y : 0), y - x)`\n\nNow let's output loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration:\n\n```\n/*@ \n    loop invariant x == \\at(x, LoopEntry);\n    loop invariant y >= \\at(y, LoopEntry);\n    loop invariant x - y <= 0;\n*/\n```",
                    "First, let's analyze the program.\n\nAt the start of the loop, we have two integers `x` and `y` with unknown values. The loop condition is `x - y > 0`, which means that the loop will only execute if `x` is greater than `y`.\n\nInside the loop body, `x` is updated to `y - x`, and `y` is incremented by 1. \n\nNow, let's consider the loop variant `((x - y > 0 ? x - y : 0), y - x)`.\n\nTo ensure that this loop variant decreases with every iteration, we need to find loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination.\n\nLet's write the loop invariants:\n\n```\n/*@ \n    loop invariant \\at(x, LoopEntry) >= \\at(y, LoopEntry);\n    loop invariant x <= y;\n    loop invariant x >= y - \\at(y, LoopEntry);\n*/\n```\n\nHere's an explanation of the loop invariants:\n\n1. `\\at(x, LoopEntry) >= \\at(y, LoopEntry)`: At the beginning of the loop, `x` is greater than or equal to `y`. This is true because the loop only executes if `x - y > 0`.\n2. `x <= y`: In every iteration of the loop, `x` is less than or equal to `y`. This is true because `x` is updated to `y - x` and `y` is incremented by 1.\n3. `x >= y - \\at(y, LoopEntry)`: In every iteration of the loop, `x` is greater than or equal to the difference between `y` and its initial value. This is true because `x` is updated to `y - x`, which is always greater than or equal to `y - \\at(y, LoopEntry)`.\n\nThese loop invariants ensure that the loop variant `((x - y > 0 ? x - y : 0), y - x)` decreases with every iteration, and thus support the termination of the loop in the program."
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant \\at(x, LoopEntry) - \\at(y, LoopEntry) >= 0 ==> x >= y;\n    loop invariant \\at(x, LoopEntry) - \\at(y, LoopEntry) <= 0 ==> x <= y;\n    loop invariant x - y > 0 ==> y - x < 0;\n*/",
                    "/*@ \n    loop invariant \\at(x, LoopEntry) >= \\at(y, LoopEntry) ==> x >= y;\n    loop invariant \\at(x, LoopEntry) < \\at(y, LoopEntry) ==> x < y;\n    loop invariant \\at(x, LoopEntry) == x + y;\n*/",
                    "/*@ \n    loop invariant x >= \\at(x, LoopEntry);\n    loop invariant y >= \\at(y, LoopEntry);\n    loop invariant x - y <= \\at(x, LoopEntry) - \\at(y, LoopEntry);\n*/",
                    "/*@ \n    loop invariant x == \\at(x, LoopEntry);\n    loop invariant y >= \\at(y, LoopEntry);\n    loop invariant x - y <= 0;\n*/",
                    "/*@ \n    loop invariant \\at(x, LoopEntry) >= \\at(y, LoopEntry);\n    loop invariant x <= y;\n    loop invariant x >= y - \\at(y, LoopEntry);\n*/"
                ],
                "inductive_invariants": "loop invariant i3: x - y > 0 ==> y - x < 0;\nloop invariant i5: \\at(x, LoopEntry) < \\at(y, LoopEntry) ==> x < y;\nloop invariant i8: y >= \\at(y, LoopEntry);",
                "final_checker_input": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x = unknown_int();\n    int y = unknown_int();\n    //@ ghost variant_expression measure = { (x - y > 0 ? x - y : 0), y - x };\n/*@\nloop invariant i3: x - y > 0 ==> y - x < 0;\nloop invariant i5: \\at(x, LoopEntry) < \\at(y, LoopEntry) ==> x < y;\nloop invariant i8: y >= \\at(y, LoopEntry);\nloop invariant measure.a == (x - y > 0 ? x - y : 0) && measure.b == y - x;\nloop variant measure for lexicographic;\n*/\nwhile (x - y > 0) {\n        x = y - x;\n        y++;\n    \n//@ ghost measure.a = (x - y > 0 ? x - y : 0);\n//@ ghost measure.b = y - x;\n}\n    return 0;\n}",
                "checker_message": "loop invariant x - y > 0 ==> y - x < 0 is inductive.\nloop invariant \\at(x, LoopEntry) < \\at(y, LoopEntry) ==> x < y is inductive.\nloop invariant y >= \\at(y, LoopEntry) is inductive.\n\nLoop variant is Invalid.\n",
                "success": false
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB6.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Mysore_true-termination.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusMin.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.09-no-inv_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Copenhagen_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_easySum.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA6.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Gothenburg_v2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.08.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.03.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB11.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1c_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.04.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.02.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_AG313.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.01.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/easy2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA5.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.10.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Thun_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_flag.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/McCarthy91_Iteration_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NO_24.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Copenhagen_disj_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Bangalore_v4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ComplInterv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChooseLife.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c"
        ],
        "skipped": [
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c"
        ],
        "total": 229,
        "success_count": 121,
        "failure_count": 108,
        "success_rate": 0.5283842794759825
    }
}