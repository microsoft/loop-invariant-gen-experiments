{
    "logs": {
        "file": "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern char unknown_char(void);\n\nint main()\n{\n\tunsigned char c1 = unknown_uchar();\n\tchar c2 =  unknown_char();\n\tunsigned char ac;\n\tfor( ac = (unsigned char)c1 ; ac != (unsigned char)c2 ; ac++ )\n\t{\n        \n\t}\n\treturn 0;\n }",
        "success": false,
        "variants": [
            [
                "255 - ac"
            ],
            [
                "256 - ac"
            ]
        ],
        "variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n- If the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. \n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern char unknown_char(void);\n\nint main()\n{\n\tunsigned char c1 = unknown_uchar();\n\tchar c2 =  unknown_char();\n\tunsigned char ac;\n\tfor( ac = (unsigned char)c1 ; ac != (unsigned char)c2 ; ac++ )\n\t{\n        \n\t}\n\treturn 0;\n }\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function (or the sequence of expressions) is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "1. The variables that are live at the loop head are `ac`, `c1`, and `c2`.\n2. `ac` is initialized with the value of `c1` and is incremented in each iteration of the loop.\n3. The loop continues executing until `ac` is equal to `(unsigned char)c2`.\n\nNow, let's find the ranking function:\n\nSince `ac` is an unsigned char, it has an upper bound of 255. As `ac` is incremented in each iteration, we can use the upper bound and the value of `ac` to form a ranking function.\n\nThe ranking function for this loop is:\n\n```\n/*@\n    loop variant 255 - ac;\n*/\n```\n\nThis ranking function is valid because:\n\n1. The value of the ranking function is positive as long as the loop is executing, because `ac` is less than or equal to 255, and `255 - ac` is positive as long as `ac != (unsigned char)c2`.\n2. The value of the ranking function decreases with every iteration of the loop, as `ac` is incremented in each iteration, making `255 - ac` smaller.",
            "First, let's identify the loop variables and their initial values or constraints:\n\n1. `c1`: an unsigned char, initialized with an unknown value.\n2. `c2`: a char, initialized with an unknown value.\n3. `ac`: an unsigned char, initialized with the value of `c1`.\n\nNow, let's analyze the loop body and find a ranking function involving the variables in the loop body:\n\nThe loop condition is `ac != (unsigned char)c2`, and the loop body increments `ac` in each iteration.\n\nSince `ac` is an unsigned char, its maximum value is 255. The loop will terminate when `ac` reaches the value of `(unsigned char)c2`.\n\nA valid ranking function for this loop is the difference between the maximum value of an unsigned char (255) and the current value of `ac`. This ranking function is decreasing with every iteration of the loop (as `ac` increases) and remains positive while the loop is executing (as `ac` can never be greater than 255).\n\nHere's the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant 255 - ac;\n*/\n```",
            "1. The starting values for the variables live at the loop head are:\n   - `c1` is an unsigned char, so its value is in the range of [0, 255].\n   - `c2` is a char, so its value is in the range of [-128, 127].\n   - `ac` is an unsigned char, initialized as `(unsigned char)c1`, so its value is in the range of [0, 255].\n\n2. In the loop body, `ac` is incremented by 1 in each iteration. The loop continues to execute as long as `ac` is not equal to `(unsigned char)c2`.\n\n3. To find the ranking function, we need to consider the upper bound of `ac`. Since `ac` is an unsigned char, its maximum possible value is 255. \n\n4. The ranking function for this loop is the difference between the upper bound (255) and the value of `ac` in each iteration. This value is positive and decreasing with each iteration.\n\nThe ranking function is:\n\n```\n/*@\n    loop variant 255 - ac;\n*/\n``` \n\nThis is a valid ranking function because it is positive while the loop is executing (as `ac` is always in the range of [0, 255]) and decreases with every iteration (as `ac` is incremented by 1 in each iteration). The loop will terminate when `ac` reaches the value of `(unsigned char)c2`.",
            "First, let's make note of the starting values or constraints for the variables that are live at the loop head:\n\n- `c1` is an unsigned char, so its value is in the range [0, 255].\n- `c2` is a char, so its value is in the range [-128, 127].\n- `ac` is an unsigned char, initialized with the value of `c1`, so its value is in the range [0, 255].\n\nNow, let's analyze the loop body and find a ranking function involving the variables in the loop body. The loop condition is `ac != (unsigned char)c2`, and the loop variable `ac` is incremented in every iteration.\n\nSince `ac` is an unsigned char, it has an upper bound of 255. The loop condition requires `ac` to not decrease, so we can use the upper bound and the old value of `ac` in every iteration as the ranking function.\n\nThe ranking function for the loop in the given program is:\n\n```\n/*@\n    loop variant 255 - ac;\n*/\n```\n\nThis ranking function is valid because it is decreasing with every iteration of the loop (as `ac` increases by 1) and evaluates to a positive value while the loop is executing (as the value of `ac` is in the range [0, 255], and the upper bound is 255).",
            "First, let's make note of the starting values or constraints for the variables that are live at the loop head:\n- `c1` is an unsigned char, so its value is in the range [0, 255].\n- `c2` is a char, so its value is in the range [-128, 127].\n- `ac` is an unsigned char, and it is initialized to `(unsigned char)c1`, so its value is also in the range [0, 255].\n\nNow, let's analyze the loop body and find a ranking function involving the variables in the loop body. The loop condition is `ac != (unsigned char)c2`, and in the loop body, `ac` is incremented by 1 in each iteration.\n\nA suitable ranking function for this loop is `256 - ac`, where `ac` is the loop variable.\n\nThe ranking function is decreasing with every iteration since `ac` is incremented by 1 in each iteration. And it evaluates to a positive value while the loop is executing because `ac` is an unsigned char, and its value is in the range [0, 255]. So, `256 - ac` is in the range (0, 256].\n\nOutput the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant 256 - ac;\n*/\n```"
        ],
        "variant_log": [
            {
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. Lexicographic ranking functions are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern char unknown_char(void);\n\nint main()\n{\n\tunsigned char c1 = unknown_uchar();\n\tchar c2 =  unknown_char();\n\tunsigned char ac;\n\tfor( ac = (unsigned char)c1 ; ac != (unsigned char)c2 ; ac++ )\n\t{\n        \n\t}\n\treturn 0;\n }\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(255 - ac)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, let's make note of the starting values or constraints for the variables that are live at the loop head:\n\n- `c1` is an unsigned char and can take values from 0 to 255.\n- `c2` is a char and can take values from -128 to 127.\n- `ac` is an unsigned char and is initially set to `(unsigned char)c1`.\n\nNext, let's analyze the loop body and make a note of the loop condition and the given ranking function:\n\n- The loop condition is `ac != (unsigned char)c2`.\n- The given ranking function is `255 - ac`.\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration:\n\n```\n/*@ \n    loop invariant 0 <= c1 <= 255;\n    loop invariant -128 <= c2 <= 127;\n    loop invariant 0 <= ac <= 255;\n    loop invariant 0 <= (unsigned char)c2 <= 255;\n    loop invariant ac <= 255;\n    loop invariant \\at(ac, LoopEntry) == (unsigned char)c1;\n    loop invariant (ac != (unsigned char)c2) ==> (ac < 255 && ac < \\at(ac, LoopEntry));\n*/\n```",
                    "First, let's analyze the starting values and constraints for the variables that are live at the loop head:\n- `c1` is an unsigned char initialized by an unknown value. Its range is [0, 255].\n- `c2` is a char initialized by an unknown value. Its range is [-128, 127].\n- `ac` is an unsigned char initialized as `(unsigned char)c1`. Its range is [0, 255].\n\nNow, let's analyze the loop condition and the given ranking function:\n- Loop condition: `ac != (unsigned char)c2`\n- Ranking function: `(255 - ac)`\n\nTo prove the termination of the loop, we need to find loop invariants that support the validity of the ranking function.\n\nHere are the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= ac <= 255;\n    loop invariant 0 <= (unsigned char)c2 <= 255;\n    loop invariant 0 <= c1 <= 255;\n*/\n```",
                    "First, let's make note of the starting values or constraints for the variables that are live at the loop head:\n- c1 is an unsigned char, so its value is in the range [0, 255].\n- c2 is a char, so its value is in the range [-128, 127].\n\nNow, let's analyze the loop body and make a note of the loop condition and the given ranking function:\n- Loop condition: ac != (unsigned char)c2\n- Ranking function: (255 - ac)\n\nNow, we will output the loop invariants that support the validity of the ranking function and prove the termination of the loop:\n\n```\n/*@ \n    loop invariant 0 <= c1 <= 255;\n    loop invariant -128 <= c2 <= 127;\n    loop invariant 0 <= ac <= 255;\n    loop invariant 0 <= (unsigned char)c2 <= 255;\n    loop invariant 0 <= (255 - ac);\n    loop invariant (\\at(ac, LoopEntry) == (unsigned char)c1);\n    loop invariant (ac != (unsigned char)c2) ==> (ac < 255);\n*/\n```",
                    "First, let's make note of the starting values or constraints for the variables that are live at the loop head:\n- c1 is an unsigned char, so its range is from 0 to 255.\n- c2 is a char, so its range is from -128 to 127.\n- ac is an unsigned char, initialized with the value of c1, so its range is also from 0 to 255.\n\nNow, let's analyze the loop body and make a note of the loop condition and the given ranking function:\n- Loop condition: `ac != (unsigned char)c2`\n- Ranking function: `(255 - ac)`\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration:\n\n```\n/*@ \n    loop invariant 0 <= c1 <= 255;\n    loop invariant -128 <= c2 <= 127;\n    loop invariant 0 <= ac <= 255;\n    loop invariant ac == \\at(ac, LoopEntry) || ac - 1 == \\at(ac, LoopEntry);\n    loop invariant 255 - ac >= 0;\n    loop invariant 255 - ac < 255 - \\at(ac, LoopEntry);\n*/\n```",
                    "First, let's analyze the starting values and constraints for the variables live at the loop head:\n- c1 is an unsigned char, so its value is between 0 and 255.\n- c2 is a char, so its value is between -128 and 127.\n- ac is initialized as the unsigned char version of c1, so its value is also between 0 and 255.\n\nThe loop condition is `ac != (unsigned char)c2` and the loop variant is `(255 - ac)`.\n\nNow, let's find the loop invariants:\n\n```c\n/*@ \n    loop invariant 0 <= c1 <= 255;\n    loop invariant -128 <= c2 <= 127;\n    loop invariant 0 <= ac <= 255;\n    loop invariant 0 <= (unsigned char)c2 <= 255;\n    loop invariant 0 <= (255 - ac);\n    loop invariant (\\at(ac, LoopEntry) <= ac) ==> (ac <= (unsigned char)c2);\n    loop invariant (\\at(ac, LoopEntry) > ac) ==> (ac > (unsigned char)c2);\n*/\n```\n\nThese loop invariants should support the validity of the ranking function `(255 - ac)` and help prove the termination of the loop."
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant 0 <= c1 <= 255;\n    loop invariant -128 <= c2 <= 127;\n    loop invariant 0 <= ac <= 255;\n    loop invariant 0 <= (unsigned char)c2 <= 255;\n    loop invariant ac <= 255;\n    loop invariant \\at(ac, LoopEntry) == (unsigned char)c1;\n    loop invariant (ac != (unsigned char)c2) ==> (ac < 255 && ac < \\at(ac, LoopEntry));\n*/",
                    "/*@ \n    loop invariant 0 <= ac <= 255;\n    loop invariant 0 <= (unsigned char)c2 <= 255;\n    loop invariant 0 <= c1 <= 255;\n*/",
                    "/*@ \n    loop invariant 0 <= c1 <= 255;\n    loop invariant -128 <= c2 <= 127;\n    loop invariant 0 <= ac <= 255;\n    loop invariant 0 <= (unsigned char)c2 <= 255;\n    loop invariant 0 <= (255 - ac);\n    loop invariant (\\at(ac, LoopEntry) == (unsigned char)c1);\n    loop invariant (ac != (unsigned char)c2) ==> (ac < 255);\n*/",
                    "/*@ \n    loop invariant 0 <= c1 <= 255;\n    loop invariant -128 <= c2 <= 127;\n    loop invariant 0 <= ac <= 255;\n    loop invariant ac == \\at(ac, LoopEntry) || ac - 1 == \\at(ac, LoopEntry);\n    loop invariant 255 - ac >= 0;\n    loop invariant 255 - ac < 255 - \\at(ac, LoopEntry);\n*/",
                    "/*@ \n    loop invariant 0 <= c1 <= 255;\n    loop invariant -128 <= c2 <= 127;\n    loop invariant 0 <= ac <= 255;\n    loop invariant 0 <= (unsigned char)c2 <= 255;\n    loop invariant 0 <= (255 - ac);\n    loop invariant (\\at(ac, LoopEntry) <= ac) ==> (ac <= (unsigned char)c2);\n    loop invariant (\\at(ac, LoopEntry) > ac) ==> (ac > (unsigned char)c2);\n*/"
                ],
                "inductive_invariants": "loop invariant i1: 0 <= c1 <= 255;\nloop invariant i2: -128 <= c2 <= 127;\nloop invariant i3: 0 <= ac <= 255;\nloop invariant i4: 0 <= (unsigned char)c2 <= 255;\nloop invariant i5: ac <= 255;\nloop invariant i6: \\at(ac, LoopEntry) == (unsigned char)c1;\nloop invariant i15: 0 <= (255 - ac);\nloop invariant i16: (\\at(ac, LoopEntry) == (unsigned char)c1);\nloop invariant i22: 255 - ac >= 0;",
                "final_checker_input": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern char unknown_char(void);\n\nint main()\n{\n\tunsigned char c1 = unknown_uchar();\n\tchar c2 =  unknown_char();\n\tunsigned char ac;\n\t/*@\nloop invariant i1: 0 <= c1 <= 255;\nloop invariant i2: -128 <= c2 <= 127;\nloop invariant i3: 0 <= ac <= 255;\nloop invariant i4: 0 <= (unsigned char)c2 <= 255;\nloop invariant i5: ac <= 255;\nloop invariant i6: \\at(ac, LoopEntry) == (unsigned char)c1;\nloop invariant i15: 0 <= (255 - ac);\nloop invariant i16: (\\at(ac, LoopEntry) == (unsigned char)c1);\nloop invariant i22: 255 - ac >= 0;\nloop variant 255 - ac;\n*/\nfor( ac = (unsigned char)c1 ; ac != (unsigned char)c2 ; ac++ )\n\t{\n        \n\t}\n\treturn 0;\n }",
                "checker_message": "loop invariant 0 <= c1 <= 255 is inductive.\nloop invariant -128 <= c2 <= 127 is inductive.\nloop invariant 0 <= ac <= 255 is inductive.\nloop invariant 0 <= (unsigned char)c2 <= 255 is inductive.\nloop invariant ac <= 255 is inductive.\nloop invariant \\at(ac, LoopEntry) == (unsigned char)c1 is inductive.\nloop invariant 0 <= (255 - ac) is inductive.\nloop invariant (\\at(ac, LoopEntry) == (unsigned char)c1) is inductive.\nloop invariant 255 - ac >= 0 is inductive.\n\nLoop variant is Invalid.\n",
                "success": false
            },
            {
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. Lexicographic ranking functions are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern char unknown_char(void);\n\nint main()\n{\n\tunsigned char c1 = unknown_uchar();\n\tchar c2 =  unknown_char();\n\tunsigned char ac;\n\tfor( ac = (unsigned char)c1 ; ac != (unsigned char)c2 ; ac++ )\n\t{\n        \n\t}\n\treturn 0;\n }\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(256 - ac)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, let's note the starting values and constraints for the variables live at the loop head:\n- c1 is an unsigned char, so its value is between 0 and 255.\n- c2 is a char, so its value is between -128 and 127.\n- ac is assigned the value of c1 and is an unsigned char, so its value is between 0 and 255.\n\nThe loop condition is ac != (unsigned char)c2.\n\nNow, let's output the loop invariants that support the given ranking function (256 - ac):\n\n```\n/*@ \n    loop invariant 0 <= ac <= 255;\n    loop invariant 0 <= (unsigned char)c1 <= 255;\n    loop invariant -128 <= c2 <= 127;\n    loop invariant \\at(ac, LoopEntry) == (unsigned char)c1;\n*/\n```\nThese loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination. They imply that the ranking function (256 - ac) decreases with every iteration, proving the termination of the loop.",
                    "First, note the starting values and constraints for the variables live at the loop head:\n\n- `c1` is an unsigned char, so its value is in the range [0, 255].\n- `c2` is a char, so its value is in the range [-128, 127].\n- `ac` is an unsigned char, initialized to the value of `c1`, so its value is in the range [0, 255].\n\nNow, analyze the loop condition and the given ranking function:\n\n- The loop condition is `ac != (unsigned char)c2`.\n- The given ranking function is `(256 - ac)`.\n\nTo prove the termination of the loop, we need to find loop invariants that support the validity of the ranking function. Here are the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= c1 <= 255;\n    loop invariant -128 <= c2 <= 127;\n    loop invariant 0 <= ac <= 255;\n    loop invariant (ac == (unsigned char)c1) ==> (\\at(ac, LoopEntry) == c1);\n    loop invariant (ac != (unsigned char)c1) ==> (\\at(ac, LoopEntry) == (unsigned char)c2);\n    loop invariant ac <= 255;\n*/\n```",
                    "First, let's analyze the given C program and identify the constraints and loop conditions:\n\n1. `unsigned char c1 = unknown_uchar();` - c1 is an unsigned char and can take values between 0 and 255.\n2. `char c2 = unknown_char();` - c2 is a char and can take values between -128 and 127.\n3. Loop condition: `ac != (unsigned char)c2` - The loop continues as long as ac is not equal to the unsigned value of c2.\n4. Loop body: `ac++` - In each iteration of the loop, ac is incremented by 1.\n\nNow, let's output the loop invariants that support the loop variant **(256 - ac)**:\n\n```\n/*@ \n    loop invariant 0 <= ac <= 255;\n    loop invariant 0 <= (unsigned char)c1 <= 255;\n    loop invariant -128 <= c2 <= 127;\n    loop invariant 0 <= (unsigned char)c2 <= 255;\n    loop invariant 0 <= (256 - ac);\n    loop invariant \\at(ac, LoopEntry) <= ac;\n    loop invariant (ac == (unsigned char)c1) ==> (ac == \\at(ac, LoopEntry));\n    loop invariant (ac != (unsigned char)c1) ==> (ac == \\at(ac, LoopEntry) + 1);\n*/\n```",
                    "First, let's note the starting values and constraints for the variables that are live at the loop head:\n\n- `c1` is an unsigned char, so its value is in the range [0, 255].\n- `c2` is a char, so its value is in the range [-128, 127].\n- `ac` is initialized to `(unsigned char)c1`, so its value is in the range [0, 255].\n\nNow, let's analyze the loop body and make a note of the loop condition and the given ranking function:\n\n- Loop condition: `ac != (unsigned char)c2`\n- Ranking function: `256 - ac`\n\nNow, we will output the loop invariants that support the validity of the ranking function and prove the termination of the loop:\n\n```c\n/*@ \n    loop invariant 0 <= ac <= 255;\n    loop invariant 0 <= (unsigned char)c1 <= 255;\n    loop invariant -128 <= c2 <= 127;\n    loop invariant 0 <= (unsigned char)c2 <= 255;\n    loop invariant 0 <= 256 - ac <= 256;\n    loop invariant (ac == (unsigned char)c1) ==> (ac == \\at(ac, LoopEntry));\n*/\n```",
                    "First, let's make note of the starting values or constraints for the variables that are live at the loop head:\n- c1 is an unsigned char, so its value is in the range [0, 255].\n- c2 is a char, so its value is in the range [-128, 127].\n- ac is an unsigned char, and its initial value is assigned the value of c1, so its value is also in the range [0, 255].\n\nNow let's analyze the loop body:\n- The loop condition is \"ac != (unsigned char)c2\".\n- The loop body is empty, so there are no changes to the variables inside the loop.\n- The loop variant is (256 - ac).\n\nNow we can output the loop invariants:\n```\n/*@ \n    loop invariant 0 <= c1 <= 255;\n    loop invariant -128 <= c2 <= 127;\n    loop invariant 0 <= ac <= 255;\n    loop invariant ac == \\at(ac, LoopEntry);\n*/\n```"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant 0 <= ac <= 255;\n    loop invariant 0 <= (unsigned char)c1 <= 255;\n    loop invariant -128 <= c2 <= 127;\n    loop invariant \\at(ac, LoopEntry) == (unsigned char)c1;\n*/",
                    "/*@ \n    loop invariant 0 <= c1 <= 255;\n    loop invariant -128 <= c2 <= 127;\n    loop invariant 0 <= ac <= 255;\n    loop invariant (ac == (unsigned char)c1) ==> (\\at(ac, LoopEntry) == c1);\n    loop invariant (ac != (unsigned char)c1) ==> (\\at(ac, LoopEntry) == (unsigned char)c2);\n    loop invariant ac <= 255;\n*/",
                    "/*@ \n    loop invariant 0 <= ac <= 255;\n    loop invariant 0 <= (unsigned char)c1 <= 255;\n    loop invariant -128 <= c2 <= 127;\n    loop invariant 0 <= (unsigned char)c2 <= 255;\n    loop invariant 0 <= (256 - ac);\n    loop invariant \\at(ac, LoopEntry) <= ac;\n    loop invariant (ac == (unsigned char)c1) ==> (ac == \\at(ac, LoopEntry));\n    loop invariant (ac != (unsigned char)c1) ==> (ac == \\at(ac, LoopEntry) + 1);\n*/",
                    "/*@ \n    loop invariant 0 <= ac <= 255;\n    loop invariant 0 <= (unsigned char)c1 <= 255;\n    loop invariant -128 <= c2 <= 127;\n    loop invariant 0 <= (unsigned char)c2 <= 255;\n    loop invariant 0 <= 256 - ac <= 256;\n    loop invariant (ac == (unsigned char)c1) ==> (ac == \\at(ac, LoopEntry));\n*/",
                    "/*@ \n    loop invariant 0 <= c1 <= 255;\n    loop invariant -128 <= c2 <= 127;\n    loop invariant 0 <= ac <= 255;\n    loop invariant ac == \\at(ac, LoopEntry);\n*/"
                ],
                "inductive_invariants": "loop invariant i1: 0 <= ac <= 255;\nloop invariant i2: 0 <= (unsigned char)c1 <= 255;\nloop invariant i3: -128 <= c2 <= 127;\nloop invariant i4: \\at(ac, LoopEntry) == (unsigned char)c1;\nloop invariant i5: 0 <= c1 <= 255;\nloop invariant i8: (ac == (unsigned char)c1) ==> (\\at(ac, LoopEntry) == c1);\nloop invariant i10: ac <= 255;\nloop invariant i14: 0 <= (unsigned char)c2 <= 255;\nloop invariant i15: 0 <= (256 - ac);\nloop invariant i23: 0 <= 256 - ac <= 256;",
                "final_checker_input": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern char unknown_char(void);\n\nint main()\n{\n\tunsigned char c1 = unknown_uchar();\n\tchar c2 =  unknown_char();\n\tunsigned char ac;\n\t/*@\nloop invariant i1: 0 <= ac <= 255;\nloop invariant i2: 0 <= (unsigned char)c1 <= 255;\nloop invariant i3: -128 <= c2 <= 127;\nloop invariant i4: \\at(ac, LoopEntry) == (unsigned char)c1;\nloop invariant i5: 0 <= c1 <= 255;\nloop invariant i8: (ac == (unsigned char)c1) ==> (\\at(ac, LoopEntry) == c1);\nloop invariant i10: ac <= 255;\nloop invariant i14: 0 <= (unsigned char)c2 <= 255;\nloop invariant i15: 0 <= (256 - ac);\nloop invariant i23: 0 <= 256 - ac <= 256;\nloop variant 256 - ac;\n*/\nfor( ac = (unsigned char)c1 ; ac != (unsigned char)c2 ; ac++ )\n\t{\n        \n\t}\n\treturn 0;\n }",
                "checker_message": "loop invariant 0 <= ac <= 255 is inductive.\nloop invariant 0 <= (unsigned char)c1 <= 255 is inductive.\nloop invariant -128 <= c2 <= 127 is inductive.\nloop invariant \\at(ac, LoopEntry) == (unsigned char)c1 is inductive.\nloop invariant 0 <= c1 <= 255 is inductive.\nloop invariant (ac == (unsigned char)c1) ==> (\\at(ac, LoopEntry) == c1) is inductive.\nloop invariant ac <= 255 is inductive.\nloop invariant 0 <= (unsigned char)c2 <= 255 is inductive.\nloop invariant 0 <= (256 - ac) is inductive.\nloop invariant 0 <= 256 - ac <= 256 is inductive.\n\nLoop variant is Invalid.\n",
                "success": false
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB6.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Mysore_true-termination.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusMin.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.09-no-inv_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Copenhagen_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_easySum.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA6.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Gothenburg_v2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.08.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.03.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB11.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1c_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.04.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.02.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_AG313.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.01.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/easy2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA5.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.10.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.06.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.10.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Waldkirch_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Thun_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_flag.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/McCarthy91_Iteration_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NO_24.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Copenhagen_disj_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Bangalore_v4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ComplInterv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChooseLife.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.21_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Singapore_true-termination.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c"
        ],
        "skipped": [
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c"
        ],
        "total": 252,
        "success_count": 133,
        "failure_count": 119,
        "success_rate": 0.5277777777777778
    }
}