{
    "logs": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z;\n\tx = unknown_int();\n\ty = unknown_int();\n\tz = unknown_int();\n\tif (2*y >= z) {\n    \twhile (x >= 0 && z == 1) {\n\t    \tx = x - 2*y + 1;\n\t    }\n\t}\n\treturn 0;\n}",
        "success": true,
        "variants": [
            [
                "x"
            ]
        ],
        "variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n- If the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. \n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z;\n\tx = unknown_int();\n\ty = unknown_int();\n\tz = unknown_int();\n\tif (2*y >= z) {\n    \twhile (x >= 0 && z == 1) {\n\t    \tx = x - 2*y + 1;\n\t    }\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function (or the sequence of expressions) is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "First, let's analyze the variables live at the loop head:\n- `x` is initialized to an unknown value.\n- `y` and `z` are also initialized to unknown values, but they do not change within the loop.\n\nThe loop condition is `x >= 0 && z == 1`. Since `z` is not modified within the loop, it remains `1` throughout the loop iterations. Now let's analyze the loop body:\n- `x` is updated as `x = x - 2*y + 1`.\n\nNow, let's find a ranking function involving the variables in the loop body:\n\nLet the ranking function be `v = x`. In each iteration, the value of `x` decreases by `2*y - 1`, so the ranking function `v` is decreasing as well. Since the loop continues executing while `x >= 0`, the value of the ranking function `v` must be positive.\n\nHere is the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x;\n*/\n```",
            "First, let's make note of the starting values or constraints for the variables that are live at the loop head:\n- x is initialized to an unknown integer value.\n- y is initialized to an unknown integer value.\n- z is initialized to an unknown integer value.\n- The loop executes only when 2*y >= z.\n\nNext, let's analyze the loop body and find a ranking function involving the variables in the loop body. The loop condition is x >= 0 && z == 1. Inside the loop, x is updated as x = x - 2*y + 1.\n\nNow let's find the ranking function:\n\nThe loop condition is x >= 0 and z == 1, so we know that x is non-negative and z is 1 at the beginning of each loop iteration. Since 2*y >= z, we know that y is non-negative.\n\nWe can use x as the ranking function because it will decrease in every iteration of the loop. The value of x is updated as x = x - 2*y + 1. Since y is non-negative, x will decrease by at least 1 in each iteration (when y = 0).\n\nThe ranking function is x. Here is the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x;\n*/\n```",
            "First, let's note the starting values or constraints for the variables that are live at the loop head:\n\n- x is an integer with an unknown value\n- y is an integer with an unknown value\n- z is an integer with an unknown value\n- The loop executes if 2*y >= z and x >= 0 and z == 1\n\nNext, let's analyze the loop body:\n\n- x is updated with the value x - 2*y + 1\n\nNow, let's find a ranking function involving the variables in the loop body:\n\nSince x is being updated in the loop, the ranking function should involve x. From the loop condition, we know that x >= 0, and x is being decreased by (2*y - 1) in each iteration. As long as x remains positive, the loop will continue executing.\n\nSo, a ranking function for this loop could be x.\n\nNow let's output the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x;\n*/\n```\n\nThis ranking function is valid because x is positive at the start of the loop (x >= 0), and it decreases with every iteration of the loop (x is updated with x - 2*y + 1). The loop will eventually terminate when x becomes negative.",
            "First, let's make note of the starting values or constraints for the variables that are live at the loop head:\n\n- x is an integer with an unknown value.\n- y is an integer with an unknown value.\n- z is an integer with an unknown value.\n- The loop executes when x >= 0 and z == 1.\n- The loop condition implies that x is non-negative and z is fixed at 1.\n\nNow, let's analyze the loop body and find a ranking function involving the variables in the loop body:\n\nIn the loop body, x is updated as follows:\n```\nx = x - 2*y + 1;\n```\n\nSince z is fixed at 1, the ranking function will depend on x and y. We know that x is decreasing in every iteration because it is subtracting 2*y (which is at least 0) and adding 1. The value of y remains constant throughout the loop.\n\nConsidering the constraints and loop updates, we can use x as the ranking function:\n\n```\n/*@\n    loop variant x;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. The value of x is non-negative at the beginning of the loop, as per the loop condition (x >= 0).\n2. The value of x decreases with every iteration of the loop, as x is updated by subtracting 2*y and adding 1.\n3. The value of x remains positive while the loop is executing (x >= 0).",
            "1. Make note of the starting values or constraints for the variables that are live at the loop head.\n\nThe variables live at the loop head are x, y, and z. There are no specific starting values for x, y, and z, but we know that 2*y >= z.\n\n2. Analyze the loop body and find a ranking function involving the variables in the loop body\n\nIn the loop body, the value of x is updated as x = x - 2*y + 1. The loop condition is x >= 0 && z == 1.\n\nNow, we can find the ranking function for the loop:\n\n```\n/*@\n    loop variant x;\n*/\n```\n\nThe ranking function is x.\n\nThis ranking function is valid because:\n- It is a positive value while the loop is executing (loop condition is x >= 0)\n- It decreases with every iteration of the loop (x = x - 2*y + 1, and since 2*y >= z and z == 1, we have 2*y >= 1, so x decreases in each iteration)"
        ],
        "variant_log": [
            {
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. Lexicographic ranking functions are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z;\n\tx = unknown_int();\n\ty = unknown_int();\n\tz = unknown_int();\n\tif (2*y >= z) {\n    \twhile (x >= 0 && z == 1) {\n\t    \tx = x - 2*y + 1;\n\t    }\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(x)**, for the loop in the program above. Let's think step by step."
                    },
                    "We will first note the starting values or constraints for the variables that are live at the loop head:\n\n- x, y, and z are assigned by unknown_int(), so we cannot assume any specific value or bound for them.\n- The loop condition is (x >= 0 && z == 1).\n- The loop variant is (x).\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution, the loop condition must be true, so we have the following loop invariant:\n\n```\n/*@ loop invariant x >= 0 && z == 1; */\n```\n\n2. In every iteration of the loop, x decreases by (2*y - 1), so we have the following loop invariant:\n\n```\n/*@ loop invariant x - \\at(x, LoopEntry) <= -2*y + 1; */\n```\n\n3. After the loop termination, the loop condition must be false, so either x < 0 or z != 1. We can use an implication to cover both cases:\n\n```\n/*@ loop invariant (x < 0) ==> (x - \\at(x, LoopEntry) < -2*y + 1); */\n/*@ loop invariant (z != 1) ==> (x - \\at(x, LoopEntry) == 0); */\n```\n\n4. The relation between y and z is given in the if condition, so we can include it as an invariant with an implication:\n\n```\n/*@ loop invariant (2*y >= z) ==> (z <= 2*y); */\n```\n\nNow, we can put all the loop invariants together:\n\n```\n/*@ \n    loop invariant x >= 0 && z == 1;\n    loop invariant x - \\at(x, LoopEntry) <= -2*y + 1;\n    loop invariant (x < 0) ==> (x - \\at(x, LoopEntry) < -2*y + 1);\n    loop invariant (z != 1) ==> (x - \\at(x, LoopEntry) == 0);\n    loop invariant (2*y >= z) ==> (z <= 2*y);\n*/\n```",
                    "First, let's identify the starting values or constraints for the variables that are live at the loop head:\n- `x` can be any integer value, as it is assigned by `unknown_int()`.\n- `y` can be any integer value, as it is assigned by `unknown_int()`.\n- `z` can be any integer value, as it is assigned by `unknown_int()`.\n\nNext, let's analyze the loop condition and the given ranking function:\n- The loop condition is `x >= 0 && z == 1`.\n- The given ranking function is `(x)`.\n\nNow, let's find the loop invariants that support the validity of the ranking function and prove the termination of the loop:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant z == 1;\n    loop invariant 2*y <= \\at(z, LoopEntry);\n*/\n```\n\nThese loop invariants ensure that the ranking function `(x)` decreases with every iteration of the loop and the loop terminates.",
                    "First, let's note the starting values or constraints for the variables that are live at the loop head:\n- x, y, and z are initialized with unknown_int() values.\n- The loop condition is (x >= 0 && z == 1).\n- The given ranking function is (x).\n\nNow, let's output the loop invariants that support the ranking function (x):\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant z == 1;\n    loop invariant \\at(x, LoopEntry) - x <= 2*y - 1;\n    loop invariant 2*y >= z;\n*/\n```",
                    "First, let's look at the loop condition and the ranking function. The loop condition is `x >= 0 && z == 1`, and the ranking function is `x`. Now let's derive the loop invariants:\n\n1. Before the loop starts, `x` is initialized with an arbitrary value from `unknown_int()`, `y` is initialized with an arbitrary value from `unknown_int()`, and `z` is initialized with an arbitrary value from `unknown_int()`.\n\n2. The loop executes if `x >= 0 && z == 1`. Inside the loop, `x` is updated as `x = x - 2*y + 1`. Since `x` is the ranking function, we need to ensure that it decreases with every iteration. We know that `2*y >= z` before the loop starts, so `2*y >= 1`, as `z == 1`.\n\n3. After the loop terminates, the loop condition `x >= 0 && z == 1` is false.\n\nGiven these observations, we can now write the loop invariants:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant z == 1;\n    loop invariant 2*y >= 1;\n    loop invariant \\at(x, LoopEntry) >= x;\n*/\n```",
                    "First, let's note the starting values or constraints for the variables that are live at the loop head:\n\n- x, y, and z are initialized with unknown_int(), so they can be any integer value.\n- The loop executes only if 2 * y >= z.\n\nNext, let's analyze the loop body:\n\n- The loop condition is x >= 0 && z == 1.\n- In the loop body, x is updated as x = x - 2 * y + 1.\n\nNow let's output the loop invariants:\n\n```\n/*@ \n    loop invariant \\at(x, LoopEntry) >= 0;\n    loop invariant z == 1;\n    loop invariant 2 * y >= z;\n    loop invariant x >= 0;\n*/\n```\n\nThese loop invariants satisfy the conditions:\n\n- They are true before the loop execution: The loop only executes when x >= 0 and z == 1.\n- They are true in every iteration of the loop: The loop condition ensures that x >= 0 and z == 1. The update of x does not affect the values of y and z.\n- They support the ranking function (x): x decreases in each iteration (x = x - 2 * y + 1) since y must be non-negative (2 * y >= z), and x remains non-negative throughout the loop.\n\nThese loop invariants help prove the termination of the loop, as the ranking function (x) is non-negative and decreases with every iteration."
                ],
                "invariant_code_blocks": [
                    "/*@ loop invariant x >= 0 && z == 1; */",
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant z == 1;\n    loop invariant 2*y <= \\at(z, LoopEntry);\n*/",
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant z == 1;\n    loop invariant \\at(x, LoopEntry) - x <= 2*y - 1;\n    loop invariant 2*y >= z;\n*/",
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant z == 1;\n    loop invariant 2*y >= 1;\n    loop invariant \\at(x, LoopEntry) >= x;\n*/",
                    "/*@ \n    loop invariant \\at(x, LoopEntry) >= 0;\n    loop invariant z == 1;\n    loop invariant 2 * y >= z;\n    loop invariant x >= 0;\n*/"
                ],
                "inductive_invariants": "loop invariant i8: 2*y >= z;\nloop invariant i12: \\at(x, LoopEntry) >= x;\nloop invariant i15: 2 * y >= z;",
                "final_checker_input": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z;\n\tx = unknown_int();\n\ty = unknown_int();\n\tz = unknown_int();\n\tif (2*y >= z) {\n    \t/*@\nloop invariant i8: 2*y >= z;\nloop invariant i12: \\at(x, LoopEntry) >= x;\nloop invariant i15: 2 * y >= z;\nloop variant x;\n*/\nwhile (x >= 0 && z == 1) {\n\t    \tx = x - 2*y + 1;\n\t    }\n\t}\n\treturn 0;\n}",
                "checker_message": "loop invariant 2*y >= z is inductive.\nloop invariant \\at(x, LoopEntry) >= x is inductive.\nloop invariant 2 * y >= z is inductive.\n\nLoop variant is Valid.\n",
                "success": true
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c"
        ],
        "skipped": [],
        "total": 103,
        "success_count": 53,
        "failure_count": 50,
        "success_rate": 0.5145631067961165
    }
}