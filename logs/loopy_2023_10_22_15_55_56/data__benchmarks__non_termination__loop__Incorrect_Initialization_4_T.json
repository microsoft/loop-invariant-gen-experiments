{
    "logs": {
        "file": "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n    int h = unknown_int();\n    int hash = unknown_int();\n    int rehash = unknown_int();\n    if( h < 0 || hash <= 0 || rehash <= 0 || rehash > hash || hash > 65534)\n        return 0;\n    int i = h % hash;\n    int r = 0;\n    while( i < hash )\n    {\n        if( !r ) r = ( h % rehash ) + 1;\n        i += r;\n    }\n    return 0;\n}",
        "success": true,
        "variants": [
            [
                "hash - i"
            ]
        ],
        "variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n- If the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. \n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n    int h = unknown_int();\n    int hash = unknown_int();\n    int rehash = unknown_int();\n    if( h < 0 || hash <= 0 || rehash <= 0 || rehash > hash || hash > 65534)\n        return 0;\n    int i = h % hash;\n    int r = 0;\n    while( i < hash )\n    {\n        if( !r ) r = ( h % rehash ) + 1;\n        i += r;\n    }\n    return 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function (or the sequence of expressions) is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "First, let's note the starting values and constraints for the variables live at the loop head:\n- h, hash, and rehash are all integers with unknown values.\n- The constraints on h, hash, and rehash are: h >= 0, hash > 0, rehash > 0, rehash <= hash, and hash <= 65534.\n- i is initialized to h % hash, which means i >= 0 and i < hash.\n- r is initialized to 0.\n\nNow, let's analyze the loop body:\n- If r is 0, r is updated to (h % rehash) + 1. Since rehash > 0 and h >= 0, r will always be between 1 and rehash (inclusive) after this update.\n- i is incremented by r in each iteration. Since r is always positive, i will always increase with each iteration.\n\nNow, we can find the ranking function using the loop variables i, hash, and r. Since i is increasing and i < hash is the loop condition, we can use the difference between hash and i as our ranking function:\n\n```\n/*@\n    loop variant hash - i;\n*/\n```\n\nThis ranking function is valid because:\n1. It is always positive while the loop is executing because i < hash.\n2. It decreases with every iteration since i increases in each iteration.\n3. It eventually becomes non-positive when i >= hash, causing the loop to terminate.",
            "First, let's note the starting values or constraints for the variables that are live at the loop head:\n\n- h is an integer with no constraints.\n- hash is an integer, and it must be greater than 0 and less than or equal to 65534.\n- rehash is an integer, and it must be greater than 0, and less than or equal to hash.\n- i is initialized as h % hash, so it must be greater than or equal to 0 and less than hash.\n- r is initialized as 0.\n\nNow, let's analyze the loop body:\n\n- If r is 0, r is updated to (h % rehash) + 1. Since rehash is greater than 0, r must be greater than 0.\n- i is incremented by r in each iteration, and since r is positive, i must be strictly increasing.\n\nNow, let's find a ranking function involving the variables in the loop body:\n\nSince i is strictly increasing and must be less than hash for the loop to execute, a valid ranking function would be:\n\n```\nhash - i\n```\n\nThis ranking function is decreasing with every iteration of the loop, and it evaluates to a positive value while the loop is executing, as i is always less than hash.\n\nSo, the ranking function for the loop in the given program is:\n\n```\n/*@\n    loop variant hash - i;\n*/\n```",
            "First, let's make note of the starting values or constraints for the variables that are live at the loop head:\n\n- `h`: an unknown integer\n- `hash`: an unknown integer with constraints (0 < hash <= 65534)\n- `rehash`: an unknown integer with constraints (0 < rehash <= hash)\n- `i`: initially set to `h % hash`\n- `r`: initially 0\n\nNow, let's analyze the loop body and find a ranking function involving the variables in the loop body:\n\n```\nwhile( i < hash )\n{\n    if( !r ) r = ( h % rehash ) + 1;\n    i += r;\n}\n```\n\nWe can see that the loop continues as long as `i < hash`. In each iteration, if `r` is not 0, it is set to `(h % rehash) + 1`. Then, `i` is incremented by `r`. Since `r` is always positive (because `(h % rehash)` is non-negative and we add 1), `i` is always increasing. \n\nTherefore, the ranking function for this loop is `hash - i`. This ranking function is valid because it is always positive (since `i < hash`) and decreasing with every iteration of the loop (as `i` increases). \n\nHere's the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant hash - i;\n*/\n```",
            "At the loop head, the following variables are live: `i`, `hash`, `r`, and `rehash`. The starting values or constraints for these variables are:\n\n- `i = h % hash`\n- `hash > 0`\n- `rehash > 0`\n- `rehash <= hash`\n- `hash <= 65534`\n- `r = 0`\n\nNow, let's analyze the loop body:\n\n- `if (!r) r = (h % rehash) + 1;`\n- `i += r;`\n\nIn each iteration of the loop, the value of `r` is updated if it is equal to 0. The value of `i` increases by `r` in every iteration. Since `r` is always positive (as `rehash > 0`), the value of `i` will always increase.\n\nThe loop condition `i < hash` ensures that the loop will terminate once `i` reaches or exceeds the value of `hash`. So, we can use `hash - i` as the ranking function, which decreases with every iteration of the loop and is positive while the loop is executing.\n\nThe ranking function for this loop is:\n\n```\n/*@\n    loop variant hash - i;\n*/\n```",
            "First, make note of the starting values or constraints for the variables that are live at the loop head:\n\n- `h`: An unknown integer value.\n- `hash`: An unknown integer value such that 0 < hash <= 65534.\n- `rehash`: An unknown integer value such that 0 < rehash <= hash.\n- `i`: The value of i is initialized as `h % hash`. Since 0 <= h % hash < hash, we have 0 <= i < hash.\n- `r`: Initialized as 0.\n\nNow, let's analyze the loop body and find a ranking function involving the variables in the loop body:\n\nIn the loop body, we have two main operations:\n\n1. If `r` is 0, set `r` to `(h % rehash) + 1`. Since 0 <= h % rehash < rehash, we have 1 <= r <= rehash.\n2. Increment `i` by `r`. Since `i` starts between 0 and hash, and `r` is between 1 and rehash, `i` will keep increasing.\n\nThe loop condition is `i < hash`. Since `i` keeps increasing, it will eventually reach or exceed `hash`, which means the loop will terminate. \n\nA possible ranking function for this loop is `hash - i`. This is because `hash` is an upper bound for `i`, and `i` keeps increasing in every iteration of the loop.\n\nNow, let's output the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant hash - i;\n*/\n```"
        ],
        "variant_log": [
            {
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. Lexicographic ranking functions are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n    int h = unknown_int();\n    int hash = unknown_int();\n    int rehash = unknown_int();\n    if( h < 0 || hash <= 0 || rehash <= 0 || rehash > hash || hash > 65534)\n        return 0;\n    int i = h % hash;\n    int r = 0;\n    while( i < hash )\n    {\n        if( !r ) r = ( h % rehash ) + 1;\n        i += r;\n    }\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(hash - i)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, let's note the initial values or constraints for the variables that are live at the loop head:\n\n- h: an arbitrary integer\n- hash: a positive integer, hash <= 65534\n- rehash: a positive integer, rehash <= hash\n- i: h % hash (0 <= i < hash)\n- r: 0\n\nNow, let's analyze the loop condition and the given ranking function:\n\n- Loop condition: i < hash\n- Ranking function: (hash - i)\n\nNow, we can output the loop invariants that support the ranking function and prove the termination of the loop:\n\n```\n/*@ \n    loop invariant 0 <= i <= hash;\n    loop invariant 0 <= r <= rehash;\n    loop invariant 0 <= h;\n    loop invariant 0 < hash <= 65534;\n    loop invariant 0 < rehash <= hash;\n    loop invariant r == 0 || r == (h % rehash) + 1;\n    loop invariant r != 0 ==> i + r <= hash;\n*/\n```",
                    "First, let's analyze the program and make note of the starting values or constraints for the variables that are live at the loop head:\n- h: unknown_int(), can be any integer value.\n- hash: unknown_int(), constrained by (hash > 0) and (hash <= 65534).\n- rehash: unknown_int(), constrained by (rehash > 0) and (rehash <= hash).\n- i: h % hash, constrained by (0 <= i < hash).\n- r: initialized as 0, will be updated inside the loop.\n\nNow let's analyze the loop body and make a note of the loop condition and the given ranking function:\n- Loop condition: i < hash\n- Ranking function: (hash - i)\n\nNow we can output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration:\n\n```\n/*@ \n    loop invariant 0 <= i && i <= hash;\n    loop invariant 0 <= r && r <= rehash;\n    loop invariant 0 < hash && hash <= 65534;\n    loop invariant 0 < rehash && rehash <= hash;\n    loop invariant (r == 0) ==> (i == h % hash);\n    loop invariant (r != 0) ==> (i == (\\at(i, LoopEntry) + r) % hash);\n*/\n```",
                    "First, let's identify the constraints and loop conditions:\n\n1. `h` is an unknown integer.\n2. `hash` is an unknown integer, and the condition `(hash <= 0 || rehash <= 0 || rehash > hash || hash > 65534)` must be false, so `hash > 0` and `0 < hash <= 65534`.\n3. `rehash` is an unknown integer, and the condition `(rehash <= 0 || rehash > hash || hash > 65534)` must be false, so `rehash > 0` and `0 < rehash <= hash <= 65534`.\n4. The loop condition is `i < hash`, and the loop variant is `(hash - i)`.\n\nNow let's analyze the loop body:\n\n1. `i` is initialized with `h % hash`, so `0 <= i < hash`.\n2. `r` is updated only if `r` is equal to 0. In that case, `r = (h % rehash) + 1`, so `1 <= r <= rehash`.\n3. `i` is updated by adding `r` to it, so `i` increases but never exceeds `hash + rehash`.\n\nNow let's define the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= i;\n    loop invariant i < hash + rehash;\n    loop invariant 0 <= hash <= 65534;\n    loop invariant 0 < rehash <= hash;\n    loop invariant r == 0 || (1 <= r <= rehash);\n    loop invariant r == \\at(r, LoopEntry) || r == (h % rehash) + 1;\n*/\n```\n\nThese loop invariants support the loop variant `(hash - i)` and the termination of the loop.",
                    "First, let's note the starting values and constraints for the variables live at the loop head:\n\n- h: unknown_int() (no constraints)\n- hash: unknown_int() with constraints (0 < hash <= 65534)\n- rehash: unknown_int() with constraints (0 < rehash <= hash)\n- i: h % hash (0 <= i < hash)\n- r: initially 0, and will be updated in the loop\n\nNow, let's analyze the loop body and make a note of the loop condition and the given ranking function:\n\n- Loop condition: i < hash\n- Ranking function: (hash - i)\n\nFinally, let's output the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= i && i <= hash;\n    loop invariant 0 <= r && r <= rehash;\n    loop invariant h == \\at(h, LoopEntry);\n    loop invariant hash == \\at(hash, LoopEntry);\n    loop invariant rehash == \\at(rehash, LoopEntry);\n    loop invariant (r == 0) ==> (i == \\at(i, LoopEntry));\n    loop invariant (r != 0) ==> (i >= \\at(i, LoopEntry) + r);\n*/\n```",
                    "First, let's analyze the variables and constraints at the loop head:\n- h is an integer with an unknown value\n- hash is an integer with an unknown value, but it must be greater than 0 and less than or equal to 65534\n- rehash is an integer with an unknown value, but it must be greater than 0 and less than or equal to hash\n- i is initialized to h % hash and must be non-negative and less than hash\n- r is initialized to 0\n\nNow, let's analyze the loop condition and the given ranking function:\n- The loop condition is i < hash\n- The given ranking function is (hash - i)\n\nWe need to find loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination. These loop invariants should imply that the ranking function decreases with every iteration.\n\nHere are the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= i && i <= hash;\n    loop invariant 0 <= r && r <= rehash;\n    loop invariant r == 0 || r == (h % rehash) + 1;\n    loop invariant i == \\at(i, LoopEntry) + r * (\\at(r, LoopEntry) ? (\\at(r, LoopEntry) == 0 ? 0 : (\\at(r, LoopEntry) - 1)) : 0);\n*/\n```\n\nThese loop invariants satisfy the conditions mentioned above, and they imply that the ranking function (hash - i) decreases with every iteration, proving the termination of the loop."
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant 0 <= i <= hash;\n    loop invariant 0 <= r <= rehash;\n    loop invariant 0 <= h;\n    loop invariant 0 < hash <= 65534;\n    loop invariant 0 < rehash <= hash;\n    loop invariant r == 0 || r == (h % rehash) + 1;\n    loop invariant r != 0 ==> i + r <= hash;\n*/",
                    "/*@ \n    loop invariant 0 <= i && i <= hash;\n    loop invariant 0 <= r && r <= rehash;\n    loop invariant 0 < hash && hash <= 65534;\n    loop invariant 0 < rehash && rehash <= hash;\n    loop invariant (r == 0) ==> (i == h % hash);\n    loop invariant (r != 0) ==> (i == (\\at(i, LoopEntry) + r) % hash);\n*/",
                    "/*@ \n    loop invariant 0 <= i;\n    loop invariant i < hash + rehash;\n    loop invariant 0 <= hash <= 65534;\n    loop invariant 0 < rehash <= hash;\n    loop invariant r == 0 || (1 <= r <= rehash);\n    loop invariant r == \\at(r, LoopEntry) || r == (h % rehash) + 1;\n*/",
                    "/*@ \n    loop invariant 0 <= i && i <= hash;\n    loop invariant 0 <= r && r <= rehash;\n    loop invariant h == \\at(h, LoopEntry);\n    loop invariant hash == \\at(hash, LoopEntry);\n    loop invariant rehash == \\at(rehash, LoopEntry);\n    loop invariant (r == 0) ==> (i == \\at(i, LoopEntry));\n    loop invariant (r != 0) ==> (i >= \\at(i, LoopEntry) + r);\n*/",
                    "/*@ \n    loop invariant 0 <= i && i <= hash;\n    loop invariant 0 <= r && r <= rehash;\n    loop invariant r == 0 || r == (h % rehash) + 1;\n    loop invariant i == \\at(i, LoopEntry) + r * (\\at(r, LoopEntry) ? (\\at(r, LoopEntry) == 0 ? 0 : (\\at(r, LoopEntry) - 1)) : 0);\n*/"
                ],
                "inductive_invariants": "loop invariant i2: 0 <= r <= rehash;\nloop invariant i3: 0 <= h;\nloop invariant i4: 0 < hash <= 65534;\nloop invariant i5: 0 < rehash <= hash;\nloop invariant i6: r == 0 || r == (h % rehash) + 1;\nloop invariant i9: 0 <= r && r <= rehash;\nloop invariant i10: 0 < hash && hash <= 65534;\nloop invariant i11: 0 < rehash && rehash <= hash;\nloop invariant i12: (r == 0) ==> (i == h % hash);\nloop invariant i14: 0 <= i;\nloop invariant i15: i < hash + rehash;\nloop invariant i16: 0 <= hash <= 65534;\nloop invariant i18: r == 0 || (1 <= r <= rehash);\nloop invariant i19: r == \\at(r, LoopEntry) || r == (h % rehash) + 1;\nloop invariant i22: h == \\at(h, LoopEntry);\nloop invariant i23: hash == \\at(hash, LoopEntry);\nloop invariant i24: rehash == \\at(rehash, LoopEntry);\nloop invariant i25: (r == 0) ==> (i == \\at(i, LoopEntry));\nloop invariant i26: (r != 0) ==> (i >= \\at(i, LoopEntry) + r);",
                "final_checker_input": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n    int h = unknown_int();\n    int hash = unknown_int();\n    int rehash = unknown_int();\n    if( h < 0 || hash <= 0 || rehash <= 0 || rehash > hash || hash > 65534)\n        return 0;\n    int i = h % hash;\n    int r = 0;\n    /*@\nloop invariant i2: 0 <= r <= rehash;\nloop invariant i3: 0 <= h;\nloop invariant i4: 0 < hash <= 65534;\nloop invariant i5: 0 < rehash <= hash;\nloop invariant i6: r == 0 || r == (h % rehash) + 1;\nloop invariant i9: 0 <= r && r <= rehash;\nloop invariant i10: 0 < hash && hash <= 65534;\nloop invariant i11: 0 < rehash && rehash <= hash;\nloop invariant i12: (r == 0) ==> (i == h % hash);\nloop invariant i14: 0 <= i;\nloop invariant i15: i < hash + rehash;\nloop invariant i16: 0 <= hash <= 65534;\nloop invariant i18: r == 0 || (1 <= r <= rehash);\nloop invariant i19: r == \\at(r, LoopEntry) || r == (h % rehash) + 1;\nloop invariant i22: h == \\at(h, LoopEntry);\nloop invariant i23: hash == \\at(hash, LoopEntry);\nloop invariant i24: rehash == \\at(rehash, LoopEntry);\nloop invariant i25: (r == 0) ==> (i == \\at(i, LoopEntry));\nloop invariant i26: (r != 0) ==> (i >= \\at(i, LoopEntry) + r);\nloop variant hash - i;\n*/\nwhile( i < hash )\n    {\n        if( !r ) r = ( h % rehash ) + 1;\n        i += r;\n    }\n    return 0;\n}",
                "checker_message": "loop invariant 0 <= r <= rehash is inductive.\nloop invariant 0 <= h is inductive.\nloop invariant 0 < hash <= 65534 is inductive.\nloop invariant 0 < rehash <= hash is inductive.\nloop invariant r == 0 || r == (h % rehash) + 1 is inductive.\nloop invariant 0 <= r && r <= rehash is inductive.\nloop invariant 0 < hash && hash <= 65534 is inductive.\nloop invariant 0 < rehash && rehash <= hash is inductive.\nloop invariant (r == 0) ==> (i == h % hash) is inductive.\nloop invariant 0 <= i is inductive.\nloop invariant i < hash + rehash is inductive.\nloop invariant 0 <= hash <= 65534 is inductive.\nloop invariant r == 0 || (1 <= r <= rehash) is inductive.\nloop invariant r == \\at(r, LoopEntry) || r == (h % rehash) + 1 is inductive.\nloop invariant h == \\at(h, LoopEntry) is inductive.\nloop invariant hash == \\at(hash, LoopEntry) is inductive.\nloop invariant rehash == \\at(rehash, LoopEntry) is inductive.\nloop invariant (r == 0) ==> (i == \\at(i, LoopEntry)) is inductive.\nloop invariant (r != 0) ==> (i >= \\at(i, LoopEntry) + r) is inductive.\n\nLoop variant is Valid.\n",
                "success": true
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB6.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Mysore_true-termination.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusMin.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.09-no-inv_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Copenhagen_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_easySum.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA6.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Gothenburg_v2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.08.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.03.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB11.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1c_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.04.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.02.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_AG313.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.01.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/easy2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA5.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.10.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.06.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.10.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Waldkirch_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DivMinus.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB3.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Cairo_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Thun_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_flag.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/McCarthy91_Iteration_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NO_24.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Copenhagen_disj_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Bangalore_v4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ComplInterv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChooseLife.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.21_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Singapore_true-termination.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/McCarthyIterative.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MirrorInterv.c"
        ],
        "skipped": [
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c"
        ],
        "total": 269,
        "success_count": 144,
        "failure_count": 125,
        "success_rate": 0.5353159851301115
    }
}