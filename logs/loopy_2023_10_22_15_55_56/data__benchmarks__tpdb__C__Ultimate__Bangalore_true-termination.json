{
    "logs": {
        "file": "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (y < 1) {\n\t\treturn 0;\n\t}\n\twhile (x >= 0) {\n\t\tx = x - y;\n\t}\n\treturn 0;\n}\n",
        "success": true,
        "variants": [
            [
                "x"
            ]
        ],
        "variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n- If the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. \n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (y < 1) {\n\t\treturn 0;\n\t}\n\twhile (x >= 0) {\n\t\tx = x - y;\n\t}\n\treturn 0;\n}\n\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function (or the sequence of expressions) is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "1. The loop head condition is `x >= 0`, so the loop continues executing as long as `x` is non-negative.\n2. Inside the loop body, `x` is decremented by `y` in each iteration: `x = x - y`.\n3. `y` is a positive integer, as it is greater than or equal to 1 before entering the loop.\n\nNow let's find the ranking function:\n\nThe ranking function will involve the variable `x`, which is being modified in the loop body. Since `x` is being decremented by `y` in each iteration, and `y` is a positive integer, the value of `x` decreases in every iteration.\n\nThus, the ranking function is `x`, and it is valid because it is decreasing with every iteration and positive while the loop is executing. Here's the ACSL syntax:\n\n```\n/*@\n    loop variant x;\n*/\n```",
            "1. Note the starting values or constraints for the variables that are live at the loop head:\n    - `x` is an integer assigned from the `unknown_int()` function.\n    - `y` is an integer assigned from the `unknown_int()` function and is constrained to be greater than or equal to 1.\n\n2. Analyze the loop body and find a ranking function involving the variables in the loop body:\n    - The loop condition is `x >= 0`.\n    - Inside the loop, `x` is updated as `x = x - y`. Since `y >= 1`, the value of `x` decreases in each iteration.\n\n3. Output the ranking function in ACSL syntax:\n```\n/*@\n    loop variant x;\n*/\n```\n\nThe ranking function `x` is valid because its value decreases with every successive iteration of the loop (due to `x = x - y` and `y >= 1`), and the value must be positive (non-negative in this case) for the loop to continue executing (`x >= 0`).",
            "First, note the starting values or constraints for the variables live at the loop head:\n- x is initialized with an unknown integer value.\n- y is initialized with an unknown integer value, but the program returns if y < 1, so y >= 1.\n\nNow, analyze the loop body:\n- In each iteration, x is decreased by y.\n\nNext, find a ranking function involving the variables in the loop body:\n- Since x is decreasing by y in each iteration and y >= 1, a possible ranking function is x itself.\n\nOutput the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x;\n*/\n```",
            "1. Make note of the starting values or constraints for the variables that are live at the loop head.\n   - x is initialized by unknown_int()\n   - y is initialized by unknown_int() with a constraint y >= 1 since we return if y < 1\n\n2. Analyze the loop body and find a ranking function involving the variables in the loop body\n   - The loop condition is x >= 0\n   - In the loop body, x is updated as x = x - y\n\nNow let's find the ranking function. Since y >= 1, x will decrease by at least 1 in each iteration. The initial value of x is unknown, but it must be non-negative for the loop to start. Therefore, we can use x as the ranking function:\n\n```\n/*@\n    loop variant x;\n*/\n```",
            "First, let's analyze the loop in the program:\n\n```\nwhile (x >= 0) {\n\tx = x - y;\n}\n```\n\nNow, let's make note of the starting values or constraints for the variables that are live at the loop head.\n\n- x is an integer with an unknown initial value.\n- y is an integer with an unknown initial value, but we know that y >= 1 due to the `if (y < 1) { return 0; }` statement.\n\nNext, let's analyze the loop body and find a ranking function involving the variables in the loop body.\n\n- The loop body only contains one statement: `x = x - y;`\n- The value of x decreases in every iteration by y.\n- Since y >= 1, x must decrease by at least 1 in every iteration.\n\nNow let's find the ranking function:\n\n- The ranking function must be positive while the loop is executing, so it should involve x.\n- The ranking function must decrease with every iteration, so it should involve the change in x due to the loop body (i.e., x - y).\n\nBased on this analysis, the ranking function for the loop is:\n\n```\n/*@\n    loop variant x;\n*/\n```\n\nThis is a valid ranking function because:\n\n- It is positive while the loop is executing, as x >= 0 is the loop condition.\n- It decreases with every iteration, as x is updated to x - y, and since y >= 1, the value of x decreases by at least 1 in every iteration."
        ],
        "variant_log": [
            {
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. Lexicographic ranking functions are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (y < 1) {\n\t\treturn 0;\n\t}\n\twhile (x >= 0) {\n\t\tx = x - y;\n\t}\n\treturn 0;\n}\n\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(x)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, we need to identify the loop condition, ranking function, and loop body. In this case, the loop condition is `x >= 0`, the ranking function is `x`, and the loop body consists of the statement `x = x - y`.\n\nNext, let's find the loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nThe loop invariants for this program are:\n- x is always non-negative at the start of each loop iteration.\n- y is always greater than or equal to 1.\n\nHere is the code block with the loop invariants:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 1;\n*/\n```\n\nThese loop invariants hold:\n- Before the loop execution: `x` and `y` are non-deterministic, but there is a condition `if (y < 1) return 0;` that ensures `y >= 1` before entering the loop. Since `x` is an integer, `x >= 0` will also hold.\n- In every iteration of the loop: Since `y >= 1`, every iteration of the loop reduces the value of `x` by at least 1, meaning that `x` remains non-negative and the ranking function decreases in each iteration.\n- After the loop termination: After the loop terminates, the condition `x >= 0` no longer holds, but `y >= 1` still holds.\n\nThese loop invariants imply that the ranking function `x` decreases with every iteration and ensures the termination of the loop.",
                    "First, we note that the values of `x` and `y` are non-deterministic, and the only constraint on their initial values is that `y` must be greater than or equal to 1 for the loop to execute.\n\nNext, we analyze the loop condition and body. The loop condition is `x >= 0`, and the loop body updates `x` to `x - y`. The given ranking function is `x`.\n\nNow, we can output the loop invariants that support the validity of the ranking function (x) and imply that the ranking function decreases with every iteration:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 1;\n    loop invariant x <= \\at(x, LoopEntry);\n*/\n```\n\nThese loop invariants hold:\n- Before the loop execution: `x` and `y` are non-negative and `y` is at least 1 (due to the if condition).\n- In every iteration of the loop: `x` remains non-negative, `y` remains greater than or equal to 1, and `x` is always less than or equal to its value at the beginning of the loop.\n- After the loop termination: The loop terminates when `x` becomes negative, and the other invariants still hold.",
                    "First, let's make note of the starting values or constraints for the variables that are live at the loop head:\n- x and y are initialized with unknown_int(), which means they can have any integer value.\n- y must be greater than or equal to 1, as the program returns before the loop if y < 1.\n\nNow, let's analyze the loop body and make a note of the loop condition and the given ranking function:\n- The loop condition is x >= 0.\n- The given ranking function is (x).\n- In each iteration, x is decreased by y.\n\nNow, let's output the loop invariants:\n\n```\n/*@ \n    loop invariant \\at(x, LoopEntry) >= x;\n    loop invariant y > 0;\n*/\n```\n\nThese loop invariants satisfy the requirements:\n1. They are true before the loop execution since y > 0 at the start of the loop, and x is equal to its value at the loop entry.\n2. They hold for every iteration of the loop, as x is always decreasing by y, and y remains unchanged.\n3. After the loop terminates, x < 0, which means the ranking function has decreased sufficiently to exit the loop.",
                    "First, let's analyze the given C program:\n\n1. Two integers `x` and `y` are assigned values from the functions `unknown_int()`. We cannot make any assumptions about their initial values.\n2. If `y` is less than 1, the program returns immediately, which means we can assume that `y >= 1` when the loop is executed.\n3. The loop condition is `x >= 0`, which means the loop will be executed as long as `x` is non-negative.\n4. In each iteration of the loop, `x` is decreased by the value of `y`.\n\nNow, let's write the loop invariants for the ranking function (x):\n\n```\n/*@ \n    loop invariant y >= 1;\n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant x >= 0 ==> x < y;\n*/\n```\n\nHere's the explanation for each invariant:\n\n1. `y >= 1`: This invariant holds before the loop execution because of the `if (y < 1) return 0;` statement. It also holds during every iteration of the loop since `y` remains unchanged.\n2. `x <= \\at(x, LoopEntry)`: This invariant holds because `x` is always decreasing in every iteration of the loop (it is reduced by `y`).\n3. `x >= 0 ==> x < y`: This invariant holds because whenever `x` is non-negative, the loop continues to execute, and in the next iteration, `x` will be decreased by `y`. If `x >= y`, then after one iteration, `x` would still be non-negative, which contradicts the loop condition. So, `x` must be less than `y` when `x >= 0`.",
                    "First, let's make note of the starting values or constraints for the variables that are live at the loop head:\n\n- x and y are initialized with the values from unknown_int(), which can be any integer value.\n- The value of y must be greater than or equal to 1 due to the conditional statement before the loop.\n\nNow, let's analyze the loop body and make a note of the loop condition and the given ranking function:\n\n- The loop condition is \"x >= 0\".\n- The given ranking function is \"x\".\n- In each loop iteration, x is decreased by y.\n\nNow, let's output the loop invariants that support the validity of the ranking function and prove the termination of the loop:\n\n```\n/*@ \n    loop invariant y >= 1;\n    loop invariant x <= \\at(x, LoopEntry);\n*/\n```\n\nThese loop invariants indicate that:\n\n- y is always greater than or equal to 1.\n- The value of x is always less than or equal to its value at the beginning of the loop.\n\nThese invariants, along with the loop condition and the given ranking function, imply that the value of x decreases with every iteration of the loop, eventually leading to loop termination."
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 1;\n*/",
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 1;\n    loop invariant x <= \\at(x, LoopEntry);\n*/",
                    "/*@ \n    loop invariant \\at(x, LoopEntry) >= x;\n    loop invariant y > 0;\n*/",
                    "/*@ \n    loop invariant y >= 1;\n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant x >= 0 ==> x < y;\n*/",
                    "/*@ \n    loop invariant y >= 1;\n    loop invariant x <= \\at(x, LoopEntry);\n*/"
                ],
                "inductive_invariants": "loop invariant i2: y >= 1;\nloop invariant i5: x <= \\at(x, LoopEntry);\nloop invariant i6: \\at(x, LoopEntry) >= x;\nloop invariant i7: y > 0;",
                "final_checker_input": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (y < 1) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i2: y >= 1;\nloop invariant i5: x <= \\at(x, LoopEntry);\nloop invariant i6: \\at(x, LoopEntry) >= x;\nloop invariant i7: y > 0;\nloop variant x;\n*/\nwhile (x >= 0) {\n\t\tx = x - y;\n\t}\n\treturn 0;\n}\n",
                "checker_message": "loop invariant y >= 1 is inductive.\nloop invariant x <= \\at(x, LoopEntry) is inductive.\nloop invariant \\at(x, LoopEntry) >= x is inductive.\nloop invariant y > 0 is inductive.\n\nLoop variant is Valid.\n",
                "success": true
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB6.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Mysore_true-termination.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Thun_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_flag.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c"
        ],
        "skipped": [],
        "total": 145,
        "success_count": 74,
        "failure_count": 71,
        "success_rate": 0.5103448275862069
    }
}