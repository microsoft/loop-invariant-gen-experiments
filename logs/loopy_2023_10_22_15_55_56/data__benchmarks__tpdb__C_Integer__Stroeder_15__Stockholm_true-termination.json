{
    "logs": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x;\n    int a;\n    int b;\n    x = unknown_int();\n    a = unknown_int();\n    b = unknown_int();\n    if (a == b) {\n        while (x >= 0) {\n            x = x + a - b - 1;\n        }\n    }\n    return 0;\n}",
        "success": true,
        "variants": [
            [
                "x"
            ]
        ],
        "variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n- If the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. \n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x;\n    int a;\n    int b;\n    x = unknown_int();\n    a = unknown_int();\n    b = unknown_int();\n    if (a == b) {\n        while (x >= 0) {\n            x = x + a - b - 1;\n        }\n    }\n    return 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function (or the sequence of expressions) is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "First, let's note the starting values or constraints for the variables that are live at the loop head.\n\n1. x = unknown_int()\n2. a = unknown_int()\n3. b = unknown_int()\n4. The loop executes when a == b.\n\nNow, let's analyze the loop body:\n\n```\nwhile (x >= 0) {\n    x = x + a - b - 1;\n}\n```\n\nSince a == b, we can simplify the loop body as:\n\n```\nwhile (x >= 0) {\n    x = x - 1;\n}\n```\n\nNow let's find the ranking function for this loop. The ranking function should be a function of x, and it should decrease with every iteration while remaining positive.\n\nA valid ranking function for this loop is simply x.\n\nThe loop variant in ACSL syntax is:\n\n```\n/*@\n    loop variant x;\n*/\n```",
            "First, let's make note of the starting values or constraints for the variables that are live at the loop head.\n\n1. x is initialized with an unknown integer value.\n2. a and b are initialized with unknown integer values.\n3. The loop executes only if a == b.\n\nNow, let's analyze the loop body and find a ranking function involving the variables in the loop body.\n\nThe loop executes while x >= 0, and in each iteration, x is updated as follows:\n```\nx = x + a - b - 1;\n```\n\nSince a == b, the update can be simplified as:\n```\nx = x - 1;\n```\n\nNow, let's find a ranking function for the loop.\n\nThe ranking function for this loop is simply x itself, as it is decreasing with every iteration (by 1) and is positive when the loop executes (x >= 0).\n\nHere is the ranking function in ACSL syntax:\n\n```c\n/*@\n    loop variant x;\n*/\n```",
            "1. Make note of the starting values or constraints for the variables that are live at the loop head:\n   - x can be any integer value\n   - a and b are equal (a == b)\n\n2. Analyze the loop body and find a ranking function involving the variables in the loop body:\n   - The loop continues while x >= 0\n   - In each iteration, x is updated as: x = x + a - b - 1\n   - Since a == b, x = x - 1\n\nNow we can determine a ranking function for the loop:\n\nThe ranking function is x, because it decreases by 1 in every iteration and the loop condition requires x to be non-negative.\n\nHere is the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x;\n*/\n```",
            "First, let's make note of the starting values or constraints for the variables that are live at the loop head.\n\n- x is initialized to an unknown integer value.\n- a and b are initialized to unknown integer values.\n- The loop executes if a == b, so we know that a and b are equal inside the loop.\n\nNow, let's analyze the loop body and find a ranking function involving the variables in the loop body:\n\nInside the loop, x is updated as x = x + a - b - 1. Since a and b are equal, we can simplify this to x = x - 1.\n\nThe loop condition is x >= 0, so as long as x is non-negative, the loop will continue executing. The value of x decreases by 1 in each iteration.\n\nTherefore, a valid ranking function for this loop is x itself. Here's the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x;\n*/\n```",
            "First, let's note the starting values or constraints for the variables that are live at the loop head:\n\n1. x is an integer with an unknown initial value.\n2. a and b are integers with unknown initial values.\n3. The loop executes only when a == b.\n\nNow, let's analyze the loop body:\n\n```\nwhile (x >= 0) {\n    x = x + a - b - 1;\n}\n```\n\nSince a == b, the loop body simplifies to:\n\n```\nwhile (x >= 0) {\n    x = x - 1;\n}\n```\n\nNow, we can find a ranking function involving the variables in the loop body:\n\nThe ranking function for this loop is x, as it is always decreasing by 1 with every iteration of the loop and is positive when the loop is executing.\n\nHere's the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x;\n*/\n```"
        ],
        "variant_log": [
            {
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. Lexicographic ranking functions are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x;\n    int a;\n    int b;\n    x = unknown_int();\n    a = unknown_int();\n    b = unknown_int();\n    if (a == b) {\n        while (x >= 0) {\n            x = x + a - b - 1;\n        }\n    }\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(x)**, for the loop in the program above. Let's think step by step."
                    },
                    "We can see that the program starts with uninitialized variables `x`, `a`, and `b`. Then, the program checks if `a == b` before entering the loop. Inside the loop, the value of `x` is updated by `x + a - b - 1`. We need to find loop invariants that prove the termination of the loop.\n\nFirst, let's note the loop condition and the ranking function:\n- Loop condition: `x >= 0`\n- Ranking function: `x`\n\nNow, let's find the loop invariants that support the ranking function:\n- Loop invariant 1: `a == b` (this is true for every iteration since the loop is only executed when `a == b`)\n- Loop invariant 2: `x >= 0` (this is true before the loop and in every iteration, since it's the loop condition)\n- Loop invariant 3: `x < \\at(x, LoopEntry) + a` (this is true because the value of `x` is decreased by at least 1 in each iteration)\n\nHere are the loop invariants in ACSL annotation format:\n\n```\n/*@ \n    loop invariant a == b;\n    loop invariant x >= 0;\n    loop invariant x < \\at(x, LoopEntry) + a;\n*/\n```",
                    "First, let's make note of the starting values or constraints for the variables that are live at the loop head:\n- x can be any integer value.\n- a can be any integer value.\n- b can be any integer value.\n- The loop executes when a == b.\n\nNext, let's analyze the loop body and make a note of the loop condition and the given ranking function:\n- Loop condition: x >= 0\n- Ranking function: x\n- Loop body: x = x + a - b - 1\n\nNow, let's output the loop invariants that support the validity of the ranking function and prove the termination of the loop:\n\n```\n/*@ \n    loop invariant \\at(a, LoopEntry) == \\at(b, LoopEntry);\n    loop invariant x >= -1;\n*/\n```",
                    "First, let's make note of the starting values or constraints for the variables that are live at the loop head.\n\n- x is assigned an unknown integer value.\n- a is assigned an unknown integer value.\n- b is assigned an unknown integer value.\n- The loop executes only if a == b.\n\nNow, let's analyze the loop body and make a note of the loop condition and the given ranking function.\n\n- Loop condition: x >= 0\n- Loop body: x = x + a - b - 1\n- Ranking function: x\n\nFinally, let's output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n\n```\n/*@ \n    loop invariant a == b;\n    loop invariant x >= -1;\n    loop invariant x < \\at(x, LoopEntry) + a - b;\n*/\n```",
                    "First, we note the starting values or constraints for the variables that are live at the loop head:\n- x is an integer with an unknown initial value.\n- a is an integer with an unknown initial value.\n- b is an integer with an unknown initial value.\n- The loop executes only if a == b.\n\nNext, we analyze the loop body and make a note of the loop condition and the given ranking function:\n- Loop condition: x >= 0\n- Ranking function: x\n- Loop body: x = x + a - b - 1\n\nNow, we output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration:\n\n```\n/*@ \n    loop invariant a == b ==> x >= 0;\n    loop invariant a == b ==> x < \\at(x, LoopEntry) + a;\n*/\n```\n\nThe first invariant ensures that x remains non-negative when a == b, and the second invariant ensures that x decreases in every iteration of the loop when a == b. These invariants together imply that the ranking function x decreases with every iteration.",
                    "First, let's analyze the initial values and constraints of the variables live at the loop head:\n\n- x, a, and b are initialized with unknown_int(), which means they can have any integer value.\n- The loop executes only if a == b.\n\nNow, let's analyze the loop body and the given ranking function:\n\n- Loop condition: x >= 0\n- Loop body: x = x + a - b - 1\n- Given ranking function: x\n\nWith these details, we can write the loop invariants:\n\n```\n/*@ \n    loop invariant a == b ==> x >= 0;\n    loop invariant a == b ==> x <= \\at(x, LoopEntry) + \\at(a, LoopEntry) - \\at(b, LoopEntry) - 1;\n*/\n```\n\nThese loop invariants show that when a == b, the value of x is non-negative before and during the loop execution, and decreases by at least one in each iteration. Therefore, the loop eventually terminates."
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant a == b;\n    loop invariant x >= 0;\n    loop invariant x < \\at(x, LoopEntry) + a;\n*/",
                    "/*@ \n    loop invariant \\at(a, LoopEntry) == \\at(b, LoopEntry);\n    loop invariant x >= -1;\n*/",
                    "/*@ \n    loop invariant a == b;\n    loop invariant x >= -1;\n    loop invariant x < \\at(x, LoopEntry) + a - b;\n*/",
                    "/*@ \n    loop invariant a == b ==> x >= 0;\n    loop invariant a == b ==> x < \\at(x, LoopEntry) + a;\n*/",
                    "/*@ \n    loop invariant a == b ==> x >= 0;\n    loop invariant a == b ==> x <= \\at(x, LoopEntry) + \\at(a, LoopEntry) - \\at(b, LoopEntry) - 1;\n*/"
                ],
                "inductive_invariants": "loop invariant i1: a == b;\nloop invariant i4: \\at(a, LoopEntry) == \\at(b, LoopEntry);",
                "final_checker_input": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x;\n    int a;\n    int b;\n    x = unknown_int();\n    a = unknown_int();\n    b = unknown_int();\n    if (a == b) {\n        /*@\nloop invariant i1: a == b;\nloop invariant i4: \\at(a, LoopEntry) == \\at(b, LoopEntry);\nloop variant x;\n*/\nwhile (x >= 0) {\n            x = x + a - b - 1;\n        }\n    }\n    return 0;\n}",
                "checker_message": "loop invariant a == b is inductive.\nloop invariant \\at(a, LoopEntry) == \\at(b, LoopEntry) is inductive.\n\nLoop variant is Valid.\n",
                "success": true
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Thun_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c"
        ],
        "skipped": [],
        "total": 117,
        "success_count": 61,
        "failure_count": 56,
        "success_rate": 0.5213675213675214
    }
}