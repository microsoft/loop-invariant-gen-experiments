{
    "logs": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, j, N;\n\tj = unknown_int();\n\tN = unknown_int();\n\ti = N;\n\twhile (i > 0) {\n\t\tif (j > 0) {\n\t\t\tj = j - 1;\n\t\t} else {\n\t\t\tj = N;\n\t\t\ti = i - 1;\n\t\t}\n\t}\n\treturn 0;\n}",
        "success": true,
        "variants": [
            [
                "i",
                "(j > 0) ? j : N"
            ],
            [
                "i",
                "j"
            ],
            [
                "i",
                "N - j"
            ]
        ],
        "variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n- If the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. \n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, j, N;\n\tj = unknown_int();\n\tN = unknown_int();\n\ti = N;\n\twhile (i > 0) {\n\t\tif (j > 0) {\n\t\t\tj = j - 1;\n\t\t} else {\n\t\t\tj = N;\n\t\t\ti = i - 1;\n\t\t}\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function (or the sequence of expressions) is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "1. Make note of the starting values or constraints for the variables that are live at the loop head.\n\n- i starts with the value of N.\n- j and N are unknown integers.\n\n2. Analyze the loop body and find a ranking function involving the variables in the loop body.\n\n- The loop continues while i > 0.\n- Inside the loop, j is decremented if j > 0, otherwise, j is reset to N and i is decremented.\n- This means that i will always decrease eventually, and j will decrease or reset to N.\n\n3. Output the ranking function in ACSL syntax.\n\nThe ranking function is a lexicographic ranking function with two expressions e1 and e2:\n\n- e1: i\n- e2: (j > 0) ? j : N\n\nThe reason this is a valid ranking function is that:\n\n- e1 (i) is positive as long as the loop is executing, and it decreases eventually after every N steps.\n- e2 (j) is positive if j > 0, and it is reset to the positive value N if j becomes 0 or negative. It is decreasing when j > 0.\n\nHere is the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant i;\n    loop variant (j > 0) ? j : N;\n*/\n```",
            "First, let's note the starting values or constraints for the variables that are live at the loop head:\n- i starts with the value of N\n- j starts with an unknown value\n- N starts with an unknown value\n\nNow, let's analyze the loop body and find a ranking function involving the variables in the loop body.\n\nDuring each iteration of the loop, there are two cases:\n1. If j > 0, then j is decremented by 1\n2. If j <= 0, then j is reset to N and i is decremented by 1\n\nNow, let's find a ranking function that decreases with every successive iteration of the loop and is positive while the loop is executing.\n\nWe can use a lexicographic ranking function with two expressions, e1 and e2:\n\ne1 = i\ne2 = (j > 0) ? j : N\n\nThis ranking function is valid because:\n- The value of e1 (i) decreases in every iteration where j <= 0. In other cases, i remains the same.\n- The value of e2 (j) decreases in every iteration where j > 0. In other cases, e2 is set to N, which is a positive value since the loop condition requires i > 0 and i starts with N.\n- Both e1 and e2 are positive while the loop is executing, as required by the ranking function.\n\nThus, the ranking function for the given loop is:\n\n```\n/*@\n    loop variant i;\n    loop variant (j > 0) ? j : N;\n*/\n```",
            "First, let's make note of the starting values or constraints for the variables that are live at the loop head:\n\n- `i = N`\n- `j` and `N` are unknown integers, but we can assume they are non-negative, as the loop condition checks if `i > 0`.\n\nNow, let's analyze the loop body and find a ranking function involving the variables in the loop body:\n\n1. If `j > 0`, the value of `j` decreases by 1, and `i` remains the same.\n2. If `j <= 0`, the value of `j` is set to `N`, and `i` decreases by 1.\n\nWe can use lexicographic ranking functions for this problem as follows:\n\n- The first expression `e1` should involve `i`. Since `i` is non-increasing and the loop condition requires `i > 0`, we can use `i` as `e1`.\n- The second expression `e2` should involve `j`. Since `j` is non-increasing in the first case, we can use `j` as `e2`.\n\nNow, let's output the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant i;\n    loop variant j;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. The value of `i` is non-increasing and positive while the loop is executing, as it starts with `N` and decreases by 1 in the second case.\n2. The value of `j` is non-increasing and positive in the first case, as it starts with an unknown non-negative value and decreases by 1.\n3. In the second case, when `j <= 0`, the value of `i` decreases, so the lexicographic order is maintained.",
            "First, let's make note of the starting values or constraints for the variables that are live at the loop head:\n- `i` starts with the value of `N`.\n- `j` starts with an unknown value.\n- `N` is an unknown value.\n\nNow, let's analyze the loop body and find a ranking function involving the variables in the loop body. In each iteration, either `j` decreases, or `j` is reset to `N` and `i` decreases. We can create a lexicographic ranking function with two expressions involving `i` and `j`.\n\nThe ranking function for the loop in the given program is:\n\n```\n/*@\n    loop variant i;\n    loop variant N - j;\n*/\n```\n\nThis is a valid ranking function because:\n1. Both `i` and `N - j` are positive while the loop is executing (since `i > 0` and `j <= N`).\n2. In each iteration, either `i` decreases (when `j <= 0`) or `i` remains the same and `N - j` decreases (when `j > 0`). This ensures that the lexicographic ranking function is decreasing with every iteration of the loop, proving that the loop must terminate.",
            "1. Make note of the starting values or constraints for the variables that are live at the loop head.\n- i starts at the value of N\n- j starts at an unknown value\n- N starts at an unknown value\n\n2. Analyze the loop body and find a ranking function involving the variables in the loop body\n- The loop condition is `i > 0`.\n- Inside the loop, there are two branches:\n  - If `j > 0`, then `j` is decremented by 1.\n  - If `j <= 0`, then `j` is set to `N`, and `i` is decremented by 1.\n\n3. We can see that `i` is always decreasing in the loop, but only when `j <= 0`. To ensure that the ranking function is decreasing with every iteration of the loop, we can use a lexicographic ranking function with two expressions: `(i, j)`.\n\n4. Output the ranking function in one code block, in ACSL syntax.\n\n```\n/*@\n    loop variant i;\n    loop variant j;\n*/\n```\n\nThis ranking function is valid because:\n- The value of `i` is always positive when the loop is executing (due to the loop condition `i > 0`).\n- The value of `j` must be positive for the loop to execute, as it is either decremented by 1 (if `j > 0`) or set to `N` (if `j <= 0`). Since `i` is positive, `N` must also be positive, making `j` positive in both cases.\n- The sequence `(i, j)` is decreasing with every iteration of the loop:\n  - When `j > 0`, the value of `i` remains the same, and the value of `j` decreases.\n  - When `j <= 0`, the value of `i` decreases, and the value of `j` is set to `N`."
        ],
        "variant_log": [
            {
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. Lexicographic ranking functions are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, j, N;\n\tj = unknown_int();\n\tN = unknown_int();\n\ti = N;\n\twhile (i > 0) {\n\t\tif (j > 0) {\n\t\t\tj = j - 1;\n\t\t} else {\n\t\t\tj = N;\n\t\t\ti = i - 1;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(i, (j > 0) ? j : N)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, let's note the starting values or constraints for the variables that are live at the loop head:\n- i starts with the value of N.\n- j and N can have any value since they are assigned by unknown_int().\n\nNow, let's analyze the loop body and make a note of the loop condition and the given ranking function:\n- Loop condition: i > 0\n- Ranking function: (i, (j > 0) ? j : N)\n\nWe need to find loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration.\n\nHere are the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant 0 <= j <= N;\n    loop invariant i + j <= N + \\at(i, LoopEntry);\n*/\n```\n\nExplanation:\n1. `0 <= i <= N`: i is always in the range [0, N] because it starts with the value of N and decreases by 1 until it reaches 0.\n2. `0 <= j <= N`: j is always in the range [0, N] because it is either assigned the value of N or decremented by 1.\n3. `i + j <= N + \\at(i, LoopEntry)`: This invariant holds because the sum of i and j never increases. If j > 0, j decreases by 1, and if j == 0, i decreases by 1 and j is assigned the value of N. This implies that the ranking function (i, (j > 0) ? j : N) decreases with every iteration.",
                    "First, we note the starting values or constraints for the variables that are live at the loop head:\n\n- i = N\n- j = unknown_int()\n- N = unknown_int()\n\nNext, we analyze the loop body and make a note of the loop condition and the given ranking function:\n\n- Loop condition: i > 0\n- Ranking function: (i, (j > 0) ? j : N)\n\nNow, we output loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration:\n\n```\n/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant 0 <= j <= N;\n    loop invariant \\at(i, LoopEntry) >= i;\n    loop invariant (\\at(j, LoopEntry) > 0) ==> (\\at(j, LoopEntry) >= j);\n    loop invariant (\\at(j, LoopEntry) <= 0) ==> (\\at(i, LoopEntry) > i);\n*/\n```\n\nThese loop invariants bound the values of i and j within the range of 0 to N, and ensure that the ranking function decreases with every iteration of the loop.",
                    "First, let's note the starting values or constraints for the variables live at the loop head:\n\n- `i` starts with the value of `N`.\n- `j` and `N` are assigned values from `unknown_int()`.\n\nNow, let's analyze the loop body and make a note of the loop condition and the given ranking function:\n\n- The loop condition is `i > 0`.\n- The given ranking function is `(i, (j > 0) ? j : N)`.\n\nNow, let's output the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant 0 <= j <= N;\n    loop invariant (j > 0) ==> j <= i;\n*/\n```",
                    "We will start by noting the starting values or constraints for the variables that are live at the loop head. In this case, the variables are i, j, and N.\n\n- i is initialized to N.\n- j and N are initialized with unknown_int(), which means they can have any integer value.\n\nNow, let's analyze the loop body and make a note of the loop condition and the given ranking function.\n\n- Loop condition: i > 0\n- Ranking function: (i, (j > 0) ? j : N)\n\nTo support the loop variant, we need to find loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration.\n\nHere are the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant 0 <= j <= N;\n    loop invariant i == \\at(i, LoopEntry) || i == \\at(i, LoopEntry) - 1 || j == 0;\n    loop invariant (j > 0) ==> (i - 1 <= \\at(i, LoopEntry));\n*/\n```\n\nExplanation:\n\n1. i is always between 0 and N, as it starts with the value of N and is decremented by 1 until it reaches 0.\n2. j is always between 0 and N, as it starts with an unknown value and is decremented by 1 until it reaches 0, at which point it is reset to N.\n3. i is either the same as its initial value or has been decremented by 1, or j is 0, which indicates that the inner loop has executed.\n4. If j > 0, then i has not been decremented by 1 more than its initial value, which ensures the termination of the loop.",
                    "Let's first analyze the loop head and body.\n\nAt the loop head, variables i, j, and N are live. \nThe loop condition is i > 0.\n\nIn the loop body, there is a conditional statement:\n- If j > 0, then j = j - 1.\n- Else, j = N and i = i - 1.\n\nThe given ranking function is (i, (j > 0) ? j : N).\n\nNow let's find the loop invariants:\n\n- i is always non-negative, and it decreases when j <= 0.\n- j is always in the range [0, N].\n- If j > 0, it decreases in each iteration.\n\nSo, the loop invariants are:\n\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant j >= 0;\n    loop invariant j <= N;\n    loop invariant (j > 0) ==> \\at(j, LoopEntry) > j;\n*/\n```\n\nThese loop invariants support the given ranking function and show that the loop terminates."
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant 0 <= j <= N;\n    loop invariant i + j <= N + \\at(i, LoopEntry);\n*/",
                    "/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant 0 <= j <= N;\n    loop invariant \\at(i, LoopEntry) >= i;\n    loop invariant (\\at(j, LoopEntry) > 0) ==> (\\at(j, LoopEntry) >= j);\n    loop invariant (\\at(j, LoopEntry) <= 0) ==> (\\at(i, LoopEntry) > i);\n*/",
                    "/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant 0 <= j <= N;\n    loop invariant (j > 0) ==> j <= i;\n*/",
                    "/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant 0 <= j <= N;\n    loop invariant i == \\at(i, LoopEntry) || i == \\at(i, LoopEntry) - 1 || j == 0;\n    loop invariant (j > 0) ==> (i - 1 <= \\at(i, LoopEntry));\n*/",
                    "/*@ \n    loop invariant i >= 0;\n    loop invariant j >= 0;\n    loop invariant j <= N;\n    loop invariant (j > 0) ==> \\at(j, LoopEntry) > j;\n*/"
                ],
                "inductive_invariants": "loop invariant i6: \\at(i, LoopEntry) >= i;\nloop invariant i15: (j > 0) ==> (i - 1 <= \\at(i, LoopEntry));",
                "final_checker_input": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, j, N;\n\tj = unknown_int();\n\tN = unknown_int();\n\ti = N;\n\t//@ ghost variant_expression measure = { i, (j > 0) ? j : N };\n/*@\nloop invariant i6: \\at(i, LoopEntry) >= i;\nloop invariant i15: (j > 0) ==> (i - 1 <= \\at(i, LoopEntry));\nloop invariant measure.a == i && measure.b == (j > 0) ? j : N;\nloop variant measure for lexicographic;\n*/\nwhile (i > 0) {\n\t\tif (j > 0) {\n\t\t\tj = j - 1;\n\t\t} else {\n\t\t\tj = N;\n\t\t\ti = i - 1;\n\t\t}\n\t\n//@ ghost measure.a = i;\n//@ ghost measure.b = (j > 0) ? j : N;\n}\n\treturn 0;\n}",
                "checker_message": "loop invariant \\at(i, LoopEntry) >= i is inductive.\nloop invariant (j > 0) ==> (i - 1 <= \\at(i, LoopEntry)) is inductive.\n\nLoop variant is Invalid.\n",
                "success": false
            },
            {
                "invariant_code_blocks": [],
                "invariant_llm_output": [],
                "inductive_invariants": [
                    "Invariants not needed"
                ],
                "final_checker_input": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, j, N;\n\tj = unknown_int();\n\tN = unknown_int();\n\ti = N;\n\t//@ ghost variant_expression measure = { i, j };\n/*@\n\nloop invariant measure.a == i && measure.b == j;\nloop variant measure for lexicographic;\n*/\nwhile (i > 0) {\n\t\tif (j > 0) {\n\t\t\tj = j - 1;\n\t\t} else {\n\t\t\tj = N;\n\t\t\ti = i - 1;\n\t\t}\n\t\n//@ ghost measure.a = i;\n//@ ghost measure.b = j;\n}\n\treturn 0;\n}",
                "success": true
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB6.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Mysore_true-termination.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusMin.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.09-no-inv_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Copenhagen_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_easySum.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA6.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Gothenburg_v2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.08.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.03.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB11.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Thun_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_flag.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/McCarthy91_Iteration_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NO_24.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Copenhagen_disj_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Bangalore_v4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ComplInterv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChooseLife.c"
        ],
        "skipped": [],
        "total": 193,
        "success_count": 102,
        "failure_count": 91,
        "success_rate": 0.5284974093264249
    }
}