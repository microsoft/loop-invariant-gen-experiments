{
    "logs": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_flag.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int flag;\n    int c, x, y;\n    flag = 1;\n    c = 0;\n    x = unknown_int();\n    y = unknown_int();\n    while (flag != 0) {\n        if (x >= y) {\n            flag = 0;\n        }\n        x = x + 1;\n        c = c + 1;\n    }\n    return 0;\n}",
        "success": false,
        "variants": [
            [
                "y - x"
            ]
        ],
        "variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n- If the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. \n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int flag;\n    int c, x, y;\n    flag = 1;\n    c = 0;\n    x = unknown_int();\n    y = unknown_int();\n    while (flag != 0) {\n        if (x >= y) {\n            flag = 0;\n        }\n        x = x + 1;\n        c = c + 1;\n    }\n    return 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function (or the sequence of expressions) is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "1. At the loop head, the variables that are live are `flag`, `x`, and `y`.\n\n2. The loop body updates `flag`, `x`, and `c`. The loop continues to execute as long as `flag != 0`. The value of `flag` is only set to 0 if `x >= y`. In each iteration, `x` is increased by 1.\n\n3. We can find a ranking function involving the variables in the loop body. Since `x` is increasing and the loop terminates when `x >= y`, we can use the difference between `y` and `x` as a ranking function.\n\nThe ranking function for this loop is `y - x`. This is a valid ranking function because:\n\n- It is positive while the loop is executing, as `x < y` when `flag != 0`.\n- It decreases with every iteration, as `x` is incremented by 1 in each iteration.\n\nHere is the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant y - x;\n*/\n```",
            "1. The loop head is at the `while (flag != 0)` statement, and the variables live at the loop head are `flag`, `x`, and `y`.\n2. The loop body has the following operations:\n   - If `x >= y`, set `flag` to 0.\n   - Increment `x` by 1.\n   - Increment `c` by 1.\n\nNow, let's find the ranking function.\n\nWe can consider the difference between `x` and `y` as a ranking function, because:\n- It is positive when the loop is executing (`x < y`, otherwise, the loop would stop)\n- It decreases with every iteration of the loop (since `x` is incremented by 1)\n\nSo, the ranking function can be written as `y - x`.\n\nHere is the ranking function in ACSL syntax:\n\n```c\n/*@\n    loop variant y - x;\n*/\n```",
            "First, let's make note of the starting values or constraints for the variables that are live at the loop head:\n- flag = 1 (initially)\n- x and y are initially unknown integers\n\nNow let's analyze the loop body:\n- If x >= y, then flag is set to 0, and the loop will terminate.\n- x is incremented by 1 in each iteration.\n- c is incremented by 1 in each iteration but does not affect the loop condition.\n\nThe loop termination depends on the value of `flag`, which is set to 0 when x >= y. To ensure that the loop eventually terminates, we must show that x will eventually become greater than or equal to y.\n\nWe can use the difference between y and x as the ranking function. This value will decrease in each iteration since x is incremented by 1. The loop will continue executing as long as x < y, which means the value of the ranking function will be positive.\n\nSo, the ranking function is `y - x`. Here's the output in ACSL syntax:\n\n```\n/*@\n    loop variant y - x;\n*/\n```\n\nThis ranking function is valid because it decreases with every iteration of the loop (since x increases by 1) and is positive while the loop is executing (since the loop continues when x < y).",
            "First, let's make note of the starting values or constraints for the variables that are live at the loop head:\n- flag is initially set to 1\n- c is initially set to 0\n- x and y are unknown integers\n\nNow, let's analyze the loop body and find a ranking function involving the variables in the loop body.\n\nThe loop continues until flag becomes 0. Inside the loop, if x >= y, flag is set to 0. This means that the loop will continue as long as x < y. Also, note that x is incremented by 1 in each iteration.\n\nLet's use the difference between y and x as the ranking function. This value will always be positive as long as x < y (which is the condition for the loop to continue). And it decreases with every iteration since x is incremented.\n\nSo the ranking function is:\n\n```\n/*@\n    loop variant y - x;\n*/\n```\n\nThis is a valid ranking function because:\n1. It is positive while the loop is executing (x < y).\n2. It decreases with every iteration of the loop (x is incremented by 1).",
            "1. Note the starting values or constraints for the variables that are live at the loop head:\n    - flag = 1\n    - c = 0\n    - x and y are unknown integers\n\n2. Analyze the loop body and find a ranking function involving the variables in the loop body:\n    - The loop continues executing as long as flag != 0.\n    - If x >= y, then flag is set to 0, and the loop will terminate.\n    - Otherwise, x is incremented by 1 and c is incremented by 1 in each iteration.\n    \n3. Find the ranking function:\n    - Since x is incremented in each iteration and the loop terminates when x >= y, we can use the expression (y - x) as the ranking function. This expression will decrease in each iteration, and it will be positive as long as the loop continues executing.\n\nOutput the ranking function in ACSL syntax:\n\n```\n/*@ \n    loop variant y - x;\n */\n```"
        ],
        "variant_log": [
            {
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. Lexicographic ranking functions are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int flag;\n    int c, x, y;\n    flag = 1;\n    c = 0;\n    x = unknown_int();\n    y = unknown_int();\n    while (flag != 0) {\n        if (x >= y) {\n            flag = 0;\n        }\n        x = x + 1;\n        c = c + 1;\n    }\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(y - x)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, let's note the initial values and constraints of the variables live at the loop head:\n\n- flag = 1\n- c = 0\n- x and y are unknown integers with no constraints.\n\nNow, let's analyze the loop body, loop condition, and the ranking function:\n\n- Loop condition: flag != 0\n- Loop body:\n  - If x >= y, set flag = 0\n  - Increment x by 1\n  - Increment c by 1\n- Ranking function: (y - x)\n\nNow, let's find the loop invariants that support the ranking function (y - x):\n\n```c\n/*@ \n    loop invariant 0 <= c;\n    loop invariant 0 <= x - \\at(x, LoopEntry);\n    loop invariant x - \\at(x, LoopEntry) == c;\n    loop invariant y == \\at(y, LoopEntry);\n    loop invariant x <= y ==> flag == 1;\n    loop invariant x > y ==> flag == 0;\n*/\n```\n\nThese invariants hold true before the loop execution, in every iteration of the loop, and after the loop termination, and they imply that the ranking function (y - x) decreases with every iteration.",
                    "We have the following information:\n- Variables live at the loop head: `flag`, `c`, `x`, `y`\n- Loop condition: `flag != 0`\n- Loop variant (ranking function): `y - x`\n\nNow, let's find the loop invariants:\n\n1. The value of `flag` is either 0 or 1 throughout the loop.\n2. The value of `c` is non-negative and increases with every iteration.\n3. The value of `x` is always less than or equal to the value of `y` at the beginning of each iteration.\n\nSo, the loop invariants are as follows:\n\n```\n/*@ \n    loop invariant 0 <= flag <= 1;\n    loop invariant 0 <= c;\n    loop invariant c == \\at(c, LoopEntry) + 1;\n    loop invariant x <= \\at(y, LoopEntry);\n*/\n```",
                    "Starting values or constraints for variables:\n- flag is initially set to 1\n- c is initially set to 0\n- x and y are assigned values from unknown_int()\n\nLoop condition and ranking function:\n- Loop condition: flag != 0\n- Ranking function: y - x\n\nLoop invariants that support the ranking function:\n\n```\n/*@ \n    loop invariant 0 <= c;\n    loop invariant \\at(x, LoopEntry) <= x;\n    loop invariant \\at(x, LoopEntry) <= y ==> flag == 0;\n*/\n```",
                    "First, we note the starting values and constraints for the variables that are live at the loop head:\n- flag is initially set to 1\n- c is initially set to 0\n- x and y are initialized with unknown_int(), so their values can be any integer.\n\nNow, we analyze the loop body, loop condition, and the given ranking function (y - x):\n- Loop condition: flag != 0\n- Loop body:\n  - If x >= y, set flag to 0.\n  - Increment x by 1.\n  - Increment c by 1.\n- Ranking function: (y - x)\n\nNow, we output the loop invariants that support the validity of the ranking function and prove the termination of the loop:\n\n```\n/*@ \n    loop invariant 0 <= c;\n    loop invariant x == \\at(x, LoopEntry) + c;\n    loop invariant y >= \\at(y, LoopEntry);\n    loop invariant \\at(y, LoopEntry) - x <= y - x;\n*/\n```",
                    "/*@ \n    loop invariant 0 <= c;\n    loop invariant x <= y ==> c == \\at(c, LoopEntry) + (x - \\at(x, LoopEntry));\n    loop invariant x > y ==> c == \\at(c, LoopEntry) + (x - \\at(x, LoopEntry) - 1);\n    loop invariant flag == (x >= y ? 0 : 1);\n*/\n"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant 0 <= c;\n    loop invariant 0 <= x - \\at(x, LoopEntry);\n    loop invariant x - \\at(x, LoopEntry) == c;\n    loop invariant y == \\at(y, LoopEntry);\n    loop invariant x <= y ==> flag == 1;\n    loop invariant x > y ==> flag == 0;\n*/",
                    "/*@ \n    loop invariant 0 <= flag <= 1;\n    loop invariant 0 <= c;\n    loop invariant c == \\at(c, LoopEntry) + 1;\n    loop invariant x <= \\at(y, LoopEntry);\n*/",
                    "/*@ \n    loop invariant 0 <= c;\n    loop invariant \\at(x, LoopEntry) <= x;\n    loop invariant \\at(x, LoopEntry) <= y ==> flag == 0;\n*/",
                    "/*@ \n    loop invariant 0 <= c;\n    loop invariant x == \\at(x, LoopEntry) + c;\n    loop invariant y >= \\at(y, LoopEntry);\n    loop invariant \\at(y, LoopEntry) - x <= y - x;\n*/",
                    [
                        "ERROR: Output does not contain at least 1 complete code block",
                        "/*@ \n    loop invariant 0 <= c;\n    loop invariant x <= y ==> c == \\at(c, LoopEntry) + (x - \\at(x, LoopEntry));\n    loop invariant x > y ==> c == \\at(c, LoopEntry) + (x - \\at(x, LoopEntry) - 1);\n    loop invariant flag == (x >= y ? 0 : 1);\n*/\n"
                    ]
                ],
                "inductive_invariants": "loop invariant i1: 0 <= c;\nloop invariant i2: 0 <= x - \\at(x, LoopEntry);\nloop invariant i3: x - \\at(x, LoopEntry) == c;\nloop invariant i4: y == \\at(y, LoopEntry);\nloop invariant i5: x <= y ==> flag == 1;\nloop invariant i7: 0 <= flag <= 1;\nloop invariant i12: \\at(x, LoopEntry) <= x;\nloop invariant i15: x == \\at(x, LoopEntry) + c;\nloop invariant i16: y >= \\at(y, LoopEntry);\nloop invariant i17: \\at(y, LoopEntry) - x <= y - x;",
                "final_checker_input": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int flag;\n    int c, x, y;\n    flag = 1;\n    c = 0;\n    x = unknown_int();\n    y = unknown_int();\n    /*@\nloop invariant i1: 0 <= c;\nloop invariant i2: 0 <= x - \\at(x, LoopEntry);\nloop invariant i3: x - \\at(x, LoopEntry) == c;\nloop invariant i4: y == \\at(y, LoopEntry);\nloop invariant i5: x <= y ==> flag == 1;\nloop invariant i7: 0 <= flag <= 1;\nloop invariant i12: \\at(x, LoopEntry) <= x;\nloop invariant i15: x == \\at(x, LoopEntry) + c;\nloop invariant i16: y >= \\at(y, LoopEntry);\nloop invariant i17: \\at(y, LoopEntry) - x <= y - x;\nloop variant y - x;\n*/\nwhile (flag != 0) {\n        if (x >= y) {\n            flag = 0;\n        }\n        x = x + 1;\n        c = c + 1;\n    }\n    return 0;\n}",
                "checker_message": "loop invariant 0 <= c is inductive.\nloop invariant 0 <= x - \\at(x, LoopEntry) is inductive.\nloop invariant x - \\at(x, LoopEntry) == c is inductive.\nloop invariant y == \\at(y, LoopEntry) is inductive.\nloop invariant x <= y ==> flag == 1 is inductive.\nloop invariant 0 <= flag <= 1 is inductive.\nloop invariant \\at(x, LoopEntry) <= x is inductive.\nloop invariant x == \\at(x, LoopEntry) + c is inductive.\nloop invariant y >= \\at(y, LoopEntry) is inductive.\nloop invariant \\at(y, LoopEntry) - x <= y - x is inductive.\n\nLoop variant is Invalid.\n",
                "success": false
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB6.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Thun_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_flag.c"
        ],
        "skipped": [],
        "total": 137,
        "success_count": 68,
        "failure_count": 69,
        "success_rate": 0.49635036496350365
    }
}