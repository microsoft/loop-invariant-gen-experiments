{
    "logs": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n    x = unknown_int();\n    y = unknown_int();\n    while (x > 0) {\n        x = y;\n        y = y - 1;\n    }\n    return 0;\n}",
        "success": false,
        "variants": [
            [
                "y"
            ]
        ],
        "variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n- If the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. \n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n    x = unknown_int();\n    y = unknown_int();\n    while (x > 0) {\n        x = y;\n        y = y - 1;\n    }\n    return 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function (or the sequence of expressions) is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "First, let's note the starting values or constraints for the variables that are live at the loop head. Since `x` and `y` are assigned `unknown_int()`, they can be any integer value. The loop condition is `x > 0`. \n\nNow, let's analyze the loop body. In each iteration, the value of `x` is updated to the value of `y`, and the value of `y` is decremented by 1.\n\nWe need to find a ranking function that is a positive and decreasing expression involving the variables in the loop body. Let's consider the value of `y`.\n\nThe ranking function for this loop is `y`:\n\n```\n/*@\n    loop variant y;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. When the loop condition is true (i.e., `x > 0`), the value of `y` is positive since `x` is assigned the value of `y`.\n2. With every iteration of the loop, the value of `y` decreases by 1, making it a decreasing function. The loop terminates when `x <= 0`, which means that `y` will eventually be non-positive, causing the loop to terminate.",
            "First, let's make note of the starting values or constraints for the variables that are live at the loop head:\n- `x` is initialized to an unknown integer value.\n- `y` is also initialized to an unknown integer value.\n\nNow let's analyze the loop body:\n1. `x` is set to the value of `y`.\n2. `y` is decremented by 1.\n\nWe can see that the value of `y` is decreasing with every iteration, while `x` takes the value of `y` at each iteration. Therefore, the value of `x` is also decreasing with every iteration.\n\nNow, let's find a ranking function involving the variables in the loop body.\n\nSince `y` is decremented in each iteration, we can use `y` as the ranking function. This ensures that the ranking function is decreasing with every iteration.\n\nWe also have to make sure that the ranking function is positive while the loop is executing. The loop continues to execute as long as `x > 0`. Since `x` takes the value of `y` in each iteration, this means that `y` must also be positive for the loop to continue executing.\n\nThus, the ranking function for this loop is `y`. Here's the ACSL syntax for the ranking function:\n\n```c\n/*@\n    loop variant y;\n*/\n```\n\nThis ranking function is valid because it is decreasing with every iteration (as `y` is decremented in each iteration) and is positive while the loop is executing (as the loop continues only when `x > 0`, which implies `y > 0`).",
            "First, let's analyze the loop head and the loop body:\n\n1. At the loop head, the condition for the loop to execute is `x > 0`.\n2. In the loop body, `x` is assigned the value of `y`, and `y` is decremented by 1.\n\nNow, let's find the ranking function:\n\n1. Since the loop condition is based on `x > 0`, we need a ranking function that involves `x`.\n2. As `x` is assigned the value of `y` in the loop body, and `y` is decremented, we can create a ranking function using `y`.\n\nSo the ranking function is:\n\n```\n/*@\n    loop variant y;\n*/\n```\n\nThis ranking function is valid because:\n\n1. The value of `y` is always positive when the loop is executing, as the loop condition is `x > 0` and `x` is assigned the value of `y`.\n2. In every iteration of the loop, `y` is decremented by 1, ensuring that the value of the ranking function decreases with each iteration.\n3. Since `y` is decreasing, it will eventually reach a value that causes the loop condition `x > 0` to be false, leading to loop termination.",
            "First, let's note the starting values or constraints for the variables that are live at the loop head. `x` and `y` are both initialized with `unknown_int()`, so there are no known constraints on their initial values.\n\nNow, let's analyze the loop body. In each iteration, the loop does the following:\n1. Sets `x` to the current value of `y`\n2. Decreases `y` by 1\n\nThe loop continues executing as long as `x > 0`.\n\nBased on this, we can find a ranking function involving the variables in the loop body.\n\nThe value of `y` is decreasing in each iteration. Also, since the loop continues executing as long as `x > 0`, we know that `y > 0` as well. Therefore, we can use `y` as the ranking function.\n\nHere is the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant y;\n*/\n```\n\nThis ranking function is valid because its value is positive when the loop is executing, and it decreases with every successive iteration of the loop, ensuring that the loop must eventually terminate.",
            "First, let's make note of the starting values or constraints for the variables that are live at the loop head.\n\nx and y are assigned unknown integer values initially. There are no constraints on the initial values of x and y.\n\nNow, let's analyze the loop body and find a ranking function involving the variables in the loop body.\n\nThe loop continues executing as long as x > 0. Inside the loop, x is assigned the value of y, and y is decremented by 1. Since y is decremented by 1 in each iteration, it will eventually become non-positive, causing the loop to terminate.\n\nA valid ranking function for this loop would be the value of y:\n\n```\n/*@\n    loop variant y;\n*/\n```\n\nThis ranking function is decreasing with every iteration of the loop (since y is decremented by 1), and evaluates to a positive value while the loop is executing (as the loop condition is x > 0, and x is assigned the value of y inside the loop)."
        ],
        "variant_log": [
            {
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. Lexicographic ranking functions are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n    x = unknown_int();\n    y = unknown_int();\n    while (x > 0) {\n        x = y;\n        y = y - 1;\n    }\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(y)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, let's analyze the loop:\n- x and y are initialized with unknown integer values.\n- The loop condition is (x > 0).\n- Inside the loop, x is assigned the value of y, and y is decremented by 1.\n\nNow, let's find the loop invariants:\n\n1. At the beginning of the loop, x can be any integer value, so we need to express that x has the same value as its initial value before the loop starts:\n\n```\n/*@ loop invariant x == \\at(x, LoopEntry); */\n```\n\n2. Since y is decremented by 1 in each iteration, we can express that y is always equal to its initial value minus the number of loop iterations:\n\n```\n/*@ loop invariant y == \\at(y, LoopEntry) - (loop iteration count); */\n```\n\n3. The loop condition is (x > 0), so we know that x is always positive inside the loop:\n\n```\n/*@ loop invariant x > 0; */\n```\n\n4. We know that y decreases in each iteration, so if the loop terminates, y must be less than or equal to 0:\n\n```\n/*@ loop invariant y <= 0 ==> \\at(y, LoopExit) <= 0; */\n```\n\nHere are the loop invariants to support the loop variant (y):\n\n```\n/*@ \n    loop invariant x == \\at(x, LoopEntry);\n    loop invariant y == \\at(y, LoopEntry) - (loop iteration count);\n    loop invariant x > 0;\n    loop invariant y <= 0 ==> \\at(y, LoopExit) <= 0;\n*/\n```",
                    "First, note that the variables x and y are assigned values from an unknown function at the beginning. We don't have any information about their initial values or constraints. \n\nNext, let's analyze the loop. The loop condition is (x > 0), and the loop body assigns y to x and decrements y by 1. The given ranking function is (y).\n\nNow, let's write the loop invariants that support the validity of the ranking function:\n\n```\n/*@ \n    loop invariant 0 <= \\at(y, LoopEntry);\n    loop invariant y <= x;\n    loop invariant y >= 0;\n*/\n```\n\nThese loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination. They imply that the ranking function (y) decreases with every iteration, proving the termination of the loop.",
                    "First, let's analyze the given program:\n\n1. Two integer variables `x` and `y` are declared but not initialized. They both contain garbage values initially.\n2. `x` and `y` are assigned values using `unknown_int()`, which is a non-deterministic function returning an integer. Therefore, we cannot make any assumptions about the values assigned to `x` and `y`.\n3. The loop condition is `x > 0`, and inside the loop, `x` is assigned the value of `y`, and `y` is decremented by 1.\n\nNow, let's output the loop invariants to support the loop variant `(y)`:\n\n```\n/*@ \n    loop invariant \\at(x, LoopEntry) >= 0 ==> y <= \\at(y, LoopEntry);\n    loop invariant \\at(x, LoopEntry) < 0 ==> y == \\at(y, LoopEntry);\n    loop invariant x >= 0;\n    loop invariant y >= -1;\n*/\n```\n\nExplanation of loop invariants:\n\n1. If the value of `x` at the beginning of the loop is non-negative, the value of `y` during the loop execution will always be less than or equal to its initial value.\n2. If the value of `x` at the beginning of the loop is negative, the value of `y` will remain unchanged during the loop execution.\n3. The value of `x` will always be non-negative during the loop execution, as the loop condition is `x > 0`.\n4. The value of `y` will always be greater than or equal to -1, as it is decremented by 1 in each iteration.",
                    "Let's first analyze the program and identify the starting values and constraints for the live variables at the loop head. \n\n1. The values of x and y are initially set to unknown_int(), which can be any integer value.\n2. The loop condition is x > 0.\n\nNow let's analyze the loop body and the given ranking function.\n\n1. Inside the loop, x is assigned the value of y.\n2. Then y is decremented by 1.\n3. The ranking function is (y).\n\nNow let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration.\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y <= \\at(y, LoopEntry);\n*/\n```\n\nExplanation:\n\n1. The loop invariant `x >= 0` states that x is always non-negative at the loop head. This is true before the loop execution (as x is set to an arbitrary value), and it is true in every iteration of the loop as x is assigned the value of y, and the loop condition ensures that x > 0. After the loop termination, x <= 0, as the loop condition is no longer true.\n\n2. The loop invariant `y <= \\at(y, LoopEntry)` states that the value of y at any point in the loop is less than or equal to its initial value. This is true before the loop execution, and it is true in every iteration of the loop as y is decremented by 1 in each iteration. This loop invariant implies that the ranking function (y) decreases with every iteration, ensuring the loop's termination.",
                    "First, we note the starting values and constraints for the variables live at the loop head. In this case, `x` and `y` are both initialized with values from `unknown_int()` and have no specific constraints.\n\nNext, we analyze the loop condition and body. The loop condition is `x > 0`, and the loop body consists of two statements: `x = y;` and `y = y - 1;`.\n\nNow we can output the loop invariants that support the ranking function **(y)**.\n\n```\n/*@ \n    loop invariant 0 <= y;\n    loop invariant x >= \\at(x, LoopEntry) - (\\at(y, LoopEntry) - y);\n    loop invariant x <= y;\n*/\n```\n\nThese invariants hold true:\n1. Before the loop execution, as `y` is non-negative.\n2. In every iteration of the loop, `y` decreases by 1 and `x` is assigned the value of `y` before the decrease.\n3. After the loop termination, `x` is non-positive, and since `x <= y`, `y` is also non-positive.\n\nThese loop invariants imply that the ranking function **(y)** decreases with every iteration, proving the termination of the loop."
                ],
                "invariant_code_blocks": [
                    "/*@ loop invariant x == \\at(x, LoopEntry); */",
                    "/*@ \n    loop invariant 0 <= \\at(y, LoopEntry);\n    loop invariant y <= x;\n    loop invariant y >= 0;\n*/",
                    "/*@ \n    loop invariant \\at(x, LoopEntry) >= 0 ==> y <= \\at(y, LoopEntry);\n    loop invariant \\at(x, LoopEntry) < 0 ==> y == \\at(y, LoopEntry);\n    loop invariant x >= 0;\n    loop invariant y >= -1;\n*/",
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant y <= \\at(y, LoopEntry);\n*/",
                    "/*@ \n    loop invariant 0 <= y;\n    loop invariant x >= \\at(x, LoopEntry) - (\\at(y, LoopEntry) - y);\n    loop invariant x <= y;\n*/"
                ],
                "inductive_invariants": "loop invariant i5: \\at(x, LoopEntry) >= 0 ==> y <= \\at(y, LoopEntry);\nloop invariant i10: y <= \\at(y, LoopEntry);",
                "final_checker_input": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n    x = unknown_int();\n    y = unknown_int();\n    /*@\nloop invariant i5: \\at(x, LoopEntry) >= 0 ==> y <= \\at(y, LoopEntry);\nloop invariant i10: y <= \\at(y, LoopEntry);\nloop variant y;\n*/\nwhile (x > 0) {\n        x = y;\n        y = y - 1;\n    }\n    return 0;\n}",
                "checker_message": "loop invariant \\at(x, LoopEntry) >= 0 ==> y <= \\at(y, LoopEntry) is inductive.\nloop invariant y <= \\at(y, LoopEntry) is inductive.\n\nLoop variant is Invalid.\n",
                "success": false
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB6.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Thun_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_flag.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c"
        ],
        "skipped": [],
        "total": 141,
        "success_count": 70,
        "failure_count": 71,
        "success_rate": 0.49645390070921985
    }
}