{
    "logs": {
        "file": "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int id = unknown_int();\n    int maxId = unknown_int();\n\n    if(0 <= id && id < maxId) {\n        int tmp = id+1;\n        while(tmp!=id && unknown_int()) {\n            if (tmp <= maxId) {\n                tmp = tmp + 1;\n            } else {\n                tmp = 0;\n            }\n        }\n    }\n\n    return 0;\n}\n",
        "success": false,
        "variants": [
            [
                "maxId - tmp + 1"
            ],
            [
                "maxId - tmp",
                "tmp"
            ],
            [
                "maxId - tmp"
            ]
        ],
        "variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n- If the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. \n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int id = unknown_int();\n    int maxId = unknown_int();\n\n    if(0 <= id && id < maxId) {\n        int tmp = id+1;\n        while(tmp!=id && unknown_int()) {\n            if (tmp <= maxId) {\n                tmp = tmp + 1;\n            } else {\n                tmp = 0;\n            }\n        }\n    }\n\n    return 0;\n}\n\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function (or the sequence of expressions) is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "1. Identify the variables that are live at the loop head:\n   - `tmp`\n   - `id`\n   - `maxId`\n\n2. Analyze the loop body:\n   - `tmp` is either incremented or set to 0.\n   - `id` and `maxId` remain unchanged during the loop.\n\n3. Find a ranking function involving the variables in the loop body:\n   - The loop terminates when `tmp == id`.\n   - `tmp` is always in the range `[0, maxId]`.\n   - The ranking function can be: `maxId - tmp + 1`.\n\n4. Output the ranking function in ACSL syntax:\n\n```c\n/*@\n    loop variant maxId - tmp + 1;\n*/\n```\n\nThis is a valid ranking function because:\n- It is positive while the loop is executing, since `0 <= tmp <= maxId`.\n- It decreases with every iteration of the loop, as `tmp` is either incremented or set to 0 (which makes it closer to `id`).",
            "1. Make note of the starting values or constraints for the variables that are live at the loop head.\n\nIn this case, we have `tmp` and `maxId` as live variables at the loop head. The constraints at the start of the loop are `0 <= id` and `id < maxId`. Since `tmp = id + 1`, we have `1 <= tmp` and `tmp <= maxId`.\n\n2. Analyze the loop body and find a ranking function involving the variables in the loop body.\n\nIn the loop body, we can see that `tmp` is being updated in two ways: either incremented by 1 (`tmp = tmp + 1`) or set to 0 (`tmp = 0`). The loop continues as long as `tmp != id` and `unknown_int()` evaluates to a non-zero value.\n\n3. Output the ranking function in one code block, in ACSL syntax.\n\nWe can use the following lexicographic ranking function:\n\n```\n/*@\n    loop variant maxId - tmp;\n    loop variant tmp;\n*/\n```\n\nThis ranking function is valid because:\n\n- `maxId - tmp` is always non-negative, and it decreases in each iteration when `tmp` is incremented by 1.\n- When `tmp` reaches `maxId + 1`, the value of `tmp` is set to 0, and the value of `maxId - tmp` remains the same. In this case, the second expression `tmp` decreases.\n- Both expressions are positive while the loop is executing.\n\nBy using this lexicographic ranking function, we can prove that the loop must terminate.",
            "First, let's identify the variables that are live at the loop head. In this case, we have `id`, `maxId`, and `tmp`.\n\nNext, analyze the loop body. We can see that `tmp` is the variable being updated in the loop. The value of `tmp` increases by 1 if `tmp <= maxId` and resets to 0 if `tmp > maxId`. \n\nNow, let's find a ranking function for this loop. We can use `maxId - tmp + 1` as our ranking function. \n\nTo show that this is a valid ranking function, we need to show that:\n1. The value of the ranking function is positive while the loop is executing.\n2. The value of the ranking function decreases with every successive iteration of the loop.\n\n1. The value of the ranking function is positive while the loop is executing:\n   Since `0 <= tmp <= maxId`, we have `0 <= maxId - tmp + 1 <= maxId + 1`. Therefore, the ranking function is positive while the loop is executing.\n\n2. The value of the ranking function decreases with every successive iteration of the loop:\n   If `tmp <= maxId`, the value of `tmp` increases by 1 in the next iteration, so the value of the ranking function `maxId - tmp + 1` decreases by 1.\n   If `tmp > maxId`, the value of `tmp` is reset to 0, so the value of the ranking function `maxId - tmp + 1` decreases from `maxId + 1` to `maxId`.\n\nSince the ranking function is positive while the loop is executing and decreases with every successive iteration of the loop, it is a valid ranking function.\n\nHere is the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant maxId - tmp + 1;\n*/\n```",
            "First, let's make note of the starting values or constraints for the variables that are live at the loop head.\n- id is in the range [0, maxId)\n- tmp = id + 1\n\nNow, let's analyze the loop body and find a ranking function involving the variables in the loop body.\n\nIn the loop, the value of tmp either increases by 1 or gets reset to 0. The loop continues as long as tmp is not equal to id and unknown_int() returns a non-zero value. Since tmp is reset to 0 when it becomes greater than maxId, we know that tmp is always in the range [0, maxId].\n\nLet's consider the difference between maxId and tmp as our ranking function. This value is positive when the loop is executing because tmp is always in the range [0, maxId]. Now let's check if this ranking function is decreasing.\n\nIf tmp <= maxId, then tmp increases by 1, and the difference between maxId and tmp decreases by 1. If tmp > maxId, then tmp is reset to 0, and the difference between maxId and tmp becomes maxId. In both cases, the ranking function is decreasing.\n\nSo, the ranking function for the loop is (maxId - tmp). Here's the ACSL syntax for the ranking function:\n\n```\n/*@\n    loop variant maxId - tmp;\n*/\n```",
            "First, let's identify the variables that are live at the loop head and their constraints:\n\n- `tmp` is the loop variable. Its starting value is `id + 1`.\n- `id` is a constant inside the loop. It has a constraint of `0 <= id < maxId`.\n- `maxId` is also a constant inside the loop.\n\nNow, let's analyze the loop body and find a ranking function involving the variables in the loop body.\n\nIn the loop, `tmp` can either increase by 1 (if `tmp <= maxId`) or be reset to 0 (if `tmp > maxId`). The loop continues as long as `tmp != id` and `unknown_int()` returns a non-zero value. Since `unknown_int()` can return any integer, we cannot rely on it to guarantee termination. However, we can focus on the other part of the loop condition: `tmp != id`.\n\nA valid ranking function for this loop is `maxId - tmp + 1`. Let's see why it is a valid ranking function:\n\n1. It is positive when the loop is executing, as `tmp` is always in the range `[0, maxId]`. Thus, `maxId - tmp + 1` is in the range `[1, maxId + 1]`.\n2. It decreases with every iteration of the loop. If `tmp <= maxId`, the ranking function will decrease by 1. If `tmp > maxId`, the ranking function will decrease as well, as `tmp` will be reset to 0 and `maxId - tmp + 1` will become `maxId + 1` (which is smaller than the previous value of the ranking function).\n\nTherefore, the ranking function for this loop is:\n\n```\n/*@\n    loop variant maxId - tmp + 1;\n*/\n```"
        ],
        "variant_log": [
            {
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. Lexicographic ranking functions are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int id = unknown_int();\n    int maxId = unknown_int();\n\n    if(0 <= id && id < maxId) {\n        int tmp = id+1;\n        while(tmp!=id && unknown_int()) {\n            if (tmp <= maxId) {\n                tmp = tmp + 1;\n            } else {\n                tmp = 0;\n            }\n        }\n    }\n\n    return 0;\n}\n\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(maxId - tmp + 1)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, let's analyze the loop and its conditions:\n- At the beginning of the loop, we know that `0 <= id < maxId`.\n- The loop condition is `tmp != id && unknown_int()`.\n- In each iteration, either `tmp = tmp + 1` if `tmp <= maxId`, or `tmp = 0`.\n\nNow, let's write the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= id && id < maxId;\n    loop invariant 0 <= tmp && tmp <= maxId + 1;\n    loop invariant tmp != id ==> (maxId - tmp + 1) >= 1;\n*/\n```",
                    "First, let's identify the loop head and the variables that are live at the loop head. In this case, the loop head is the while loop, and the live variables are `id`, `maxId`, and `tmp`.\n\nNext, analyze the loop body, loop condition, and the given ranking function. The loop condition is `tmp != id && unknown_int()`, and the ranking function is `(maxId - tmp + 1)`.\n\nNow, let's find the loop invariants that are true before the loop execution, during every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration.\n\n```\n/*@ \n    loop invariant 0 <= id;\n    loop invariant id < maxId;\n    loop invariant 0 <= tmp;\n    loop invariant tmp <= maxId + 1;\n    loop invariant (tmp == maxId + 1) ==> (id == 0);\n*/\n```\n\nThese loop invariants ensure that the values of `id`, `maxId`, and `tmp` are within their valid bounds and also imply that the ranking function `(maxId - tmp + 1)` decreases with every iteration of the loop.",
                    "Let's analyze the given program and identify the loop invariants that support the ranking function (maxId - tmp + 1).\n\nStarting values and constraints:\n- id is an integer with an unknown value\n- maxId is an integer with an unknown value\n- tmp is initialized as id + 1\n\nLoop condition and ranking function:\n- The loop condition is: tmp != id && unknown_int()\n- The ranking function is: maxId - tmp + 1\n\nNow, let's output the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= id;\n    loop invariant id < maxId;\n    loop invariant 0 <= tmp;\n    loop invariant tmp <= maxId + 1;\n    loop invariant id < tmp ==> tmp <= maxId;\n    loop invariant tmp <= id ==> tmp == 0;\n*/\n```\n\nThese loop invariants support the ranking function (maxId - tmp + 1) and can be used to prove the termination of the loop.",
                    "First, let's make note of the starting values or constraints for the variables that are live at the loop head.\n\n1. id is non-negative and less than maxId (0 <= id < maxId).\n2. tmp is initialized as id + 1 (tmp = id + 1).\n\nNext, let's analyze the loop body and make a note of the loop condition and the given ranking function.\n\nLoop condition: tmp != id && unknown_int()\nRanking function: (maxId - tmp + 1)\n\nNow, let's output loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration.\n\n```\n/*@ \n    loop invariant 0 <= id;\n    loop invariant id < maxId;\n    loop invariant 0 <= tmp;\n    loop invariant tmp <= maxId + 1;\n    loop invariant id <= tmp;\n    loop invariant tmp == id + 1 ==> unknown_int() != 0;\n    loop invariant tmp != id ==> unknown_int() == 0;\n*/\n```",
                    "First, let's analyze the given program and make note of the starting values or constraints for the variables that are live at the loop head.\n\n- id and maxId are both non-negative integers, and id is less than maxId.\n- tmp is initialized as id + 1.\n\nNow, let's analyze the loop body and make a note of the loop condition and the given ranking function.\n\n- Loop condition: tmp != id && unknown_int()\n- Ranking function: (maxId - tmp + 1)\n\nNow, let's output the loop invariants for the given ranking function.\n\n```\n/*@ \n    loop invariant 0 <= id;\n    loop invariant 0 <= maxId;\n    loop invariant id < maxId;\n    loop invariant 0 <= tmp;\n    loop invariant tmp <= maxId + 1;\n    loop invariant tmp >= \\at(tmp, LoopEntry) ==> tmp <= maxId;\n    loop invariant tmp < \\at(tmp, LoopEntry) ==> tmp == 0;\n*/\n```"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant 0 <= id && id < maxId;\n    loop invariant 0 <= tmp && tmp <= maxId + 1;\n    loop invariant tmp != id ==> (maxId - tmp + 1) >= 1;\n*/",
                    "/*@ \n    loop invariant 0 <= id;\n    loop invariant id < maxId;\n    loop invariant 0 <= tmp;\n    loop invariant tmp <= maxId + 1;\n    loop invariant (tmp == maxId + 1) ==> (id == 0);\n*/",
                    "/*@ \n    loop invariant 0 <= id;\n    loop invariant id < maxId;\n    loop invariant 0 <= tmp;\n    loop invariant tmp <= maxId + 1;\n    loop invariant id < tmp ==> tmp <= maxId;\n    loop invariant tmp <= id ==> tmp == 0;\n*/",
                    "/*@ \n    loop invariant 0 <= id;\n    loop invariant id < maxId;\n    loop invariant 0 <= tmp;\n    loop invariant tmp <= maxId + 1;\n    loop invariant id <= tmp;\n    loop invariant tmp == id + 1 ==> unknown_int() != 0;\n    loop invariant tmp != id ==> unknown_int() == 0;\n*/",
                    "/*@ \n    loop invariant 0 <= id;\n    loop invariant 0 <= maxId;\n    loop invariant id < maxId;\n    loop invariant 0 <= tmp;\n    loop invariant tmp <= maxId + 1;\n    loop invariant tmp >= \\at(tmp, LoopEntry) ==> tmp <= maxId;\n    loop invariant tmp < \\at(tmp, LoopEntry) ==> tmp == 0;\n*/"
                ],
                "inductive_invariants": "loop invariant i1: 0 <= id && id < maxId;\nloop invariant i2: 0 <= tmp && tmp <= maxId + 1;\nloop invariant i4: 0 <= id;\nloop invariant i5: id < maxId;\nloop invariant i6: 0 <= tmp;\nloop invariant i7: tmp <= maxId + 1;\nloop invariant i23: 0 <= maxId;",
                "final_checker_input": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int id = unknown_int();\n    int maxId = unknown_int();\n\n    if(0 <= id && id < maxId) {\n        int tmp = id+1;\n        /*@\nloop invariant i1: 0 <= id && id < maxId;\nloop invariant i2: 0 <= tmp && tmp <= maxId + 1;\nloop invariant i4: 0 <= id;\nloop invariant i5: id < maxId;\nloop invariant i6: 0 <= tmp;\nloop invariant i7: tmp <= maxId + 1;\nloop invariant i23: 0 <= maxId;\nloop variant maxId - tmp + 1;\n*/\nwhile(tmp!=id && unknown_int()) {\n            if (tmp <= maxId) {\n                tmp = tmp + 1;\n            } else {\n                tmp = 0;\n            }\n        }\n    }\n\n    return 0;\n}\n",
                "checker_message": "loop invariant 0 <= id && id < maxId is inductive.\nloop invariant 0 <= tmp && tmp <= maxId + 1 is inductive.\nloop invariant 0 <= id is inductive.\nloop invariant id < maxId is inductive.\nloop invariant 0 <= tmp is inductive.\nloop invariant tmp <= maxId + 1 is inductive.\nloop invariant 0 <= maxId is inductive.\n\nLoop variant is Invalid.\n",
                "success": false
            },
            {
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. Lexicographic ranking functions are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int id = unknown_int();\n    int maxId = unknown_int();\n\n    if(0 <= id && id < maxId) {\n        int tmp = id+1;\n        while(tmp!=id && unknown_int()) {\n            if (tmp <= maxId) {\n                tmp = tmp + 1;\n            } else {\n                tmp = 0;\n            }\n        }\n    }\n\n    return 0;\n}\n\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(maxId - tmp, tmp)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, let's note the starting values or constraints for the variables that are live at the loop head:\n- id: 0 <= id < maxId\n- maxId: no constraint\n- tmp: tmp = id + 1\n\nNow, let's analyze the loop body and make a note of the loop condition and the given ranking function:\n- Loop condition: tmp != id && unknown_int()\n- Ranking function: (maxId - tmp, tmp)\n\nNow, let's output the loop invariants that support the loop variant (maxId - tmp, tmp):\n\n```\n/*@ \n    loop invariant 0 <= id < maxId;\n    loop invariant 0 <= tmp <= maxId + 1;\n    loop invariant id < tmp ==> tmp <= maxId;\n    loop invariant id < tmp ==> tmp == \\at(tmp, LoopEntry) + 1;\n    loop invariant tmp <= id ==> tmp == 0;\n*/\n```",
                    "First, let's analyze the given code:\n\n- id and maxId are assigned non-deterministic integer values.\n- The loop will only execute if 0 <= id < maxId.\n- Inside the loop, tmp is initially assigned id + 1.\n- The loop continues until tmp == id or unknown_int() returns false (non-deterministic).\n- In each iteration, if tmp <= maxId, tmp is incremented by 1. Otherwise, tmp is set to 0.\n\nNow, we can output the loop invariants to support the loop variant (maxId - tmp, tmp):\n\n```\n/*@ \n    loop invariant 0 <= id && id < maxId;\n    loop invariant 0 <= tmp && tmp <= maxId + 1;\n    loop invariant id < tmp ==> tmp <= maxId;\n*/\n```",
                    "First, let's analyze the starting values and constraints for the live variables at the loop head. We have:\n\n- id: 0 <= id < maxId\n- maxId: No specific constraint is given, but since 0 <= id < maxId, we know maxId > 0.\n- tmp: id + 1 <= tmp <= maxId + 1\n\nNow let's look at the loop condition and the given ranking function:\n\n- Loop condition: tmp != id && unknown_int()\n- Ranking function: (maxId - tmp, tmp)\n\nNow, we can output the loop invariants that support the validity of the ranking function and prove the termination of the loop:\n\n```\n/*@ \n    loop invariant 0 <= id && id < maxId;\n    loop invariant maxId > 0;\n    loop invariant id + 1 <= tmp && tmp <= maxId + 1;\n    loop invariant 0 <= maxId - tmp && maxId - tmp <= maxId - id;\n    loop invariant maxId - tmp <= \\at(maxId - tmp, LoopEntry) || (maxId - tmp == \\at(maxId - tmp, LoopEntry) && tmp < \\at(tmp, LoopEntry));\n*/\n```",
                    "First, let's analyze the given code and identify the starting values and constraints for the live variables at the loop head.\n\n- id and maxId are initialized with unknown_int(), which means they can take any integer value.\n- The condition 0 <= id && id < maxId ensures that id is non-negative and less than maxId.\n\nNow, let's analyze the loop condition and body:\n\n- The loop condition is (tmp != id && unknown_int()).\n- Inside the loop, if tmp <= maxId, tmp is incremented by 1; otherwise, tmp is set to 0.\n\nThe given ranking function is (maxId - tmp, tmp). To support this ranking function, we need to find loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination.\n\nHere are the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= tmp <= maxId;\n    loop invariant 0 <= id < maxId;\n    loop invariant tmp == \\at(tmp, LoopEntry) + 1 || tmp == 0;\n*/\n```\n\nThese loop invariants imply that the ranking function (maxId - tmp, tmp) decreases with every iteration, and thus prove the termination of the loop.",
                    "We start by analyzing the program and identifying the constraints and properties of the involved variables:\n\n1. The loop condition is `tmp != id && unknown_int()`. Since `unknown_int()` can return any value, it does not impose any constraint on the loop condition. Therefore, the loop will continue as long as `tmp != id`.\n2. The loop body updates the value of `tmp` in a conditional manner. If `tmp <= maxId`, it increments `tmp` by 1, otherwise, it resets `tmp` to 0.\n3. The given ranking function is `(maxId - tmp, tmp)`. To prove termination, we need to show that this ranking function decreases with each iteration of the loop.\n\nNow, we will output the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= id && id < maxId;\n    loop invariant 0 <= tmp <= maxId + 1;\n    loop invariant (tmp <= maxId) ==> (tmp == \\at(tmp, LoopEntry) + 1);\n    loop invariant (tmp > maxId) ==> (tmp == 0);\n*/\n```"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant 0 <= id < maxId;\n    loop invariant 0 <= tmp <= maxId + 1;\n    loop invariant id < tmp ==> tmp <= maxId;\n    loop invariant id < tmp ==> tmp == \\at(tmp, LoopEntry) + 1;\n    loop invariant tmp <= id ==> tmp == 0;\n*/",
                    "/*@ \n    loop invariant 0 <= id && id < maxId;\n    loop invariant 0 <= tmp && tmp <= maxId + 1;\n    loop invariant id < tmp ==> tmp <= maxId;\n*/",
                    "/*@ \n    loop invariant 0 <= id && id < maxId;\n    loop invariant maxId > 0;\n    loop invariant id + 1 <= tmp && tmp <= maxId + 1;\n    loop invariant 0 <= maxId - tmp && maxId - tmp <= maxId - id;\n    loop invariant maxId - tmp <= \\at(maxId - tmp, LoopEntry) || (maxId - tmp == \\at(maxId - tmp, LoopEntry) && tmp < \\at(tmp, LoopEntry));\n*/",
                    "/*@ \n    loop invariant 0 <= tmp <= maxId;\n    loop invariant 0 <= id < maxId;\n    loop invariant tmp == \\at(tmp, LoopEntry) + 1 || tmp == 0;\n*/",
                    "/*@ \n    loop invariant 0 <= id && id < maxId;\n    loop invariant 0 <= tmp <= maxId + 1;\n    loop invariant (tmp <= maxId) ==> (tmp == \\at(tmp, LoopEntry) + 1);\n    loop invariant (tmp > maxId) ==> (tmp == 0);\n*/"
                ],
                "inductive_invariants": "loop invariant i1: 0 <= id < maxId;\nloop invariant i6: 0 <= id && id < maxId;\nloop invariant i7: 0 <= tmp && tmp <= maxId + 1;\nloop invariant i10: maxId > 0;",
                "final_checker_input": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int id = unknown_int();\n    int maxId = unknown_int();\n\n    if(0 <= id && id < maxId) {\n        int tmp = id+1;\n        //@ ghost variant_expression measure = { maxId - tmp, tmp };\n/*@\nloop invariant i1: 0 <= id < maxId;\nloop invariant i6: 0 <= id && id < maxId;\nloop invariant i7: 0 <= tmp && tmp <= maxId + 1;\nloop invariant i10: maxId > 0;\nloop invariant measure.a == maxId - tmp && measure.b == tmp;\nloop variant measure for lexicographic;\n*/\nwhile(tmp!=id && unknown_int()) {\n            if (tmp <= maxId) {\n                tmp = tmp + 1;\n            } else {\n                tmp = 0;\n            }\n        \n//@ ghost measure.a = maxId - tmp;\n//@ ghost measure.b = tmp;\n}\n    }\n\n    return 0;\n}\n",
                "checker_message": "loop invariant 0 <= id < maxId is inductive.\nloop invariant 0 <= id && id < maxId is inductive.\nloop invariant 0 <= tmp && tmp <= maxId + 1 is inductive.\nloop invariant maxId > 0 is inductive.\n\nLoop variant is Invalid.\n",
                "success": false
            },
            {
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. Lexicographic ranking functions are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int id = unknown_int();\n    int maxId = unknown_int();\n\n    if(0 <= id && id < maxId) {\n        int tmp = id+1;\n        while(tmp!=id && unknown_int()) {\n            if (tmp <= maxId) {\n                tmp = tmp + 1;\n            } else {\n                tmp = 0;\n            }\n        }\n    }\n\n    return 0;\n}\n\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(maxId - tmp)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, let's make note of the constraints and initial values for the variables that are live at the loop head:\n- 0 <= id < maxId\n- tmp = id + 1\n\nNow, let's analyze the loop condition and loop body:\n- Loop condition: tmp != id && unknown_int()\n- Loop body:\n  - If tmp <= maxId, tmp = tmp + 1\n  - Else, tmp = 0\n\nGiven the loop variant (maxId - tmp), let's find the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= id && id < maxId;\n    loop invariant 0 <= tmp && tmp <= maxId + 1;\n    loop invariant tmp == id + 1 ==> \\at(tmp, LoopEntry) > tmp;\n    loop invariant tmp != id + 1 ==> \\at(tmp, LoopEntry) == tmp;\n*/\n```\n\nThe loop invariants imply that the ranking function decreases with every iteration, proving the termination of the loop.",
                    "First, let's analyze the loop condition and the given ranking function. The loop condition is `(tmp != id && unknown_int())`, and the ranking function is `(maxId - tmp)`.\n\nNow, let's output the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= tmp && tmp <= maxId + 1;\n    loop invariant 0 <= id && id < maxId;\n    loop invariant tmp == id + 1 ==> !unknown_int();\n    loop invariant tmp != id + 1 ==> unknown_int();\n*/\n```",
                    "First, let's analyze the given program and identify the important constraints and variables.\n\n1. The loop condition is `tmp != id && unknown_int()`. Since `unknown_int()` can be any value, we can't make any assumptions about it. Therefore, we focus on the `tmp != id` part of the condition.\n2. The loop body has a conditional statement:\n   - If `tmp <= maxId`, then `tmp = tmp + 1`.\n   - Else, `tmp = 0`.\n3. The loop variant is `maxId - tmp`.\n\nNow, let's derive the loop invariants:\n\n- Before the loop execution:\n  - `0 <= id < maxId`\n  - `tmp = id + 1`\n\n- In every iteration of the loop:\n  - `0 <= tmp <= maxId + 1`\n  - `0 <= id < maxId`\n  - `tmp != id`\n\n- After the loop termination:\n  - `tmp == id`\n\nConsidering the constraints and variables identified, the loop invariants are:\n\n```\n/*@ \n    loop invariant 0 <= tmp <= maxId + 1;\n    loop invariant 0 <= id < maxId;\n    loop invariant tmp != id;\n*/\n```\n\nThese loop invariants imply that the loop variant `(maxId - tmp)` decreases with every iteration, proving the termination of the loop.",
                    "First, let's analyze the program and make note of the constraints:\n\n1. At the beginning of the program, `id` and `maxId` are assigned unknown integer values.\n2. There is a conditional check: if `0 <= id && id < maxId`, then the loop will be executed.\n3. Inside the loop, there is another conditional check: if `tmp <= maxId`, then `tmp` will be incremented by 1; otherwise, it will be set to 0.\n4. The loop continues while `tmp != id` and `unknown_int()` returns a non-zero value.\n\nNow, let's output the loop invariants based on the given loop variant `(maxId - tmp)`:\n\n```\n/*@ \n    loop invariant 0 <= id;\n    loop invariant id < maxId;\n    loop invariant 0 <= tmp;\n    loop invariant tmp <= maxId + 1;\n    loop invariant (tmp <= maxId) ==> (tmp == \\at(tmp, LoopEntry) + 1);\n    loop invariant (tmp > maxId) ==> (tmp == 0);\n*/\n```",
                    "First, we note the starting values and constraints for the variables live at the loop head:\n- id: 0 <= id < maxId\n- maxId: no specific constraint given\n- tmp: tmp = id + 1\n\nNext, we analyze the loop body, condition, and the given ranking function:\n- Loop condition: tmp != id && unknown_int()\n- Loop body:\n  - if (tmp <= maxId) { tmp = tmp + 1; }\n  - else { tmp = 0; }\n- Ranking function: (maxId - tmp)\n\nNow, we can output the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= id < maxId;\n    loop invariant 0 <= tmp <= maxId + 1;\n    loop invariant id <= tmp <= id + maxId + 1;\n    loop invariant (tmp <= maxId) ==> (maxId - tmp >= 0);\n    loop invariant (tmp > maxId) ==> (maxId - tmp < 0);\n*/\n```"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant 0 <= id && id < maxId;\n    loop invariant 0 <= tmp && tmp <= maxId + 1;\n    loop invariant tmp == id + 1 ==> \\at(tmp, LoopEntry) > tmp;\n    loop invariant tmp != id + 1 ==> \\at(tmp, LoopEntry) == tmp;\n*/",
                    "/*@ \n    loop invariant 0 <= tmp && tmp <= maxId + 1;\n    loop invariant 0 <= id && id < maxId;\n    loop invariant tmp == id + 1 ==> !unknown_int();\n    loop invariant tmp != id + 1 ==> unknown_int();\n*/",
                    "/*@ \n    loop invariant 0 <= tmp <= maxId + 1;\n    loop invariant 0 <= id < maxId;\n    loop invariant tmp != id;\n*/",
                    "/*@ \n    loop invariant 0 <= id;\n    loop invariant id < maxId;\n    loop invariant 0 <= tmp;\n    loop invariant tmp <= maxId + 1;\n    loop invariant (tmp <= maxId) ==> (tmp == \\at(tmp, LoopEntry) + 1);\n    loop invariant (tmp > maxId) ==> (tmp == 0);\n*/",
                    "/*@ \n    loop invariant 0 <= id < maxId;\n    loop invariant 0 <= tmp <= maxId + 1;\n    loop invariant id <= tmp <= id + maxId + 1;\n    loop invariant (tmp <= maxId) ==> (maxId - tmp >= 0);\n    loop invariant (tmp > maxId) ==> (maxId - tmp < 0);\n*/"
                ],
                "inductive_invariants": "loop invariant i1: 0 <= id && id < maxId;\nloop invariant i2: 0 <= tmp && tmp <= maxId + 1;\nloop invariant i9: 0 <= tmp <= maxId + 1;\nloop invariant i10: 0 <= id < maxId;\nloop invariant i12: 0 <= id;\nloop invariant i13: id < maxId;\nloop invariant i14: 0 <= tmp;\nloop invariant i15: tmp <= maxId + 1;\nloop invariant i21: (tmp <= maxId) ==> (maxId - tmp >= 0);\nloop invariant i22: (tmp > maxId) ==> (maxId - tmp < 0);",
                "final_checker_input": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int id = unknown_int();\n    int maxId = unknown_int();\n\n    if(0 <= id && id < maxId) {\n        int tmp = id+1;\n        /*@\nloop invariant i1: 0 <= id && id < maxId;\nloop invariant i2: 0 <= tmp && tmp <= maxId + 1;\nloop invariant i9: 0 <= tmp <= maxId + 1;\nloop invariant i10: 0 <= id < maxId;\nloop invariant i12: 0 <= id;\nloop invariant i13: id < maxId;\nloop invariant i14: 0 <= tmp;\nloop invariant i15: tmp <= maxId + 1;\nloop invariant i21: (tmp <= maxId) ==> (maxId - tmp >= 0);\nloop invariant i22: (tmp > maxId) ==> (maxId - tmp < 0);\nloop variant maxId - tmp;\n*/\nwhile(tmp!=id && unknown_int()) {\n            if (tmp <= maxId) {\n                tmp = tmp + 1;\n            } else {\n                tmp = 0;\n            }\n        }\n    }\n\n    return 0;\n}\n",
                "checker_message": "loop invariant 0 <= id && id < maxId is inductive.\nloop invariant 0 <= tmp && tmp <= maxId + 1 is inductive.\nloop invariant 0 <= tmp <= maxId + 1 is inductive.\nloop invariant 0 <= id < maxId is inductive.\nloop invariant 0 <= id is inductive.\nloop invariant id < maxId is inductive.\nloop invariant 0 <= tmp is inductive.\nloop invariant tmp <= maxId + 1 is inductive.\nloop invariant (tmp <= maxId) ==> (maxId - tmp >= 0) is inductive.\nloop invariant (tmp > maxId) ==> (maxId - tmp < 0) is inductive.\n\nLoop variant is Invalid.\n",
                "success": false
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB6.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Mysore_true-termination.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusMin.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.09-no-inv_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Copenhagen_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_easySum.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA6.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Gothenburg_v2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.08.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.03.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB11.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1c_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.04.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.02.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_AG313.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.01.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/easy2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA5.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.10.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.06.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.10.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Waldkirch_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DivMinus.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB3.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Cairo_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3a.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.09_assume.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Thun_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_flag.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/McCarthy91_Iteration_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NO_24.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Copenhagen_disj_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Bangalore_v4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ComplInterv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChooseLife.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.21_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Singapore_true-termination.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/McCarthyIterative.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MirrorInterv.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c"
        ],
        "skipped": [
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c"
        ],
        "total": 275,
        "success_count": 147,
        "failure_count": 128,
        "success_rate": 0.5345454545454545
    }
}