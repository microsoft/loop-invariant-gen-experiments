{
    "logs": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n    x = unknown_int();\n    y = unknown_int();\n    if (x > 0) {\n        while (x > y) {\n            y = y + x;\n        }\n    }\n    return 0;\n}",
        "success": true,
        "variants": [
            [
                "x - y"
            ],
            [
                "y - x"
            ]
        ],
        "variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n- If the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. \n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n    x = unknown_int();\n    y = unknown_int();\n    if (x > 0) {\n        while (x > y) {\n            y = y + x;\n        }\n    }\n    return 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function (or the sequence of expressions) is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "1. Make note of the starting values or constraints for the variables that are live at the loop head.\n\n- x > 0 (from the if condition)\n- y can be any integer (from the unknown_int() function)\n\n2. Analyze the loop body and find a ranking function involving the variables in the loop body.\n\n- The loop condition is (x > y), so the loop will execute as long as x is greater than y.\n- Inside the loop, y is updated as y = y + x. This means y will increase with every iteration of the loop.\n- Since x is a positive integer and does not change inside the loop, y will always increase by a positive value.\n\n3. Output the ranking function.\n\nBased on the information above, we can use the ranking function (x - y) for this loop. It decreases with every successive iteration of the loop, and it is positive while the loop is executing. Here is the ACSL syntax for the ranking function:\n\n```\n/*@\n    loop variant x - y;\n*/\n```",
            "First, let's list the starting values or constraints for the variables that are live at the loop head:\n- x > 0\n- x and y are unknown integers\n\nNow, let's analyze the loop body:\n```\nwhile (x > y) {\n    y = y + x;\n}\n```\n\nWe can see that `x` remains constant throughout the loop, and `y` increases by `x` in each iteration. Since the loop condition is `x > y`, we need a ranking function that decreases with every iteration of the loop and remains positive while the loop is executing.\n\nA suitable ranking function for this loop would be `x - y`. This is because:\n\n1. It is positive while the loop is executing, as the loop condition is `x > y`.\n2. It decreases with every iteration of the loop because `y` is incremented by `x`, which makes `x - y` smaller in each iteration.\n\nNow, let's output the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x - y;\n*/\n```",
            "1. At the loop head, the live variables are `x` and `y`. The loop condition is `x > y`.\n2. In the loop body, `y` is updated with the expression `y = y + x`. `x` remains the same in each iteration.\n\nNow let's find the ranking function:\n\nSince `y` is being updated in the loop, it is the main variable that will help us find the ranking function. The loop condition is `x > y`, which means that as long as `x` is greater than `y`, the loop will keep executing. With each iteration, `y` is increased by `x`, which is a positive value.\n\nThe ranking function for this loop is `x - y`. This is because:\n\n1. The value of the ranking function is positive while the loop is executing, i.e., `x - y > 0`.\n2. With each iteration of the loop, the value of `y` increases by `x`, and `x` remains the same. Therefore, the value of the ranking function `x - y` decreases.\n\nSo, the valid ranking function for the loop is:\n\n```\n/*@\n    loop variant x - y;\n*/\n```",
            "First, let's make a note of the starting values or constraints for the variables that are live at the loop head:\n- x > 0\n- y can be any integer value\n\nNow, let's analyze the loop body:\n- The loop condition is x > y\n- In each iteration, y increases by x (y = y + x)\n\nNow, let's find a ranking function involving the variables in the loop body:\n\nAs y increases by x in each iteration and x remains constant, we can use the difference between x and y as our ranking function. The ranking function should be decreasing, so we use y - x instead of x - y.\n\nThe ranking function is: y - x\n\nNow, let's check if this ranking function is valid:\n1. The value of the ranking function must be positive for the loop to continue executing:\n   - The loop condition is x > y, so y - x < 0, which means the value of the ranking function is negative when the loop is executing.\n2. The value of the ranking function must decrease with every successive iteration of the loop:\n   - In each iteration, y increases by x, so the value of y - x decreases with every successive iteration.\n\nSince the ranking function meets the above criteria, it is valid. Here's the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant y - x;\n*/\n```",
            "1. The loop head is `while (x > y)`, so the variables live at the loop head are `x` and `y`.\n2. The loop body is `y = y + x`, which means `y` is increasing with each iteration of the loop.\n3. Since `x > y` is the loop condition, we know that `x` is positive for the loop to execute.\n4. We also know that `y` is increasing with each iteration, so the difference `(x - y)` is decreasing.\n\nNow let's find the ranking function.\n\nA valid ranking function for the loop is `(x - y)`.\n\nHere's the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x - y;\n*/\n```\n\nThis ranking function is valid because:\n- It evaluates to a positive value when the loop is executing, as `x > y` is the loop condition.\n- It decreases with every iteration of the loop, as `y` increases with each iteration due to `y = y + x`."
        ],
        "variant_log": [
            {
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. Lexicographic ranking functions are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n    x = unknown_int();\n    y = unknown_int();\n    if (x > 0) {\n        while (x > y) {\n            y = y + x;\n        }\n    }\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(x - y)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, let's analyze the given program:\n\n- At the loop head, the variables x and y are live.\n- The loop condition is (x > y).\n- The loop body updates y by adding x to it (y = y + x).\n- The given ranking function is (x - y).\n\nNow, let's find the loop invariants:\n\ni1: x is always positive throughout the loop.\ni2: y is always non-negative throughout the loop.\ni3: y is always less than or equal to the sum of x and y at the loop entry.\n\nHere are the loop invariants in the required format:\n\n```\n/*@ \n    loop invariant x > 0;\n    loop invariant y >= 0;\n    loop invariant y <= y + \\at(x, LoopEntry);\n*/\n```\n\nThese loop invariants support the validity of the ranking function (x - y) and prove the termination of the loop.",
                    "First, let's note the starting values or constraints for the variables that are live at the loop head:\n\n- x is assigned an unknown integer value.\n- y is assigned an unknown integer value.\n\nNow, let's analyze the loop condition and the given ranking function:\n\n- Loop condition: x > y\n- Ranking function: (x - y)\n\nWe need to find loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration.\n\nHere are the loop invariants for the given program:\n\n```\n/*@ \n    loop invariant x >= \\at(x, LoopEntry);\n    loop invariant y >= \\at(y, LoopEntry);\n    loop invariant x >= y;\n*/\n```\n\nExplanation:\n\n1. `x >= \\at(x, LoopEntry)`: The value of x will never decrease during the loop execution, as x is not modified inside the loop.\n2. `y >= \\at(y, LoopEntry)`: The value of y will never decrease during the loop execution, as y is only incremented by x inside the loop, and x is always positive.\n3. `x >= y`: This invariant is always true because the loop condition ensures that x is greater than y during the loop execution. After the loop termination, x will be less than or equal to y.",
                    "First, we note the starting values or constraints for the variables that are live at the loop head:\n- x and y are both initialized with unknown integer values.\n- The loop only executes if x > 0.\n\nNext, we analyze the loop body, loop condition, and the given ranking function:\n- Loop condition: x > y\n- Loop body: y = y + x\n- Ranking function: (x - y)\n\nNow, we can output the loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant x >= \\at(x, LoopEntry);\n    loop invariant y >= \\at(y, LoopEntry);\n    loop invariant (x <= 0) ==> (x == \\at(x, LoopEntry));\n    loop invariant (x <= 0) ==> (y == \\at(y, LoopEntry));\n*/\n```",
                    "First, let's make a note of the starting values or constraints for the variables that are live at the loop head. We have:\n\n1. x is a non-negative integer, because x > 0 for the loop to execute.\n2. y can be any integer value.\n\nNow, let's analyze the loop body and make a note of the loop condition and the given ranking function:\n\n1. Loop condition: x > y\n2. Ranking function: (x - y)\n\nNext, we will output the loop invariants that are true:\n\n(i) before the loop execution,\n(ii) in every iteration of the loop, and\n(iii) after the loop termination,\n\nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant x >= y;\n    loop invariant \\at(y, LoopEntry) <= y;\n*/\n```",
                    "First, let's make note of the starting values or constraints for the variables that are live at the loop head:\n- x is initialized to an unknown integer value.\n- y is initialized to an unknown integer value.\n- The loop executes only when x > 0.\n\nNow, let's analyze the loop body and make a note of the loop condition and the given ranking function:\n- Loop condition: x > y\n- Loop body: y = y + x\n- Ranking function: (x - y)\n\nNow, let's output loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration:\n\n```\n/*@ \n    loop invariant x > 0 ==> x > \\at(y, LoopEntry);\n    loop invariant x > 0 ==> \\at(y, LoopEntry) >= 0;\n    loop invariant x > 0 ==> y >= \\at(y, LoopEntry) + x * (\\at(x, LoopEntry) - \\at(y, LoopEntry));\n*/\n```"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant x > 0;\n    loop invariant y >= 0;\n    loop invariant y <= y + \\at(x, LoopEntry);\n*/",
                    "/*@ \n    loop invariant x >= \\at(x, LoopEntry);\n    loop invariant y >= \\at(y, LoopEntry);\n    loop invariant x >= y;\n*/",
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant x >= \\at(x, LoopEntry);\n    loop invariant y >= \\at(y, LoopEntry);\n    loop invariant (x <= 0) ==> (x == \\at(x, LoopEntry));\n    loop invariant (x <= 0) ==> (y == \\at(y, LoopEntry));\n*/",
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant x >= y;\n    loop invariant \\at(y, LoopEntry) <= y;\n*/",
                    "/*@ \n    loop invariant x > 0 ==> x > \\at(y, LoopEntry);\n    loop invariant x > 0 ==> \\at(y, LoopEntry) >= 0;\n    loop invariant x > 0 ==> y >= \\at(y, LoopEntry) + x * (\\at(x, LoopEntry) - \\at(y, LoopEntry));\n*/"
                ],
                "inductive_invariants": "loop invariant i1: x > 0;\nloop invariant i3: y <= y + \\at(x, LoopEntry);\nloop invariant i4: x >= \\at(x, LoopEntry);\nloop invariant i5: y >= \\at(y, LoopEntry);\nloop invariant i7: x >= 0;\nloop invariant i10: (x <= 0) ==> (x == \\at(x, LoopEntry));\nloop invariant i11: (x <= 0) ==> (y == \\at(y, LoopEntry));\nloop invariant i14: \\at(y, LoopEntry) <= y;",
                "final_checker_input": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n    x = unknown_int();\n    y = unknown_int();\n    if (x > 0) {\n        /*@\nloop invariant i1: x > 0;\nloop invariant i3: y <= y + \\at(x, LoopEntry);\nloop invariant i4: x >= \\at(x, LoopEntry);\nloop invariant i5: y >= \\at(y, LoopEntry);\nloop invariant i7: x >= 0;\nloop invariant i10: (x <= 0) ==> (x == \\at(x, LoopEntry));\nloop invariant i11: (x <= 0) ==> (y == \\at(y, LoopEntry));\nloop invariant i14: \\at(y, LoopEntry) <= y;\nloop variant x - y;\n*/\nwhile (x > y) {\n            y = y + x;\n        }\n    }\n    return 0;\n}",
                "checker_message": "loop invariant x > 0 is inductive.\nloop invariant y <= y + \\at(x, LoopEntry) is inductive.\nloop invariant x >= \\at(x, LoopEntry) is inductive.\nloop invariant y >= \\at(y, LoopEntry) is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant (x <= 0) ==> (x == \\at(x, LoopEntry)) is inductive.\nloop invariant (x <= 0) ==> (y == \\at(y, LoopEntry)) is inductive.\nloop invariant \\at(y, LoopEntry) <= y is inductive.\n\nLoop variant is Valid.\n",
                "success": true
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c"
        ],
        "skipped": [],
        "total": 105,
        "success_count": 55,
        "failure_count": 50,
        "success_rate": 0.5238095238095238
    }
}