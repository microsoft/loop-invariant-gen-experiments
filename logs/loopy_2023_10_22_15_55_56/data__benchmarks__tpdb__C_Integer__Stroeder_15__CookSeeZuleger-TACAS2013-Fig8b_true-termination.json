{
    "logs": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, M;\n\tx = unknown_int();\n\tM = unknown_int();\n\tif (M > 0) {\n\t\twhile (x != M) {\n\t\t\tif (x > M) {\n\t\t\t\tx = 0;\n\t\t\t} else {\n\t\t\t\tx = x + 1;\n            }\n\t\t}\n\t}\n\treturn 0;\n}",
        "success": false,
        "variants": [
            [
                "M - x"
            ]
        ],
        "variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n- If the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. \n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, M;\n\tx = unknown_int();\n\tM = unknown_int();\n\tif (M > 0) {\n\t\twhile (x != M) {\n\t\t\tif (x > M) {\n\t\t\t\tx = 0;\n\t\t\t} else {\n\t\t\t\tx = x + 1;\n            }\n\t\t}\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function (or the sequence of expressions) is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "First, let's make note of the starting values or constraints for the variables that are live at the loop head.\n\n- x is assigned an unknown integer value.\n- M is assigned an unknown integer value and is constrained to be greater than 0.\n\nNow, let's analyze the loop body and find a ranking function involving the variables in the loop body.\n\nLoop condition: x != M\n\nLoop body:\n1. If x > M, x is set to 0.\n2. If x <= M, x is incremented by 1.\n\nNotice that x can never be less than 0 in the loop, and its value is bounded above by M. Therefore, we can use the difference between M and x as a ranking function.\n\nNow, let's output the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant M - x;\n*/\n```\n\nThis ranking function is valid because:\n- The value of the expression (M - x) is always positive while the loop is executing since 0 <= x < M.\n- The value of the expression (M - x) decreases with every iteration of the loop, either by x being set to 0 (when x > M) or by x being incremented by 1 (when x <= M).",
            "First, let's make note of the starting values or constraints for the variables that are live at the loop head.\n\nx and M are initialized with unknown_int(), which means their values can be any integer. However, the loop executes only when M > 0. So, we have the following constraints:\n- M > 0\n\nNow, let's analyze the loop body to find a ranking function involving the variables in the loop body:\n\n```\nwhile (x != M) {\n    if (x > M) {\n        x = 0;\n    } else {\n        x = x + 1;\n    }\n}\n```\n\nWe can see that the loop continues as long as x is not equal to M. Inside the loop, x either resets to 0 or increments by 1. We need to find an expression that decreases with every iteration and is positive when the loop is executing.\n\nA suitable ranking function for this loop can be `M - x`. Let's examine why this is a valid ranking function.\n\n- M - x is positive when the loop is executing: Since x != M, and x can only be between 0 and M (due to loop conditions), M - x will always be positive.\n- M - x decreases with every iteration: If x > M, x is reset to 0, which makes M - x increase, but the loop condition is now false (x == M). If x < M, x is incremented by 1, which makes M - x decrease by 1.\n\nSo, the ranking function is:\n\n```\n/*@\n    loop variant M - x;\n*/\n```\n\nThis ranking function is valid because it meets the conditions of being positive when the loop is executing and decreasing with every iteration.",
            "1. Make note of the starting values or constraints for the variables that are live at the loop head.\n- x and M are live at the loop head.\n- M > 0\n- x and M are unknown integers.\n\n2. Analyze the loop body and find a ranking function involving the variables in the loop body.\n- The loop continues until x == M.\n- If x > M, then x = 0.\n- If x <= M, then x = x + 1.\n\nNow, let's find the ranking function.\n\nRanking function:\nM - x\n\nThe ranking function is valid because:\n\n1. The value of the expression (M - x) is positive when the loop is executing:\n   - Since the loop continues until x == M, it implies that x != M when the loop is executing.\n   - If x > M, then x is reset to 0, and (M - x) is positive because M > 0.\n   - If x <= M, then (M - x) is positive because x != M.\n\n2. The value of the expression (M - x) decreases with every iteration of the loop:\n   - If x > M, then x is reset to 0, and (M - x) increases, but this can happen only once in the loop execution, as after this, x will always be <= M and will keep increasing till x == M.\n   - If x <= M, then x is incremented by 1 in every iteration, and (M - x) decreases by 1 in every iteration.\n\nOutput the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant M - x;\n*/\n```",
            "1. The variables that are live at the loop head are `x` and `M`.\n2. The loop condition is `x != M`.\n3. The loop body either sets `x` to `0` or increments it by `1`.\n\nNow let's find a ranking function involving the variables in the loop body.\n\nThe loop continues executing as long as `x != M`. Since `M > 0`, we can use the difference `M - x` as a ranking function. When `x > M`, `x` is set to `0`, and when `x < M`, `x` is incremented by `1`. In both cases, the value of `M - x` will decrease and remain positive.\n\nHere's the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant M - x;\n*/\n```",
            "1. Starting values or constraints for the variables live at the loop head:\n- x is assigned an unknown integer value.\n- M is assigned an unknown integer value.\n- The loop executes when M > 0.\n\n2. Analyzing the loop body:\n- If x > M, x is set to 0.\n- If x <= M, x is incremented by 1.\n- The loop continues until x == M.\n\n3. Finding a ranking function:\n- The value of x will always be between 0 and M, inclusive.\n- The value of x either increases or is reset to 0 in each iteration.\n- The loop terminates when x reaches the value of M.\n\nBased on these observations, we can define a ranking function as `M - x`:\n\n```\n/*@\n    loop variant M - x;\n*/\n```\n\nThis ranking function is valid because:\n- It is positive while the loop is executing, as x is always less than M.\n- It decreases with every iteration of the loop, either when x is incremented or reset to 0.\n- It reaches 0 when the loop terminates, as x becomes equal to M."
        ],
        "variant_log": [
            {
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. Lexicographic ranking functions are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, M;\n\tx = unknown_int();\n\tM = unknown_int();\n\tif (M > 0) {\n\t\twhile (x != M) {\n\t\t\tif (x > M) {\n\t\t\t\tx = 0;\n\t\t\t} else {\n\t\t\t\tx = x + 1;\n            }\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(M - x)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, let's make a note of the starting values or constraints for the variables that are live at the loop head:\n- x is an integer and its initial value is unknown.\n- M is an integer and its initial value is unknown.\n- Loop condition is x != M.\n\nNow, let's analyze the loop body:\n- If x > M, then x is set to 0.\n- If x <= M, then x is incremented by 1.\n\nGiven the loop variant (M - x), let's output loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination:\n\n```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= M;\n    loop invariant x <= M + 1;\n*/\n```",
                    "First, let's note the starting values and constraints for the variables that are live at the loop head:\n- x is assigned an unknown integer value.\n- M is assigned an unknown integer value.\n\nNext, let's analyze the loop body and the given ranking function:\n- Loop condition: x != M\n- Ranking function: (M - x)\n\nNow, let's output the loop invariants that support the validity of the ranking function and prove the termination of the loop:\n\n```\n/*@ \n    loop invariant 0 <= x && x <= M;\n    loop invariant M >= 0;\n    loop invariant \\at(x, LoopEntry) <= M;\n*/\n```\n\nThese loop invariants ensure that the value of x is always between 0 and M and that M is non-negative. Additionally, they indicate that the initial value of x is less than or equal to M. Since the ranking function (M - x) decreases with every iteration, the loop will eventually terminate.",
                    "First, let's note the starting values or constraints for the variables that are live at the loop head:\n- x is an integer initialized by the unknown_int() function.\n- M is an integer initialized by the unknown_int() function and is greater than 0.\n\nNow, let's analyze the loop body, loop condition, and the given ranking function:\n- Loop condition: x != M\n- Loop body: If x > M, x is set to 0. Otherwise, x is incremented by 1.\n- Given ranking function: (M - x)\n\nLet's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration.\n\n```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 < M;\n    loop invariant \\at(x, LoopEntry) <= M;\n    loop invariant x <= M;\n*/\n```",
                    "First, let's make note of the starting values or constraints for the variables that are live at the loop head:\n\n- x is initialized to an unknown integer value.\n- M is initialized to an unknown integer value.\n- The loop only executes if M > 0.\n\nNext, analyze the loop body and make a note of the loop condition and the given ranking function:\n\n- Loop condition: x != M.\n- Ranking function: (M - x).\n\nNow, let's output loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination:\n\n```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= M;\n    loop invariant M <= INT_MAX;\n    loop invariant x <= M;\n    loop invariant (x > \\at(x, LoopEntry)) ==> (x == 0);\n    loop invariant (x <= \\at(x, LoopEntry)) ==> (x == \\at(x, LoopEntry) + 1);\n*/\n```\n\nThese loop invariants imply that the ranking function (M - x) decreases with every iteration, and thus prove the termination of the loop.",
                    "First, let's analyze the initial values and constraints of the variables at the loop head:\n- `x` and `M` are initialized to unknown integer values.\n- The loop only executes when `M > 0`.\n\nNow, let's note the loop condition and the given ranking function:\n- Loop condition: `x != M`.\n- Ranking function: `M - x`.\n\nFinally, let's find loop invariants that support the validity of the ranking function and prove the termination of the loop:\n\n```\n/*@ \n    loop invariant 0 <= x <= M;\n    loop invariant M > 0;\n    loop invariant \\at(x, LoopEntry) <= M;\n    loop invariant x != M ==> x < M;\n*/\n```"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= M;\n    loop invariant x <= M + 1;\n*/",
                    "/*@ \n    loop invariant 0 <= x && x <= M;\n    loop invariant M >= 0;\n    loop invariant \\at(x, LoopEntry) <= M;\n*/",
                    "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 < M;\n    loop invariant \\at(x, LoopEntry) <= M;\n    loop invariant x <= M;\n*/",
                    "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= M;\n    loop invariant M <= INT_MAX;\n    loop invariant x <= M;\n    loop invariant (x > \\at(x, LoopEntry)) ==> (x == 0);\n    loop invariant (x <= \\at(x, LoopEntry)) ==> (x == \\at(x, LoopEntry) + 1);\n*/",
                    "/*@ \n    loop invariant 0 <= x <= M;\n    loop invariant M > 0;\n    loop invariant \\at(x, LoopEntry) <= M;\n    loop invariant x != M ==> x < M;\n*/"
                ],
                "inductive_invariants": "loop invariant i2: 0 <= M;\nloop invariant i5: M >= 0;\nloop invariant i8: 0 < M;\nloop invariant i18: M > 0;",
                "final_checker_input": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, M;\n\tx = unknown_int();\n\tM = unknown_int();\n\tif (M > 0) {\n\t\t/*@\nloop invariant i2: 0 <= M;\nloop invariant i5: M >= 0;\nloop invariant i8: 0 < M;\nloop invariant i18: M > 0;\nloop variant M - x;\n*/\nwhile (x != M) {\n\t\t\tif (x > M) {\n\t\t\t\tx = 0;\n\t\t\t} else {\n\t\t\t\tx = x + 1;\n            }\n\t\t}\n\t}\n\treturn 0;\n}",
                "checker_message": "loop invariant 0 <= M is inductive.\nloop invariant M >= 0 is inductive.\nloop invariant 0 < M is inductive.\nloop invariant M > 0 is inductive.\n\nLoop variant is Invalid.\n",
                "success": false
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c"
        ],
        "skipped": [],
        "total": 82,
        "success_count": 40,
        "failure_count": 42,
        "success_rate": 0.4878048780487805
    }
}