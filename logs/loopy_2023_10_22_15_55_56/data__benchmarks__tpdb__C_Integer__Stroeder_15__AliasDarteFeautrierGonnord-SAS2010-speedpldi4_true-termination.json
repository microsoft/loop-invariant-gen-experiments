{
    "logs": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, m, n;\n\tn = unknown_int();\n\tm = unknown_int();\n\tif (m > 0 && n > m) {\n\t\ti = n;\n\t\twhile (i > 0) {\n\t\t\tif (i < m) {\n\t\t\t\ti = i - 1;\n\t\t\t} else {\n\t\t\t\ti = i - m;\n            }\n\t\t}\n\t}\n\treturn 0;\n}",
        "success": true,
        "variants": [
            [
                "i"
            ]
        ],
        "variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n- If the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. \n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, m, n;\n\tn = unknown_int();\n\tm = unknown_int();\n\tif (m > 0 && n > m) {\n\t\ti = n;\n\t\twhile (i > 0) {\n\t\t\tif (i < m) {\n\t\t\t\ti = i - 1;\n\t\t\t} else {\n\t\t\t\ti = i - m;\n            }\n\t\t}\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function (or the sequence of expressions) is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "First, let's note the starting values or constraints for the variables that are live at the loop head:\n- i starts at n (i = n)\n- m > 0\n- n > m\n\nNow, let's analyze the loop body:\n\n```\nwhile (i > 0) {\n    if (i < m) {\n        i = i - 1;\n    } else {\n        i = i - m;\n    }\n}\n```\n\nWe can see that the loop continues while i is positive (i > 0). In the loop body, i is either decreased by 1 or by m. Since m > 0, i is always decreasing.\n\nNow, let's find the ranking function for this loop:\n\nWe can use the value of i as the ranking function, because it is always positive and decreasing with each iteration.\n\nSo, the ranking function is:\n\n```\n/*@\n    loop variant i;\n*/\n```\n\nThis ranking function is valid because the value of i is positive during the execution of the loop, and it decreases with every iteration (either by 1 or by m), ensuring that the loop terminates.",
            "First, we need to make note of the starting values or constraints for the variables that are live at the loop head.\n\n- `i` is assigned the value of `n` before the loop starts.\n- `m` and `n` are unknown but we know that `m > 0` and `n > m`.\n\nNext, we analyze the loop body and find a ranking function involving the variables in the loop body. The loop body has two branches:\n\n1. If `i < m`, then `i = i - 1`.\n2. Otherwise, `i = i - m`.\n\nNow, we can find the ranking function for the loop:\n\nSince the value of `i` is always decreasing (either by 1 or by `m`), we can use `i` as the ranking function. \n\nThe ranking function in ACSL syntax would be:\n\n```\n/*@\n    loop variant i;\n*/\n```\n\nThis is a valid ranking function because the value of `i` is always positive when the loop is executing (due to the loop condition `i > 0`) and it decreases with every iteration (by either 1 or `m`).",
            "1. Starting values or constraints for the variables that are live at the loop head:\n    - m > 0\n    - n > m\n    - i = n\n\n2. Analyzing the loop body:\n    - In each iteration, the value of i is either decremented by 1 or by m.\n    - If i < m, i = i - 1, so i decreases by 1.\n    - If i >= m, i = i - m, so i decreases by m.\n\n3. Finding a ranking function:\n    - Since i is always decreasing and the loop continues as long as i > 0, the ranking function can be i itself.\n\nHere's the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant i;\n*/\n```",
            "First, we make note of the starting values or constraints for the variables that are live at the loop head:\n\n- n is a positive integer and greater than m.\n- m is a positive integer.\n- i initially takes the value of n.\n\nNow, let's analyze the loop body:\n\n- If i < m, then i is decreased by 1.\n- If i >= m, then i is decreased by m.\n\nWe can observe that the value of i is always decreasing, either by 1 or by m.\n\nNow, let's find a ranking function for this loop:\n\nA suitable ranking function can be the variable i itself, as it is always decreasing and positive while the loop is executing. So, the ranking function is:\n\n```\n/*@\n    loop variant i;\n*/\n```\n\nThis ranking function is valid because it decreases with every successive iteration of the loop (either by 1 or by m), and its value must be positive for the loop to continue executing. This ensures that the loop must terminate.",
            "1. Note the starting values or constraints for the variables that are live at the loop head:\n   - `i` starts with the value of `n`\n   - `m > 0`\n   - `n > m`\n\n2. Analyze the loop body and find a ranking function involving the variables in the loop body:\n   - In each iteration of the loop, the value of `i` decreases either by 1 or by `m`\n   - Since `m > 0`, the value of `i` will always decrease in each iteration\n   - The loop continues as long as `i > 0`\n   \n3. We can form the ranking function:\n   ```\n   /*@\n       loop variant i;\n   */\n   ```\n   This ranking function is valid because the value of `i` decreases in each iteration and is always positive when the loop is executing."
        ],
        "variant_log": [
            {
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. Lexicographic ranking functions are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, m, n;\n\tn = unknown_int();\n\tm = unknown_int();\n\tif (m > 0 && n > m) {\n\t\ti = n;\n\t\twhile (i > 0) {\n\t\t\tif (i < m) {\n\t\t\t\ti = i - 1;\n\t\t\t} else {\n\t\t\t\ti = i - m;\n            }\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(i)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, let's analyze the given program:\n\n1. Variables `m` and `n` are assigned unknown integer values. There is a condition that `m > 0` and `n > m`.\n2. Variable `i` is initialized to `n`.\n3. The loop condition is `i > 0`.\n4. Inside the loop, there is a conditional statement: if `i < m`, then `i` is decremented by 1; otherwise, `i` is decremented by `m`.\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution, `i = n` and `n > m > 0`.\n2. In every iteration of the loop, `i` decreases by either 1 or `m` (which is greater than 0). So, `i` is always non-negative.\n3. After the loop termination, `i <= 0`.\n\nBased on the above observations, we can write the loop invariants as follows:\n\n```\n/*@ \n    loop invariant n > m > 0;\n    loop invariant i >= 0;\n    loop invariant i <= n;\n    loop invariant \\at(i, LoopEntry) - i <= m;\n*/\n```",
                    "First, let's analyze the given program:\n\n1. `n` and `m` are assigned non-deterministic integer values.\n2. If `m > 0` and `n > m`, the loop is executed.\n3. Inside the loop, `i` is decremented by `1` if `i < m` or by `m` if `i >= m`.\n\nNow, let's identify loop invariants for the loop with loop variant `(i)`:\n\n- Before the loop execution: `i = n`.\n- In every iteration of the loop: `i >= 0` and `i <= n`.\n- After the loop termination: `i = 0`.\n\nAdditionally, we can add the following relations between variables:\n\n- `m > 0`\n- `n > m`\n\nTaking into account the conditional nature of the code, we can use implication in the loop invariants:\n\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant i <= n;\n    loop invariant m > 0 ==> n > m;\n    loop invariant \\at(i, LoopEntry) == n;\n*/\n```",
                    "First, let's note the starting values or constraints for the variables that are live at the loop head:\n\n- `n` is an unknown integer.\n- `m` is an unknown integer.\n- The loop executes only when `m > 0` and `n > m`.\n- `i` is initialized to `n`.\n\nNow, let's analyze the loop body and make a note of the loop condition and the given ranking function:\n\n- The loop condition is `i > 0`.\n- In each iteration, either `i` is decreased by 1 (`i < m`) or `i` is decreased by `m` (`i >= m`).\n- The given ranking function is `(i)`.\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration:\n\n```\n/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= n;\n    loop invariant m > 0;\n    loop invariant n > m;\n    loop invariant i >= \\at(i, LoopEntry) - m;\n*/\n```",
                    "First, let's identify the variables that are live at the loop head and their starting values or constraints:\n- i: starts with the value of n, i <= n\n- m: m > 0\n- n: n > m\n\nNow, let's analyze the loop condition and body:\n- Loop condition: i > 0\n- Loop body: If i < m, then i = i - 1; else, i = i - m\n- Loop variant: i\n\nWe want to find loop invariants that support the validity of the loop variant i and prove the termination of the loop. Based on the given information, we can write the following loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant m > 0;\n    loop invariant n > m;\n    loop invariant \\at(i, LoopEntry) - i <= \\at(i, LoopEntry);\n*/\n```\n\nHere's what each loop invariant represents:\n1. i is always non-negative and less than or equal to n.\n2. m is always greater than 0.\n3. n is always greater than m.\n4. The value of i decreases or remains the same in each iteration of the loop.",
                    "First, let's make note of the starting values or constraints for the variables that are live at the loop head:\n\n- n and m are both unknown integers.\n- The loop executes only if m > 0 and n > m.\n- i is initialized to n.\n\nNow, let's analyze the loop body and make a note of the loop condition and the given ranking function:\n\n- The loop condition is i > 0.\n- The ranking function is i.\n- In each iteration, i is either decremented by 1 (if i < m) or decremented by m (if i >= m).\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration:\n\n```\n/*@ \n    loop invariant 0 < m <= n;\n    loop invariant 0 <= i <= n;\n    loop invariant i < m ==> (i == \\at(i, LoopEntry) - 1);\n    loop invariant i >= m ==> (i == \\at(i, LoopEntry) - m);\n*/\n```"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant n > m > 0;\n    loop invariant i >= 0;\n    loop invariant i <= n;\n    loop invariant \\at(i, LoopEntry) - i <= m;\n*/",
                    "/*@ \n    loop invariant i >= 0;\n    loop invariant i <= n;\n    loop invariant m > 0 ==> n > m;\n    loop invariant \\at(i, LoopEntry) == n;\n*/",
                    "/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= n;\n    loop invariant m > 0;\n    loop invariant n > m;\n    loop invariant i >= \\at(i, LoopEntry) - m;\n*/",
                    "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant m > 0;\n    loop invariant n > m;\n    loop invariant \\at(i, LoopEntry) - i <= \\at(i, LoopEntry);\n*/",
                    "/*@ \n    loop invariant 0 < m <= n;\n    loop invariant 0 <= i <= n;\n    loop invariant i < m ==> (i == \\at(i, LoopEntry) - 1);\n    loop invariant i >= m ==> (i == \\at(i, LoopEntry) - m);\n*/"
                ],
                "inductive_invariants": "loop invariant i1: n > m > 0;\nloop invariant i2: i >= 0;\nloop invariant i3: i <= n;\nloop invariant i7: m > 0 ==> n > m;\nloop invariant i8: \\at(i, LoopEntry) == n;\nloop invariant i9: 0 <= i;\nloop invariant i11: m > 0;\nloop invariant i12: n > m;\nloop invariant i14: 0 <= i <= n;\nloop invariant i17: \\at(i, LoopEntry) - i <= \\at(i, LoopEntry);\nloop invariant i18: 0 < m <= n;",
                "final_checker_input": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, m, n;\n\tn = unknown_int();\n\tm = unknown_int();\n\tif (m > 0 && n > m) {\n\t\ti = n;\n\t\t/*@\nloop invariant i1: n > m > 0;\nloop invariant i2: i >= 0;\nloop invariant i3: i <= n;\nloop invariant i7: m > 0 ==> n > m;\nloop invariant i8: \\at(i, LoopEntry) == n;\nloop invariant i9: 0 <= i;\nloop invariant i11: m > 0;\nloop invariant i12: n > m;\nloop invariant i14: 0 <= i <= n;\nloop invariant i17: \\at(i, LoopEntry) - i <= \\at(i, LoopEntry);\nloop invariant i18: 0 < m <= n;\nloop variant i;\n*/\nwhile (i > 0) {\n\t\t\tif (i < m) {\n\t\t\t\ti = i - 1;\n\t\t\t} else {\n\t\t\t\ti = i - m;\n            }\n\t\t}\n\t}\n\treturn 0;\n}",
                "checker_message": "loop invariant n > m > 0 is inductive.\nloop invariant i >= 0 is inductive.\nloop invariant i <= n is inductive.\nloop invariant m > 0 ==> n > m is inductive.\nloop invariant \\at(i, LoopEntry) == n is inductive.\nloop invariant 0 <= i is inductive.\nloop invariant m > 0 is inductive.\nloop invariant n > m is inductive.\nloop invariant 0 <= i <= n is inductive.\nloop invariant \\at(i, LoopEntry) - i <= \\at(i, LoopEntry) is inductive.\nloop invariant 0 < m <= n is inductive.\n\nLoop variant is Valid.\n",
                "success": true
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Thun_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c"
        ],
        "skipped": [],
        "total": 133,
        "success_count": 66,
        "failure_count": 67,
        "success_rate": 0.49624060150375937
    }
}