{
    "logs": {
        "file": "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Singapore_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x;\n    int y;\n    x = unknown_int();\n    y = unknown_int();\n    if (x + y <= 0) { \n        while (x > 0) {\n            x = x + x + y;\n            y = y - 1;\n        }\n    }\n    return 0;\n}",
        "success": false,
        "variants": [
            [
                "y >= 0 ? y : -y"
            ],
            [
                "x",
                "y"
            ],
            [
                "y"
            ],
            [
                "-y"
            ]
        ],
        "variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n- If the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. \n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x;\n    int y;\n    x = unknown_int();\n    y = unknown_int();\n    if (x + y <= 0) { \n        while (x > 0) {\n            x = x + x + y;\n            y = y - 1;\n        }\n    }\n    return 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function (or the sequence of expressions) is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "First, let's make note of the starting values or constraints for the variables that are live at the loop head:\n\n- x and y are both unknown integers.\n- x + y <= 0 because of the if statement before the loop.\n\nNow, let's analyze the loop body and find a ranking function involving the variables in the loop body:\n\nThe loop condition is x > 0. Inside the loop, x is updated as x = x + x + y, and y is updated as y = y - 1.\n\nLet's try to find a ranking function for this loop. One possible ranking function is the value of y. Let's see if it meets the requirements:\n\n1. The value of y must be positive for the loop to continue executing.\n   Since x + y <= 0 and x > 0, it's guaranteed that y < 0. However, our ranking function should be positive. To fix this, we can use the absolute value of y as our ranking function, i.e., |y|.\n\n2. The value of the ranking function must decrease with every successive iteration of the loop.\n   In each iteration, y is decreased by 1, and hence |y| increases by 1. However, since x + y <= 0, as x increases (x = x + x + y), y has to decrease to maintain the condition. This means that the absolute value of y, |y|, will decrease with every successive iteration of the loop.\n\nSo, the ranking function is the absolute value of y, i.e., |y|. To represent the absolute value in ACSL syntax, we can use the ternary operator: `y >= 0 ? y : -y`.\n\nHere's the loop with the ranking function in ACSL syntax:\n\n```\n/*@\n    loop invariant x > 0;\n    loop variant y >= 0 ? y : -y;\n*/\nwhile (x > 0) {\n    x = x + x + y;\n    y = y - 1;\n}\n```",
            "First, let's make note of the starting values or constraints for the variables that are live at the loop head.\n\n1. The variables x and y are both initialized to unknown integer values.\n2. The loop starts executing if x + y <= 0.\n\nNow, let's analyze the loop body and find a ranking function involving the variables in the loop body:\n\n1. The loop condition is x > 0.\n2. Inside the loop, x is updated to x + x + y, and y is decremented by 1 (y = y - 1).\n\nWe can derive a lexicographic ranking function by considering the values of x and y:\n\n1. Since x > 0 is the loop condition, x itself can be a part of our ranking function.\n2. We also know that y is decreasing in every iteration of the loop, so y can also be a part of our ranking function.\n\nThe lexicographic ranking function is:\n\n```\n/*@\n    loop variant x;\n    loop variant y;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. Both x and y are positive while the loop is executing.\n2. x decreases or remains the same in each iteration of the loop.\n3. If x remains the same, y decreases in each iteration of the loop.",
            "First, let's identify the variables that are live at the loop head. In this case, the live variables are `x` and `y`.\n\nNow, let's analyze the loop body:\n\n1. `x` is updated as `x = x + x + y`.\n2. `y` is updated as `y = y - 1`.\n\nThe loop condition is `x > 0`.\n\nBased on the loop body and condition, we can find the following ranking function:\n\n```\n/*@\n    loop variant y;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. The value of `y` must be positive for the loop to execute. If `y` is negative, the value of `x` would increase in the loop body, causing the loop condition `x > 0` to never be false. But, since `x + y <= 0`, we know that `y` must be positive for the loop to execute.\n2. The value of `y` decreases with every successive iteration of the loop since `y = y - 1` in the loop body.\n3. As `y` decreases, the loop condition `x > 0` will eventually become false, causing the loop to terminate.",
            "First, let's note the starting values or constraints for the variables that are live at the loop head.\n\nAt the loop head, we have the following constraints:\n1. x + y <= 0\n2. x > 0\n\nNow, let's analyze the loop body and find a ranking function involving the variables in the loop body.\n\nDuring each iteration of the loop, the following updates occur:\n1. x = x + x + y\n2. y = y - 1\n\nNow, let's find the ranking function.\n\nSince y is decreasing in every iteration and x > 0 at the beginning, we can use the following ranking function for the loop:\n\n```\n/*@\n    loop variant y;\n*/\n```\n\nThis ranking function is valid because:\n1. y is positive at the beginning of the loop due to the condition (x + y <= 0) and (x > 0).\n2. y decreases by 1 in each iteration, ensuring that the loop will eventually terminate.",
            "1. Make note of the starting values or constraints for the variables that are live at the loop head.\n\nAt the loop head, we have:\n- x > 0\n- x + y <= 0\n\n2. Analyze the loop body and find a ranking function involving the variables in the loop body.\n\nIn the loop body, we have the following updates:\n- x = x + x + y\n- y = y - 1\n\nNow let's find the ranking function. We can observe that the value of x increases and the value of y decreases in every iteration. Since x + y <= 0, we can use this constraint to create a ranking function.\n\nHere is the ranking function:\n\n```\n/*@\n    loop variant -y;\n*/\n```\n\nThis ranking function is valid because:\n- It involves the live variables at the loop head (y).\n- The value of -y is positive (since y is negative in the loop) and decreases in every iteration (y decreases by 1 in every iteration).\n- The loop terminates when x <= 0, which is guaranteed by the constraint x + y <= 0."
        ],
        "variant_log": [
            {
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. Lexicographic ranking functions are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x;\n    int y;\n    x = unknown_int();\n    y = unknown_int();\n    if (x + y <= 0) { \n        while (x > 0) {\n            x = x + x + y;\n            y = y - 1;\n        }\n    }\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(y >= 0 ? y : -y)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, let's identify the constraints and starting values for the variables live at the loop head.\n\n- x and y are integers and their initial values are unknown.\n- The loop only executes if x + y <= 0.\n\nNow let's analyze the loop body and loop condition:\n\n- The loop condition is x > 0.\n- Inside the loop, x is updated with x + x + y, and y is decremented by 1.\n\nThe given ranking function is (y >= 0 ? y : -y). Let's find the loop invariants to support this ranking function and prove loop termination.\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y <= 0;\n    loop invariant x + y <= 0;\n*/\n```",
                    "First, let's note the starting values or constraints for the variables that are live at the loop head:\n\n- x and y are initialized with unknown values, so they can be any integer.\n- The loop only executes if x + y <= 0.\n\nNow, let's analyze the loop body and make a note of the loop condition and the given ranking function:\n\n- Loop condition: x > 0\n- Ranking function: (y >= 0 ? y : -y)\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration.\n\n```\n/*@ \n    loop invariant x + y <= 0;\n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant y >= \\at(y, LoopEntry) - 1;\n*/\n```\nExplanation:\n\n1. x + y <= 0: This loop invariant holds before the loop execution because it's the condition for entering the loop. It also holds in every iteration since x is increased by x + y (which is non-positive) and y is decreased by 1. After the loop termination, x <= 0 and x + y <= 0 still hold.\n\n2. x <= \\at(x, LoopEntry): This loop invariant holds before the loop execution because x is equal to its initial value. It also holds in every iteration since x is increased by x + y (which is non-positive). After the loop termination, x <= 0 and x <= \\at(x, LoopEntry) still hold.\n\n3. y >= \\at(y, LoopEntry) - 1: This loop invariant holds before the loop execution because y is equal to its initial value. It also holds in every iteration since y is decreased by 1 in each iteration. After the loop termination, y >= \\at(y, LoopEntry) - 1 still holds.\n\nThese loop invariants support the validity of the ranking function (y >= 0 ? y : -y), as they ensure that the ranking function decreases with every iteration, proving the termination of the loop.",
                    "First, let's analyze the starting values and constraints for the variables that are live at the loop head.\n\n- x and y are both assigned unknown integer values.\n- The loop executes only if the condition (x + y <= 0) is true.\n\nNow, let's analyze the loop condition and body.\n- Loop condition: (x > 0)\n- Loop body: \n  - x = x + x + y;\n  - y = y - 1;\n\nGiven the ranking function (y >= 0 ? y : -y), we can now find the loop invariants that support its validity and prove the loop termination.\n\n```\n/*@ \n    loop invariant x + y <= 0;\n    loop invariant x >= \\at(x, LoopEntry);\n    loop invariant y <= \\at(y, LoopEntry) + 1;\n    loop invariant y >= \\at(y, LoopEntry) - 1;\n*/\n```",
                    "First, let's identify the starting values or constraints for the variables that are live at the loop head. In this case, `x` and `y` are live at the loop head, and they are initialized by the `unknown_int()` function, so no constraints are given.\n\nNext, let's analyze the loop body and note the loop condition and the given ranking function. The loop condition is `(x > 0)`, and the ranking function is `(y >= 0 ? y : -y)`.\n\nNow we can output the loop invariants that support the validity of the ranking function and prove the termination of the loop:\n\n```\n/*@ \n    loop invariant x >= \\at(x, LoopEntry);\n    loop invariant y <= \\at(y, LoopEntry);\n    loop invariant x + y <= \\at(x + y, LoopEntry);\n    loop invariant y >= 0 ==> (y >= 0 ? y : -y) >= 0;\n    loop invariant y < 0 ==> (y >= 0 ? y : -y) >= 0;\n*/\n```\n\nThese loop invariants ensure that the ranking function decreases with every iteration of the loop and that the loop eventually terminates.",
                    "First, let's make a note of the starting values or constraints for the variables that are live at the loop head:\n- x and y are initialized with unknown_int() values, which means that they can be any integer.\n\nNext, let's analyze the loop body and make a note of the loop condition and the given ranking function:\n- Loop condition: x > 0\n- Ranking function: (y >= 0 ? y : -y)\n\nNow, let's output the loop invariants that support the validity of the ranking function and prove the termination of the loop:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y <= \\at(y, LoopEntry);\n*/\n```"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant y <= 0;\n    loop invariant x + y <= 0;\n*/",
                    "/*@ \n    loop invariant x + y <= 0;\n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant y >= \\at(y, LoopEntry) - 1;\n*/",
                    "/*@ \n    loop invariant x + y <= 0;\n    loop invariant x >= \\at(x, LoopEntry);\n    loop invariant y <= \\at(y, LoopEntry) + 1;\n    loop invariant y >= \\at(y, LoopEntry) - 1;\n*/",
                    "/*@ \n    loop invariant x >= \\at(x, LoopEntry);\n    loop invariant y <= \\at(y, LoopEntry);\n    loop invariant x + y <= \\at(x + y, LoopEntry);\n    loop invariant y >= 0 ==> (y >= 0 ? y : -y) >= 0;\n    loop invariant y < 0 ==> (y >= 0 ? y : -y) >= 0;\n*/",
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant y <= \\at(y, LoopEntry);\n*/"
                ],
                "inductive_invariants": "loop invariant i5: x <= \\at(x, LoopEntry);\nloop invariant i9: y <= \\at(y, LoopEntry) + 1;\nloop invariant i12: y <= \\at(y, LoopEntry);\nloop invariant i13: x + y <= \\at(x + y, LoopEntry);\nloop invariant i14: y >= 0 ==> (y >= 0 ? y : -y) >= 0;\nloop invariant i15: y < 0 ==> (y >= 0 ? y : -y) >= 0;",
                "final_checker_input": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x;\n    int y;\n    x = unknown_int();\n    y = unknown_int();\n    if (x + y <= 0) { \n        /*@\nloop invariant i5: x <= \\at(x, LoopEntry);\nloop invariant i9: y <= \\at(y, LoopEntry) + 1;\nloop invariant i12: y <= \\at(y, LoopEntry);\nloop invariant i13: x + y <= \\at(x + y, LoopEntry);\nloop invariant i14: y >= 0 ==> (y >= 0 ? y : -y) >= 0;\nloop invariant i15: y < 0 ==> (y >= 0 ? y : -y) >= 0;\nloop variant y >= 0 ? y : -y;\n*/\nwhile (x > 0) {\n            x = x + x + y;\n            y = y - 1;\n        }\n    }\n    return 0;\n}",
                "checker_message": "loop invariant x <= \\at(x, LoopEntry) is inductive.\nloop invariant y <= \\at(y, LoopEntry) + 1 is inductive.\nloop invariant y <= \\at(y, LoopEntry) is inductive.\nloop invariant x + y <= \\at(x + y, LoopEntry) is inductive.\nloop invariant y >= 0 ==> (y >= 0 ? y : -y) >= 0 is inductive.\nloop invariant y < 0 ==> (y >= 0 ? y : -y) >= 0 is inductive.\n\nLoop variant is Invalid.\n",
                "success": false
            },
            {
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. Lexicographic ranking functions are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x;\n    int y;\n    x = unknown_int();\n    y = unknown_int();\n    if (x + y <= 0) { \n        while (x > 0) {\n            x = x + x + y;\n            y = y - 1;\n        }\n    }\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(x, y)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, let's make note of the starting values or constraints for the variables that are live at the loop head.\n\n- x = unknown_int();\n- y = unknown_int();\n- Loop executes only if (x + y <= 0)\n\nNow, analyze the loop body and make a note of the loop condition and the given ranking function.\n\n- Loop condition: (x > 0)\n- Ranking function: (x, y)\n\nNow, let's find the loop invariants.\n\n(i) Before the loop execution:\n- x + y <= 0\n\n(ii) In every iteration of the loop:\n- x > 0 (loop condition)\n- x_new = x_old + x_old + y_old\n- y_new = y_old - 1\n\n(iii) After the loop termination:\n- x <= 0 (loop termination condition)\n\nNow, let's output all the loop invariants in one code block:\n\n```\n/*@ \n    loop invariant x + y <= 0;\n    loop invariant x > 0;\n    loop invariant x == \\at(x, LoopEntry) + \\at(x, LoopEntry) + \\at(y, LoopEntry);\n    loop invariant y == \\at(y, LoopEntry) - 1;\n*/\n```",
                    "First, let's make a note of the starting values or constraints for the variables that are live at the loop head.\n\n- x and y are both assigned with unknown_int(), which means they can have any integer value initially.\n- The loop starts executing only if x + y <= 0.\n\nNow, let's analyze the loop body and make a note of the loop condition and the given ranking function.\n\n- Loop condition: x > 0\n- Ranking function: (x, y)\n\nNow, let's output loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration.\n\n```c\n/*@ \n    loop invariant x >= 0;\n    loop invariant y <= 0;\n    loop invariant x + y <= \\at(x + y, LoopEntry);\n*/\n```\n\nHere, we have the following loop invariants:\n\n1. x >= 0: This ensures that x is always non-negative during the loop execution.\n2. y <= 0: This ensures that y is always non-positive during the loop execution.\n3. x + y <= \\at(x + y, LoopEntry): This loop invariant implies that the sum of x and y always remains less than or equal to the initial sum of x and y when the loop started executing.\n\nThese loop invariants support the loop variant (x, y) and prove the termination of the loop.",
                    "First, let's note the starting values and constraints for the variables that are live at the loop head. We have `x` and `y` which are both initially unknown integers. The loop starts if `x + y <= 0`.\n\nNow let's analyze the loop body and make a note of the loop condition and the given ranking function. The loop condition is `x > 0`, and the given ranking function is the lexicographic order (x, y).\n\nNow, we can output loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration:\n\n```\n/*@ \n    loop invariant 0 <= \\at(y, LoopEntry);\n    loop invariant x + y <= \\at(x + y, LoopEntry);\n*/\n```\n\nThe first loop invariant states that the value of `y` at the beginning of the loop is non-negative. The second loop invariant states that the sum of `x` and `y` during the loop execution is less than or equal to the sum of `x` and `y` at the beginning of the loop. These loop invariants imply that the ranking function (x, y) decreases with every iteration, proving the termination of the loop.",
                    "First, let's list the starting values or constraints for the variables that are live at the loop head:\n- x is an unknown integer.\n- y is an unknown integer.\n- The loop executes if x + y <= 0.\n\nNow, let's analyze the loop body and make a note of the loop condition and the given ranking function:\n- Loop condition: x > 0\n- Ranking function: (x, y)\n\nNow, let's output the loop invariants for the given program:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant x + y <= 0;\n    loop invariant y <= \\at(y, LoopEntry);\n*/\n```\n\nThese loop invariants imply that the ranking function (x, y) decreases with every iteration:\n- x is always non-negative and greater than 0 during loop execution.\n- x + y is always non-positive, and the value of y decreases with every iteration, ensuring termination.",
                    "We first analyze the program variables and constraints:\n\n1. x and y are both integers and are initialized with unknown_int() which can return any integer value.\n2. The loop only executes if x + y <= 0.\n\nNow, let's analyze the loop:\n\n1. The loop condition is x > 0.\n2. In the loop body, x is updated as x = x + x + y, and y is decremented by 1 (y = y - 1).\n\nLet's find the loop invariants:\n\n1. The sum of x and y at the beginning of the loop is less than or equal to 0 (\\at(x+y, LoopEntry) <= 0).\n2. The value of x is always greater than or equal to 0 (x >= 0).\n3. The value of y at the beginning of the loop is less than or equal to the value of y in the current iteration (y <= \\at(y, LoopEntry)).\n\nNow, let's write down the loop invariants:\n\n```\n/*@ \n    loop invariant \\at(x+y, LoopEntry) <= 0;\n    loop invariant x >= 0;\n    loop invariant y <= \\at(y, LoopEntry);\n*/\n```\n\nThese loop invariants support the loop variant (x, y) and can be used to prove the termination of the loop."
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant x + y <= 0;\n    loop invariant x > 0;\n    loop invariant x == \\at(x, LoopEntry) + \\at(x, LoopEntry) + \\at(y, LoopEntry);\n    loop invariant y == \\at(y, LoopEntry) - 1;\n*/",
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant y <= 0;\n    loop invariant x + y <= \\at(x + y, LoopEntry);\n*/",
                    "/*@ \n    loop invariant 0 <= \\at(y, LoopEntry);\n    loop invariant x + y <= \\at(x + y, LoopEntry);\n*/",
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant x + y <= 0;\n    loop invariant y <= \\at(y, LoopEntry);\n*/",
                    "/*@ \n    loop invariant \\at(x+y, LoopEntry) <= 0;\n    loop invariant x >= 0;\n    loop invariant y <= \\at(y, LoopEntry);\n*/"
                ],
                "inductive_invariants": "loop invariant i7: x + y <= \\at(x + y, LoopEntry);\nloop invariant i12: y <= \\at(y, LoopEntry);\nloop invariant i13: \\at(x+y, LoopEntry) <= 0;",
                "final_checker_input": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x;\n    int y;\n    x = unknown_int();\n    y = unknown_int();\n    if (x + y <= 0) { \n        //@ ghost variant_expression measure = { x, y };\n/*@\nloop invariant i7: x + y <= \\at(x + y, LoopEntry);\nloop invariant i12: y <= \\at(y, LoopEntry);\nloop invariant i13: \\at(x+y, LoopEntry) <= 0;\nloop invariant measure.a == x && measure.b == y;\nloop variant measure for lexicographic;\n*/\nwhile (x > 0) {\n            x = x + x + y;\n            y = y - 1;\n        \n//@ ghost measure.a = x;\n//@ ghost measure.b = y;\n}\n    }\n    return 0;\n}",
                "checker_message": "loop invariant x + y <= \\at(x + y, LoopEntry) is inductive.\nloop invariant y <= \\at(y, LoopEntry) is inductive.\nloop invariant \\at(x+y, LoopEntry) <= 0 is inductive.\n\nLoop variant is Invalid.\n",
                "success": false
            },
            {
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. Lexicographic ranking functions are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x;\n    int y;\n    x = unknown_int();\n    y = unknown_int();\n    if (x + y <= 0) { \n        while (x > 0) {\n            x = x + x + y;\n            y = y - 1;\n        }\n    }\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(y)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, let's note the starting values and constraints for the variables live at the loop head:\n- x is an integer with an unknown initial value.\n- y is an integer with an unknown initial value.\n- The loop executes when x + y <= 0 and x > 0.\n\nNow, let's analyze the loop body and the given ranking function:\n- The loop condition is x > 0.\n- The ranking function is y.\n- Inside the loop, x is updated as x = x + x + y, and y is updated as y = y - 1.\n\nNow, we can output the loop invariants that support the validity of the ranking function and prove the termination of the loop:\n\n```\n/*@ \n    loop invariant \\at(x, LoopEntry) + \\at(y, LoopEntry) <= 0;\n    loop invariant x > 0;\n    loop invariant y >= -x;\n*/\n```",
                    "First, let's identify the loop condition and the starting values or constraints for the variables that are live at the loop head. The loop condition is `x > 0`. The variables live at the loop head are `x` and `y`.\n\nNow, let's analyze the loop body. Inside the loop, the following updates occur:\n\n1. `x = x + x + y`\n2. `y = y - 1`\n\nThe given ranking function is `(y)`. We need to find loop invariants that support the validity of this ranking function and prove the termination of the loop.\n\n```\n/*@ \n    loop invariant 0 <= y <= \\at(y, LoopEntry);\n    loop invariant x >= 0;\n    loop invariant x + y <= \\at(x + y, LoopEntry);\n*/\n```",
                    "We first note the starting values or constraints for the variables that are live at the loop head:\n- x and y are initially assigned unknown integer values.\n- The loop executes only if x + y <= 0.\n\nNow let's analyze the loop body:\n- The loop condition is x > 0.\n- The loop body updates x as x = x + x + y, and y as y = y - 1.\n- The given ranking function is y.\n\nNow we can output the loop invariants that support the validity of the ranking function and prove the termination of the loop:\n\n```\n/*@ \n    loop invariant x + y <= 0;\n    loop invariant \\at(x, LoopEntry) + \\at(y, LoopEntry) <= 0 ==> x <= 0;\n    loop invariant y >= 0;\n*/\n```\n\nThese loop invariants hold true:\n(i) before the loop execution, as x + y <= 0 initially and y starts as a non-negative integer,\n(ii) in every iteration of the loop, as x and y are updated such that their sum remains non-positive and y is non-negative,\n(iii) after the loop termination, as the loop terminates when x <= 0 and y remains non-negative.",
                    "First, let's analyze the given program:\n\n1. The variables x and y are assigned unknown integer values.\n2. The program enters the loop only if (x + y <= 0).\n3. Inside the loop, x is updated as x = x + x + y, and y is decremented by 1 (y = y - 1).\n4. The loop continues as long as x > 0.\n\nNow, we need to find loop invariants that support the loop variant (y):\n\n1. At the beginning of the loop, the sum of x and y is non-positive (x + y <= 0).\n2. The value of y decreases with every iteration of the loop (y = y - 1).\n3. The value of x increases with every iteration of the loop (x = x + x + y).\n4. The loop terminates when x <= 0.\n\nBased on the analysis, we can write the following loop invariants:\n\n```\n/*@ \n    loop invariant \\at(x, LoopEntry) + \\at(y, LoopEntry) <= 0;\n    loop invariant y <= \\at(y, LoopEntry);\n    loop invariant x >= \\at(x, LoopEntry);\n    loop invariant x + y <= \\at(x, LoopEntry) + \\at(y, LoopEntry);\n*/\n```",
                    "First, let's analyze the loop condition and the given ranking function:\n\n- The loop condition is `x > 0`.\n- The given ranking function is `y`.\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution, we have the condition `x + y <= 0`. This condition holds true throughout the loop execution as well.\n2. The loop invariant should support the ranking function `y`, which decreases with every iteration of the loop.\n3. The value of `x` increases with every iteration (`x = x + x + y`), while the value of `y` decreases with every iteration (`y = y - 1`).\n\nBased on this analysis, we can output the loop invariants:\n\n```\n/*@ \n    loop invariant x + y <= 0;\n    loop invariant y >= \\at(y, LoopEntry);\n    loop invariant x <= \\at(x, LoopEntry) - \\at(y, LoopEntry) + y;\n*/\n```"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant \\at(x, LoopEntry) + \\at(y, LoopEntry) <= 0;\n    loop invariant x > 0;\n    loop invariant y >= -x;\n*/",
                    "/*@ \n    loop invariant 0 <= y <= \\at(y, LoopEntry);\n    loop invariant x >= 0;\n    loop invariant x + y <= \\at(x + y, LoopEntry);\n*/",
                    "/*@ \n    loop invariant x + y <= 0;\n    loop invariant \\at(x, LoopEntry) + \\at(y, LoopEntry) <= 0 ==> x <= 0;\n    loop invariant y >= 0;\n*/",
                    "/*@ \n    loop invariant \\at(x, LoopEntry) + \\at(y, LoopEntry) <= 0;\n    loop invariant y <= \\at(y, LoopEntry);\n    loop invariant x >= \\at(x, LoopEntry);\n    loop invariant x + y <= \\at(x, LoopEntry) + \\at(y, LoopEntry);\n*/",
                    "/*@ \n    loop invariant x + y <= 0;\n    loop invariant y >= \\at(y, LoopEntry);\n    loop invariant x <= \\at(x, LoopEntry) - \\at(y, LoopEntry) + y;\n*/"
                ],
                "inductive_invariants": "loop invariant i1: \\at(x, LoopEntry) + \\at(y, LoopEntry) <= 0;\nloop invariant i6: x + y <= \\at(x + y, LoopEntry);\nloop invariant i7: x + y <= 0;\nloop invariant i11: y <= \\at(y, LoopEntry);\nloop invariant i13: x + y <= \\at(x, LoopEntry) + \\at(y, LoopEntry);",
                "final_checker_input": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x;\n    int y;\n    x = unknown_int();\n    y = unknown_int();\n    if (x + y <= 0) { \n        /*@\nloop invariant i1: \\at(x, LoopEntry) + \\at(y, LoopEntry) <= 0;\nloop invariant i6: x + y <= \\at(x + y, LoopEntry);\nloop invariant i7: x + y <= 0;\nloop invariant i11: y <= \\at(y, LoopEntry);\nloop invariant i13: x + y <= \\at(x, LoopEntry) + \\at(y, LoopEntry);\nloop variant y;\n*/\nwhile (x > 0) {\n            x = x + x + y;\n            y = y - 1;\n        }\n    }\n    return 0;\n}",
                "checker_message": "loop invariant \\at(x, LoopEntry) + \\at(y, LoopEntry) <= 0 is inductive.\nloop invariant x + y <= \\at(x + y, LoopEntry) is inductive.\nloop invariant x + y <= 0 is inductive.\nloop invariant y <= \\at(y, LoopEntry) is inductive.\nloop invariant x + y <= \\at(x, LoopEntry) + \\at(y, LoopEntry) is inductive.\n\nLoop variant is Invalid.\n",
                "success": false
            },
            {
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. Lexicographic ranking functions are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x;\n    int y;\n    x = unknown_int();\n    y = unknown_int();\n    if (x + y <= 0) { \n        while (x > 0) {\n            x = x + x + y;\n            y = y - 1;\n        }\n    }\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(-y)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, let's identify the variables that are live at the loop head and their starting values or constraints.\n\n- Variables live at the loop head: x, y\n- Starting values: x and y are both assigned non-deterministic values from unknown_int().\n\nNow, let's analyze the loop condition and the loop body.\n\n- Loop condition: x > 0\n- Loop body: \n  - x = x + x + y\n  - y = y - 1\n\nGiven the loop variant (-y), we need to find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nLoop invariants:\n\n1. x + y <= 0 at loop entry.\n2. y is non-positive at each iteration.\n3. x + y is non-increasing with every iteration.\n\nOutputting the loop invariants:\n\n```\n/*@ \n    loop invariant \\at(x + y, LoopEntry) <= 0;\n    loop invariant y <= 0;\n    loop invariant x + y <= \\at(x + y, LoopEntry);\n*/\n```",
                    "First, we note the starting values and constraints for the variables live at the loop head:\n- x and y are assigned non-deterministic integer values.\n- The loop executes if x + y <= 0.\n\nNext, we analyze the loop body, loop condition, and given ranking function:\n- Loop condition: x > 0\n- Loop body: x = x + x + y; y = y - 1;\n- Given ranking function: -y\n\nNow, we can output the loop invariants to support the loop variant:\n\n```\n/*@ \n    loop invariant x + y <= 0;\n    loop invariant x > 0 ==> y < 0;\n    loop invariant \\at(y, LoopEntry) - y <= -1;\n*/\n```\n\nThese loop invariants hold true:\n1. Before the loop execution: The condition \"x + y <= 0\" ensures that this loop invariant is true.\n2. In every iteration of the loop: \n   - Since the loop condition is \"x > 0\", when it holds true, we have \"y < 0\" as a result of \"x + y <= 0\".\n   - In each iteration, y decreases by 1. Thus, the difference between the starting value of y and the current value of y is at least 1, making \"\\at(y, LoopEntry) - y <= -1\" true.\n3. After the loop termination: The loop terminates when x <= 0, and the invariants still hold true.\n\nThese loop invariants imply that the ranking function (-y) decreases with every iteration, and thus, they support the loop termination.",
                    "First, we can note the starting values and constraints for the variables that are live at the loop head. In this case, `x` and `y` are the live variables, and they are initialized with non-deterministic values from `unknown_int()`. The loop is executed only if `x + y <= 0`.\n\nNow, let's analyze the loop body and the given ranking function. The loop condition is `x > 0`, and the ranking function is `(-y)`. In each iteration, `x` is updated as `x + x + y`, and `y` is decremented by 1.\n\nConsidering these facts, we can output the loop invariants that support the validity of the ranking function and prove the termination of the loop:\n\n```\n/*@ \n    loop invariant (x + y <= 0) ==> (y <= 0);\n    loop invariant (x + y <= 0) ==> (x >= \\at(x, LoopEntry));\n    loop invariant (x + y <= 0) ==> (y >= \\at(y, LoopEntry) - 1);\n    loop invariant (x + y <= 0) ==> (x <= \\at(x, LoopEntry) * 2 * (\\at(y, LoopEntry) + 1));\n*/\n```\n\nThese invariants are true before the loop execution, in every iteration of the loop, and after the loop termination, and they imply that the ranking function `(-y)` decreases with every iteration.",
                    "First, let's analyze the given program. We have two variables, x and y, which are initialized with unknown values. The loop executes when the condition (x + y <= 0) holds. Inside the loop, x is updated with x + x + y, and y is decremented by 1 in each iteration. We need to find the loop invariants to support the loop variant (-y).\n\nNow let's find the loop invariants for the given loop:\n\n1. Before the loop starts, we know that x + y <= 0.\n2. In every iteration, x is updated with x + x + y, and y is decremented by 1. So, y <= \\at(y, LoopEntry) - 1.\n3. As y is always decremented, y is non-increasing during the loop execution.\n4. After the loop terminates, x <= 0.\n\nUsing these invariants, we can prove that the loop variant (-y) decreases with every iteration. Here are the loop invariants:\n\n```\n/*@ \n    loop invariant x + y <= 0;\n    loop invariant y <= \\at(y, LoopEntry) - 1;\n    loop invariant y >= \\at(y, LoopEntry);\n    loop invariant x <= 0;\n*/\n```",
                    "First, let's analyze the loop and its conditions:\n\n1. The loop condition is x > 0.\n2. The loop executes only if x + y <= 0.\n3. The loop body updates x by adding x + y to its current value, and decrements y by 1.\n\nNow, let's find the loop invariants:\n\n1. x is non-negative at the loop head.\n2. y is non-positive at the loop head.\n3. x + y <= 0 holds at the loop head.\n4. The value of x at the beginning of the loop is less than or equal to the value of x in the current iteration.\n5. The value of y at the beginning of the loop is greater than or equal to the value of y in the current iteration.\n\nThe loop invariants are as follows:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y <= 0;\n    loop invariant x + y <= 0;\n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant y >= \\at(y, LoopEntry);\n*/\n```"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant \\at(x + y, LoopEntry) <= 0;\n    loop invariant y <= 0;\n    loop invariant x + y <= \\at(x + y, LoopEntry);\n*/",
                    "/*@ \n    loop invariant x + y <= 0;\n    loop invariant x > 0 ==> y < 0;\n    loop invariant \\at(y, LoopEntry) - y <= -1;\n*/",
                    "/*@ \n    loop invariant (x + y <= 0) ==> (y <= 0);\n    loop invariant (x + y <= 0) ==> (x >= \\at(x, LoopEntry));\n    loop invariant (x + y <= 0) ==> (y >= \\at(y, LoopEntry) - 1);\n    loop invariant (x + y <= 0) ==> (x <= \\at(x, LoopEntry) * 2 * (\\at(y, LoopEntry) + 1));\n*/",
                    "/*@ \n    loop invariant x + y <= 0;\n    loop invariant y <= \\at(y, LoopEntry) - 1;\n    loop invariant y >= \\at(y, LoopEntry);\n    loop invariant x <= 0;\n*/",
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant y <= 0;\n    loop invariant x + y <= 0;\n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant y >= \\at(y, LoopEntry);\n*/"
                ],
                "inductive_invariants": "loop invariant i1: \\at(x + y, LoopEntry) <= 0;\nloop invariant i3: x + y <= \\at(x + y, LoopEntry);\nloop invariant i5: x > 0 ==> y < 0;\nloop invariant i18: x <= \\at(x, LoopEntry);",
                "final_checker_input": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x;\n    int y;\n    x = unknown_int();\n    y = unknown_int();\n    if (x + y <= 0) { \n        /*@\nloop invariant i1: \\at(x + y, LoopEntry) <= 0;\nloop invariant i3: x + y <= \\at(x + y, LoopEntry);\nloop invariant i5: x > 0 ==> y < 0;\nloop invariant i18: x <= \\at(x, LoopEntry);\nloop variant -y;\n*/\nwhile (x > 0) {\n            x = x + x + y;\n            y = y - 1;\n        }\n    }\n    return 0;\n}",
                "checker_message": "loop invariant \\at(x + y, LoopEntry) <= 0 is inductive.\nloop invariant x + y <= \\at(x + y, LoopEntry) is inductive.\nloop invariant x > 0 ==> y < 0 is inductive.\nloop invariant x <= \\at(x, LoopEntry) is inductive.\n\nLoop variant is Invalid.\n",
                "success": false
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB6.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Mysore_true-termination.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusMin.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.09-no-inv_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Copenhagen_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_easySum.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA6.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Gothenburg_v2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.08.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.03.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB11.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1c_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.04.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.02.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_AG313.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.01.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/easy2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA5.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.10.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.06.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.10.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Waldkirch_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Thun_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_flag.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/McCarthy91_Iteration_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NO_24.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Copenhagen_disj_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Bangalore_v4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ComplInterv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChooseLife.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.21_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Singapore_true-termination.c"
        ],
        "skipped": [
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c"
        ],
        "total": 251,
        "success_count": 133,
        "failure_count": 118,
        "success_rate": 0.5298804780876494
    }
}