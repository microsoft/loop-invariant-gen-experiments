{
    "logs": {
        "file": "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n    int max_msg_size = unknown_int();\n    int buffer_read_offset = unknown_int();\n    int buffer_bytes_left = unknown_int();\n    if( max_msg_size < -1 || buffer_read_offset <= 0 || buffer_bytes_left < 0 )\n        return 0;\n    int size = 64;\n    while( buffer_bytes_left < size / 2)\n    {\n        size *= 2;\n        if( max_msg_size != -1 && size > max_msg_size )\n        {\n            size = max_msg_size;\n            break;\n        }\n        buffer_bytes_left = size - buffer_bytes_left;\n    }\n    return 0;\n}",
        "success": true,
        "variants": [
            [
                "size - 2 * buffer_bytes_left"
            ],
            [
                "size - buffer_bytes_left"
            ],
            [
                "max_msg_size == -1 ? size : max_msg_size - size"
            ],
            [
                "max_msg_size - size",
                "size - buffer_bytes_left"
            ],
            [
                "max_msg_size != -1 ? max_msg_size - size : size"
            ]
        ],
        "variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n- If the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. \n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n    int max_msg_size = unknown_int();\n    int buffer_read_offset = unknown_int();\n    int buffer_bytes_left = unknown_int();\n    if( max_msg_size < -1 || buffer_read_offset <= 0 || buffer_bytes_left < 0 )\n        return 0;\n    int size = 64;\n    while( buffer_bytes_left < size / 2)\n    {\n        size *= 2;\n        if( max_msg_size != -1 && size > max_msg_size )\n        {\n            size = max_msg_size;\n            break;\n        }\n        buffer_bytes_left = size - buffer_bytes_left;\n    }\n    return 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function (or the sequence of expressions) is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "First, let's make note of the starting values or constraints for the variables that are live at the loop head:\n- max_msg_size is an integer with the constraint max_msg_size >= -1\n- buffer_read_offset is a positive integer (buffer_read_offset > 0)\n- buffer_bytes_left is a non-negative integer (buffer_bytes_left >= 0)\n- size is initialized with the value 64\n\nNow, let's analyze the loop body and find a ranking function involving the variables in the loop body. The loop condition is `buffer_bytes_left < size / 2`.\n\nDuring each iteration of the loop, the size variable is multiplied by 2, and the buffer_bytes_left is updated to `size - buffer_bytes_left`. The loop breaks when `size > max_msg_size`, provided that `max_msg_size != -1`.\n\nAs the value of `size` doubles in each iteration, the loop will terminate when `size` becomes greater than or equal to twice the value of `buffer_bytes_left`. This can be expressed as a ranking function: `size - 2 * buffer_bytes_left`.\n\nThus, the ranking function for the loop is:\n\n```\n/*@\n    loop variant size - 2 * buffer_bytes_left;\n*/\n```\n\nThis ranking function is valid because its value is positive when the loop is executing (`buffer_bytes_left < size / 2`). Additionally, the value of the ranking function decreases with every successive iteration of the loop, as `size` doubles and `buffer_bytes_left` increases.",
            "1. Make note of the starting values or constraints for the variables that are live at the loop head.\n\nAt the loop head, the following variables are live: `buffer_bytes_left`, `size`, and `max_msg_size`.\n\nStarting values and constraints:\n- `max_msg_size < -1 || buffer_read_offset <= 0 || buffer_bytes_left < 0` is false, so `max_msg_size >= -1`, `buffer_read_offset > 0`, and `buffer_bytes_left >= 0`.\n- `size = 64`\n\n2. Analyze the loop body and find a ranking function involving the variables in the loop body.\n\nLoop condition: `buffer_bytes_left < size / 2`\n\nInside the loop body, the following updates occur:\n- `size *= 2`\n- If `max_msg_size != -1 && size > max_msg_size`, then `size = max_msg_size`\n- `buffer_bytes_left = size - buffer_bytes_left`\n\nNow, let's find the ranking function.\n\nIf `max_msg_size == -1`, the loop will continue executing until `buffer_bytes_left >= size / 2`. Since `size` doubles in every iteration, the loop will eventually terminate.\n\nIf `max_msg_size != -1`, the loop will continue executing until either `buffer_bytes_left >= size / 2` or `size >= max_msg_size`.\n\nIn both cases, the value of `size` doubles in each iteration, while the value of `buffer_bytes_left` either increases or becomes equal to `size`. Thus, the value of `size - buffer_bytes_left` will always be positive, and it will decrease with each iteration.\n\nSo, the ranking function is `size - buffer_bytes_left`.\n\nOutput the ranking function in one code block, in ACSL syntax:\n\n```\n/*@\n    loop variant size - buffer_bytes_left;\n*/\n```",
            "1. Make note of the starting values or constraints for the variables that are live at the loop head:\n- max_msg_size >= -1\n- buffer_read_offset > 0\n- buffer_bytes_left >= 0\n- size = 64\n\n2. Analyze the loop body and find a ranking function involving the variables in the loop body:\n- The loop condition is `buffer_bytes_left < size / 2`.\n- Inside the loop, `size` gets multiplied by 2 in each iteration.\n- In each iteration, if `max_msg_size != -1` and `size > max_msg_size`, then `size` is set to `max_msg_size` and the loop breaks.\n- In each iteration, `buffer_bytes_left` is updated with `size - buffer_bytes_left`.\n\n3. Output the ranking function in ACSL syntax:\n\n```c\n/*@\n    loop variant max_msg_size == -1 ? size : max_msg_size - size;\n*/\n```\n\nExplanation:\n- The ranking function is `max_msg_size - size` when `max_msg_size != -1`. The value of `size` increases in each iteration but is bounded by `max_msg_size`, so the value of the ranking function decreases until the loop breaks.\n- When `max_msg_size == -1`, there is no upper bound for `size`. In this case, we can use `size` as the ranking function since it increases in each iteration, and the loop condition requires `buffer_bytes_left` to be less than `size / 2` which indirectly ensures that `size` keeps increasing.",
            "First, let's note the starting values or constraints for the variables that are live at the loop head:\n- `max_msg_size >= -1`\n- `buffer_read_offset > 0`\n- `buffer_bytes_left >= 0`\n- `size = 64`\n\nNow, analyze the loop body and find a ranking function involving the variables in the loop body:\n\nIn each iteration of the loop, the value of `size` is doubled, and `buffer_bytes_left` is updated as `size - buffer_bytes_left`. The loop continues as long as `buffer_bytes_left < size / 2`. Since the value of `size` is always doubled, it can be expressed as `64 * 2^k` for some integer `k`. \n\nWe can use a lexicographic ranking function to prove that the loop must terminate:\n\n1. The first expression in the lexicographic ranking function is `max_msg_size - size`. This expression decreases when `size > max_msg_size` and the loop breaks. When `max_msg_size = -1`, this expression remains constant, and we move to the next expression in the lexicographic ranking function.\n\n2. The second expression in the lexicographic ranking function is `size - buffer_bytes_left`. This expression decreases in each iteration of the loop, as `buffer_bytes_left` is updated as `size - buffer_bytes_left`. \n\nNow, let's output the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant max_msg_size - size;\n    loop variant size - buffer_bytes_left;\n*/\n```\n\nThis lexicographic ranking function is valid because it satisfies the conditions of being positive and decreasing with every iteration of the loop, thus proving that the loop must terminate.",
            "1. Starting values or constraints for the variables that are live at the loop head:\n- max_msg_size >= -1\n- buffer_read_offset > 0\n- buffer_bytes_left >= 0\n- size = 64\n\n2. Analyze the loop body and find a ranking function involving the variables in the loop body:\n- Loop condition: buffer_bytes_left < size / 2\n- Loop body:\n    - size is multiplied by 2 in each iteration\n    - If max_msg_size != -1 and size > max_msg_size, size is set to max_msg_size and the loop breaks.\n    - buffer_bytes_left is updated to size - buffer_bytes_left\n\n3. Output the ranking function in one code block, in ACSL syntax:\n\n```c\n/*@\n    loop variant max_msg_size != -1 ? max_msg_size - size : size;\n*/\n```\n\nThis ranking function is valid because:\n- The value of size increases in each iteration, and the loop breaks when size reaches max_msg_size if max_msg_size != -1.\n- If max_msg_size == -1, there is no upper bound for size, and the ranking function will always be positive and decreasing.\n- If max_msg_size != -1, the value of the ranking function is positive while the loop is executing and decreases with each iteration."
        ],
        "variant_log": [
            {
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. Lexicographic ranking functions are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n    int max_msg_size = unknown_int();\n    int buffer_read_offset = unknown_int();\n    int buffer_bytes_left = unknown_int();\n    if( max_msg_size < -1 || buffer_read_offset <= 0 || buffer_bytes_left < 0 )\n        return 0;\n    int size = 64;\n    while( buffer_bytes_left < size / 2)\n    {\n        size *= 2;\n        if( max_msg_size != -1 && size > max_msg_size )\n        {\n            size = max_msg_size;\n            break;\n        }\n        buffer_bytes_left = size - buffer_bytes_left;\n    }\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(size - 2 * buffer_bytes_left)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, let's make note of the starting values or constraints for the variables that are live at the loop head:\n- max_msg_size < -1 || (buffer_read_offset > 0 && buffer_bytes_left >= 0)\n- size = 64\n\nNow, let's analyze the loop body and make a note of the loop condition and the given ranking function:\n- Loop condition: buffer_bytes_left < size / 2\n- Ranking function: (size - 2 * buffer_bytes_left)\n\nLet's output loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration:\n\n```\n/*@ \n    loop invariant buffer_bytes_left >= 0;\n    loop invariant buffer_read_offset > 0;\n    loop invariant size >= 64;\n    loop invariant max_msg_size < -1 || max_msg_size >= size;\n    loop invariant (max_msg_size != -1 && size > max_msg_size) ==> size == max_msg_size;\n*/\n```\nThese loop invariants hold throughout the loop and support the loop variant (size - 2 * buffer_bytes_left), proving the termination of the loop.",
                    "First, let's analyze the given program and variables that are live at the loop head:\n- max_msg_size: an integer value that is unknown but has a constraint (max_msg_size >= -1)\n- buffer_read_offset: an integer value that is unknown but has a constraint (buffer_read_offset > 0)\n- buffer_bytes_left: an integer value that is unknown but has a constraint (buffer_bytes_left >= 0)\n- size: initialized to 64\n\nNow, let's consider the loop condition and the loop body:\n- Loop condition: buffer_bytes_left < size / 2\n- Loop body:\n  - size is multiplied by 2\n  - If max_msg_size != -1 and size > max_msg_size, then size is set to max_msg_size and the loop breaks\n  - buffer_bytes_left is updated to size - buffer_bytes_left\n\nLet's derive the loop invariants to support the loop variant (size - 2 * buffer_bytes_left):\n\n```\n/*@ \n    loop invariant size >= 64;\n    loop invariant max_msg_size >= -1;\n    loop invariant buffer_read_offset > 0;\n    loop invariant buffer_bytes_left >= 0;\n    loop invariant buffer_bytes_left < size / 2;\n    loop invariant \\at(size, LoopEntry) <= size;\n    loop invariant \\at(buffer_bytes_left, LoopEntry) <= buffer_bytes_left;\n    loop invariant (max_msg_size != -1 ==> (size <= max_msg_size));\n*/\n```",
                    "First, let's identify the loop head, loop condition, and loop body. The loop head is at the beginning of the `while` loop, and the loop condition is `buffer_bytes_left < size / 2`. The loop body consists of the statements within the loop.\n\nNow, let's analyze the given ranking function `(size - 2 * buffer_bytes_left)` and find the loop invariants that support its validity and prove the termination of the loop.\n\nBefore the loop execution, `size` is 64, and `buffer_bytes_left` is non-negative. Also, note that `buffer_read_offset` is positive, and `max_msg_size` is either -1 or a non-negative integer.\n\nHere are the loop invariants for the given program:\n\n```\n/*@ \n    loop invariant 0 <= buffer_bytes_left;\n    loop invariant size > 0;\n    loop invariant buffer_read_offset > 0;\n    loop invariant max_msg_size >= -1;\n    loop invariant max_msg_size == -1 || max_msg_size >= 0;\n    loop invariant size >= 64;\n    loop invariant size <= max_msg_size || max_msg_size == -1;\n    loop invariant \\at(buffer_bytes_left, LoopEntry) >= buffer_bytes_left;\n*/\n```\n\nThese loop invariants ensure the following:\n- The variables `buffer_bytes_left`, `size`, and `buffer_read_offset` have non-negative values.\n- The variable `max_msg_size` is either -1 or non-negative.\n- The variable `size` is always at least 64.\n- The variable `size` is always less than or equal to `max_msg_size`, or `max_msg_size` is -1 (which means there is no maximum size constraint).\n- The value of `buffer_bytes_left` is non-increasing.",
                    "First, let's note the starting values or constraints for the variables that are live at the loop head:\n- max_msg_size >= -1\n- buffer_read_offset > 0\n- buffer_bytes_left >= 0\n- size = 64\n\nNext, let's analyze the loop body, loop condition, and given ranking function:\n- Loop condition: buffer_bytes_left < size / 2\n- Ranking function: (size - 2 * buffer_bytes_left)\n\nNow, let's output the loop invariants:\n\n```\n/*@ \n    loop invariant size >= 64;\n    loop invariant max_msg_size >= -1;\n    loop invariant buffer_read_offset > 0;\n    loop invariant buffer_bytes_left >= 0;\n    loop invariant buffer_bytes_left < size / 2;\n    loop invariant (max_msg_size == -1) ==> (size <= 2 * \\at(size, LoopEntry));\n    loop invariant (max_msg_size != -1) ==> (size <= max_msg_size);\n*/\n```",
                    "First, let's analyze the loop condition and the given ranking function. The loop condition is \"buffer_bytes_left < size / 2\", and the given ranking function is \"(size - 2 * buffer_bytes_left)\".\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution:\n   - max_msg_size < -1 || buffer_read_offset <= 0 || buffer_bytes_left < 0 is false due to the assumption.\n   - size starts at 64.\n   - size is always a multiple of 64.\n\n2. In every iteration of the loop:\n   - size is always a multiple of 64.\n   - The value of max_msg_size does not change.\n   - buffer_bytes_left < size / 2.\n   - (size - 2 * buffer_bytes_left) is non-negative.\n\n3. After the loop termination:\n   - buffer_bytes_left >= size / 2.\n\nNow let's write the loop invariants:\n\n```\n/*@ \n    loop invariant size % 64 == 0;\n    loop invariant \\at(max_msg_size, LoopEntry) == max_msg_size;\n    loop invariant buffer_bytes_left < size / 2;\n    loop invariant size - 2 * buffer_bytes_left >= 0;\n*/\n```"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant buffer_bytes_left >= 0;\n    loop invariant buffer_read_offset > 0;\n    loop invariant size >= 64;\n    loop invariant max_msg_size < -1 || max_msg_size >= size;\n    loop invariant (max_msg_size != -1 && size > max_msg_size) ==> size == max_msg_size;\n*/",
                    "/*@ \n    loop invariant size >= 64;\n    loop invariant max_msg_size >= -1;\n    loop invariant buffer_read_offset > 0;\n    loop invariant buffer_bytes_left >= 0;\n    loop invariant buffer_bytes_left < size / 2;\n    loop invariant \\at(size, LoopEntry) <= size;\n    loop invariant \\at(buffer_bytes_left, LoopEntry) <= buffer_bytes_left;\n    loop invariant (max_msg_size != -1 ==> (size <= max_msg_size));\n*/",
                    "/*@ \n    loop invariant 0 <= buffer_bytes_left;\n    loop invariant size > 0;\n    loop invariant buffer_read_offset > 0;\n    loop invariant max_msg_size >= -1;\n    loop invariant max_msg_size == -1 || max_msg_size >= 0;\n    loop invariant size >= 64;\n    loop invariant size <= max_msg_size || max_msg_size == -1;\n    loop invariant \\at(buffer_bytes_left, LoopEntry) >= buffer_bytes_left;\n*/",
                    "/*@ \n    loop invariant size >= 64;\n    loop invariant max_msg_size >= -1;\n    loop invariant buffer_read_offset > 0;\n    loop invariant buffer_bytes_left >= 0;\n    loop invariant buffer_bytes_left < size / 2;\n    loop invariant (max_msg_size == -1) ==> (size <= 2 * \\at(size, LoopEntry));\n    loop invariant (max_msg_size != -1) ==> (size <= max_msg_size);\n*/",
                    "/*@ \n    loop invariant size % 64 == 0;\n    loop invariant \\at(max_msg_size, LoopEntry) == max_msg_size;\n    loop invariant buffer_bytes_left < size / 2;\n    loop invariant size - 2 * buffer_bytes_left >= 0;\n*/"
                ],
                "inductive_invariants": "loop invariant i1: buffer_bytes_left >= 0;\nloop invariant i2: buffer_read_offset > 0;\nloop invariant i3: size >= 64;\nloop invariant i7: max_msg_size >= -1;\nloop invariant i11: \\at(size, LoopEntry) <= size;\nloop invariant i12: \\at(buffer_bytes_left, LoopEntry) <= buffer_bytes_left;\nloop invariant i14: 0 <= buffer_bytes_left;\nloop invariant i15: size > 0;\nloop invariant i18: max_msg_size == -1 || max_msg_size >= 0;\nloop invariant i29: size % 64 == 0;\nloop invariant i30: \\at(max_msg_size, LoopEntry) == max_msg_size;",
                "final_checker_input": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n    int max_msg_size = unknown_int();\n    int buffer_read_offset = unknown_int();\n    int buffer_bytes_left = unknown_int();\n    if( max_msg_size < -1 || buffer_read_offset <= 0 || buffer_bytes_left < 0 )\n        return 0;\n    int size = 64;\n    /*@\nloop invariant i1: buffer_bytes_left >= 0;\nloop invariant i2: buffer_read_offset > 0;\nloop invariant i3: size >= 64;\nloop invariant i7: max_msg_size >= -1;\nloop invariant i11: \\at(size, LoopEntry) <= size;\nloop invariant i12: \\at(buffer_bytes_left, LoopEntry) <= buffer_bytes_left;\nloop invariant i14: 0 <= buffer_bytes_left;\nloop invariant i15: size > 0;\nloop invariant i18: max_msg_size == -1 || max_msg_size >= 0;\nloop invariant i29: size % 64 == 0;\nloop invariant i30: \\at(max_msg_size, LoopEntry) == max_msg_size;\nloop variant size - 2 * buffer_bytes_left;\n*/\nwhile( buffer_bytes_left < size / 2)\n    {\n        size *= 2;\n        if( max_msg_size != -1 && size > max_msg_size )\n        {\n            size = max_msg_size;\n            break;\n        }\n        buffer_bytes_left = size - buffer_bytes_left;\n    }\n    return 0;\n}",
                "checker_message": "loop invariant buffer_bytes_left >= 0 is inductive.\nloop invariant buffer_read_offset > 0 is inductive.\nloop invariant size >= 64 is inductive.\nloop invariant max_msg_size >= -1 is inductive.\nloop invariant \\at(size, LoopEntry) <= size is inductive.\nloop invariant \\at(buffer_bytes_left, LoopEntry) <= buffer_bytes_left is inductive.\nloop invariant 0 <= buffer_bytes_left is inductive.\nloop invariant size > 0 is inductive.\nloop invariant max_msg_size == -1 || max_msg_size >= 0 is inductive.\nloop invariant size % 64 == 0 is inductive.\nloop invariant \\at(max_msg_size, LoopEntry) == max_msg_size is inductive.\n\nLoop variant is Valid.\n",
                "success": true
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB6.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Mysore_true-termination.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Thun_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_flag.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c"
        ],
        "skipped": [],
        "total": 144,
        "success_count": 73,
        "failure_count": 71,
        "success_rate": 0.5069444444444444
    }
}