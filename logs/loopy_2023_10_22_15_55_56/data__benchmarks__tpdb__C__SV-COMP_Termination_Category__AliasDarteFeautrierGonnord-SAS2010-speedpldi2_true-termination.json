{
    "logs": {
        "file": "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint n = unknown_int();\n\tint m = unknown_int();\n\tint v1, v2;\n\tif (n >= 0 && m > 0) {\n\t\tv1 = n;\n\t\tv2 = 0;\n\t\twhile (v1 > 0) {\n\t\t\tif (v2 < m) {\n\t\t\t\tv2++;\n\t\t\t\tv1--;\n\t\t\t} else {\n\t\t\t\tv2 = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}",
        "success": false,
        "variants": [
            [
                "v1",
                "m - v2"
            ]
        ],
        "variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n- If the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. \n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint n = unknown_int();\n\tint m = unknown_int();\n\tint v1, v2;\n\tif (n >= 0 && m > 0) {\n\t\tv1 = n;\n\t\tv2 = 0;\n\t\twhile (v1 > 0) {\n\t\t\tif (v2 < m) {\n\t\t\t\tv2++;\n\t\t\t\tv1--;\n\t\t\t} else {\n\t\t\t\tv2 = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function (or the sequence of expressions) is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "First, let's identify the variables that are live at the loop head:\n- `v1` starts at `n` and can decrease by 1 in each iteration.\n- `v2` starts at 0 and can increase by 1 or reset to 0 in each iteration.\n\nNow, let's analyze the loop body and find a ranking function involving the variables in the loop body. The loop continues to execute while `v1 > 0`. In each iteration, either `v1` decreases by 1, or `v2` resets to 0. Since `v2` is bounded by `m`, we can use a lexicographic ranking function involving `v1` and `v2`.\n\nThe ranking function for this loop is:\n```\n/*@\n    loop variant v1;\n    loop variant m - v2;\n*/\n```\n\nThis is a valid ranking function because:\n1. Both expressions are positive while the loop is executing, as `v1 > 0` and `v2 < m`.\n2. In each iteration, either `v1` decreases, or `v2` resets to 0, which makes `m - v2` increase. Therefore, the lexicographic ranking function is decreasing with every successive iteration of the loop, ensuring that the loop must terminate.",
            "First, let's note the starting values and constraints for the variables live at the loop head:\n- n >= 0\n- m > 0\n- v1 = n\n- v2 = 0\n\nNow let's analyze the loop body:\n```\nwhile (v1 > 0) {\n\tif (v2 < m) {\n\t\tv2++;\n\t\tv1--;\n\t} else {\n\t\tv2 = 0;\n\t}\n}\n```\n\nIn the loop, v1 is decreasing by 1 in each iteration when v2 < m, and v2 is increasing by 1 until it reaches m, after which it is reset to 0.\n\nA valid lexicographic ranking function for this loop would be (v1, m - v2), as it satisfies the following properties:\n1. Both expressions are positive while the loop is executing: v1 > 0, and since v2 < m, m - v2 > 0.\n2. Either the value of v1 decreases or remains the same. If its value remains the same, the value of m - v2 must decrease.\n\nNow, let's write the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant v1;\n    loop variant m - v2;\n*/\n```",
            "1. Starting values and constraints:\n   - n >= 0\n   - m > 0\n   - v1 = n\n   - v2 = 0\n\n2. Loop body analysis:\n   - The loop condition is v1 > 0.\n   - If v2 < m, v2 increases by 1 and v1 decreases by 1.\n   - If v2 >= m, v2 is reset to 0.\n\n3. Ranking function:\n\nSince we have two variables, v1 and v2, and their values change depending on the value of v2, we need a lexicographic ranking function. The ranking function should have two expressions, one for v1 and one for v2. For every iteration, either the value of the first expression should decrease, or if the first expression remains the same, the second expression should decrease. Both expressions should be positive while the loop is executing.\n\n```\n/*@\n    loop variant v1;\n    loop variant m - v2;\n*/\n```\n\nThis ranking function is valid because:\n- v1 is always positive while the loop is executing (v1 > 0).\n- m - v2 is also always positive because v2 is in the range [0, m - 1].\n- v1 decreases with every iteration when v2 < m.\n- When v1 remains the same (v2 >= m), the second expression (m - v2) decreases, as v2 is reset to 0, making m - v2 equal to m, which is greater than its previous value.",
            "1. The starting values or constraints for the variables that are live at the loop head:\n- n is non-negative (n >= 0)\n- m is positive (m > 0)\n- v1 is initially assigned the value of n\n- v2 is initially 0\n\n2. Analyzing the loop body:\n- The loop continues as long as v1 > 0\n- Inside the loop, if v2 < m, v2 is incremented, and v1 is decremented\n- If v2 >= m, v2 is reset to 0\n\nNow, let's find the ranking function:\n\nWe can use a lexicographic ranking function with two expressions:\n- The first expression is v1, which must be positive for the loop to continue and decreases with every iteration when v2 < m.\n- The second expression is m - v2, which is positive when v2 < m, and decreases with every iteration when v2 < m. When v2 >= m, it resets to m, and the first expression v1 is guaranteed to decrease.\n\nHere is the ranking function in ACSL syntax:\n\n```c\n/*@\n    loop variant v1;\n    loop variant m - v2;\n*/\n```",
            "Starting values/constraints for variables live at the loop head:\n- n is non-negative (n >= 0)\n- m is positive (m > 0)\n- v1 is initialized to n (v1 = n)\n- v2 is initialized to 0 (v2 = 0)\n\nLoop body analysis:\n- In each iteration, either v2 is incremented and v1 is decremented (if v2 < m) or v2 is reset to 0 (if v2 >= m).\n\nNow, let's find the ranking function for this loop:\n\nSince v1 is always decreasing in the loop, we can use v1 as the first expression in the lexicographic ranking function. For the second expression, we can use the difference between m and v2, as this value will decrease when v2 is incremented and will increase when v2 is reset to 0 (but only if v1 remains the same, which means v1 is still positive).\n\nThe ranking function for this loop can be expressed as:\n\n```\n/*@\n    loop variant v1;\n    loop variant m - v2;\n*/\n```\n\nThis ranking function is valid because:\n- v1 is decreasing in each iteration (either by 1 when v2 < m or remains the same when v2 >= m)\n- m - v2 is also decreasing in each iteration when v2 is incremented (and v1 remains the same).\n- Both expressions are positive while the loop is executing (v1 > 0 is the loop condition, and m - v2 is positive as v2 < m for the second expression)."
        ],
        "variant_log": [
            {
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. Lexicographic ranking functions are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint n = unknown_int();\n\tint m = unknown_int();\n\tint v1, v2;\n\tif (n >= 0 && m > 0) {\n\t\tv1 = n;\n\t\tv2 = 0;\n\t\twhile (v1 > 0) {\n\t\t\tif (v2 < m) {\n\t\t\t\tv2++;\n\t\t\t\tv1--;\n\t\t\t} else {\n\t\t\t\tv2 = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(v1, m - v2)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, let's note the starting values and constraints for the variables that are live at the loop head:\n- n >= 0\n- m > 0\n- v1 = n\n- v2 = 0\n\nNext, let's analyze the loop body and the given ranking function (v1, m - v2):\n- The loop condition is v1 > 0.\n- Inside the loop, if v2 < m, v2 is incremented and v1 is decremented. Otherwise, v2 is set to 0.\n\nNow let's find the loop invariants that support the validity of the ranking function and prove the termination of the loop:\n\n```\n/*@ \n    loop invariant 0 <= v1 <= n;\n    loop invariant 0 <= v2 <= m;\n    loop invariant v1 == n - v2 * \\at(v1, LoopEntry) + \\at(v2, LoopEntry);\n    loop invariant v2 < m ==> (v1 < \\at(v1, LoopEntry) || v2 < \\at(v2, LoopEntry));\n*/\n```",
                    "First, let's note the starting values and constraints for the variables live at the loop head:\n\n- n >= 0\n- m > 0\n- v1 = n\n- v2 = 0\n\nNow, let's analyze the loop body and the given ranking function (v1, m - v2):\n\nThe loop condition is v1 > 0. Inside the loop, there are two cases:\n\n1. If v2 < m, then v2 increases by 1 and v1 decreases by 1.\n2. If v2 >= m, then v2 is reset to 0.\n\nNow, let's output loop invariants that support the validity of the ranking function and prove the termination of the loop:\n\n```\n/*@ \n    loop invariant 0 <= v1 <= n;\n    loop invariant 0 <= v2 <= m;\n    loop invariant (v1 > 0) ==> (v2 < m) ==> (v1 - 1 == \\at(v1, LoopEntry) - 1 && v2 + 1 == \\at(v2, LoopEntry) + 1);\n    loop invariant (v1 > 0) ==> (v2 >= m) ==> (v1 == \\at(v1, LoopEntry) && v2 == 0);\n*/\n```",
                    "First, let's note the starting values and constraints for the variables that are live at the loop head. We have `n >= 0`, `m > 0`, `v1 = n`, and `v2 = 0`.\n\nNext, let's analyze the loop body. The loop condition is `v1 > 0`. The given ranking function is (v1, m - v2).\n\nNow, let's output the loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\n```\n/*@ \n    loop invariant 0 <= v1;\n    loop invariant 0 <= v2;\n    loop invariant v2 <= m;\n    loop invariant v1 <= n;\n    loop invariant v1 + v2 <= n + \\at(v2, LoopEntry);\n*/\n```\n\nThese loop invariants show that:\n1. `v1` and `v2` are non-negative.\n2. `v2` is always less than or equal to `m`.\n3. `v1` is always less than or equal to `n`.\n4. The sum of `v1` and `v2` is always less than or equal to `n` plus the value of `v2` at the beginning of the loop.\n\nThese invariants, together with the loop condition `v1 > 0`, imply that the ranking function (v1, m - v2) decreases with every iteration and the loop terminates.",
                    "First, we make note of the starting values or constraints for the variables that are live at the loop head:\n- n is non-negative (n >= 0)\n- m is positive (m > 0)\n- v1 = n\n- v2 = 0\n\nNext, we analyze the loop body and make a note of the loop condition and the given ranking function:\n- Loop condition: v1 > 0\n- Ranking function: (v1, m - v2)\n\nNow, we output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration:\n\n```\n/*@ \n    loop invariant 0 <= v1 <= n;\n    loop invariant 0 <= v2 <= m;\n    loop invariant n >= 0;\n    loop invariant m > 0;\n    loop invariant n - v1 == \\at(v2, LoopEntry);\n    loop invariant (v1 > 0) ==> (v2 < m);\n*/\n```",
                    "Let's analyze the given program and its loop:\n\n- The loop starts with `while (v1 > 0)`.\n- Inside the loop, there is a conditional statement `if (v2 < m)`.\n- If the condition holds, `v2` is incremented by 1 and `v1` is decremented by 1.\n- If the condition does not hold, `v2` is reset to 0.\n- The given loop variant is (v1, m - v2).\n\nNow, let's find the loop invariants to support the loop variant:\n\n1. Before the loop execution, we have the following constraints:\n   - `n >= 0`\n   - `m > 0`\n   - `v1 = n`\n   - `v2 = 0`\n   \n2. In every iteration of the loop:\n   - `v1 >= 0`\n   - `0 <= v2 <= m`\n   - If `v2 < m`, `v1` decreases and `v2` increases.\n   - If `v2 == m`, `v2` is reset to 0.\n\n3. After the loop termination:\n   - `v1 == 0`\n   - `0 <= v2 <= m`\n\nNow, let's output the loop invariants:\n\n```\n/*@ \n    loop invariant v1 >= 0;\n    loop invariant 0 <= v2 <= m;\n    loop invariant (v2 < m) ==> (\\at(v1, LoopEntry) > v1);\n    loop invariant (v2 == m) ==> (\\at(v2, LoopEntry) == 0);\n*/\n```"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant 0 <= v1 <= n;\n    loop invariant 0 <= v2 <= m;\n    loop invariant v1 == n - v2 * \\at(v1, LoopEntry) + \\at(v2, LoopEntry);\n    loop invariant v2 < m ==> (v1 < \\at(v1, LoopEntry) || v2 < \\at(v2, LoopEntry));\n*/",
                    "/*@ \n    loop invariant 0 <= v1 <= n;\n    loop invariant 0 <= v2 <= m;\n    loop invariant (v1 > 0) ==> (v2 < m) ==> (v1 - 1 == \\at(v1, LoopEntry) - 1 && v2 + 1 == \\at(v2, LoopEntry) + 1);\n    loop invariant (v1 > 0) ==> (v2 >= m) ==> (v1 == \\at(v1, LoopEntry) && v2 == 0);\n*/",
                    "/*@ \n    loop invariant 0 <= v1;\n    loop invariant 0 <= v2;\n    loop invariant v2 <= m;\n    loop invariant v1 <= n;\n    loop invariant v1 + v2 <= n + \\at(v2, LoopEntry);\n*/",
                    "/*@ \n    loop invariant 0 <= v1 <= n;\n    loop invariant 0 <= v2 <= m;\n    loop invariant n >= 0;\n    loop invariant m > 0;\n    loop invariant n - v1 == \\at(v2, LoopEntry);\n    loop invariant (v1 > 0) ==> (v2 < m);\n*/",
                    "/*@ \n    loop invariant v1 >= 0;\n    loop invariant 0 <= v2 <= m;\n    loop invariant (v2 < m) ==> (\\at(v1, LoopEntry) > v1);\n    loop invariant (v2 == m) ==> (\\at(v2, LoopEntry) == 0);\n*/"
                ],
                "inductive_invariants": "loop invariant i1: 0 <= v1 <= n;\nloop invariant i2: 0 <= v2 <= m;\nloop invariant i9: 0 <= v1;\nloop invariant i10: 0 <= v2;\nloop invariant i11: v2 <= m;\nloop invariant i12: v1 <= n;\nloop invariant i13: v1 + v2 <= n + \\at(v2, LoopEntry);\nloop invariant i16: n >= 0;\nloop invariant i17: m > 0;\nloop invariant i20: v1 >= 0;\nloop invariant i23: (v2 == m) ==> (\\at(v2, LoopEntry) == 0);",
                "final_checker_input": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint n = unknown_int();\n\tint m = unknown_int();\n\tint v1, v2;\n\tif (n >= 0 && m > 0) {\n\t\tv1 = n;\n\t\tv2 = 0;\n\t\t//@ ghost variant_expression measure = { v1, m - v2 };\n/*@\nloop invariant i1: 0 <= v1 <= n;\nloop invariant i2: 0 <= v2 <= m;\nloop invariant i9: 0 <= v1;\nloop invariant i10: 0 <= v2;\nloop invariant i11: v2 <= m;\nloop invariant i12: v1 <= n;\nloop invariant i13: v1 + v2 <= n + \\at(v2, LoopEntry);\nloop invariant i16: n >= 0;\nloop invariant i17: m > 0;\nloop invariant i20: v1 >= 0;\nloop invariant i23: (v2 == m) ==> (\\at(v2, LoopEntry) == 0);\nloop invariant measure.a == v1 && measure.b == m - v2;\nloop variant measure for lexicographic;\n*/\nwhile (v1 > 0) {\n\t\t\tif (v2 < m) {\n\t\t\t\tv2++;\n\t\t\t\tv1--;\n\t\t\t} else {\n\t\t\t\tv2 = 0;\n\t\t\t}\n\t\t\n//@ ghost measure.a = v1;\n//@ ghost measure.b = m - v2;\n}\n\t}\n\treturn 0;\n}",
                "checker_message": "loop invariant 0 <= v1 <= n is inductive.\nloop invariant 0 <= v2 <= m is inductive.\nloop invariant 0 <= v1 is inductive.\nloop invariant 0 <= v2 is inductive.\nloop invariant v2 <= m is inductive.\nloop invariant v1 <= n is inductive.\nloop invariant v1 + v2 <= n + \\at(v2, LoopEntry) is inductive.\nloop invariant n >= 0 is inductive.\nloop invariant m > 0 is inductive.\nloop invariant v1 >= 0 is inductive.\nloop invariant (v2 == m) ==> (\\at(v2, LoopEntry) == 0) is inductive.\n\nLoop variant is Invalid.\n",
                "success": false
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Thun_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c"
        ],
        "skipped": [],
        "total": 116,
        "success_count": 60,
        "failure_count": 56,
        "success_rate": 0.5172413793103449
    }
}