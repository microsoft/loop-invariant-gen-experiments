{
    "logs": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n\tx = unknown_int();\n\ty = unknown_int();\n\tif (2*y >= 1) {\n    \twhile (x >= 0) {\n\t    \tx = x - 2*y + 1;\n\t    }\n\t}\n\treturn 0;\n}",
        "success": true,
        "variants": [
            [
                "x"
            ]
        ],
        "variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n- If the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. \n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n\tx = unknown_int();\n\ty = unknown_int();\n\tif (2*y >= 1) {\n    \twhile (x >= 0) {\n\t    \tx = x - 2*y + 1;\n\t    }\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function (or the sequence of expressions) is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "First, let's note the starting values or constraints for the variables that are live at the loop head.\n\n- x: It is an integer with an unknown initial value.\n- y: It is an integer with the constraint 2*y >= 1.\n\nNow, let's analyze the loop body and find a ranking function involving the variables in the loop body.\n\nThe loop condition is x >= 0, which means that the loop will continue executing as long as x is non-negative. During each iteration of the loop, the value of x is updated as follows:\n\nx = x - 2*y + 1\n\nSince 2*y >= 1, we know that y is positive. Therefore, in each iteration, the value of x will decrease by at least 1 (when y = 0.5, which is the smallest possible value). This means that the value of x will eventually become negative, causing the loop to terminate.\n\nThe ranking function for this loop is x, as it decreases with every iteration and is positive when the loop executes.\n\nHere's the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x;\n*/\n```",
            "1. The starting values or constraints for the variables that are live at the loop head:\n   - x is an unknown integer\n   - y is an unknown integer, but the condition `2*y >= 1` must be true for the loop to execute.\n\n2. Analyze the loop body:\n   - The loop condition is `x >= 0`\n   - In each iteration, x is updated as `x = x - 2*y + 1`\n\nNow let's find the ranking function.",
            "1. Make note of the starting values or constraints for the variables that are live at the loop head.\n\nIn this program, `x` and `y` are the variables live at the loop head. Initially, `x` and `y` are assigned values by the `unknown_int()` function, so we do not know their exact initial values. However, we do know that `2*y >= 1`, which implies that `y >= 1/2`. Since `y` is an integer, this means `y >= 1`.\n\n2. Analyze the loop body and find a ranking function involving the variables in the loop body.\n\nThe loop body has the following statement: `x = x - 2*y + 1`. This statement decreases the value of `x` in every iteration of the loop. Since `y >= 1`, we know that `2*y - 1 >= 1`. \n\nNow, let's find a ranking function involving `x` and `y`. Since `x` is decreasing in every iteration, we can use `x` as the ranking function. \n\n3. Output the ranking function in one code block, in ACSL syntax.\n\n```\n/*@\n    loop variant x;\n*/\n```\n\nThis is a valid ranking function because `x` decreases in every iteration of the loop (`x = x - 2*y + 1`), and it is positive while the loop is executing (`x >= 0`).",
            "Starting values or constraints for the variables that are live at the loop head:\n- `x` has an unknown initial value.\n- `y` has an unknown initial value, but the condition `2*y >= 1` must hold for the loop to execute.\n\nAnalyze the loop body:\n- In each iteration, the value of `x` is updated as `x = x - 2*y + 1`.\n\nNow let's find a ranking function involving the variables in the loop body:\n\nWe can use the variable `x` as our ranking function, since it is updated in every iteration of the loop and is the loop termination condition.\n\nThe ranking function for the loop is:\n\n```\n/*@\n    loop variant x;\n*/\n```\n\nThis is a valid ranking function because:\n1. The value of `x` is always positive for the loop to continue executing, as the loop condition is `x >= 0`.\n2. The value of `x` decreases with every successive iteration of the loop, as it is updated as `x = x - 2*y + 1` and we know that `2*y >= 1`.",
            "First, let's make note of the starting values or constraints for the variables that are live at the loop head.\n\n1. The initial value of x is unknown (`x = unknown_int();`)\n2. The initial value of y is unknown (`y = unknown_int();`)\n3. The loop executes when 2*y >= 1\n\nNow, let's analyze the loop body and find a ranking function involving the variables in the loop body.\n\nThe loop body is: `x = x - 2*y + 1;`\n\nWe can identify the ranking function as `x`, as it is the only variable that changes within the loop.\n\nNow, let's check if this ranking function is valid:\n\n1. The value of x must be positive for the loop to continue executing. This is true since the loop condition is `x >= 0`.\n2. The value of x must decrease with every successive iteration of the loop. In each iteration, x is updated with `x - 2*y + 1`, and since `2*y >= 1`, the value of x indeed decreases.\n\nThus, the ranking function for the loop in the given program is:\n\n```\n/*@\n    loop variant x;\n*/\n```"
        ],
        "variant_log": [
            {
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. Lexicographic ranking functions are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n\tx = unknown_int();\n\ty = unknown_int();\n\tif (2*y >= 1) {\n    \twhile (x >= 0) {\n\t    \tx = x - 2*y + 1;\n\t    }\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(x)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, let's note the starting values or constraints for the variables that are live at the loop head:\n- x and y are assigned unknown_int(), which means they can have any integer value.\n- The loop only executes if 2 * y >= 1, which means y >= 1 / 2.\n\nNow, let's analyze the loop condition and the given ranking function:\n- The loop condition is x >= 0.\n- The given ranking function is (x).\n\nLet's find the loop invariants that support the validity of the ranking function and prove the termination of the loop:\n\n```\n/*@ \n    loop invariant x >= \\at(x, LoopEntry) - 2*y + 1;\n    loop invariant 2 * y >= 1;\n    loop invariant y >= 1 / 2;\n*/\n```\n\nThese loop invariants are true:\n(i) before the loop execution: x and y have arbitrary values, and the loop only executes if 2 * y >= 1.\n(ii) in every iteration of the loop: x is decreased by 2 * y - 1, and y remains unchanged.\n(iii) after the loop termination: the loop terminates when x < 0, which means the ranking function (x) has decreased to a non-positive value.",
                    "First, let's make note of the starting values or constraints for the variables that are live at the loop head. Since x and y are uninitialized and can have any integer value, there are no specific starting values. However, we know that the loop executes only when 2*y >= 1.\n\nNow let's analyze the loop body and loop condition. The loop condition is x >= 0, and the loop body updates x as x = x - 2*y + 1. The given ranking function is (x).\n\nNow let's output loop invariants that hold true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration.\n\n```\n/*@ \n    loop invariant 2 * \\at(y, LoopEntry) >= 1;\n    loop invariant x >= \\at(x, LoopEntry) - 2 * \\at(y, LoopEntry) * (1 - (\\at(y, LoopEntry) <= 0)) * (1 + (\\at(y, LoopEntry) < 0));\n    loop invariant x < \\at(x, LoopEntry) - 2 * \\at(y, LoopEntry) * (\\at(y, LoopEntry) > 0);\n*/\n```\n\nHere's a brief explanation of the loop invariants:\n\n1. The first loop invariant ensures that 2*y is greater than or equal to 1 for all iterations.\n2. The second loop invariant bounds the value of x during the loop execution, depending on the value of y at the loop entry. If y > 0, x decreases by 2*y with every iteration. If y < 0, x increases by 2*y with every iteration. If y == 0, x remains unchanged. This invariant holds true for every iteration of the loop.\n3. The third loop invariant ensures that x is less than its initial value minus 2*y for all iterations when y > 0. This shows that x decreases with every iteration of the loop when y > 0.\n\nThese loop invariants together support the validity of the ranking function (x) and prove the termination of the loop.",
                    "First, let's analyze the program:\n\n1. `x` and `y` are assigned unknown integer values.\n2. The loop executes if `2*y >= 1`.\n3. Inside the loop, `x` is updated as `x = x - 2*y + 1`.\n4. The loop continues while `x >= 0`.\n\nNow, let's derive the loop invariants for the loop variant `(x)`:\n\n- Before the loop execution, we know that `2*y >= 1`.\n- In every iteration of the loop, `x` is updated as `x = x - 2*y + 1`.\n- After the loop termination, `x < 0`.\n\nUsing these facts, we can write the loop invariants:\n\n```\n//@\nloop invariant 2*y >= 1 ==> x >= 0;\nloop invariant 2*y >= 1 ==> x >= \\at(x, LoopEntry) - 2*y + 1;\nloop invariant 2*y < 1 ==> x == \\at(x, LoopEntry);\n```",
                    "First, let's analyze the starting values or constraints for the variables that are live at the loop head:\n- x and y are initialized with unknown_int(), which means they can have any integer value.\n- The loop executes only if 2*y >= 1.\n\nNow, let's analyze the loop condition and the given ranking function:\n- The loop condition is x >= 0.\n- The given ranking function is (x).\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration.\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant 2*y >= 1;\n    loop invariant \\at(x, LoopEntry) >= x;\n*/\n```\n\nThese loop invariants ensure that:\n1. x is always non-negative at the beginning of each loop iteration.\n2. 2*y is always greater than or equal to 1, which ensures that the loop will eventually terminate.\n3. The value of x at the beginning of the loop is always greater than or equal to the current value of x, which means x decreases with every loop iteration, supporting the termination of the loop.",
                    "First, let's make a note of the starting values or constraints for the variables that are live at the loop head:\n\n- x and y are assigned values from unknown_int(), which means they can have any integer value.\n\nNow let's analyze the loop body and make a note of the loop condition and the given ranking function:\n\n- Loop condition: x >= 0\n- Ranking function: x\n\nFinally, let's output the loop invariants that support the validity of the ranking function and prove the termination of the loop:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant 2*y >= 1 ==> x <= \\at(x, LoopEntry) - 2*y + 1;\n*/\n```"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant x >= \\at(x, LoopEntry) - 2*y + 1;\n    loop invariant 2 * y >= 1;\n    loop invariant y >= 1 / 2;\n*/",
                    "/*@ \n    loop invariant 2 * \\at(y, LoopEntry) >= 1;\n    loop invariant x >= \\at(x, LoopEntry) - 2 * \\at(y, LoopEntry) * (1 - (\\at(y, LoopEntry) <= 0)) * (1 + (\\at(y, LoopEntry) < 0));\n    loop invariant x < \\at(x, LoopEntry) - 2 * \\at(y, LoopEntry) * (\\at(y, LoopEntry) > 0);\n*/",
                    "//@\nloop invariant 2*y >= 1 ==> x >= 0;\nloop invariant 2*y >= 1 ==> x >= \\at(x, LoopEntry) - 2*y + 1;\nloop invariant 2*y < 1 ==> x == \\at(x, LoopEntry);",
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant 2*y >= 1;\n    loop invariant \\at(x, LoopEntry) >= x;\n*/",
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant 2*y >= 1 ==> x <= \\at(x, LoopEntry) - 2*y + 1;\n*/"
                ],
                "inductive_invariants": "loop invariant i2: 2 * y >= 1;\nloop invariant i3: y >= 1 / 2;\nloop invariant i4: 2 * \\at(y, LoopEntry) >= 1;\nloop invariant i9: 2*y < 1 ==> x == \\at(x, LoopEntry);\nloop invariant i11: 2*y >= 1;\nloop invariant i12: \\at(x, LoopEntry) >= x;",
                "final_checker_input": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n\tx = unknown_int();\n\ty = unknown_int();\n\tif (2*y >= 1) {\n    \t/*@\nloop invariant i2: 2 * y >= 1;\nloop invariant i3: y >= 1 / 2;\nloop invariant i4: 2 * \\at(y, LoopEntry) >= 1;\nloop invariant i9: 2*y < 1 ==> x == \\at(x, LoopEntry);\nloop invariant i11: 2*y >= 1;\nloop invariant i12: \\at(x, LoopEntry) >= x;\nloop variant x;\n*/\nwhile (x >= 0) {\n\t    \tx = x - 2*y + 1;\n\t    }\n\t}\n\treturn 0;\n}",
                "checker_message": "loop invariant 2 * y >= 1 is inductive.\nloop invariant y >= 1 / 2 is inductive.\nloop invariant 2 * \\at(y, LoopEntry) >= 1 is inductive.\nloop invariant 2*y < 1 ==> x == \\at(x, LoopEntry) is inductive.\nloop invariant 2*y >= 1 is inductive.\nloop invariant \\at(x, LoopEntry) >= x is inductive.\n\nLoop variant is Valid.\n",
                "success": true
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c"
        ],
        "skipped": [],
        "total": 71,
        "success_count": 34,
        "failure_count": 37,
        "success_rate": 0.4788732394366197
    }
}