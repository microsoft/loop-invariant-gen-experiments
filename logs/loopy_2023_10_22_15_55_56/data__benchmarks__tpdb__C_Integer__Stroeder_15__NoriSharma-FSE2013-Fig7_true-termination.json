{
    "logs": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig7_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n\tint a, b, c, i, j, M, N;\n\ti = unknown_int();\n\tj = unknown_int();\n\tM = unknown_int();\n\tN = unknown_int();\n    a = i;\n    b = j;\n    c = 0;\n    while (i<M || j<N) {\n    \ti = i + 1;\n    \tj = j + 1;\n    \tc = c + 1;\n    }\n    return 0;\n}",
        "success": false,
        "variants": [
            [
                "M - i",
                "N - j"
            ]
        ],
        "variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n- If the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. \n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n\tint a, b, c, i, j, M, N;\n\ti = unknown_int();\n\tj = unknown_int();\n\tM = unknown_int();\n\tN = unknown_int();\n    a = i;\n    b = j;\n    c = 0;\n    while (i<M || j<N) {\n    \ti = i + 1;\n    \tj = j + 1;\n    \tc = c + 1;\n    }\n    return 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function (or the sequence of expressions) is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "First, let's identify the variables that are live at the loop head:\n- i\n- j\n- M\n- N\n\nNow, let's analyze the loop body and find a ranking function involving these variables:\n- i is incremented by 1 in each iteration\n- j is incremented by 1 in each iteration\n- The loop continues executing as long as i < M or j < N\n\nSince i and j both increase by 1 in each iteration and the loop continues until both i >= M and j >= N, we can use the difference between the upper bounds M, N and the variables i, j as a lexicographic ranking function. The ranking function would be (M - i, N - j).\n\nHere's the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant M - i;\n    loop variant N - j;\n*/\n```",
            "First, let's identify the loop head and the variables that are live at the loop head.\n\nThe loop head is the following condition:\n\n```c\nwhile (i<M || j<N)\n```\n\nThe variables live at the loop head are `i`, `j`, `M`, and `N`.\n\nNow, let's analyze the loop body and find a ranking function involving the variables in the loop body.\n\nThe loop body increments both `i` and `j` by 1, and increments `c` by 1:\n\n```c\ni = i + 1;\nj = j + 1;\nc = c + 1;\n```\n\nSince the loop continues executing as long as `i<M` or `j<N`, we can use the difference between the upper bounds (`M` and `N`) and the current values of the loop variables (`i` and `j`) in our ranking function.\n\nWe can use a lexicographic ranking function with two expressions:\n\n1. The difference between `M` and `i`\n2. The difference between `N` and `j`\n\nThe ranking function is as follows:\n\n```c\n/*@\n    loop variant M - i;\n    loop variant N - j;\n*/\n```\n\nThis ranking function is valid because:\n\n1. The value of both expressions is positive while the loop is executing, as `i<M` or `j<N`.\n2. The value of `M - i` either decreases with every iteration or stays the same. If it stays the same, then `i` must have reached `M`, and `j<N`, so the value of `N - j` must decrease. This ensures that the lexicographic ranking function is decreasing with every iteration of the loop.",
            "First, let's identify the loop's starting values and constraints:\n\n1. The loop starts with the initial values of `i`, `j`, `M`, and `N`.\n2. The loop condition is `i < M || j < N`.\n\nNext, let's analyze the loop body:\n\n1. Both `i` and `j` are incremented by 1 in each iteration.\n2. The loop continues as long as at least one of the conditions `i < M` or `j < N` holds.\n\nNow, we can find the ranking function:\n\nWe can use the lexicographic ranking function with two expressions. The first expression will be the difference between the upper bound and the current value of `i`, and the second expression will be the difference between the upper bound and the current value of `j`. This will ensure that the values are always positive, and at least one of them decreases in each iteration.\n\n```\n/*@\n    loop variant M - i;\n    loop variant N - j;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. The values of both expressions are positive while the loop is executing, as `i < M` or `j < N`.\n2. In each iteration, either `i` increases (making `M - i` decrease) or `j` increases (making `N - j` decrease). So at least one of the expressions is decreasing in every iteration, ensuring the loop terminates.",
            "First, let's make note of the starting values or constraints for the variables that are live at the loop head:\n- i, j, M, and N are all integers with unknown initial values.\n- a = i, b = j, and c = 0.\n\nNow, let's analyze the loop body and find a ranking function involving the variables in the loop body:\n- The loop continues as long as either i < M or j < N.\n- In each iteration, i and j are both incremented by 1, and c is incremented by 1 as well.\n\nWe can use the lexicographic ranking function with two expressions:\n- The first expression will be the difference between the upper bound M and the current value of i.\n- The second expression will be the difference between the upper bound N and the current value of j.\n\nHere's the ranking function in ACSL syntax:\n\n```c\n/*@\n    loop variant M - i;\n    loop variant N - j;\n*/\n```\n\nThis is a valid ranking function because:\n1. The values of the expressions are positive while the loop is executing (i < M and j < N).\n2. The value of the first expression (M - i) decreases with every iteration of the loop, as i is incremented by 1.\n3. If the value of the first expression remains the same, then the value of the second expression (N - j) must decrease, as j is incremented by 1.",
            "First, let's identify the variables that are live at the loop head:\n- i\n- j\n- M\n- N\n- c\n\nNow, let's analyze the loop body and find a ranking function involving the variables in the loop body. The loop condition is `i < M || j < N`. In each iteration of the loop, both `i` and `j` are incremented by 1. We can use the differences `M - i` and `N - j` as ranking functions. Since the loop continues to execute as long as either `i < M` or `j < N`, we can use a lexicographic ranking function.\n\nThe ranking function for this loop can be written as:\n\n```c\n/*@\n    loop variant M - i;\n    loop variant N - j;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. Both `M - i` and `N - j` are non-negative as long as the loop condition is true (`i < M || j < N`).\n2. The values of `M - i` and `N - j` are decreasing with every iteration of the loop, as both `i` and `j` are incremented by 1 in each iteration.\n3. The loop terminates when both `i >= M` and `j >= N`, which means that both `M - i` and `N - j` must be non-positive at the end of the loop."
        ],
        "variant_log": [
            {
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. Lexicographic ranking functions are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n\tint a, b, c, i, j, M, N;\n\ti = unknown_int();\n\tj = unknown_int();\n\tM = unknown_int();\n\tN = unknown_int();\n    a = i;\n    b = j;\n    c = 0;\n    while (i<M || j<N) {\n    \ti = i + 1;\n    \tj = j + 1;\n    \tc = c + 1;\n    }\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(M - i, N - j)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, let's analyze the given program and identify the loop head, loop condition, loop body, and the ranking function.\n\nLoop head: the beginning of the while loop.\nLoop condition: i < M || j < N\nLoop body:\n```\ni = i + 1;\nj = j + 1;\nc = c + 1;\n```\nRanking function: (M - i, N - j)\n\nNow, let's find the loop invariants that hold true before the loop execution, in every iteration of the loop, and after the loop termination.\n\nBefore the loop execution:\n- i and j have unknown values.\n- a is assigned the value of i and b is assigned the value of j.\n- c is initialized to 0.\n\nDuring the loop execution:\n- i and j are both incremented by 1 in each iteration.\n- c is incremented by 1 in each iteration.\n\nAfter the loop termination:\n- The loop condition i < M || j < N is no longer true.\n\nBased on the above observations, we can derive the following loop invariants:\n\n```\n/*@ \n    loop invariant a <= i <= M;\n    loop invariant b <= j <= N;\n    loop invariant i - a == j - b;\n    loop invariant i - a == c;\n*/\n```\n\nThese loop invariants support the ranking function (M - i, N - j) and prove the termination of the loop.",
                    "First, we note the starting values and constraints for the variables live at the loop head:\n\n- i is initialized with an unknown integer value.\n- j is initialized with an unknown integer value.\n- M is initialized with an unknown integer value.\n- N is initialized with an unknown integer value.\n- a is initialized as i.\n- b is initialized as j.\n- c is initialized as 0.\n\nNext, we analyze the loop condition and body:\n\n- The loop condition is: i < M || j < N\n- In the loop body:\n  - i is incremented by 1.\n  - j is incremented by 1.\n  - c is incremented by 1.\n\nNow, we output the loop invariants that support the ranking function (M - i, N - j):\n\n```\n/*@ \n    loop invariant \\at(i, LoopEntry) <= i <= M;\n    loop invariant \\at(j, LoopEntry) <= j <= N;\n    loop invariant c == (i - \\at(i, LoopEntry));\n    loop invariant c == (j - \\at(j, LoopEntry));\n    loop invariant a == \\at(i, LoopEntry);\n    loop invariant b == \\at(j, LoopEntry);\n*/\n```\n\nThese loop invariants imply that the ranking function (M - i, N - j) decreases with every iteration of the loop, and thus we can prove the termination of the loop.",
                    "First, let's note the starting values and constraints for the variables live at the loop head:\n- i, j, M, and N are assigned values from unknown_int(), so they can be any integer value.\n- a is assigned the value of i.\n- b is assigned the value of j.\n- c starts at 0.\n\nNow, let's analyze the loop body and the loop condition:\n- The loop condition is (i < M || j < N).\n- Inside the loop, i is incremented by 1, j is incremented by 1, and c is incremented by 1.\n\nNow, let's output the loop invariants to support the loop variant (M - i, N - j):\n\n```\n/*@ \n    loop invariant a <= i <= M;\n    loop invariant b <= j <= N;\n    loop invariant a == \\at(i, LoopEntry);\n    loop invariant b == \\at(j, LoopEntry);\n    loop invariant 0 <= c;\n    loop invariant i - a == j - b;\n    loop invariant i - a == c;\n*/\n```",
                    "First, let's identify the variables that are live at the loop head and their starting values:\n- i: starts with an unknown value.\n- j: starts with an unknown value.\n- M: starts with an unknown value.\n- N: starts with an unknown value.\n- c: starts with 0.\n\nThe loop condition is i<M || j<N.\n\nNow, let's find the loop invariants that support the loop variant (M - i, N - j):\n\n```\n/*@ \n    loop invariant 0 <= c;\n    loop invariant c <= i;\n    loop invariant c <= j;\n    loop invariant i <= M;\n    loop invariant j <= N;\n    loop invariant i == a + c;\n    loop invariant j == b + c;\n    loop invariant \\at(i, LoopEntry) <= i;\n    loop invariant \\at(j, LoopEntry) <= j;\n*/\n```",
                    "First, let's analyze the initial values and constraints of the variables live at the loop head:\n- i, j, M, and N are assigned unknown_int(), meaning they can have any integer value.\n- a is assigned the value of i.\n- b is assigned the value of j.\n- c is initialized to 0.\n\nNow, let's analyze the loop condition and body:\n- The loop condition is (i < M || j < N).\n- In each iteration of the loop, i, j, and c are incremented by 1.\n\nWith this information, we can now output the loop invariants that support the loop variant (M - i, N - j):\n\n```\n/*@ \n    loop invariant 0 <= c <= \\max(M - a, N - b);\n    loop invariant a <= i <= M;\n    loop invariant b <= j <= N;\n    loop invariant i - a == j - b;\n    loop invariant i - a == c;\n*/\n```"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant a <= i <= M;\n    loop invariant b <= j <= N;\n    loop invariant i - a == j - b;\n    loop invariant i - a == c;\n*/",
                    "/*@ \n    loop invariant \\at(i, LoopEntry) <= i <= M;\n    loop invariant \\at(j, LoopEntry) <= j <= N;\n    loop invariant c == (i - \\at(i, LoopEntry));\n    loop invariant c == (j - \\at(j, LoopEntry));\n    loop invariant a == \\at(i, LoopEntry);\n    loop invariant b == \\at(j, LoopEntry);\n*/",
                    "/*@ \n    loop invariant a <= i <= M;\n    loop invariant b <= j <= N;\n    loop invariant a == \\at(i, LoopEntry);\n    loop invariant b == \\at(j, LoopEntry);\n    loop invariant 0 <= c;\n    loop invariant i - a == j - b;\n    loop invariant i - a == c;\n*/",
                    "/*@ \n    loop invariant 0 <= c;\n    loop invariant c <= i;\n    loop invariant c <= j;\n    loop invariant i <= M;\n    loop invariant j <= N;\n    loop invariant i == a + c;\n    loop invariant j == b + c;\n    loop invariant \\at(i, LoopEntry) <= i;\n    loop invariant \\at(j, LoopEntry) <= j;\n*/",
                    "/*@ \n    loop invariant 0 <= c <= \\max(M - a, N - b);\n    loop invariant a <= i <= M;\n    loop invariant b <= j <= N;\n    loop invariant i - a == j - b;\n    loop invariant i - a == c;\n*/"
                ],
                "inductive_invariants": "loop invariant i3: i - a == j - b;\nloop invariant i4: i - a == c;\nloop invariant i7: c == (i - \\at(i, LoopEntry));\nloop invariant i8: c == (j - \\at(j, LoopEntry));\nloop invariant i9: a == \\at(i, LoopEntry);\nloop invariant i10: b == \\at(j, LoopEntry);\nloop invariant i15: 0 <= c;\nloop invariant i23: i == a + c;\nloop invariant i24: j == b + c;\nloop invariant i25: \\at(i, LoopEntry) <= i;\nloop invariant i26: \\at(j, LoopEntry) <= j;",
                "final_checker_input": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n\tint a, b, c, i, j, M, N;\n\ti = unknown_int();\n\tj = unknown_int();\n\tM = unknown_int();\n\tN = unknown_int();\n    a = i;\n    b = j;\n    c = 0;\n    //@ ghost variant_expression measure = { M - i, N - j };\n/*@\nloop invariant i3: i - a == j - b;\nloop invariant i4: i - a == c;\nloop invariant i7: c == (i - \\at(i, LoopEntry));\nloop invariant i8: c == (j - \\at(j, LoopEntry));\nloop invariant i9: a == \\at(i, LoopEntry);\nloop invariant i10: b == \\at(j, LoopEntry);\nloop invariant i15: 0 <= c;\nloop invariant i23: i == a + c;\nloop invariant i24: j == b + c;\nloop invariant i25: \\at(i, LoopEntry) <= i;\nloop invariant i26: \\at(j, LoopEntry) <= j;\nloop invariant measure.a == M - i && measure.b == N - j;\nloop variant measure for lexicographic;\n*/\nwhile (i<M || j<N) {\n    \ti = i + 1;\n    \tj = j + 1;\n    \tc = c + 1;\n    \n//@ ghost measure.a = M - i;\n//@ ghost measure.b = N - j;\n}\n    return 0;\n}",
                "checker_message": "loop invariant i - a == j - b is inductive.\nloop invariant i - a == c is inductive.\nloop invariant c == (i - \\at(i, LoopEntry)) is inductive.\nloop invariant c == (j - \\at(j, LoopEntry)) is inductive.\nloop invariant a == \\at(i, LoopEntry) is inductive.\nloop invariant b == \\at(j, LoopEntry) is inductive.\nloop invariant 0 <= c is inductive.\nloop invariant i == a + c is inductive.\nloop invariant j == b + c is inductive.\nloop invariant \\at(i, LoopEntry) <= i is inductive.\nloop invariant \\at(j, LoopEntry) <= j is inductive.\n\nLoop variant is Invalid.\n",
                "success": false
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB6.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Mysore_true-termination.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusMin.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.09-no-inv_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Copenhagen_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_easySum.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA6.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Gothenburg_v2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.08.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.03.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Thun_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_flag.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/McCarthy91_Iteration_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NO_24.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Copenhagen_disj_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig7_true-termination.c"
        ],
        "skipped": [],
        "total": 174,
        "success_count": 92,
        "failure_count": 82,
        "success_rate": 0.5287356321839081
    }
}