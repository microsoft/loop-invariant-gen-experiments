{
    "../new_benchmarks/original_benchmarks/sv-benchmarks/loop-invariants/bin-suffix-5.c": {
        "completions": [
            "/*@ \n    loop invariant x % 8 == 5;\n*/",
            "/*@ \n    loop invariant x % 8 == 5;\n    loop invariant x >= 5;\n*/",
            "/*@ \n    loop invariant x >= 5;\n    loop invariant (x - 5) % 8 == 0;\n*/",
            "/*@ \n    loop invariant x >= 5;\n    loop invariant (x - 5) % 8 == 0;\n*/",
            "/*@ \n    loop invariant x >= 5;\n    loop invariant x % 8 == 5;\n*/",
            "/*@\n    loop invariant x >= 5;\n    loop invariant (x - 5) % 8 == 0;\n*/",
            "/*@ \n    loop invariant 5 <= x;\n    loop invariant x % 8 == 5;\n*/",
            "//@\nloop invariant x >= 5;\nloop invariant (x - 5) % 8 == 0;",
            "//@\nloop invariant x >= 5;\nloop invariant (x - 5) % 8 == 0;",
            "/*@\n    loop invariant x >= 5;\n    loop invariant (x - 5) % 8 == 0;\n*/",
            "/*@ \n  loop invariant x >= 5;\n  loop invariant (x - 5) % 8 == 0;\n*/",
            "/*@ \n    loop invariant x >= 5;\n    loop invariant (x - 5) % 8 == 0;\n*/",
            "/*@ \n    loop invariant x >= 5;\n    loop invariant x % 8 == 5;\n*/",
            "/*@ \n    loop invariant x >= 5;\n    loop invariant (x % 2) == 1;\n*/",
            "/*@ \n    loop invariant x >= 5;\n    loop invariant (x - 5) % 8 == 0;\n*/"
        ],
        "expressions": "(x % 2) == 1,
 (x - 5) % 8 == 0,
 5 <= x,
 x % 8 == 5,
 x >= 5"
    },
    "../new_benchmarks/original_benchmarks/sv-benchmarks/loops-crafted-1/vnew2.c": {
        "completions": [
            "/*@ \n  loop invariant 0 <= i && i <= n;\n  loop invariant 0 <= j && j <= n;\n  loop invariant 0 <= k && k <= n;\n  loop invariant i == j && j == k;\n  loop invariant (i % 3) == 0;\n  loop invariant (j % 3) == 0;\n  loop invariant (k % 3) == 0;\n  loop invariant i <= SIZE;\n  loop invariant j <= SIZE;\n  loop invariant k <= SIZE;\n*/",
            "/*@ \n    loop invariant 0 <= i && i <= n;\n    loop invariant 0 <= j && j <= n;\n    loop invariant 0 <= k && k <= n;\n    loop invariant i == j && j == k;\n    loop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0;\n*/",
            "/*@ \n    loop invariant 0 <= i && i <= n && i <= SIZE;\n    loop invariant 0 <= j && j <= n && j <= SIZE;\n    loop invariant 0 <= k && k <= n && k <= SIZE;\n    loop invariant i == j && j == k;\n    loop invariant (i - j) % 3 == 0 && (j - k) % 3 == 0;\n*/",
            "/*@ \n    loop invariant 0 <= i && i <= n;\n    loop invariant 0 <= j && j <= n;\n    loop invariant 0 <= k && k <= n;\n    loop invariant i == j;\n    loop invariant j == k;\n    loop invariant i % 3 == 0;\n    loop invariant j % 3 == 0;\n    loop invariant k % 3 == 0;\n*/",
            "/*@ \n  loop invariant 0 <= i && i <= n;\n  loop invariant 0 <= j && j <= n;\n  loop invariant 0 <= k && k <= n;\n  loop invariant i == j && j == k;\n  loop invariant (n == 0) ==> (i == 0 && j == 0 && k == 0);\n  loop invariant (n > 0) ==> (i % 3 == 0 && j % 3 == 0 && k % 3 == 0);\n*/",
            "/*@ \n    loop invariant 0 <= i && i <= n;\n    loop invariant 0 <= j && j <= n;\n    loop invariant 0 <= k && k <= n;\n    loop invariant i == j && j == k;\n    loop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0;\n*/",
            "/*@ \n    loop invariant 0 <= i && i <= n;\n    loop invariant 0 <= j && j <= n;\n    loop invariant 0 <= k && k <= n;\n    loop invariant i == j && j == k;\n    loop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0;\n*/",
            "/*@ \n    loop invariant 0 <= i && i <= n;\n    loop invariant 0 <= j && j <= n;\n    loop invariant 0 <= k && k <= n;\n    loop invariant i == j && j == k;\n    loop invariant (i % 3) == 0 && (j % 3) == 0 && (k % 3) == 0;\n*/",
            "/*@ \n    loop invariant 0 <= i && i <= n;\n    loop invariant i == j && j == k;\n    loop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0;\n*/",
            "/*@ \n    loop invariant 0 <= i && i <= n;\n    loop invariant 0 <= j && j <= n;\n    loop invariant 0 <= k && k <= n;\n    loop invariant i == j && j == k;\n    loop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0;\n*/",
            "/*@ \n    loop invariant 0 <= i && i <= n;\n    loop invariant 0 <= j && j <= n;\n    loop invariant 0 <= k && k <= n;\n    loop invariant i == j && j == k;\n    loop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0;\n*/",
            "/*@ \n    loop invariant 0 <= i && i <= n && i <= SIZE;\n    loop invariant 0 <= j && j <= n && j <= SIZE;\n    loop invariant 0 <= k && k <= n && k <= SIZE;\n    loop invariant i == j && j == k;\n    loop invariant (i % 3) == 0 && (j % 3) == 0 && (k % 3) == 0;\n*/",
            "/*@ \n    loop invariant 0 <= i && i <= SIZE;\n    loop invariant 0 <= j && j <= SIZE;\n    loop invariant 0 <= k && k <= SIZE;\n    loop invariant i == j && j == k;\n    loop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0;\n*/",
            "@{\n    loop invariant 0 <= i && 0 <= j && 0 <= k;\n    loop invariant i == j && j == k;\n    loop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0;\n    loop invariant i <= n;\n    loop variant n - i;\n}",
            "@{\n    loop invariant 0 <= i <= SIZE;\n    loop invariant 0 <= j <= SIZE;\n    loop invariant 0 <= k <= SIZE;\n    loop invariant i == j;\n    loop invariant j == k;\n    loop invariant i % 3 == 0;\n    loop invariant j % 3 == 0;\n    loop invariant k % 3 == 0;\n    loop invariant (n - i) % 3 == 0;\n}"
        ],
        "expressions": "(i % 3) == 0,
 (i % 3) == 0 && (j % 3) == 0 && (k % 3) == 0,
 (i - j) % 3 == 0 && (j - k) % 3 == 0,
 (j % 3) == 0,
 (k % 3) == 0,
 (n - i) % 3 == 0,
 (n == 0) ==> (i == 0 && j == 0 && k == 0),
 (n > 0) ==> (i % 3 == 0 && j % 3 == 0 && k % 3 == 0),
 0 <= i && 0 <= j && 0 <= k,
 0 <= i && i <= SIZE,
 0 <= i && i <= n,
 0 <= i && i <= n && i <= SIZE,
 0 <= i <= SIZE,
 0 <= j && j <= SIZE,
 0 <= j && j <= n,
 0 <= j && j <= n && j <= SIZE,
 0 <= j <= SIZE,
 0 <= k && k <= SIZE,
 0 <= k && k <= n,
 0 <= k && k <= n && k <= SIZE,
 0 <= k <= SIZE,
 i % 3 == 0,
 i % 3 == 0 && j % 3 == 0 && k % 3 == 0,
 i <= SIZE,
 i <= n,
 i == j,
 i == j && j == k,
 j % 3 == 0,
 j <= SIZE,
 j == k,
 k % 3 == 0,
 k <= SIZE"
    },
    "../new_benchmarks/original_benchmarks/sv-benchmarks/loop-new/count_by_k.c": {
        "completions": [
            "/*@ \n    loop invariant 0 <= k <= 10;\n    loop invariant 0 <= i;\n    loop invariant i <= LARGE_INT * k;\n    loop invariant i % k == 0;\n*/",
            "/*@ \n    loop invariant 0 <= i && i <= LARGE_INT * k;\n    loop invariant i % k == 0;\n*/",
            "/*@ \n    loop invariant i == 0;\n    loop invariant i % k == 0;\n    loop invariant 0 <= i;\n    loop invariant i <= LARGE_INT*k;\n*/",
            "/*@ \n    loop invariant 0 <= i;\n    loop invariant i % k == 0;\n    loop invariant i <= LARGE_INT * k;\n*/",
            "/*@ \n    loop invariant 0 <= i;\n    loop invariant 0 <= k <= 10;\n    loop invariant i % k == 0;\n    loop invariant i <= LARGE_INT * k;\n*/",
            "/*@ \n    loop invariant 0 <= i;\n    loop invariant i % k == 0;\n    loop invariant i <= LARGE_INT * k;\n    loop invariant 0 <= k <= 10;\n*/",
            "/*@\n    loop invariant i >= 0;\n    loop invariant i % k == 0;\n    loop invariant i <= LARGE_INT * k;\n*/",
            "/*@ \n    loop invariant 0 <= i <= LARGE_INT * k;\n    loop invariant 0 <= k <= 10;\n    loop invariant i % k == 0;\n*/",
            "/*@ \n    loop invariant 0 <= i <= LARGE_INT*k;\n    loop invariant i % k == 0;\n    loop invariant 0 <= k && k <= 10;\n*/",
            "/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= LARGE_INT*k;\n    loop invariant i % k == 0;\n    loop invariant 0 <= k && k <= 10;\n*/",
            "/*@ \n  loop invariant 0 <= i && i <= LARGE_INT * k;\n  loop invariant i % k == 0;\n*/",
            "/*@ \n    loop invariant 0 <= i && i <= LARGE_INT * k;\n    loop invariant i % k == 0;\n*/",
            "/*@ \n    loop invariant 0 <= i <= LARGE_INT * k;\n    loop invariant i % k == 0;\n*/",
            "/*@ \n    loop invariant 0 <= i;\n    loop invariant 0 <= k <= 10;\n    loop invariant i % k == 0;\n    loop invariant i <= LARGE_INT * k;\n*/",
            "/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= LARGE_INT * k;\n    loop invariant i % k == 0;\n*/"
        ],
        "expressions": "0 <= i,
 0 <= i && i <= LARGE_INT * k,
 0 <= i <= LARGE_INT * k,
 0 <= i <= LARGE_INT*k,
 0 <= k && k <= 10,
 0 <= k <= 10,
 i % k == 0,
 i <= LARGE_INT * k,
 i <= LARGE_INT*k,
 i == 0,
 i >= 0"
    },
    "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c": {
        "completions": [
            "/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= LARGE_INT * k;\n    loop invariant i % k == 0;\n*/",
            "/*@ \n    loop invariant 0 <= i;\n    loop invariant 0 <= k <= 10;\n    loop invariant i % k == 0;\n    loop invariant i <= LARGE_INT * k;\n*/",
            "/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= LARGE_INT * k;\n    loop invariant i % k == 0;\n*/",
            "/*@ \n    loop invariant i % k == 0;\n    loop invariant 0 <= i;\n    loop invariant i <= LARGE_INT * k;\n*/",
            "/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= LARGE_INT * k;\n    loop invariant i % k == 0;\n*/",
            "/*@\n    loop invariant 0 <= i;\n    loop invariant i % k == 0;\n    loop invariant i <= LARGE_INT * k;\n*/",
            "/*@ \n    loop invariant 0 <= i;\n    loop invariant i % k == 0;\n    loop invariant i <= LARGE_INT * k;\n*/",
            "/*@ \n    loop invariant 0 <= i;\n    loop invariant 0 <= k <= 10;\n    loop invariant i % k == 0;\n    loop invariant i <= LARGE_INT * k;\n*/",
            "/*@ \n    loop invariant 0 <= i && i <= LARGE_INT * k;\n    loop invariant i % k == 0;\n    loop invariant 0 <= k && k <= 10;\n*/",
            "/*@ \n    loop invariant 0 <= i <= LARGE_INT * k;\n    loop invariant i % k == 0;\n    loop invariant 0 <= k && k <= 10;\n*/",
            "/*@ \n    loop invariant 0 <= k && k <= 10;\n    loop invariant 0 <= i;\n    loop invariant i % k == 0;\n    loop invariant i <= LARGE_INT * k;\n*/",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant i % k == 0;\n    loop invariant i <= LARGE_INT * k;\n*/",
            "/*@ \n    loop invariant 0 <= i <= LARGE_INT * k;\n    loop invariant i % k == 0;\n*/",
            "/*@ \n    loop invariant 0 <= i <= LARGE_INT * k;\n    loop invariant i % k == 0;\n*/",
            "/*@ \n    loop invariant 0 <= i <= LARGE_INT*k;\n    loop invariant i % k == 0;\n    loop invariant 0 <= k && k <= 10;\n*/"
        ],
        "expressions": "0 <= i,
 0 <= i && i <= LARGE_INT * k,
 0 <= i <= LARGE_INT * k,
 0 <= i <= LARGE_INT*k,
 0 <= k && k <= 10,
 0 <= k <= 10,
 i % k == 0,
 i <= LARGE_INT * k,
 i >= 0"
    },
    "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/fig2.c": {
        "completions": [
            "//@\n  loop invariant x <= y;\n  loop invariant 2 * x <= y;\n  loop invariant y <= 3 * x + 3;\n  loop invariant z <= 10 * x;\n  loop invariant w <= 10 * x;\n  loop invariant x >= 0;\n  loop invariant y >= 0;\n  loop invariant z >= 0;\n  loop invariant w >= 0;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y % 2 == 0;\n    loop invariant z >= 0;\n    loop invariant w >= 0;\n    loop invariant x < 4 || z <= 10 * (x - 4);\n    loop invariant x < 4 || w <= 10 * (x - 4);\n    loop invariant 3 * x >= y;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y <= 2 * x + 1;\n    loop invariant y >= -3 * x;\n    loop invariant z >= 0;\n    loop invariant w >= 0;\n    loop invariant (x >= z && w > y) ==> (3 * x >= y);\n*/",
            "/*@ \n  loop invariant 0 <= x;\n  loop invariant 0 <= y;\n  loop invariant 0 <= z;\n  loop invariant 0 <= w;\n  loop invariant y <= 2*x;\n  loop invariant (x >= z && w > y) ==> (y == -\\old(y));\n  loop invariant (x >= z && w > y) ==> (x == -\\old(x));\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant 0 <= z;\n    loop invariant 0 <= w;\n    loop invariant 2*x <= y;\n    loop invariant (x < z) ==> (3*x >= y);\n    loop invariant (x >= z && w > y) ==> (y <= 0 && x <= 0);\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0 && y % 2 == 0;\n    loop invariant z >= 0 && z % 10 == 0;\n    loop invariant w >= 0 && w % 10 == 0;\n    loop invariant (x >= 4) ==> (y >= x);\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant z >= 0;\n    loop invariant w >= 0;\n    loop invariant y % 2 == 0;\n    loop invariant x >= 4 ==> y >= 2 * x;\n    loop invariant x < 4 ==> y <= 2 * x;\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant 0 <= z;\n    loop invariant 0 <= w;\n    loop invariant y <= 2*x;\n    loop invariant z <= 10*x;\n    loop invariant w <= 10*x;\n    loop invariant (w <= y) || (x >= z);\n*/",
            "/*@ \n    loop invariant x >= 0 && y >= 0 && z >= 0 && w >= 0;\n    loop invariant y >= 2 * x;\n    loop invariant z >= 10 * x;\n    loop invariant (x >= z) ==> (y >= w);\n    loop invariant (x < z) ==> (y <= w);\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant z >= 0;\n    loop invariant w >= 0;\n    loop invariant 2 * x <= y;\n    loop invariant x <= z;\n    loop invariant (x >= 4) ==> (y >= 3 * x);\n    loop invariant (x < 4) ==> (y == 2 * x);\n    loop invariant (x >= 4) ==> (z >= 10 * x);\n    loop invariant (x < 4) ==> (z == 0);\n    loop invariant (x >= 4) ==> (w >= 10 * x);\n    loop invariant (x < 4) ==> (w == 0);\n    loop invariant (x >= z && w > y) ==> (x == -x);\n    loop invariant (x >= z && w > y) ==> (y == -y);\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant z >= 0;\n    loop invariant w >= 0;\n    loop invariant x <= y;\n    loop invariant 3*x >= y;\n    loop invariant (x >= 4 && unknown_int() != 0) ==> (z <= w);\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant 0 <= z;\n    loop invariant 0 <= w;\n    loop invariant 3*x >= y;\n    loop invariant (x >= z && w > y) ==> !(3*x >= y);\n    loop invariant z <= w;\n*/",
            "/*@\n    loop invariant x >= 0;\n    loop invariant y % 2 == 0;\n    loop invariant z % 10 == 0;\n    loop invariant w % 10 == 0;\n    loop invariant x >= 4 ==> y >= 2*x && z >= 10*x && w >= 10*x;\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant 0 <= z;\n    loop invariant 0 <= w;\n    loop invariant x <= 2 * y;\n    loop invariant y <= 3 * x;\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant 0 <= z;\n    loop invariant 0 <= w;\n    loop invariant y <= 2 * x;\n    loop invariant (x >= 4) ==> (y <= 3 * x);\n    loop invariant (x >= 4 && unknown_int()) ==> (z <= 10 * x && w <= 10 * x);\n*/"
        ],
        "expressions": "(w <= y) || (x >= z),
 (x < 4) ==> (w == 0),
 (x < 4) ==> (y == 2 * x),
 (x < 4) ==> (z == 0),
 (x < z) ==> (3*x >= y),
 (x < z) ==> (y <= w),
 (x >= 4 && unknown_int() != 0) ==> (z <= w),
 (x >= 4 && unknown_int()) ==> (z <= 10 * x && w <= 10 * x),
 (x >= 4) ==> (w >= 10 * x),
 (x >= 4) ==> (y <= 3 * x),
 (x >= 4) ==> (y >= 3 * x),
 (x >= 4) ==> (y >= x),
 (x >= 4) ==> (z >= 10 * x),
 (x >= z && w > y) ==> !(3*x >= y),
 (x >= z && w > y) ==> (3 * x >= y),
 (x >= z && w > y) ==> (x == -\\old(x)),
 (x >= z && w > y) ==> (x == -x),
 (x >= z && w > y) ==> (y <= 0 && x <= 0),
 (x >= z && w > y) ==> (y == -\\old(y)),
 (x >= z && w > y) ==> (y == -y),
 (x >= z) ==> (y >= w),
 0 <= w,
 0 <= x,
 0 <= y,
 0 <= z,
 2 * x <= y,
 2*x <= y,
 3 * x >= y,
 3*x >= y,
 w % 10 == 0,
 w <= 10 * x,
 w <= 10*x,
 w >= 0,
 w >= 0 && w % 10 == 0,
 x < 4 ==> y <= 2 * x,
 x < 4 || w <= 10 * (x - 4),
 x < 4 || z <= 10 * (x - 4),
 x <= 2 * y,
 x <= y,
 x <= z,
 x >= 0,
 x >= 0 && y >= 0 && z >= 0 && w >= 0,
 x >= 4 ==> y >= 2 * x,
 x >= 4 ==> y >= 2*x && z >= 10*x && w >= 10*x,
 y % 2 == 0,
 y <= 2 * x,
 y <= 2 * x + 1,
 y <= 2*x,
 y <= 3 * x,
 y <= 3 * x + 3,
 y >= -3 * x,
 y >= 0,
 y >= 0 && y % 2 == 0,
 y >= 2 * x,
 z % 10 == 0,
 z <= 10 * x,
 z <= 10*x,
 z <= w,
 z >= 0,
 z >= 0 && z % 10 == 0,
 z >= 10 * x"
    },
    "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c": {
        "completions": [
            "/*@ \n    loop invariant 0 <= i <= LARGE_INT;\n    loop invariant 0 <= k <= LARGE_INT;\n    loop invariant i <= k * LARGE_INT;\n*/",
            "/*@ \n    loop invariant 0 <= i < LARGE_INT;\n    loop invariant 0 <= k <= LARGE_INT;\n    loop invariant (1 <= j && j < LARGE_INT) ==> (i + j <= LARGE_INT && k + 1 <= LARGE_INT);\n*/",
            "/*@ \n    loop invariant 0 <= i <= LARGE_INT;\n    loop invariant 0 <= k <= LARGE_INT;\n    loop invariant i <= k * LARGE_INT;\n*/",
            "/*@ \n    loop invariant 0 <= i;\n    loop invariant 0 <= k;\n    loop invariant i <= LARGE_INT * k;\n*/",
            "/*@ \n    loop invariant 0 <= i <= LARGE_INT;\n    loop invariant 0 <= k <= LARGE_INT;\n    loop invariant i == 0 ==> k == 0;\n    loop invariant i > 0 ==> k > 0;\n*/",
            "/*@ \n    loop invariant 0 <= i <= LARGE_INT;\n    loop invariant 0 <= k;\n    loop invariant \\forall integer j; 1 <= j < LARGE_INT ==> i + j <= LARGE_INT;\n    loop invariant k <= LARGE_INT;\n*/",
            "/*@ \n    loop invariant 0 <= i <= LARGE_INT;\n    loop invariant 0 <= k <= LARGE_INT;\n    loop invariant i <= k * LARGE_INT;\n*/",
            "/*@ \n    loop invariant 0 <= i <= LARGE_INT;\n    loop invariant 0 <= k <= LARGE_INT;\n    loop invariant i_old <= i;\n    loop invariant (1 <= j < LARGE_INT) ==> (i_new == i_old + j) && (k_new == k_old + 1);\n*/",
            "/*@ \n    loop invariant 0 <= i <= LARGE_INT;\n    loop invariant 0 <= k <= LARGE_INT;\n    loop invariant i == 0 ==> k == 0;\n*/",
            "/*@ \n    loop invariant 0 <= i && i <= LARGE_INT;\n    loop invariant 0 <= k && k <= LARGE_INT;\n    loop invariant \\forall int j; 1 <= j && j < LARGE_INT ==> (i + j <= LARGE_INT && k + 1 <= LARGE_INT);\n*/",
            "/*@\n  loop invariant 0 <= i;\n  loop invariant 0 <= k;\n  loop invariant i <= LARGE_INT;\n  loop invariant k <= LARGE_INT;\n  loop invariant 1 <= j && j < LARGE_INT ==> i + j > i;\n*/",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant k >= 0;\n    loop invariant i <= LARGE_INT * k;\n    loop invariant k <= LARGE_INT;\n*/",
            "/*@\n    loop invariant 0 <= i <= LARGE_INT;\n    loop invariant 0 <= k <= LARGE_INT;\n    loop invariant i <= k * LARGE_INT;\n*/",
            "/*@ \n    loop invariant 0 <= i <= LARGE_INT;\n    loop invariant 0 <= k <= LARGE_INT;\n    loop invariant i == 0 ==> k == 0;\n    loop invariant i > 0 ==> k > 0;\n    loop invariant i < LARGE_INT ==> (1 <= unknown_int() < LARGE_INT);\n*/",
            "/*@ \n    loop invariant 0 <= i <= LARGE_INT;\n    loop invariant 0 <= k <= LARGE_INT;\n    loop invariant i <= k * LARGE_INT;\n*/"
        ],
        "expressions": "(1 <= j && j < LARGE_INT) ==> (i + j <= LARGE_INT && k + 1 <= LARGE_INT),
 (1 <= j < LARGE_INT) ==> (i_new == i_old + j) && (k_new == k_old + 1),
 0 <= i,
 0 <= i && i <= LARGE_INT,
 0 <= i < LARGE_INT,
 0 <= i <= LARGE_INT,
 0 <= k,
 0 <= k && k <= LARGE_INT,
 0 <= k <= LARGE_INT,
 1 <= j && j < LARGE_INT ==> i + j > i,
 \\forall int j; 1 <= j && j < LARGE_INT ==> (i + j <= LARGE_INT && k + 1 <= LARGE_INT),
 \\forall integer j; 1 <= j < LARGE_INT ==> i + j <= LARGE_INT,
 i < LARGE_INT ==> (1 <= unknown_int() < LARGE_INT),
 i <= LARGE_INT,
 i <= LARGE_INT * k,
 i <= k * LARGE_INT,
 i == 0 ==> k == 0,
 i > 0 ==> k > 0,
 i >= 0,
 i_old <= i,
 k <= LARGE_INT,
 k >= 0"
    },
    "../new_benchmarks/original_benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_6.c": {
        "completions": [
            "/*@ \n    loop invariant 0 <= x <= 1000000;\n    loop invariant 500000 <= y <= 1000000;\n    loop invariant x <= y + 500000;\n*/",
            "/*@ \n    loop invariant 0 <= x <= 1000000;\n    loop invariant 500000 <= y;\n    loop invariant x <= y + 500000;\n    loop invariant (x < 500000) ==> (y == 500000);\n    loop invariant (500000 <= x < 750000) ==> (y == x);\n    loop invariant (x >= 750000) ==> (y == x - 250000);\n*/",
            "/*@ \n    loop invariant 0 <= x <= 1000000;\n    loop invariant 500000 <= y <= 1000000;\n    loop invariant z == 0;\n    loop invariant x <= y + 500000;\n*/",
            "/*@ \n    loop invariant 0 <= x <= 1000000;\n    loop invariant 500000 <= y;\n    loop invariant x <= y;\n    loop invariant x + y == 500000 + z;\n    loop invariant z >= 0;\n*/",
            "/*@ \n    loop invariant 0 <= x <= 1000000;\n    loop invariant 500000 <= y <= 1500000;\n    loop invariant x <= y + 500000;\n    loop invariant (x >= 500000) ==> (x - 500000 <= y);\n    loop invariant (x >= 750000) ==> (y >= 750000);\n*/",
            "/*@ \n    loop invariant 0 <= x <= 1000000;\n    loop invariant 500000 <= y;\n    loop invariant x <= y + 500000;\n    loop invariant (x >= 500000) ==> (y >= 500000 + (x - 500000) / 2);\n*/",
            "/*@ \n    loop invariant 0 <= x <= 1000000;\n    loop invariant 500000 <= y <= 1000000;\n    loop invariant x <= y;\n    loop invariant x < 500000 ==> y == 500000;\n    loop invariant 500000 <= x < 750000 ==> y == x;\n    loop invariant 750000 <= x ==> y == x - 250000;\n*/",
            "/*@ \n    loop invariant 0 <= x && x <= 1000000;\n    loop invariant 500000 <= y && y <= 1500000;\n    loop invariant x <= y;\n    loop invariant (x < 500000 ==> y == 500000) && (x >= 500000 ==> y == x + 500000);\n*/",
            "/*@ \n    loop invariant 0 <= x <= 1000000;\n    loop invariant 500000 <= y <= 1000000;\n    loop invariant x >= 500000 ==> y >= x;\n    loop invariant x < 500000 ==> y == 500000;\n*/",
            "@(\n    loop invariant 0 <= x <= 1000000;\n    loop invariant 500000 <= y;\n    loop invariant x <= y;\n    loop invariant (x >= 500000) ==> (y >= x);\n    loop invariant (x >= 750000) ==> (y >= x + (x - 750000));\n)",
            "/*@ \n    loop invariant 0 <= x <= 1000000;\n    loop invariant 500000 <= y;\n    loop invariant z == 0;\n    loop invariant (x <= 500000) ==> (y == 500000);\n    loop invariant (500000 < x <= 750000) ==> (y == x);\n    loop invariant (750000 < x) ==> (y == x - 250000);\n*/",
            "/*@ \n    loop invariant 0 <= x <= 1000000;\n    loop invariant 500000 <= y <= 1000000;\n    loop invariant z == 0;\n    loop invariant x <= y;\n    loop invariant (x <= 500000) ==> (y == 500000);\n    loop invariant (x > 500000) ==> (y == x);\n*/",
            "/*@\n    loop invariant 0 <= x <= 1000000;\n    loop invariant 500000 <= y <= 1000000;\n    loop invariant x <= y;\n    loop invariant (x >= 500000) ==> (y == x);\n    loop invariant (x < 500000) ==> (y == 500000);\n*/",
            "/*@ \n    loop invariant 0 <= x <= 1000000;\n    loop invariant 500000 <= y <= 1000000;\n    loop invariant z == 0;\n    loop invariant (x <= 500000) ==> (x + y == 500000);\n    loop invariant (x > 500000) ==> (x + y == 1000000);\n*/",
            "/*@\n    loop invariant x >= 0;\n    loop invariant x <= 1000000;\n    loop invariant y >= 500000;\n    loop invariant y <= 1500000;\n    loop invariant (x < 500000) ==> (y == 500000);\n    loop invariant (x >= 500000) ==> (y == 500000 + (x - 500000));\n*/"
        ],
        "expressions": "(500000 < x <= 750000) ==> (y == x),
 (500000 <= x < 750000) ==> (y == x),
 (750000 < x) ==> (y == x - 250000),
 (x < 500000 ==> y == 500000) && (x >= 500000 ==> y == x + 500000),
 (x < 500000) ==> (y == 500000),
 (x <= 500000) ==> (x + y == 500000),
 (x <= 500000) ==> (y == 500000),
 (x > 500000) ==> (x + y == 1000000),
 (x > 500000) ==> (y == x),
 (x >= 500000) ==> (x - 500000 <= y),
 (x >= 500000) ==> (y == 500000 + (x - 500000)),
 (x >= 500000) ==> (y == x),
 (x >= 500000) ==> (y >= 500000 + (x - 500000) / 2),
 (x >= 500000) ==> (y >= x),
 (x >= 750000) ==> (y == x - 250000),
 (x >= 750000) ==> (y >= 750000),
 (x >= 750000) ==> (y >= x + (x - 750000)),
 0 <= x && x <= 1000000,
 0 <= x <= 1000000,
 500000 <= x < 750000 ==> y == x,
 500000 <= y,
 500000 <= y && y <= 1500000,
 500000 <= y <= 1000000,
 500000 <= y <= 1500000,
 750000 <= x ==> y == x - 250000,
 x + y == 500000 + z,
 x < 500000 ==> y == 500000,
 x <= 1000000,
 x <= y,
 x <= y + 500000,
 x >= 0,
 x >= 500000 ==> y >= x,
 y <= 1500000,
 y >= 500000,
 z == 0,
 z >= 0"
    },
    "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/split.c": {
        "completions": [
            "/*@ \n    loop invariant 0 <= n <= 2 * k;\n    loop invariant n % 2 == 0 ==> i == j + n / 2;\n    loop invariant n % 2 == 1 ==> i + 1 == j + n / 2;\n    loop invariant b == 0 || b == 1;\n*/",
            "//@ loop invariant 0 <= n <= 2*k;\n//@ loop invariant (n % 2 == 0) ==> (i == j);\n//@ loop invariant (n % 2 == 1) ==> (i == j - 1) || (i == j + 1);",
            "/*@ \n    loop invariant 0 <= n <= 2 * k;\n    loop invariant n % 2 == 0 ==> i == j + n / 2;\n    loop invariant n % 2 == 1 ==> i == j + (n + 1) / 2;\n    loop invariant (n % 2 == 0) == b;\n*/",
            "/*@ \n    loop invariant 0 <= n <= 2*k;\n    loop invariant n % 2 == (i - j) % 2;\n    loop invariant (n + 2*(i - j)) == 2*k;\n*/",
            "/*@ \n    loop invariant 0 <= n <= 2*k;\n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= j <= n;\n    loop invariant n % 2 == 0 ==> (i == j + n/2);\n    loop invariant n % 2 == 1 ==> (i + 1 == j + (n+1)/2);\n*/",
            "//@\nloop invariant 0 <= n <= 2*k;\nloop invariant 0 <= i <= 2*k;\nloop invariant 0 <= j <= 2*k;\nloop invariant n%2 == 0 ==> i == j + n/2;\nloop invariant n%2 == 1 ==> i + 1 == j + n/2;\nloop invariant b == 1 ==> i + j == n;\nloop invariant b == 0 ==> i + j == n - 1;",
            "/*@ \n    loop invariant 0 <= n <= 2*k;\n    loop invariant n % 2 == 0 ==> i == j;\n    loop invariant n % 2 == 1 ==> i + 1 == j;\n    loop invariant b == (n % 2 == 1);\n*/",
            "/*@ \n    loop invariant 0 <= n <= 2*k;\n    loop invariant i == j || i == j + 1;\n    loop invariant n % 2 == 0 ==> (i == j + n/2 && b) || (i == j + n/2 - 1 && !b);\n    loop invariant n % 2 == 1 ==> (i == j + n/2 + 1 && !b) || (i == j + n/2 && b);\n*/",
            "/*@ \n  loop invariant 0 <= n <= 2*k;\n  loop invariant n % 2 == 0 ==> i == j;\n  loop invariant n % 2 == 1 ==> i + 1 == j;\n  loop invariant (n < 2*k) || (i == j);\n*/",
            "/*@\n    loop invariant 0 <= n <= 200;\n    loop invariant n % 2 == 0 ==> i == j + n/2;\n    loop invariant n % 2 == 1 ==> i == j + (n+1)/2;\n*/",
            "/*@ \n    loop invariant 0 <= n <= 2*k;\n    loop invariant n % 2 == 0 ==> i == j + n/2;\n    loop invariant n % 2 == 1 ==> i + 1 == j + n/2;\n    loop invariant b == (n % 2 == 1);\n*/",
            "/*@ \n    loop invariant 0 <= n <= 2*k;\n    loop invariant n % 2 == 0 ==> i == j;\n    loop invariant n % 2 == 1 ==> i + 1 == j;\n*/",
            "/*@ \n  loop invariant 0 <= n <= 2*k;\n  loop invariant n % 2 == 0 ==> i == j;\n  loop invariant n % 2 == 1 ==> i == j - 1;\n  loop invariant b == (n % 2 == 1);\n*/",
            "/*@ \n  loop invariant 0 <= n <= 2*k;\n  loop invariant i + j == 2*n;\n  loop invariant (n % 2 == 0) ==> (i == j);\n  loop invariant (n % 2 != 0) ==> (i == j + 1);\n*/",
            "/*@ \n    loop invariant 0 <= n <= 2*k;\n    loop invariant n % 2 == 0 ==> i == j;\n    loop invariant n % 2 == 1 ==> i == j - 1;\n*/"
        ],
        "expressions": "(n % 2 != 0) ==> (i == j + 1),
 (n % 2 == 0) == b,
 (n % 2 == 0) ==> (i == j),
 (n % 2 == 1) ==> (i == j - 1) || (i == j + 1),
 (n + 2*(i - j)) == 2*k,
 (n < 2*k) || (i == j),
 0 <= i <= 2*k,
 0 <= i <= n,
 0 <= j <= 2*k,
 0 <= j <= n,
 0 <= n <= 2 * k,
 0 <= n <= 2*k,
 0 <= n <= 200,
 b == (n % 2 == 1),
 b == 0 ==> i + j == n - 1,
 b == 0 || b == 1,
 b == 1 ==> i + j == n,
 i + j == 2*n,
 i == j || i == j + 1,
 n % 2 == (i - j) % 2,
 n % 2 == 0 ==> (i == j + n/2 && b) || (i == j + n/2 - 1 && !b),
 n % 2 == 0 ==> (i == j + n/2),
 n % 2 == 0 ==> i == j,
 n % 2 == 0 ==> i == j + n / 2,
 n % 2 == 0 ==> i == j + n/2,
 n % 2 == 1 ==> (i + 1 == j + (n+1)/2),
 n % 2 == 1 ==> (i == j + n/2 + 1 && !b) || (i == j + n/2 && b),
 n % 2 == 1 ==> i + 1 == j,
 n % 2 == 1 ==> i + 1 == j + n / 2,
 n % 2 == 1 ==> i + 1 == j + n/2,
 n % 2 == 1 ==> i == j + (n + 1) / 2,
 n % 2 == 1 ==> i == j + (n+1)/2,
 n % 2 == 1 ==> i == j - 1,
 n%2 == 0 ==> i == j + n/2,
 n%2 == 1 ==> i + 1 == j + n/2"
    }
}