{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  for(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
        "completions": [
            {
                "invariants": "//@\nloop invariant 1 <= i && i <= SIZE + 1;\nloop invariant sn >= 0 && sn <= SIZE * a;\nloop invariant sn == (i - 1) * a || sn == 0;",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\nloop invariant 1 <= i && i <= SIZE + 1;\nloop invariant sn >= 0 && sn <= SIZE * a;\nloop invariant sn == (i - 1) * a || sn == 0;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
                "success": false,
                "checker_message": "Invariant 1 <= i <= SIZE + 1 on line 12: Unknown\nInvariant sn >= 0 && sn <= SIZE * 1 on line 13: Partially proven\nInvariant sn == (i - 1) * 1 || sn == 0 on line 14: Unknown\nPost-condition sn == SIZE * 1 || sn == 0 on line 22: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i && i <= SIZE+1;\n    loop invariant sn >= 0;\n    loop invariant sn == (i-1) * a;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\nloop invariant 1 <= i && i <= SIZE+1;\nloop invariant sn >= 0;\nloop invariant sn == (i-1) * a;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
                "success": false,
                "checker_message": "Invariant 1 <= i <= SIZE + 1 on line 12: Unknown\nInvariant sn >= 0 on line 13: Partially proven\nInvariant sn == (i - 1) * 1 on line 14: Partially proven\nPost-condition sn == SIZE * 1 || sn == 0 on line 22: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\nloop invariant sn >= 0;\nloop invariant sn == (i-1) * a;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}",
                "checker_message_after_prune": "Invariant sn >= 0 on line 13: Valid\nInvariant sn == (i - 1) * 1 on line 14: Valid\nPost-condition sn == SIZE * 1 || sn == 0 on line 22: Unknown\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i;\n    loop invariant sn == (i - 1) * a;\n    loop invariant i <= SIZE + 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\nloop invariant 1 <= i;\nloop invariant sn == (i - 1) * a;\nloop invariant i <= SIZE + 1;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
                "success": false,
                "checker_message": "Invariant 1 <= i on line 12: Partially proven\nInvariant sn == (i - 1) * 1 on line 13: Partially proven\nInvariant i <= SIZE + 1 on line 14: Unknown\nPost-condition sn == SIZE * 1 || sn == 0 on line 22: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\nloop invariant 1 <= i;\nloop invariant sn == (i - 1) * a;\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}",
                "checker_message_after_prune": "Invariant 1 <= i on line 12: Valid\nInvariant sn == (i - 1) * 1 on line 13: Valid\nPost-condition sn == SIZE * 1 || sn == 0 on line 22: Unknown\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i && i <= SIZE + 1;\n    loop invariant sn >= 0;\n    loop invariant sn == a * (i - 1) || (SIZE <= 0 && sn == 0);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\nloop invariant 1 <= i && i <= SIZE + 1;\nloop invariant sn >= 0;\nloop invariant sn == a * (i - 1) || (SIZE <= 0 && sn == 0);\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
                "success": false,
                "checker_message": "Invariant 1 <= i <= SIZE + 1 on line 12: Unknown\nInvariant sn >= 0 on line 13: Partially proven\nInvariant sn == 1 * (i - 1) || (SIZE <= 0 && sn == 0) on line 14: Partially proven\nPost-condition sn == SIZE * 1 || sn == 0 on line 22: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\nloop invariant sn >= 0;\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}",
                "checker_message_after_prune": "Invariant sn >= 0 on line 13: Valid\nPost-condition sn == SIZE * 1 || sn == 0 on line 22: Unknown\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i && i <= SIZE + 1;\n    loop invariant sn >= 0 && sn <= (i - 1) * a;\n    loop invariant (i > SIZE) ==> (sn == SIZE * a);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\nloop invariant 1 <= i && i <= SIZE + 1;\nloop invariant sn >= 0 && sn <= (i - 1) * a;\nloop invariant (i > SIZE) ==> (sn == SIZE * a);\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
                "success": false,
                "checker_message": "Invariant 1 <= i <= SIZE + 1 on line 12: Unknown\nInvariant sn >= 0 && sn <= (i - 1) * 1 on line 13: Partially proven\nInvariant i > SIZE ==> sn == SIZE * 1 on line 14: Unknown\nPost-condition sn == SIZE * 1 || sn == 0 on line 22: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\nloop invariant sn >= 0 && sn <= (i - 1) * a;\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}",
                "checker_message_after_prune": "Invariant sn >= 0 && sn <= (i - 1) * 1 on line 13: Valid\nPost-condition sn == SIZE * 1 || sn == 0 on line 22: Unknown\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  for(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program:\n\nPre-conditions and variable assignments:\n- int i, sn = 0;\n- int SIZE = unknown_int();\n- int v1, v2, v3;\n\nLoop condition: i <= SIZE\n\nPost-condition: sn == SIZE * a || sn == 0\n\nNow, let's determine the loop invariants:\n\n1. Before the loop execution:\n- i is initialized to 1\n- sn is initialized to 0\n\n2. In every iteration of the loop:\n- sn is incremented by a (which is equal to 1)\n- i is incremented by 1\n- v1, v2, and v3 can have any value, so they don't affect the loop invariant\n\n3. After the loop termination:\n- i > SIZE\n- sn is equal to SIZE * a or 0\n\nConsidering these points, we can write the loop invariants as follows:\n\n```\n//@\nloop invariant 1 <= i && i <= SIZE + 1;\nloop invariant sn >= 0 && sn <= SIZE * a;\nloop invariant sn == (i - 1) * a || sn == 0;\n```\n\nThese loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination, and they imply the post-condition."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n\n1. `int i, sn=0;`\n2. `int SIZE = unknown_int();`\n3. `int v1, v2, v3;`\n\nNext, we analyze the loop body and make a note of the loop condition:\n\n- The loop condition is `i<=SIZE`.\n\nNow, we can output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant 1 <= i && i <= SIZE+1;\n    loop invariant sn >= 0;\n    loop invariant sn == (i-1) * a;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's identify the pre-conditions and variable assignments in the program:\n- i is initialized to 1\n- sn is initialized to 0\n- SIZE is assigned an unknown integer value\n- v1, v2, and v3 are assigned unknown integer values inside the loop\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- Loop condition: i <= SIZE\n- Loop body: sn is incremented by a (which is a constant 1), and v1, v2, and v3 are assigned unknown integer values.\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition.\n\n```\n/*@ \n    loop invariant 1 <= i;\n    loop invariant sn == (i - 1) * a;\n    loop invariant i <= SIZE + 1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- int i, sn=0;\n- int SIZE = unknown_int();\n\nNext, analyze the loop body and make a note of the loop condition:\n- for(i=1; i<=SIZE; i++)\n\nNow, let's output the loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant 1 <= i && i <= SIZE + 1;\n    loop invariant sn >= 0;\n    loop invariant sn == a * (i - 1) || (SIZE <= 0 && sn == 0);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions or variable assignments in the program:\n- `int i, sn = 0`\n- `int SIZE = unknown_int()`\n- `int v1, v2, v3`\n\nNext, analyze the loop body and make a note of the loop condition:\n- Loop condition: `i <= SIZE`\n\nNow, let's find the necessary loop invariants of the while loop:\n\n```\n/*@ \n    loop invariant 1 <= i && i <= SIZE + 1;\n    loop invariant sn >= 0 && sn <= (i - 1) * a;\n    loop invariant (i > SIZE) ==> (sn == SIZE * a);\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "//@\nloop invariant 1 <= i && i <= SIZE + 1;\nloop invariant sn >= 0 && sn <= SIZE * a;\nloop invariant sn == (i - 1) * a || sn == 0;",
            "/*@ \n    loop invariant 1 <= i && i <= SIZE+1;\n    loop invariant sn >= 0;\n    loop invariant sn == (i-1) * a;\n*/",
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant sn == (i - 1) * a;\n    loop invariant i <= SIZE + 1;\n*/",
            "/*@ \n    loop invariant 1 <= i && i <= SIZE + 1;\n    loop invariant sn >= 0;\n    loop invariant sn == a * (i - 1) || (SIZE <= 0 && sn == 0);\n*/",
            "/*@ \n    loop invariant 1 <= i && i <= SIZE + 1;\n    loop invariant sn >= 0 && sn <= (i - 1) * a;\n    loop invariant (i > SIZE) ==> (sn == SIZE * a);\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\nloop invariant 1 <= i && i <= SIZE + 1;\nloop invariant sn >= 0 && sn <= SIZE * a;\nloop invariant sn == (i - 1) * a || sn == 0;\nloop invariant 1 <= i && i <= SIZE+1;\nloop invariant sn >= 0;\nloop invariant sn == (i-1) * a;\nloop invariant 1 <= i;\nloop invariant sn == (i - 1) * a;\nloop invariant i <= SIZE + 1;\nloop invariant sn == a * (i - 1) || (SIZE <= 0 && sn == 0);\nloop invariant sn >= 0 && sn <= (i - 1) * a;\nloop invariant (i > SIZE) ==> (sn == SIZE * a);\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
        "checker_output": false,
        "checker_message": "Invariant 1 <= i <= SIZE + 1 on line 12: Unknown\nInvariant sn >= 0 && sn <= SIZE * 1 on line 13: Partially proven\nInvariant sn == (i - 1) * 1 || sn == 0 on line 14: Partially proven\nInvariant 1 <= i <= SIZE + 1 on line 15: Partially proven\nInvariant sn >= 0 on line 16: Partially proven\nInvariant sn == (i - 1) * 1 on line 17: Partially proven\nInvariant 1 <= i on line 18: Partially proven\nInvariant sn == (i - 1) * 1 on line 19: Partially proven\nInvariant i <= SIZE + 1 on line 20: Partially proven\nInvariant sn == 1 * (i - 1) || (SIZE <= 0 && sn == 0) on line 21: Partially proven\nInvariant sn >= 0 && sn <= (i - 1) * 1 on line 22: Partially proven\nInvariant i > SIZE ==> sn == SIZE * 1 on line 23: Partially proven\nPost-condition sn == SIZE * 1 || sn == 0 on line 31: Partially proven\n",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\n\nloop invariant sn == (i - 1) * a || sn == 0;\n\nloop invariant sn >= 0;\nloop invariant sn == (i-1) * a;\nloop invariant 1 <= i;\nloop invariant sn == (i - 1) * a;\n\nloop invariant sn == a * (i - 1) || (SIZE <= 0 && sn == 0);\nloop invariant sn >= 0 && sn <= (i - 1) * a;\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}",
        "checker_output_after_combine_and_prune": false,
        "checker_message_after_combine_and_prune": "Invariant sn == (i - 1) * 1 || sn == 0 on line 14: Valid\nInvariant sn >= 0 on line 16: Valid\nInvariant sn == (i - 1) * 1 on line 17: Valid\nInvariant 1 <= i on line 18: Valid\nInvariant sn == (i - 1) * 1 on line 19: Valid\nInvariant sn == 1 * (i - 1) || (SIZE <= 0 && sn == 0) on line 21: Valid\nInvariant sn >= 0 && sn <= (i - 1) * 1 on line 22: Valid\nPost-condition sn == SIZE * 1 || sn == 0 on line 31: Unknown\n"
    },
    "stats": {
        "success": [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
        ],
        "failure": [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
        ],
        "skipped": [
            0,
            0
        ],
        "total": 240,
        "success_rate": 0.5791666666666667
    }
}