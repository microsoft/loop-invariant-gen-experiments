{
    "file": "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
    "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  int outfilelen = unknown();\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  while(unknown())\n  {\n    \n    if(unknown())\n    {\n      \n      if(unknown())\n\t\n\tgoto AFTERLOOP; \n\n      if(unknown())\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(unknown())  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;//@ assert(0<=out);\n}\n\t{;//@ assert(out<outfilelen);\n}\n\t\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;//@ assert(0<=out);\n}\n      {;//@ assert(out<outfilelen);\n}\n      \n      out++;\n\n      if(unknown()) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;//@ assert(0<=out);\n}\n  {;//@ assert(out<outfilelen);\n}\n  \n  out++;\n RETURN:  return 0;\n}",
    "pass_at_k": [
        0.0,
        0.0,
        0.0,
        0.4,
        0.4,
        0.5,
        0.7,
        0.9,
        0.9,
        0.9,
        0.9,
        0.9,
        1.0,
        1.0,
        1.0
    ],
    "pass_at_k_prune": [
        0.0,
        0.0,
        0.1,
        0.6,
        0.6,
        0.7,
        0.9,
        0.9,
        0.9,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0
    ],
    "checking_exceptions": [],
    "pruning_exceptions": []
}