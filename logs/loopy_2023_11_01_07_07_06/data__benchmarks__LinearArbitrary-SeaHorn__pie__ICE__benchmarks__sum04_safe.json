{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  for(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}\n",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  for(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}\n\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions: None\n\nVariable assignments: \n- `int i, sn=0;`\n\nLoop condition: `i<=SIZE`\n\nLoop body: `sn = sn + a;`\n\nPost-condition: `sn==SIZE*a || sn == 0`\n\nBefore the loop execution, the loop invariant is:\n```\n/*@ \n    loop invariant sn == 0;\n*/\n```\nThis is true because `sn` is assigned to 0 before the loop.\n\nIn every iteration of the loop, the loop invariant is:\n```\n/*@ \n    loop invariant 1 <= i <= SIZE+1;\n    loop invariant sn == a*(i-1);\n*/\n```\nThe first invariant is true because the loop starts with `i=1` and increments by 1 in each iteration, so `i` is always between 1 and `SIZE+1`. The second invariant is true because `sn` is initialized to 0 and `sn` is incremented by `a` in each iteration of the loop.\n\nAfter the loop termination, the loop invariant is:\n```\n/*@ \n    loop invariant sn==SIZE*a || sn == 0;\n*/\n```\nThis is true because `sn` is the sum of `a` added `SIZE` times, so `sn` can either be `0` if `a` is `0`, or `SIZE*a` if `a` is non-zero.\n\nPutting all the loop invariants together, we get:\n```\n/*@ \n    loop invariant sn == 0;\n\n    loop invariant 1 <= i <= SIZE+1;\n    loop invariant sn == a*(i-1);\n\n    loop invariant sn==SIZE*a || sn == 0;\n*/\n```\n\nNote: We do not need to add any conjunctions to bound the maximum and minimum values of `i` or `sn` because they are already bounded by the loop condition and the loop body respectively. Similarly, we do not need to add any implications because there are no non-deterministic variables or guarded assertions in this program.",
            "Pre-conditions:\n- None.\n\nVariable Assignments:\n- `i` is assigned the value `1` at the beginning of the loop.\n- `sn` is assigned the value `0` at the beginning of the program.\n\nLoop Condition:\n- The loop executes as long as the value of `i` is less than or equal to `SIZE`.\n\nLoop Invariants:\n- Before the loop execution, `sn` is equal to `0`. \n\n    ```\n    /*@\n        loop invariant sn == 0;\n    */\n    ```\n\n- In every iteration of the loop, `sn` is equal to `a` multiplied by the number of times the loop has executed so far.\n\n    ```\n    /*@\n        loop invariant sn == (\\at(i, Pre) - 1) * a;\n    */\n    ```\n\n- After the loop termination, `sn` is equal to `a` multiplied by `SIZE`.\n\n    ```\n    /*@\n        loop invariant sn == (i - 1) * a;\n        loop invariant i > SIZE ==> sn == SIZE * a;\n    */\n    ```\n\n- Since the value of `i` is always greater than or equal to `1` during the loop execution, we can add a conjunction to bound the minimum value of `i`.\n\n    ```\n    /*@\n        loop invariant 1 <= i <= SIZE + 1;\n        loop invariant sn == (i - 1) * a;\n        loop invariant i > SIZE ==> sn == SIZE * a;\n    */\n    ```\n\n- Since `sn` is always non-negative during the loop execution, we can add a conjunction to bound the minimum value of `sn`.\n\n    ```\n    /*@\n        loop invariant 0 <= sn;\n        loop invariant 1 <= i <= SIZE + 1;\n        loop invariant sn == (i - 1) * a;\n        loop invariant i > SIZE ==> sn == SIZE * a;\n    */\n    ```\n\n- Since `sn` is always non-negative and `a` is always positive, we can add a conjunction to bound the minimum value of `sn` based on the minimum value of `i`.\n\n    ```\n    /*@\n        loop invariant 0 <= sn;\n        loop invariant a > 0;\n        loop invariant 1 <= i <= SIZE + 1;\n        loop invariant sn == (i - 1) * a;\n        loop invariant i > SIZE ==> sn == SIZE * a;\n    */\n    ```\n\n- Since `sn` is always non-negative and `a` is always positive, we can add a conjunction to bound the maximum value of `sn` based on the maximum value of `i`.\n\n    ```\n    /*@\n        loop invariant 0 <= sn <= SIZE * a;\n        loop invariant a > 0;\n        loop invariant 1 <= i <= SIZE + 1;\n        loop invariant sn == (i - 1) * a;\n        loop invariant i > SIZE ==> sn == SIZE * a;\n    */\n    ```\n\n- Since `i` is always less than or equal to `SIZE + 1`, we can add a conjunction to bound the maximum value of `i`.\n\n    ```\n    /*@\n        loop invariant 0 <= sn <= SIZE * a;\n        loop invariant a > 0;\n        loop invariant 1 <= i <= SIZE + 1;\n        loop invariant i <= SIZE + 1;\n        loop invariant sn == (i - 1) * a;\n        loop invariant i > SIZE ==> sn == SIZE * a;\n    */\n    ```\n\n- Since the assertion is not guarded by a condition, we can add the assertion as an implication.\n\n    ```\n    /*@\n        loop invariant 0 <= sn <= SIZE * a;\n        loop invariant a > 0;\n        loop invariant 1 <= i <= SIZE + 1;\n        loop invariant i <= SIZE + 1;\n        loop invariant sn == (i - 1) * a;\n        loop invariant i > SIZE ==> sn == SIZE * a;\n        loop invariant !(i > SIZE) ==> (sn==(\\at(sn, Pre) + a*(i - \\at(i, Pre))));\n        loop invariant (i > SIZE) ==> (sn==SIZE*a);\n    */\n    ```\n\n- Since `sn` is assigned the value `0` at the beginning of the program, we can use an implication to make the first invariant trivially true.\n\n    ```\n    /*@\n        loop invariant sn == 0 ==> 0 <= sn <= SIZE * a;\n        loop invariant a > 0;\n        loop invariant 1 <= i <= SIZE + 1;\n        loop invariant i <= SIZE + 1;\n        loop invariant sn == (i - 1) * a;\n        loop invariant i > SIZE ==> sn == SIZE * a;\n        loop invariant !(i > SIZE) ==> (sn==(\\at(sn, Pre",
            "First, let's analyze the program and identify the loop invariant. The loop invariant is a statement that holds true for every iteration of the loop. In this program, the loop invariant should hold true for the for loop.\n\nThe loop condition is `i<=SIZE`, which means the loop will execute `SIZE` times.\n\nPre-conditions:\n- `a` is defined as 1.\n- `SIZE` is defined as 8.\n\nLoop Invariant:\n- `1 <= i <= SIZE+1`\n- `sn = (i-1)*a`\n- `sn <= SIZE*a`\n\nExplanation:\n- The first part of the loop invariant `1 <= i <= SIZE+1` is true before the loop execution. \n- The second part of the loop invariant `sn = (i-1)*a` holds true for every iteration of the loop. Before the first iteration, `i=1` and `sn = 0`, so the equation holds true. At the end of each iteration, `i` is incremented by 1 and `sn` is updated as `sn = sn + a`. Therefore, `sn = (i-1)*a` holds true for every iteration of the loop.\n- The third part of the loop invariant `sn <= SIZE*a` holds true for every iteration of the loop. Initially, `sn = 0` and `SIZE*a = 8`. At each iteration, `sn` is incremented by `a=1`. Therefore, `sn` can only take values between `0` and `SIZE*a` inclusive, which implies that `sn <= SIZE*a`.\n\nPost-condition:\n- `sn == SIZE*a || sn == 0`\n\nNow, let's combine all the loop invariants in one code block:\n\n```\n/*@ \n    loop invariant 1 <= i <= SIZE+1;\n    loop invariant sn == (i-1)*a;\n    loop invariant sn <= SIZE*a;\n*/\n``` \n\nNote that we don't need to use any implication or guard condition for this program.",
            "Pre-conditions:\n- The value of `a` is 1.\n- The value of `SIZE` is 8.\n\nVariable assignments:\n- The variable `i` is assigned the value 1.\n- The variable `sn` is assigned the value 0.\n\nLoop condition:\n- The loop runs while `i` is less than or equal to `SIZE`.\n\nLoop invariants:\n- Before the loop execution:\n```\n/*@ \n    loop invariant sn == 0;\n    loop invariant i == 1;\n*/\n```\n- In every iteration of the loop:\n```\n/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n*/\n```\n- After the loop termination:\n```\n/*@ \n    loop invariant sn == i * a || sn == 0;\n*/\n```\nExplanation:\n- Before the loop, the sum `sn` is equal to 0 and the loop index `i` is equal to 1.\n- In every iteration of the loop, the index `i` is between 1 and `SIZE+1`, inclusive, and the sum `sn` is equal to `(i-1)*a`. This is because in each iteration, we add `a` to `sn`, and `i-1` gives the number of times we have added `a` so far.\n- After the loop, the sum `sn` is equal to `i*a` if the loop condition was false, i.e., `i` is equal to `SIZE+1`, or `sn` is equal to 0 if the loop condition was true, i.e., `i` is less than or equal to `SIZE`.",
            "First, let's consider the pre-conditions and variable assignments in the program:\n\nPre-conditions:\n- None.\n\nVariable Assignments:\n- `i` is assigned the value `1` in the `for` loop initialization.\n- `sn` is assigned the value `0` before the `for` loop.\n\nNext, let's analyze the loop body and make a note of the loop condition:\n\nLoop Condition:\n- The loop runs as long as `i` is less than or equal to `SIZE`.\n\nBased on the loop condition, we can add the following loop invariants:\n```\n/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn == (\\sum integer j; 1 <= j <= i-1; a);\n*/\n```\n\nNow, we need to ensure that the loop invariants imply the post-condition `sn==SIZE*a || sn == 0`. \n\nWe can use implication to take care of the conditional nature of the code and use the guard condition in an implication to handle the assertion that is guarded by a condition. \n\n```\n/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn == (\\sum integer j; 1 <= j <= i-1; a);\n    loop invariant (i > SIZE) ==> (sn == SIZE*a);\n    loop invariant (i <= SIZE) ==> (sn <= SIZE*a);\n    loop invariant (i <= SIZE) ==> (sn >= 0);\n*/\n```\n\nFinally, we need to add conjunctions that bound the maximum and minimum values that the variables can take, if such bounds exist. Since `i` and `sn` are both integers, we can add the following bounds:\n\n```\n/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn == (\\sum integer j; 1 <= j <= i-1; a);\n    loop invariant (i > SIZE) ==> (sn == SIZE*a);\n    loop invariant (i <= SIZE) ==> (sn <= SIZE*a);\n    loop invariant (i <= SIZE) ==> (sn >= 0);\n    loop invariant INT_MIN <= i <= INT_MAX;\n    loop invariant INT_MIN <= sn <= INT_MAX;\n*/\n```\n\nThis completes the loop invariants for the given program."
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant sn == 0;\n*/",
            "    /*@\n        loop invariant sn == 0;\n    */",
            "/*@ \n    loop invariant 1 <= i <= SIZE+1;\n    loop invariant sn == (i-1)*a;\n    loop invariant sn <= SIZE*a;\n*/",
            "/*@ \n    loop invariant sn == 0;\n    loop invariant i == 1;\n*/",
            "/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn == (\\sum integer j; 1 <= j <= i-1; a);\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant sn == 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant sn == 0 is established but not preserved.\nAssertion sn == 8 * 1 || sn == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "    /*@\n        loop invariant sn == 0;\n    */",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant sn == 0 is established but not preserved.\nAssertion sn == 8 * 1 || sn == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant 1 <= i <= SIZE+1;\n    loop invariant sn == (i-1)*a;\n    loop invariant sn <= SIZE*a;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant 1 <= i <= SIZE+1 is inductive.\nloop invariant sn == (i-1)*a is inductive.\nloop invariant sn <= SIZE*a is inductive.\nAssertion sn == 8 * 1 || sn == 0: Valid"
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant sn == 0;\n    loop invariant i == 1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant sn == 0 is established but not preserved.\nloop invariant i == 1 is partially proven to be inductive.\nAssertion sn == 8 * 1 || sn == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn == (\\sum integer j; 1 <= j <= i-1; a);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 9: unexpected token 'integer'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 1 <= i <= SIZE + 1;\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 14: unexpected token 'integer'",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: sn == 0;\nloop invariant i2: 1 <= i <= SIZE+1;\nloop invariant i3: sn == (i-1)*a;\nloop invariant i4: sn <= SIZE*a;\nloop invariant i5: i == 1;\nloop invariant i6: 1 <= i <= SIZE + 1;\nloop invariant i7: sn == (\\sum integer j; 1 <= j <= i-1; a);\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}\n",
        "combined_annotation_num_solver_calls": 4,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\nloop invariant i2: 1 <= i <= SIZE+1;\nloop invariant i3: sn == (i-1)*a;\nloop invariant i4: sn <= SIZE*a;\n\nloop invariant i6: 1 <= i <= SIZE + 1;\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c"
        ],
        "skipped": [],
        "total": 216,
        "success_count": 100,
        "failure_count": 116,
        "success_rate": 0.46296296296296297
    }
}