{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
        "benchmark_code": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    while (j >= i) {\n\ti = i + 2;\n\tj = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n\n}",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return;\n\nvoid main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    while (j >= i) {\n\ti = i + 2;\n\tj = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- The main function takes no input arguments.\n- The variables `i` and `j` are uninitialized.\n\nVariable bounds:\n- Since `i` is initialized to 1 and then incremented by 2 in each iteration of the loop, the minimum value of `i` is 1.\n- Since `j` is initialized to 10 and then decremented by 1 in each iteration of the loop, the minimum value of `j` is 1.\n- There are no maximum bounds for `i` and `j`.\n\nLoop condition:\n- The loop continues as long as `j` is greater than or equal to `i`.\n\nPost-condition:\n- `j` is equal to 6.\n\nLoop invariants:\n- Before the loop: `i` is odd, `j` is even, and `j >= i`.\n- In every iteration: `i` is odd, `j` is even, and `j >= i`.\n- After the loop: `j` is equal to 6. \n\nWe can combine these loop invariants into one block:\n```\n/*@\n    loop invariant i%2==1 && j%2==0 && j>=i;\n    loop assigns i,j;\n    loop variant j-i;\n*/\n``` \n- The first line of the loop invariant block states that `i` is always odd and `j` is always even, which holds true since `i` is initialized to 1 and incremented by 2 in each iteration, while `j` is initialized to 10 and decremented by 1 in each iteration.\n- The second line of the loop invariant block states that `j` is always greater than or equal to `i`, which is true as long as the loop condition `j >= i` holds.\n- The `loop assigns` clause specifies that the loop only modifies the variables `i` and `j`.\n- The `loop variant` clause specifies that the difference between `j` and `i` decreases in each iteration of the loop, which means that the loop eventually terminates.",
            "The pre-conditions of the program are:\n- The program has no input parameters.\n- The program has no global variables.\n- The variables i and j are declared as integers and are local to the main function.\n- Initially, i is assigned the value 1 and j is assigned the value 10.\n\nThe loop condition is `j >= i`.\n\nLoop Invariants:\n- `j >= i`\n- `j <= 10`\n- `i <= 11`\n- `i%2 == 1` (since i is incremented by 2 in each iteration, it will always be odd)\n- `j%2 == 0` (since j is decremented by 1 in each iteration, it will always be even)\n- `i <= j + 1` (since i starts at 1 and is incremented by 2 in each iteration, it will always be at most one less than j)\n- `j == 6 ==> i == 11` (since j becomes 6 before the assertion, i should be 11 at that point)\n- `!(j == 6) ==> (true)` (since the assertion is guarded by a condition, we can use implication to make the invariant trivially true at that location)\n\nPutting all the loop invariants together, we get:\n```\n/*@\n    loop invariant j >= i;\n    loop invariant j <= 10;\n    loop invariant i <= 11;\n    loop invariant i%2 == 1;\n    loop invariant j%2 == 0;\n    loop invariant i <= j + 1;\n    loop invariant (j == 6 ==> i == 11);\n    loop invariant (!(j == 6) ==> true);\n*/\n```",
            "Pre-conditions:\n- None\n\nVariable assignments:\n- i is assigned the value 1.\n- j is assigned the value 10.\n\nLoop condition:\n- j >= i\n\nLoop invariants:\n- Before the loop execution:\n    - None\n- In every iteration of the loop:\n    - i is odd.\n    - j = 11 - i.\n- After the loop termination:\n    - j = 6.\n\nExplanation:\n- Before the loop execution, there are no loop invariants to be noted.\n- In every iteration of the loop, i is incremented by 2, which means i is always odd in the loop. j is decremented by 1 in each iteration, which means j is always equal to (11 - i) in the loop.\n- After the loop termination, j has the value 6. This is because i will be equal to 7 after the last iteration of the loop, which means j will be equal to (11 - 7) = 4. Then, i will be incremented by 2, making it equal to 9, and j will be decremented by 1, making it equal to 3. Finally, i will be incremented by 2 again, making it equal to 11, and j will be decremented by 1 again, making it equal to 2. Therefore, the loop terminates when j has the value 6.",
            "Pre-conditions:\n- None.\n\nVariable Assignments:\n- i is assigned the value of 1.\n- j is assigned the value of 10.\n\nLoop Condition:\n- The loop executes as long as j is greater than or equal to i.\n\nLoop Invariants:\n- Before the loop execution, j is initialized to 10. Therefore, j >= 6 is true before the loop execution.\n- In each iteration of the loop, i is incremented by 2 and j is decremented by 1. Therefore, i - j <= -5 is true in every iteration of the loop. Also, i <= 11 is true in every iteration of the loop.\n- After the loop termination, i is greater than j. Therefore, i - j > 0 is true after the loop termination.\n- Since there are no non-deterministic variables, there is no need for any implications to make the invariants trivially true.\n\nPutting it all together, the loop invariants are:\n```\n/*@\n    loop invariant j >= 6;\n    loop invariant i - j <= -5;\n    loop invariant i <= 11;\n    loop invariant i > j ==> i - j > 0;\n*/\n```",
            "Pre-conditions:\n- None\n\nVariable assignments:\n- i is assigned the value 1\n- j is assigned the value 10\n\nLoop condition:\n- j >= i\n\nLoop invariants:\n- i is odd\n- j is even\n- j >= i\n- (j == 6) ==> (j >= i)\n\nExplanation:\n- Before the loop execution, the loop invariants hold true since i is odd and j is even and j >= i.\n- In each iteration of the loop, i is incremented by 2 and j is decremented by 1. Therefore, i remains odd and j remains even. Also, j >= i remains true since j is always decremented by 1 and i is always incremented by 2.\n- After the loop termination, the loop condition j >= i is false. Therefore, j < i and the loop invariant j >= i implies that j == i - 1. Since i is odd, i - 1 is even. Therefore, j is even. Also, since j == 6 is the post-condition, we can add an implication to the loop invariant that says if j == 6 is true, then j >= i must also be true. This implication is true since j cannot be less than i if j == 6 holds true.\n- There are no non-deterministic variables in this program."
        ],
        "annotation_blocks": [
            "/*@\n    loop invariant i%2==1 && j%2==0 && j>=i;\n    loop assigns i,j;\n    loop variant j-i;\n*/",
            "/*@\n    loop invariant j >= i;\n    loop invariant j <= 10;\n    loop invariant i <= 11;\n    loop invariant i%2 == 1;\n    loop invariant j%2 == 0;\n    loop invariant i <= j + 1;\n    loop invariant (j == 6 ==> i == 11);\n    loop invariant (!(j == 6) ==> true);\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- None\n\nVariable assignments:\n- i is assigned the value 1.\n- j is assigned the value 10.\n\nLoop condition:\n- j >= i\n\nLoop invariants:\n- Before the loop execution:\n    - None\n- In every iteration of the loop:\n    - i is odd.\n    - j = 11 - i.\n- After the loop termination:\n    - j = 6.\n\nExplanation:\n- Before the loop execution, there are no loop invariants to be noted.\n- In every iteration of the loop, i is incremented by 2, which means i is always odd in the loop. j is decremented by 1 in each iteration, which means j is always equal to (11 - i) in the loop.\n- After the loop termination, j has the value 6. This is because i will be equal to 7 after the last iteration of the loop, which means j will be equal to (11 - 7) = 4. Then, i will be incremented by 2, making it equal to 9, and j will be decremented by 1, making it equal to 3. Finally, i will be incremented by 2 again, making it equal to 11, and j will be decremented by 1 again, making it equal to 2. Therefore, the loop terminates when j has the value 6."
            ],
            "/*@\n    loop invariant j >= 6;\n    loop invariant i - j <= -5;\n    loop invariant i <= 11;\n    loop invariant i > j ==> i - j > 0;\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- None\n\nVariable assignments:\n- i is assigned the value 1\n- j is assigned the value 10\n\nLoop condition:\n- j >= i\n\nLoop invariants:\n- i is odd\n- j is even\n- j >= i\n- (j == 6) ==> (j >= i)\n\nExplanation:\n- Before the loop execution, the loop invariants hold true since i is odd and j is even and j >= i.\n- In each iteration of the loop, i is incremented by 2 and j is decremented by 1. Therefore, i remains odd and j remains even. Also, j >= i remains true since j is always decremented by 1 and i is always incremented by 2.\n- After the loop termination, the loop condition j >= i is false. Therefore, j < i and the loop invariant j >= i implies that j == i - 1. Since i is odd, i - 1 is even. Therefore, j is even. Also, since j == 6 is the post-condition, we can add an implication to the loop invariant that says if j == 6 is true, then j >= i must also be true. This implication is true since j cannot be less than i if j == 6 holds true.\n- There are no non-deterministic variables in this program."
            ]
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "/*@\n    loop invariant i%2==1 && j%2==0 && j>=i;\n    loop assigns i,j;\n    loop variant j-i;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i%2==1 && j%2==0 && j>=i is established but not preserved.\nAssertion j == 6: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\n\n*/\nwhile (j >= i) {\n\ti = i + 2;\n\tj = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "/*@\n    loop invariant j >= i;\n    loop invariant j <= 10;\n    loop invariant i <= 11;\n    loop invariant i%2 == 1;\n    loop invariant j%2 == 0;\n    loop invariant i <= j + 1;\n    loop invariant (j == 6 ==> i == 11);\n    loop invariant (!(j == 6) ==> true);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: unbound logic variable true. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\n\nloop invariant i2: j <= 10;\nloop invariant i3: i <= 11;\nloop invariant i4: i%2 == 1;\n\n\n\n\n*/\nwhile (j >= i) {\n\ti = i + 2;\n\tj = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- None\n\nVariable assignments:\n- i is assigned the value 1.\n- j is assigned the value 10.\n\nLoop condition:\n- j >= i\n\nLoop invariants:\n- Before the loop execution:\n    - None\n- In every iteration of the loop:\n    - i is odd.\n    - j = 11 - i.\n- After the loop termination:\n    - j = 6.\n\nExplanation:\n- Before the loop execution, there are no loop invariants to be noted.\n- In every iteration of the loop, i is incremented by 2, which means i is always odd in the loop. j is decremented by 1 in each iteration, which means j is always equal to (11 - i) in the loop.\n- After the loop termination, j has the value 6. This is because i will be equal to 7 after the last iteration of the loop, which means j will be equal to (11 - 7) = 4. Then, i will be incremented by 2, making it equal to 9, and j will be decremented by 1, making it equal to 3. Finally, i will be incremented by 2 again, making it equal to 11, and j will be decremented by 1 again, making it equal to 2. Therefore, the loop terminates when j has the value 6.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@\n    loop invariant j >= 6;\n    loop invariant i - j <= -5;\n    loop invariant i <= 11;\n    loop invariant i > j ==> i - j > 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant j >= 6 is established but not preserved.\nloop invariant i - j <= -5 is established but not preserved.\nloop invariant i <= 11 is established but not preserved.\nloop invariant i > j ==> i - j > 0 is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\n\n\n\nloop invariant i4: i > j ==> i - j > 0;\n*/\nwhile (j >= i) {\n\ti = i + 2;\n\tj = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- None\n\nVariable assignments:\n- i is assigned the value 1\n- j is assigned the value 10\n\nLoop condition:\n- j >= i\n\nLoop invariants:\n- i is odd\n- j is even\n- j >= i\n- (j == 6) ==> (j >= i)\n\nExplanation:\n- Before the loop execution, the loop invariants hold true since i is odd and j is even and j >= i.\n- In each iteration of the loop, i is incremented by 2 and j is decremented by 1. Therefore, i remains odd and j remains even. Also, j >= i remains true since j is always decremented by 1 and i is always incremented by 2.\n- After the loop termination, the loop condition j >= i is false. Therefore, j < i and the loop invariant j >= i implies that j == i - 1. Since i is odd, i - 1 is even. Therefore, j is even. Also, since j == 6 is the post-condition, we can add an implication to the loop invariant that says if j == 6 is true, then j >= i must also be true. This implication is true since j cannot be less than i if j == 6 holds true.\n- There are no non-deterministic variables in this program.",
                "error": "Output does not contain at least 1 code block"
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 16: unbound logic variable true. Ignoring loop annotation",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\nloop invariant i1: i%2==1 && j%2==0 && j>=i;\nloop invariant i2: j >= i;\nloop invariant i3: j <= 10;\nloop invariant i4: i <= 11;\nloop invariant i5: i%2 == 1;\nloop invariant i6: j%2 == 0;\nloop invariant i7: i <= j + 1;\nloop invariant i8: (j == 6 ==> i == 11);\nloop invariant i9: (!(j == 6) ==> true);\nloop invariant i10: j >= 6;\nloop invariant i11: i - j <= -5;\nloop invariant i12: i > j ==> i - j > 0;\n*/\nwhile (j >= i) {\n\ti = i + 2;\n\tj = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n\n}",
        "combined_annotation_num_solver_calls": 8,
        "code_after_prune": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\n\n\nloop invariant i3: j <= 10;\nloop invariant i4: i <= 11;\nloop invariant i5: i%2 == 1;\n\n\n\n\n\n\nloop invariant i12: i > j ==> i - j > 0;\n*/\nwhile (j >= i) {\n\ti = i + 2;\n\tj = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c"
        ],
        "skipped": [],
        "total": 189,
        "success_count": 80,
        "failure_count": 109,
        "success_rate": 0.42328042328042326
    }
}