{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
        "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  while (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\nreturn;\n\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  while (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\nreturn;\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- None\n\nVariable Assignments:\n- `old = unknown_uint();`\n- `lock = 0;`\n- `new = old + 1;`\n\nLoop Condition:\n- `new != old`\n\nLoop Invariants:\n- `0 <= old <= UINT_MAX`\n- `0 <= lock <= 1`\n- `old <= new <= old + UINT_MAX`\n\nBefore the loop execution:\n- `0 <= old <= UINT_MAX`\n- `0 <= lock <= 1`\n- `old <= new <= old + UINT_MAX`\n\nIn every iteration of the loop:\n- `0 <= old <= UINT_MAX`\n- `0 <= lock <= 1`\n- `old <= new <= old + UINT_MAX`\n- `lock == 1 ==> new > old`\n- `(lock == 0 && old == \\old(old)) ==> new == old + 1`\n\nAfter the loop termination:\n- `0 <= old <= UINT_MAX`\n- `lock == 1`\n- `old <= new <= old + UINT_MAX`\n- `!(lock == 0) ==> new == old + 1`\n\nWe use the implication `lock == 0 ==> new == old + 1` instead of using if-then.\n\nWe also added a conjunction `0 <= old <= UINT_MAX` to bound the maximum and minimum values that `old` can take. Similarly, `0 <= lock <= 1` bounds the maximum and minimum values that `lock` can take. The conjunction `old <= new <= old + UINT_MAX` bounds the maximum and minimum values that `new` can take.\n\nNote that `unknown()` is a non-deterministic function that can return any value. Therefore, we use the implication `(lock == 0 && old == \\old(old)) ==> new == old + 1` to make the invariant trivially true when `lock` is 0 and `old` does not change.\n\nFinally, the assertion is guarded by the condition `lock == 1`. Therefore, we use the implication `!(lock == 0) ==>` to include this condition in the assertion.\n\nPutting it all together, we get the following loop invariants:\n```\n/*@ \n    loop invariant 0 <= old <= UINT_MAX;\n    loop invariant 0 <= lock <= 1;\n    loop invariant old <= new <= old + UINT_MAX;\n    loop invariant lock == 1 ==> new > old;\n    loop invariant (lock == 0 && old == \\old(old)) ==> new == old + 1;\n    loop invariant !(lock == 0) ==> !(lock==0) && (!( lock==0 ) ==> new == old + 1);\n*/\n```",
            "Pre-conditions:\n- The program does not have any explicit pre-conditions.\n- The variables `lock`, `old`, and `new` contain garbage values.\n\nVariable bounds:\n- `lock` is a Boolean variable and can take values 0 or 1.\n- `old` and `new` are unsigned integers and can take values between 0 and UINT_MAX.\n\nLoop condition:\n- The loop will execute as long as `new` is not equal to `old`.\n\nLoop invariants:\n- Before the loop execution: Since `lock` is initially 0, we can add the invariant `lock == 0`.\n- In every iteration of the loop:\n    - `lock` should be either 0 or 1, so we can add the invariant `lock == 0 || lock == 1`.\n    - Since `new` is incremented only if `unknown()` returns true, we can add the invariant `(unknown() == 0) ==> (new == old + 1)`. This means that if `unknown()` returns false, then `new` remains unchanged.\n    - Since `lock` is set to 1 at the beginning of the loop, we can add the invariant `lock == 1 ==> (new != old)`. This means that if `lock` is 1, then `new` and `old` must be different.\n- After the loop termination:\n    - Since the loop terminates only when `new` is equal to `old`, we can add the invariant `new == old`.\n    - Since `lock` is set to 1 at the beginning of the loop and never set to 0 again, we can add the invariant `lock == 1`.\n\nPutting it all together, the loop invariants for the given program are:\n```\n/*@\n  loop invariant lock == 0;\n  loop invariant lock == 0 || lock == 1;\n  loop invariant (unknown() == 0) ==> (new == old + 1);\n  loop invariant lock == 1 ==> (new != old);\n  loop invariant new == old;\n  loop invariant lock == 1;\n*/\n```",
            "Pre-conditions:\n- None\n\nVariable Assignments:\n- `old`: assigned the value of `unknown_uint()`, which returns a non-negative integer value.\n- `lock`: assigned the value of 0.\n- `new`: assigned the value of `old + 1`.\n\nLoop Condition:\n- `new != old`\n\nLoop Invariants:\n- `0 <= old`\n- `lock == 0 ==> old < new`\n- `lock == 1 ==> old == new`\n- `new == old + 1`\n- `0 <= new`\n- `old <= new`\n- `!(unknown()) ==> new == old + 1`\n- `unknown() ==> new > old`\n- `lock == 0 ==> new > old`\n- `lock == 1 ==> new >= old`\n- `lock == 0 ==> new != old`\n- `lock == 1 ==> new == old + 1`\n\nExplanation:\n- The first invariant `0 <= old` is true before the loop execution because `unknown_uint()` returns a non-negative integer value.\n- The second invariant `lock == 0 ==> old < new` is true before the loop execution because `lock` is initially 0.\n- The third invariant `lock == 1 ==> old == new` is true before the loop execution because `lock` is initially 0 and `old` and `new` are assigned different values before entering the loop.\n- The fourth invariant `new == old + 1` is true before the loop execution because of the assignment `new = old + 1`.\n- The fifth invariant `0 <= new` is true before the loop execution because of the assignment `new = old + 1`.\n- The sixth invariant `old <= new` is true before the loop execution because of the assignment `new = old + 1`.\n- The seventh invariant `!(unknown()) ==> new == old + 1` holds in every iteration because if `unknown()` returns 0, then `new` is incremented by 1, which makes it equal to `old + 1`.\n- The eighth invariant `unknown() ==> new > old` holds in every iteration because if `unknown()` returns a non-zero value, then `new` is incremented by 1, which makes it greater than `old`.\n- The ninth invariant `lock == 0 ==> new > old` holds in every iteration because if `lock` is 0, then `new` is incremented by 1, which makes it greater than `old`.\n- The tenth invariant `lock == 1 ==> new >= old` holds in every iteration because if `lock` is 1, then `new` is not incremented and remains equal to or greater than `old`.\n- The eleventh invariant `lock == 0 ==> new != old` holds in every iteration because if `lock` is 0, then `new` is incremented by 1, which makes it different from `old`.\n- The twelfth invariant `lock == 1 ==> new == old + 1` holds in every iteration because if `lock` is 1, then `new` is not incremented and remains equal to `old + 1`.\n- The assertion `!( lock==0 )` is guarded by the condition `lock=1`, so the invariant `lock == 1 ==> old == new` can be used in an implication to make the assertion true.",
            "Pre-conditions/Variable Assignments:\n- `old` is assigned a non-deterministic unsigned integer value using `unknown_uint()` function.\n- `lock` and `new` are initialized to 0 and `old+1` respectively.\n\nLoop Condition:\n- The loop continues until `new` is not equal to `old`.\n\nLoop Invariants:\n- Since `old` is initialized to a non-deterministic value, we cannot infer any bounds on it.\n- `lock` can only take the values 0 or 1.\n- `new` is initialized to `old+1`, so it is always greater than or equal to `old`.\n- `new` is incremented by 1 in each iteration of the loop, so it is always greater than the initial value of `old`.\n- If `unknown()` returns a non-zero value, then `new` is incremented by 1 and `lock` is set to 0, otherwise `lock` is set to 1 and the value of `new` remains the same.\n- Therefore, we can infer the following loop invariants:\n```\n/*@ \n    loop invariant lock == 0 || lock == 1;\n    loop invariant old <= new;\n    loop invariant new >= \\at(new, Pre);\n    loop invariant new > old ==> lock == 0;\n    loop invariant lock == 1 ==> new == \\at(new, Pre);\n*/\n```\n- The first invariant establishes the possible values of `lock`.\n- The second invariant ensures that `new` is always greater than or equal to `old`.\n- The third invariant ensures that `new` is not decreased during the loop execution.\n- The fourth invariant ensures that if `new` is incremented, then `lock` is set to 0.\n- The fifth invariant ensures that if `lock` is 1, then the value of `new` remains the same. \n- Finally, we need to use the guard condition of the assertion in an implication:\n```\n//@ assert(!( lock==0 )) ==> new == old+1;\n```\n- This assertion checks that `lock` is always equal to 1 at the end of the loop, which implies that `new` is equal to `old+1`. We use the guard condition `!(lock==0)` to ensure that the assertion only applies when `lock` is 1.",
            "Pre-conditions:\n- The program does not have any pre-conditions.\n- The variable `lock` is uninitialized and could have any garbage value.\n\nLoop condition:\n- The loop continues as long as `new` is not equal to `old`.\n\nLoop invariants:\n- The value of `old` is always less than or equal to `new`.\n- The value of `lock` is always either 0 or 1.\n- If `lock` is 1, then `new` is greater than `old`.\n- If `lock` is 0, then `new` is equal to `old` + 1.\n- The value of `new` is always greater than or equal to its initial value `old + 1`.\n- The value of `new` is always less than or equal to `old + INT_MAX`.\n- The value of `lock` is always equal to 0 or 1.\n- If `lock` is 1, then `new` is greater than `old`.\n- If `lock` is 0, then `new` is equal to `old` + 1.\n\nLoop invariants can be combined as follows:\n```\n/*@ \n    loop invariant lock == 0 || lock == 1;\n    loop invariant old <= new;\n    loop invariant new >= old + 1;\n    loop invariant new <= old + INT_MAX;\n    loop invariant lock == 1 ==> new > old;\n    loop invariant lock == 0 ==> new == old + 1;\n*/\n```\n\nPost-condition:\n- The assertion `!(lock == 0)` holds after the loop terminates.\n\nGuarded Assertion:\n- The assertion is not guarded by any condition.\n\nWe have used the `INT_MAX` macro to add a bound on the value of `new`. This is because the value of `new` is incremented in each iteration of the loop and could potentially overflow its maximum value. By adding this bound, we ensure that the loop will terminate when `new` reaches its maximum value. \n\nAlso, we have used implication to handle the non-deterministic value of `lock` at the beginning of the loop. Since the loop invariant requires `lock` to be either 0 or 1, we use an implication to make the invariant trivially true when `lock` is non-deterministic."
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant 0 <= old <= UINT_MAX;\n    loop invariant 0 <= lock <= 1;\n    loop invariant old <= new <= old + UINT_MAX;\n    loop invariant lock == 1 ==> new > old;\n    loop invariant (lock == 0 && old == \\old(old)) ==> new == old + 1;\n    loop invariant !(lock == 0) ==> !(lock==0) && (!( lock==0 ) ==> new == old + 1);\n*/",
            "/*@\n  loop invariant lock == 0;\n  loop invariant lock == 0 || lock == 1;\n  loop invariant (unknown() == 0) ==> (new == old + 1);\n  loop invariant lock == 1 ==> (new != old);\n  loop invariant new == old;\n  loop invariant lock == 1;\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- None\n\nVariable Assignments:\n- `old`: assigned the value of `unknown_uint()`, which returns a non-negative integer value.\n- `lock`: assigned the value of 0.\n- `new`: assigned the value of `old + 1`.\n\nLoop Condition:\n- `new != old`\n\nLoop Invariants:\n- `0 <= old`\n- `lock == 0 ==> old < new`\n- `lock == 1 ==> old == new`\n- `new == old + 1`\n- `0 <= new`\n- `old <= new`\n- `!(unknown()) ==> new == old + 1`\n- `unknown() ==> new > old`\n- `lock == 0 ==> new > old`\n- `lock == 1 ==> new >= old`\n- `lock == 0 ==> new != old`\n- `lock == 1 ==> new == old + 1`\n\nExplanation:\n- The first invariant `0 <= old` is true before the loop execution because `unknown_uint()` returns a non-negative integer value.\n- The second invariant `lock == 0 ==> old < new` is true before the loop execution because `lock` is initially 0.\n- The third invariant `lock == 1 ==> old == new` is true before the loop execution because `lock` is initially 0 and `old` and `new` are assigned different values before entering the loop.\n- The fourth invariant `new == old + 1` is true before the loop execution because of the assignment `new = old + 1`.\n- The fifth invariant `0 <= new` is true before the loop execution because of the assignment `new = old + 1`.\n- The sixth invariant `old <= new` is true before the loop execution because of the assignment `new = old + 1`.\n- The seventh invariant `!(unknown()) ==> new == old + 1` holds in every iteration because if `unknown()` returns 0, then `new` is incremented by 1, which makes it equal to `old + 1`.\n- The eighth invariant `unknown() ==> new > old` holds in every iteration because if `unknown()` returns a non-zero value, then `new` is incremented by 1, which makes it greater than `old`.\n- The ninth invariant `lock == 0 ==> new > old` holds in every iteration because if `lock` is 0, then `new` is incremented by 1, which makes it greater than `old`.\n- The tenth invariant `lock == 1 ==> new >= old` holds in every iteration because if `lock` is 1, then `new` is not incremented and remains equal to or greater than `old`.\n- The eleventh invariant `lock == 0 ==> new != old` holds in every iteration because if `lock` is 0, then `new` is incremented by 1, which makes it different from `old`.\n- The twelfth invariant `lock == 1 ==> new == old + 1` holds in every iteration because if `lock` is 1, then `new` is not incremented and remains equal to `old + 1`.\n- The assertion `!( lock==0 )` is guarded by the condition `lock=1`, so the invariant `lock == 1 ==> old == new` can be used in an implication to make the assertion true."
            ],
            "/*@ \n    loop invariant lock == 0 || lock == 1;\n    loop invariant old <= new;\n    loop invariant new >= \\at(new, Pre);\n    loop invariant new > old ==> lock == 0;\n    loop invariant lock == 1 ==> new == \\at(new, Pre);\n*/",
            "/*@ \n    loop invariant lock == 0 || lock == 1;\n    loop invariant old <= new;\n    loop invariant new >= old + 1;\n    loop invariant new <= old + INT_MAX;\n    loop invariant lock == 1 ==> new > old;\n    loop invariant lock == 0 ==> new == old + 1;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 7,
                "annotations": "/*@ \n    loop invariant 0 <= old <= UINT_MAX;\n    loop invariant 0 <= lock <= 1;\n    loop invariant old <= new <= old + UINT_MAX;\n    loop invariant lock == 1 ==> new > old;\n    loop invariant (lock == 0 && old == \\old(old)) ==> new == old + 1;\n    loop invariant !(lock == 0) ==> !(lock==0) && (!( lock==0 ) ==> new == old + 1);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unbound logic variable UINT_MAX. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\nloop invariant i2: 0 <= lock <= 1;\n\n\n\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "/*@\n  loop invariant lock == 0;\n  loop invariant lock == 0 || lock == 1;\n  loop invariant (unknown() == 0) ==> (new == old + 1);\n  loop invariant lock == 1 ==> (new != old);\n  loop invariant new == old;\n  loop invariant lock == 1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 19: unexpected token ')'",
                "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\nloop invariant i2: lock == 0 || lock == 1;\n\n\n\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- None\n\nVariable Assignments:\n- `old`: assigned the value of `unknown_uint()`, which returns a non-negative integer value.\n- `lock`: assigned the value of 0.\n- `new`: assigned the value of `old + 1`.\n\nLoop Condition:\n- `new != old`\n\nLoop Invariants:\n- `0 <= old`\n- `lock == 0 ==> old < new`\n- `lock == 1 ==> old == new`\n- `new == old + 1`\n- `0 <= new`\n- `old <= new`\n- `!(unknown()) ==> new == old + 1`\n- `unknown() ==> new > old`\n- `lock == 0 ==> new > old`\n- `lock == 1 ==> new >= old`\n- `lock == 0 ==> new != old`\n- `lock == 1 ==> new == old + 1`\n\nExplanation:\n- The first invariant `0 <= old` is true before the loop execution because `unknown_uint()` returns a non-negative integer value.\n- The second invariant `lock == 0 ==> old < new` is true before the loop execution because `lock` is initially 0.\n- The third invariant `lock == 1 ==> old == new` is true before the loop execution because `lock` is initially 0 and `old` and `new` are assigned different values before entering the loop.\n- The fourth invariant `new == old + 1` is true before the loop execution because of the assignment `new = old + 1`.\n- The fifth invariant `0 <= new` is true before the loop execution because of the assignment `new = old + 1`.\n- The sixth invariant `old <= new` is true before the loop execution because of the assignment `new = old + 1`.\n- The seventh invariant `!(unknown()) ==> new == old + 1` holds in every iteration because if `unknown()` returns 0, then `new` is incremented by 1, which makes it equal to `old + 1`.\n- The eighth invariant `unknown() ==> new > old` holds in every iteration because if `unknown()` returns a non-zero value, then `new` is incremented by 1, which makes it greater than `old`.\n- The ninth invariant `lock == 0 ==> new > old` holds in every iteration because if `lock` is 0, then `new` is incremented by 1, which makes it greater than `old`.\n- The tenth invariant `lock == 1 ==> new >= old` holds in every iteration because if `lock` is 1, then `new` is not incremented and remains equal to or greater than `old`.\n- The eleventh invariant `lock == 0 ==> new != old` holds in every iteration because if `lock` is 0, then `new` is incremented by 1, which makes it different from `old`.\n- The twelfth invariant `lock == 1 ==> new == old + 1` holds in every iteration because if `lock` is 1, then `new` is not incremented and remains equal to `old + 1`.\n- The assertion `!( lock==0 )` is guarded by the condition `lock=1`, so the invariant `lock == 1 ==> old == new` can be used in an implication to make the assertion true.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant lock == 0 || lock == 1;\n    loop invariant old <= new;\n    loop invariant new >= \\at(new, Pre);\n    loop invariant new > old ==> lock == 0;\n    loop invariant lock == 1 ==> new == \\at(new, Pre);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 19: unbound logic variable new. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant i1: lock == 0 || lock == 1;\nloop invariant i2: old <= new;\n\nloop invariant i4: new > old ==> lock == 0;\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant lock == 0 || lock == 1;\n    loop invariant old <= new;\n    loop invariant new >= old + 1;\n    loop invariant new <= old + INT_MAX;\n    loop invariant lock == 1 ==> new > old;\n    loop invariant lock == 0 ==> new == old + 1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 20: unbound logic variable INT_MAX. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant i1: lock == 0 || lock == 1;\nloop invariant i2: old <= new;\n\n\n\nloop invariant i6: lock == 0 ==> new == old + 1;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 25: unexpected token ')'",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant i1: 0 <= old <= UINT_MAX;\nloop invariant i2: 0 <= lock <= 1;\nloop invariant i3: old <= new <= old + UINT_MAX;\nloop invariant i4: lock == 1 ==> new > old;\nloop invariant i5: (lock == 0 && old == \\old(old)) ==> new == old + 1;\nloop invariant i6: !(lock == 0) ==> !(lock==0) && (!( lock==0 ) ==> new == old + 1);\nloop invariant i7: lock == 0;\nloop invariant i8: lock == 0 || lock == 1;\nloop invariant i9: (unknown() == 0) ==> (new == old + 1);\nloop invariant i10: lock == 1 ==> (new != old);\nloop invariant i11: new == old;\nloop invariant i12: lock == 1;\nloop invariant i13: old <= new;\nloop invariant i14: new >= \\at(new, Pre);\nloop invariant i15: new > old ==> lock == 0;\nloop invariant i16: lock == 1 ==> new == \\at(new, Pre);\nloop invariant i17: new >= old + 1;\nloop invariant i18: new <= old + INT_MAX;\nloop invariant i19: lock == 0 ==> new == old + 1;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\nreturn;\n\n}",
        "combined_annotation_num_solver_calls": 15,
        "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\nloop invariant i2: 0 <= lock <= 1;\n\n\n\n\n\nloop invariant i8: lock == 0 || lock == 1;\n\n\n\n\nloop invariant i13: old <= new;\n\nloop invariant i15: new > old ==> lock == 0;\n\n\n\nloop invariant i19: lock == 0 ==> new == old + 1;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\nreturn;\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c"
        ],
        "skipped": [],
        "total": 232,
        "success_count": 110,
        "failure_count": 122,
        "success_rate": 0.47413793103448276
    }
}