{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  for(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  for(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- The macro `assume` takes in a boolean expression and returns `0` if the expression is false. This is used to assume that a certain condition is true, failing which the program exits.\n- The macro `unknown_int` is an external function that returns an unknown integer value.\n- The macro `a` is defined as 1.\n\nVariable assignments:\n- `n` is assigned the value returned by `unknown_int()`.\n- `sn` is assigned 0.\n- `v1`, `v2`, and `v3` are assigned unknown integer values in each iteration of the loop.\n\nLoop condition:\n- The loop runs from `i=1` to `i<=n`.\n\nPost-condition:\n- The sum `sn` should be either `n*a` or 0.\n\nLoop invariants:\n- Before loop execution: None required.\n- In every iteration of the loop:\n  - `1 <= i <= n`\n  - `sn = (i-1)*a`\n  - `0 <= sn <= n*a`\n  - `0 <= v1 <= unknown_int_max`\n  - `0 <= v2 <= unknown_int_max`\n  - `0 <= v3 <= unknown_int_max`\n- After loop termination:\n  - `i = n+1`\n  - `sn = n*a || sn = 0`\n\nwhere `unknown_int_max` is the maximum value that can be returned by the `unknown_int()` function.\n\nPutting all the loop invariants together, we get:\n```\n/*@ \n    loop invariant 1 <= i <= n;\n    loop invariant sn == (i-1)*a;\n    loop invariant 0 <= sn <= n*a;\n    loop invariant 0 <= v1 <= unknown_int_max;\n    loop invariant 0 <= v2 <= unknown_int_max;\n    loop invariant 0 <= v3 <= unknown_int_max;\n*/\n```\n\nAnd after the loop, we add the following invariant:\n```\n/*@ \n    loop invariant i == n+1;\n    loop invariant sn == n*a || sn == 0;\n*/\n```",
            "Pre-conditions:\n- The macro `assume` takes a boolean expression and returns 0 if the expression is false.\n- The function `unknown_int` returns an integer value whose value is unknown to us.\n- The macro `a` is defined as 1.\n\nVariable Assignments:\n- `i` is assigned 1 in the loop initialization.\n- `n` is assigned the value returned by the function `unknown_int`.\n- `sn` is assigned 0 initially and updated in the loop.\n- `v1`, `v2`, and `v3` are assigned the values returned by the function `unknown_int` in each iteration of the loop.\n\nLoop Condition:\n- The loop runs as long as `i` is less than or equal to `n`.\n\nWe need to find loop invariants that are true:\n- before the loop execution,\n- in every iteration of the loop, and\n- after the loop termination,\n\nsuch that the loop invariants imply the post-condition.\n\nLoop Invariants:\n1. `1 <= i <= n+1`\n    - This is true before the loop execution (i is initialized to 1).\n    - This is true in every iteration of the loop (i is incremented by 1 in each iteration).\n    - This is true after the loop termination (i is n+1, which satisfies the condition).\n2. `0 <= sn <= i-1`\n    - This is true before the loop execution (sn is initialized to 0).\n    - This is true in every iteration of the loop (sn is updated by adding a in each iteration).\n    - This is true after the loop termination (sn is equal to the sum of a added n times, which is equal to n*a, or sn is still 0 if n=0).\n3. `v1 >= 0 && v2 >= 0 && v3 >= 0`\n    - This is true before the loop execution (the values of v1, v2, and v3 are unknown, but since they are assigned the return values of the `unknown_int` function, we assume that they are non-negative).\n    - This is true in every iteration of the loop (the values of v1, v2, and v3 are updated with the return values of the `unknown_int` function, but we assume that they are still non-negative).\n    - This is true after the loop termination (the values of v1, v2, and v3 are not used after the loop, so their values can be anything).\n4. `(i <= n) ==> (v1 >= 0 && v2 >= 0 && v3 >= 0)`\n    - This is true in every iteration of the loop (the values of v1, v2, and v3 are updated with the return values of the `unknown_int` function only if i is less than or equal to n).\n    - This is true after the loop termination (the values of v1, v2, and v3 are not used after the loop, so their values can be anything, but this implication makes the invariant trivially true at the end of the loop).\n5. `(n == 0) ==> (sn == 0)`\n    - This is true before the loop execution (if n is 0, then sn is 0).\n    - This is true in every iteration of the loop (if n is 0, then sn is 0).\n    - This is true after the loop termination (if n is 0, then sn is 0, which satisfies the post-condition).\n6. `(n != 0) ==> (sn == (i-1)*a)`\n    - This is true before the loop execution (if n is not 0, then sn is 0).\n    - This is true in every iteration of the loop (if n is not 0, then sn is updated by adding a in each iteration).\n    - This is true after the loop termination (if n is not 0, then sn is equal to the sum of a added n times, which is equal to n*a).",
            "Preconditions:\n- The macro `assume` takes an expression `e` and returns 0 if `e` evaluates to false.\n- The function `unknown_int()` returns an unknown integer value.\n\nLoop Invariants:\n- The loop updates the variable `sn` by adding `a` to it in each iteration. Therefore, before the loop, `sn` should be zero.\n- In each iteration of the loop, `sn` is increased by `a`, so it should always be less than or equal to `n*a`.\n- Before the loop, `i` is initialized to 1. Therefore, in every iteration of the loop, `i` should be greater than or equal to 1 and less than or equal to `n`.\n- The variables `v1`, `v2`, and `v3` are non-deterministic and their values are not used in the loop. Therefore, we can add a trivial invariant that implies their values are unconstrained at the beginning and end of the loop.\n- The assertion states that `sn` is either equal to `n*a` or zero. Since `a` is a constant and `n` is unknown, we cannot deduce anything about `sn` at the end of the loop. However, we can add an invariant that implies the assertion under the condition that the loop terminates normally.\n\nPutting it all together, the loop invariants are:\n```\n/*@ \n    loop invariant sn >= 0 && sn <= n*a;\n    loop invariant i >= 1 && i <= n;\n    loop invariant \\forall integer j; 1 <= j < i ==> sn >= j*a;\n    loop invariant \\forall integer k; k >= i && k <= n ==> sn >= i*a;\n    loop invariant v1 && v2 && v3; // implies that their values are unconstrained\n    loop variant n-i;\n*/\n``` \nNote that the last line is a loop variant, which specifies a decreasing expression. Since `i` is incremented in each iteration of the loop, the expression `n-i` decreases by at least 1 in each iteration, and therefore provides a termination argument for the loop. However, this is not a loop invariant.",
            "Pre-conditions:\n- The macro `assume(e)` checks if the condition `e` is true, and if it is false, then it returns 0 from the main function.\n- The function `unknown_int()` returns an unknown integer value.\n- The macro `a` is defined as 1.\n\nVariable Assignments:\n- The variable `n` is assigned an unknown integer value returned by `unknown_int()`.\n- The variable `sn` is assigned 0.\n- The variables `v1`, `v2`, and `v3` are assigned unknown integer values returned by `unknown_int()` in each iteration of the loop.\n\nLoop Condition:\n- The loop executes while `i <= n`.\n\nPost-condition:\n- The assertion `sn==n*a || sn == 0` should hold at the end of the loop.\n\nLoop Invariants:\n- Before the loop execution, the value of `sn` should be 0 since no iteration of the loop has executed yet: `sn == 0`.\n- In every iteration of the loop, the value of `sn` should be greater than or equal to `a`, since `a` is added to `sn` in each iteration: `sn >= a`.\n- In every iteration of the loop, the value of `sn` should be less than or equal to `n*a`, since the loop runs `n` times and adds `a` in each iteration: `sn <= n*a`.\n- In every iteration of the loop, the value of `i` should be less than or equal to `n`: `i <= n`.\n- After the loop termination, either `sn` is equal to `n*a` or `sn` is equal to 0, as given in the post-condition: `sn == 0 ==> sn == n*a || sn == 0`.\n\nPutting it all together, the loop invariants are:\n```\n/*@ \n    loop invariant sn == 0;\n    loop invariant sn >= a;\n    loop invariant sn <= n*a;\n    loop invariant i <= n;\n    loop invariant sn == 0 ==> sn == n*a || sn == 0;\n*/\n```",
            "Pre-conditions:\n- The macro `assume(e)` checks if the expression `e` is true. If it is not true, the program returns 0. So, any condition inside `assume()` must be satisfied before the program is executed.\n- The macro `unknown_int()` returns an unknown integer value. We do not know anything about the value it returns.\n\nVariable assignments:\n- `n` is assigned the value returned by `unknown_int()`.\n- `sn` is initialized to 0.\n- `v1`, `v2`, and `v3` are assigned unknown integer values.\n\nLoop condition:\n- The loop condition is `i<=n`.\n\nLoop body:\n- `sn` is incremented by `a`.\n- `v1`, `v2`, and `v3` are assigned unknown integer values.\n\nPost-condition:\n- `(sn==n*a || sn == 0)`\n\nLoop invariants:\n- Before the loop execution, `sn` is equal to 0.\n```\n/*@ \n  loop invariant sn == 0;\n*/\n```\n- In every iteration of the loop, `sn` is always less than or equal to `i*a`.\n```\n/*@ \n  loop invariant 0 <= sn <= i*a;\n*/\n```\n- In every iteration of the loop, `i` is always less than or equal to `n`.\n```\n/*@ \n  loop invariant 1 <= i <= n+1;\n*/\n```\n- In every iteration of the loop, `sn` is always equal to the sum of `a` from 1 to `i-1`.\n```\n/*@ \n  loop invariant sn == (i-1)*a;\n*/\n```\n- After the loop termination, either `sn` is equal to `n*a` or `sn` is equal to 0.\n```\n/*@ \n  loop invariant sn == n*a ==> sn == n*a || sn == 0;\n  loop invariant sn != n*a ==> sn == 0 || sn == n*a;\n*/\n```\nThese loop invariants imply the post-condition."
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant 1 <= i <= n;\n    loop invariant sn == (i-1)*a;\n    loop invariant 0 <= sn <= n*a;\n    loop invariant 0 <= v1 <= unknown_int_max;\n    loop invariant 0 <= v2 <= unknown_int_max;\n    loop invariant 0 <= v3 <= unknown_int_max;\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The macro `assume` takes a boolean expression and returns 0 if the expression is false.\n- The function `unknown_int` returns an integer value whose value is unknown to us.\n- The macro `a` is defined as 1.\n\nVariable Assignments:\n- `i` is assigned 1 in the loop initialization.\n- `n` is assigned the value returned by the function `unknown_int`.\n- `sn` is assigned 0 initially and updated in the loop.\n- `v1`, `v2`, and `v3` are assigned the values returned by the function `unknown_int` in each iteration of the loop.\n\nLoop Condition:\n- The loop runs as long as `i` is less than or equal to `n`.\n\nWe need to find loop invariants that are true:\n- before the loop execution,\n- in every iteration of the loop, and\n- after the loop termination,\n\nsuch that the loop invariants imply the post-condition.\n\nLoop Invariants:\n1. `1 <= i <= n+1`\n    - This is true before the loop execution (i is initialized to 1).\n    - This is true in every iteration of the loop (i is incremented by 1 in each iteration).\n    - This is true after the loop termination (i is n+1, which satisfies the condition).\n2. `0 <= sn <= i-1`\n    - This is true before the loop execution (sn is initialized to 0).\n    - This is true in every iteration of the loop (sn is updated by adding a in each iteration).\n    - This is true after the loop termination (sn is equal to the sum of a added n times, which is equal to n*a, or sn is still 0 if n=0).\n3. `v1 >= 0 && v2 >= 0 && v3 >= 0`\n    - This is true before the loop execution (the values of v1, v2, and v3 are unknown, but since they are assigned the return values of the `unknown_int` function, we assume that they are non-negative).\n    - This is true in every iteration of the loop (the values of v1, v2, and v3 are updated with the return values of the `unknown_int` function, but we assume that they are still non-negative).\n    - This is true after the loop termination (the values of v1, v2, and v3 are not used after the loop, so their values can be anything).\n4. `(i <= n) ==> (v1 >= 0 && v2 >= 0 && v3 >= 0)`\n    - This is true in every iteration of the loop (the values of v1, v2, and v3 are updated with the return values of the `unknown_int` function only if i is less than or equal to n).\n    - This is true after the loop termination (the values of v1, v2, and v3 are not used after the loop, so their values can be anything, but this implication makes the invariant trivially true at the end of the loop).\n5. `(n == 0) ==> (sn == 0)`\n    - This is true before the loop execution (if n is 0, then sn is 0).\n    - This is true in every iteration of the loop (if n is 0, then sn is 0).\n    - This is true after the loop termination (if n is 0, then sn is 0, which satisfies the post-condition).\n6. `(n != 0) ==> (sn == (i-1)*a)`\n    - This is true before the loop execution (if n is not 0, then sn is 0).\n    - This is true in every iteration of the loop (if n is not 0, then sn is updated by adding a in each iteration).\n    - This is true after the loop termination (if n is not 0, then sn is equal to the sum of a added n times, which is equal to n*a)."
            ],
            "/*@ \n    loop invariant sn >= 0 && sn <= n*a;\n    loop invariant i >= 1 && i <= n;\n    loop invariant \\forall integer j; 1 <= j < i ==> sn >= j*a;\n    loop invariant \\forall integer k; k >= i && k <= n ==> sn >= i*a;\n    loop invariant v1 && v2 && v3; // implies that their values are unconstrained\n    loop variant n-i;\n*/",
            "/*@ \n    loop invariant sn == 0;\n    loop invariant sn >= a;\n    loop invariant sn <= n*a;\n    loop invariant i <= n;\n    loop invariant sn == 0 ==> sn == n*a || sn == 0;\n*/",
            "/*@ \n  loop invariant sn == 0;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 7,
                "annotations": "/*@ \n    loop invariant 1 <= i <= n;\n    loop invariant sn == (i-1)*a;\n    loop invariant 0 <= sn <= n*a;\n    loop invariant 0 <= v1 <= unknown_int_max;\n    loop invariant 0 <= v2 <= unknown_int_max;\n    loop invariant 0 <= v3 <= unknown_int_max;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: unbound logic variable unknown_int_max. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\nloop invariant i2: sn == (i-1)*a;\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The macro `assume` takes a boolean expression and returns 0 if the expression is false.\n- The function `unknown_int` returns an integer value whose value is unknown to us.\n- The macro `a` is defined as 1.\n\nVariable Assignments:\n- `i` is assigned 1 in the loop initialization.\n- `n` is assigned the value returned by the function `unknown_int`.\n- `sn` is assigned 0 initially and updated in the loop.\n- `v1`, `v2`, and `v3` are assigned the values returned by the function `unknown_int` in each iteration of the loop.\n\nLoop Condition:\n- The loop runs as long as `i` is less than or equal to `n`.\n\nWe need to find loop invariants that are true:\n- before the loop execution,\n- in every iteration of the loop, and\n- after the loop termination,\n\nsuch that the loop invariants imply the post-condition.\n\nLoop Invariants:\n1. `1 <= i <= n+1`\n    - This is true before the loop execution (i is initialized to 1).\n    - This is true in every iteration of the loop (i is incremented by 1 in each iteration).\n    - This is true after the loop termination (i is n+1, which satisfies the condition).\n2. `0 <= sn <= i-1`\n    - This is true before the loop execution (sn is initialized to 0).\n    - This is true in every iteration of the loop (sn is updated by adding a in each iteration).\n    - This is true after the loop termination (sn is equal to the sum of a added n times, which is equal to n*a, or sn is still 0 if n=0).\n3. `v1 >= 0 && v2 >= 0 && v3 >= 0`\n    - This is true before the loop execution (the values of v1, v2, and v3 are unknown, but since they are assigned the return values of the `unknown_int` function, we assume that they are non-negative).\n    - This is true in every iteration of the loop (the values of v1, v2, and v3 are updated with the return values of the `unknown_int` function, but we assume that they are still non-negative).\n    - This is true after the loop termination (the values of v1, v2, and v3 are not used after the loop, so their values can be anything).\n4. `(i <= n) ==> (v1 >= 0 && v2 >= 0 && v3 >= 0)`\n    - This is true in every iteration of the loop (the values of v1, v2, and v3 are updated with the return values of the `unknown_int` function only if i is less than or equal to n).\n    - This is true after the loop termination (the values of v1, v2, and v3 are not used after the loop, so their values can be anything, but this implication makes the invariant trivially true at the end of the loop).\n5. `(n == 0) ==> (sn == 0)`\n    - This is true before the loop execution (if n is 0, then sn is 0).\n    - This is true in every iteration of the loop (if n is 0, then sn is 0).\n    - This is true after the loop termination (if n is 0, then sn is 0, which satisfies the post-condition).\n6. `(n != 0) ==> (sn == (i-1)*a)`\n    - This is true before the loop execution (if n is not 0, then sn is 0).\n    - This is true in every iteration of the loop (if n is not 0, then sn is updated by adding a in each iteration).\n    - This is true after the loop termination (if n is not 0, then sn is equal to the sum of a added n times, which is equal to n*a).",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant sn >= 0 && sn <= n*a;\n    loop invariant i >= 1 && i <= n;\n    loop invariant \\forall integer j; 1 <= j < i ==> sn >= j*a;\n    loop invariant \\forall integer k; k >= i && k <= n ==> sn >= i*a;\n    loop invariant v1 && v2 && v3; // implies that their values are unconstrained\n    loop variant n-i;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant sn >= 0 && sn <= n*a is preserved but not established.\nloop invariant i >= 1 && i <= n is preserved but not established.\nloop invariant \\forall integer j; 1 <= j < i ==> sn >= j*a is partially proven to be inductive.\nloop invariant \\forall integer k; k >= i && k <= n ==> sn >= i*a is preserved but not established.\nloop invariant v1 && v2 && v3 is partially proven to be inductive.\nAssertion sn == n * 1 || sn == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant sn == 0;\n    loop invariant sn >= a;\n    loop invariant sn <= n*a;\n    loop invariant i <= n;\n    loop invariant sn == 0 ==> sn == n*a || sn == 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant sn == 0 is partially proven to be inductive.\nloop invariant sn >= a is preserved but not established.\nloop invariant sn <= n*a is partially proven to be inductive.\nloop invariant i <= n is partially proven to be inductive.\nloop invariant sn == 0 ==> sn == n*a || sn == 0 is partially proven to be inductive.\nAssertion sn == n * 1 || sn == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\n\n\nloop invariant i5: sn == 0 ==> sn == n*a || sn == 0;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n  loop invariant sn == 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant sn == 0 is established but not preserved.\nAssertion sn == n * 1 || sn == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 12: unbound logic variable unknown_int_max. Ignoring loop annotation",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\nloop invariant i1: 1 <= i <= n;\nloop invariant i2: sn == (i-1)*a;\nloop invariant i3: 0 <= sn <= n*a;\nloop invariant i4: 0 <= v1 <= unknown_int_max;\nloop invariant i5: 0 <= v2 <= unknown_int_max;\nloop invariant i6: 0 <= v3 <= unknown_int_max;\nloop invariant i7: sn >= 0 && sn <= n*a;\nloop invariant i8: i >= 1 && i <= n;\nloop invariant i9: \\forall integer j; 1 <= j < i ==> sn >= j*a;\nloop invariant i10: \\forall integer k; k >= i && k <= n ==> sn >= i*a;\nloop invariant i11: v1 && v2 && v3;\nloop invariant i12: sn == 0;\nloop invariant i13: sn >= a;\nloop invariant i14: sn <= n*a;\nloop invariant i15: i <= n;\nloop invariant i16: sn == 0 ==> sn == n*a || sn == 0;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
        "combined_annotation_num_solver_calls": 9,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\nloop invariant i2: sn == (i-1)*a;\n\n\n\n\n\n\nloop invariant i9: \\forall integer j; 1 <= j < i ==> sn >= j*a;\n\n\n\n\n\n\nloop invariant i16: sn == 0 ==> sn == n*a || sn == 0;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c"
        ],
        "skipped": [],
        "total": 206,
        "success_count": 94,
        "failure_count": 112,
        "success_rate": 0.4563106796116505
    }
}