{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loops-crafted-1/sumt7.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v1=0, v2=0, v3=0, v4=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  while( l < n ) {\n\t\n\t  if(!(l%7))\n\t    v1 = v1 + 1;\n\t  else if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n    {;\n//@ assert((i+j+k+v1+v2+v3+v4) == l);\n}\n\n  }\n  return 0;\n}\n",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v1=0, v2=0, v3=0, v4=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  while( l < n ) {\n\t\n\t  if(!(l%7))\n\t    v1 = v1 + 1;\n\t  else if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n    {;\n//@ assert((i+j+k+v1+v2+v3+v4) == l);\n}\n\n  }\n  return 0;\n}\n\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Let's start by analyzing the program and making a note of the pre-conditions and variable assignments:\n\n- The program starts by defining a macro `assume` which checks if a given condition is true, and if not, it returns 0 (which means the program exits).\n- The program declares an external function `unknown_int()` which returns an integer value whose value is not known.\n- The program declares and initializes a variable `SIZE` to 20000001.\n- The program declares several integer variables `n`, `i`, `k`, `j`, `l`, `v1`, `v2`, `v3`, and `v4`, and initializes them to 0, except for `n` which is assigned the return value of the `unknown_int()` function.\n- The program checks if `n` is less than or equal to `SIZE`, and if not, it exits.\n- The program enters a `while` loop with condition `l < n`.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n- The loop body consists of a series of `if` statements that check if `l` is divisible by certain integers (7, 6, 5, 4, 3, and 2), and increments a different variable depending on which integer it is divisible by.\n- At the end of the loop body, `l` is incremented by 1.\n- The loop contains an assertion that checks if the sum of all the variables (`i`, `j`, `k`, `v1`, `v2`, `v3`, and `v4`) is equal to `l`.\n\nNow, let's output the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= l <= n;\n    loop invariant 0 <= i+j+k+v1+v2+v3+v4 <= l;\n    loop invariant v1+v2+v3+v4 <= l/2;\n*/\n```\n\nExplanation of loop invariants:\n\n- The first loop invariant states that `l` is always between 0 and `n`, both inclusive.\n- The second loop invariant states that the sum of all the variables (`i`, `j`, `k`, `v1`, `v2`, `v3`, and `v4`) is always between 0 and `l`, both inclusive. This is because each variable is incremented by at most 1 in each iteration of the loop, and `l` is also incremented by 1, so the sum of the variables can never be greater than `l`.\n- The third loop invariant states that the sum of `v1`, `v2`, `v3`, and `v4` is always less than or equal to half of `l`. This is because if `l` is divisible by 7, then `v1` is incremented, and if `l` is divisible by 6, then `v2` is incremented. But `l` can be divisible by both 7 and 6 (i.e., 42), so we need to make sure that we don't count such cases twice. Therefore, the sum of `v1`, `v2`, `v3`, and `v4` can be at most half of `l`. \n\nNote that we don't need to add any implications for this program, as all the variables are explicitly initialized to 0, and the `unknown_int()` function is only used to initialize the `n` variable, which is then checked to be less than or equal to `SIZE`.",
            "Pre-conditions:\n- The macro `assume(e)` is defined such that it returns 0 if `!(e)` is true.\n- The function `unknown_int()` returns an integer value that is not known beforehand.\n- The global variable `SIZE` is initialized with a value of 20000001.\n\nLoop condition:\n- The loop continues as long as the value of `l` is less than `n`.\n\nLoop invariants:\n- `n <= SIZE`\n- `0 <= l <= n`\n- `0 <= i+j+k+v1+v2+v3+v4 <= l`\n- `(l%7 == 0 ==> v1' = v1+1) && (l%7 != 0 ==> v1' = v1)`\n- `(l%6 == 0 ==> v2' = v2+1) && (l%6 != 0 ==> v2' = v2)`\n- `(l%5 == 0 ==> v3' = v3+1) && (l%5 != 0 ==> v3' = v3)`\n- `(l%4 == 0 ==> v4' = v4+1) && (l%4 != 0 ==> v4' = v4)`\n- `(l%3 == 0 ==> i' = i+1) && (l%3 != 0 ==> i' = i)`\n- `(l%2 == 0 ==> j' = j+1) && (l%2 != 0 ==> j' = j)`\n- `k' = l - i' - j' - v1' - v2' - v3' - v4'`\n- `((l%7 == 0) || (l%6 == 0) || (l%5 == 0) || (l%4 == 0) || (l%3 == 0) || (l%2 == 0)) ==> (i+j+k+v1+v2+v3+v4 < l)`\n- `(l%7 == 0 && l%6 == 0 && l%5 == 0 && l%4 == 0 && l%3 == 0 && l%2 == 0) ==> (i+j+k+v1+v2+v3+v4 == l)`\n- `(l%7 != 0 && l%6 != 0 && l%5 != 0 && l%4 != 0 && l%3 != 0 && l%2 != 0) ==> (i+j+k+v1+v2+v3+v4 == l)`\n- `((l%7 != 0 && l%6 != 0 && l%5 != 0 && l%4 != 0 && l%3 != 0 && l%2 != 0) || (l%7 == 0 && l%6 == 0 && l%5 == 0 && l%4 == 0 && l%3 == 0 && l%2 == 0)) ==> (i+j+k+v1+v2+v3+v4 <= l)`\n\nExplanation:\n- The first loop invariant `n <= SIZE` ensures that the value of `n` is within the size limit of `SIZE`.\n- The second loop invariant `0 <= l <= n` ensures that the value of `l` remains within the bounds of 0 and `n`.\n- The third loop invariant `0 <= i+j+k+v1+v2+v3+v4 <= l` ensures that the sum of all the variables does not exceed the value of `l` and is always non-negative.\n- The fourth to the ninth loop invariants update the values of `v1`, `v2`, `v3`, `v4`, `i`, `j`, and `k` based on the conditionals within the loop, ensuring that they are updated correctly.\n- The tenth loop invariant `((l%7 == 0) || (l%6 == 0) || (l%5 == 0) || (l%4 == 0) || (l%3 == 0) || (l%2 == 0)) ==> (i+j+k+v1+v2+v3+v4 < l)` ensures that the sum of all the variables is less than the value of `l` if any one of the conditions in the loop is true.\n- The eleventh and twelfth loop invariants ensure that the sum of all the variables is equal to `l` if all the conditions in the loop are false and true, respectively.\n- The thirteenth loop invariant `((l%7 != 0 && l%6 != 0 && l%5 != 0 && l%4 != 0 && l%3 != 0 && l%2 != 0) || (l%7",
            "Pre-conditions:\n- The value of n should be less than or equal to SIZE.\n\nVariable Assignments:\n- n is assigned the value returned by the function unknown_int().\n- i, j, k, l, v1, v2, v3, and v4 are initialized to 0.\n\nLoop Condition:\n- The loop executes as long as the value of l is less than n.\n\nLoop Invariants:\n- Since i, j, k, v1, v2, v3, and v4 are incremented based on the value of l, we can add the following loop invariant:\n```\n/*@ loop invariant (i + j + k + v1 + v2 + v3 + v4) == l;*/\n```\n- Since the loop condition is l < n, we can add the following loop invariant:\n```\n/*@ loop invariant l <= n;*/\n```\n- Since v1, v2, v3, and v4 are incremented only when l is a multiple of 7, 6, 5, and 4 respectively, we can add the following loop invariants:\n```\n/*@ loop invariant (l%7 == 0 ==> v1 == \\at(v1, Pre) + 1) && (l%7 != 0 ==> v1 == \\at(v1, Pre));\n    loop invariant (l%6 == 0 ==> v2 == \\at(v2, Pre) + 1) && (l%6 != 0 ==> v2 == \\at(v2, Pre));\n    loop invariant (l%5 == 0 ==> v3 == \\at(v3, Pre) + 1) && (l%5 != 0 ==> v3 == \\at(v3, Pre));\n    loop invariant (l%4 == 0 ==> v4 == \\at(v4, Pre) + 1) && (l%4 != 0 ==> v4 == \\at(v4, Pre));*/\n```\n- Since i is incremented only when l is a multiple of 3, we can add the following loop invariant:\n```\n/*@ loop invariant (l%3 == 0 ==> i == \\at(i, Pre) + 1) && (l%3 != 0 ==> i == \\at(i, Pre));*/\n```\n- Since j is incremented only when l is a multiple of 2, we can add the following loop invariant:\n```\n/*@ loop invariant (l%2 == 0 ==> j == \\at(j, Pre) + 1) && (l%2 != 0 ==> j == \\at(j, Pre));*/\n```\n- Since we do not have any information about the value of n before the loop, we can add the following loop invariant to handle the non-deterministic nature of n:\n```\n/*@ loop invariant n <= SIZE;\n    loop invariant n >= \\at(n, Pre);*/\n```\n- Since we do not have any information about the value of l before the loop, we can add the following loop invariant to handle the non-deterministic nature of l:\n```\n/*@ loop invariant l >= 0;*/\n```\n\nPutting all the loop invariants together, we get:\n```\n/*@ loop invariant (i + j + k + v1 + v2 + v3 + v4) == l;\n    loop invariant l <= n;\n    loop invariant (l%7 == 0 ==> v1 == \\at(v1, Pre) + 1) && (l%7 != 0 ==> v1 == \\at(v1, Pre));\n    loop invariant (l%6 == 0 ==> v2 == \\at(v2, Pre) + 1) && (l%6 != 0 ==> v2 == \\at(v2, Pre));\n    loop invariant (l%5 == 0 ==> v3 == \\at(v3, Pre) + 1) && (l%5 != 0 ==> v3 == \\at(v3, Pre));\n    loop invariant (l%4 == 0 ==> v4 == \\at(v4, Pre) + 1) && (l%4 != 0 ==> v4 == \\at(v4, Pre));\n    loop invariant (l%3 == 0 ==> i == \\at(i, Pre) + 1) && (l%3 != 0 ==> i == \\at(i, Pre));\n    loop invariant (l%2 == 0 ==> j == \\at(j, Pre) + 1) && (l%2 != 0 ==> j == \\at(j, Pre));\n    loop invariant n <= SIZE;\n    loop invariant n >= \\at(n, Pre);\n    loop invariant l >= 0;*/\n```",
            "Pre-conditions:\n- The macro `assume` takes a boolean expression as its argument and returns 0 if the expression is false.\n- The function `unknown_int()` returns an integer value that is not known at the time of code analysis.\n- The variable `SIZE` is assigned the value 20000001.\n- The variable `n` is initialized to the return value of `unknown_int()`.\n- The value of `n` is less than or equal to `SIZE`.\n\nLoop Condition:\n- The loop runs as long as `l` is less than `n`.\n\nLoop Invariants:\n- `l <= n`\n- `i + j + k + v1 + v2 + v3 + v4 <= l`\n- `v1 <= l/7`\n- `v2 <= l/6`\n- `v3 <= l/5`\n- `v4 <= l/4`\n- `i <= l/3`\n- `j <= l/2`\n- `k <= l`\n\nExplanation:\n- The first invariant, `l <= n`, ensures that `l` remains less than or equal to `n` throughout the loop execution, which is necessary for the loop to terminate.\n- The second invariant, `i + j + k + v1 + v2 + v3 + v4 <= l`, ensures that the sum of all the variables remains less than or equal to `l` throughout the loop execution. This is necessary to ensure that the assertion at the end of the loop holds true.\n- The third invariant, `v1 <= l/7`, ensures that `v1` is always less than or equal to `l/7`. This is because `v1` is incremented only when `l` is divisible by 7. Therefore, `v1` can increase by at most `1` in every `7` iterations of the loop.\n- The fourth invariant, `v2 <= l/6`, ensures that `v2` is always less than or equal to `l/6`. This is because `v2` is incremented only when `l` is divisible by 6. Therefore, `v2` can increase by at most `1` in every `6` iterations of the loop.\n- The fifth invariant, `v3 <= l/5`, ensures that `v3` is always less than or equal to `l/5`. This is because `v3` is incremented only when `l` is divisible by 5. Therefore, `v3` can increase by at most `1` in every `5` iterations of the loop.\n- The sixth invariant, `v4 <= l/4`, ensures that `v4` is always less than or equal to `l/4`. This is because `v4` is incremented only when `l` is divisible by 4. Therefore, `v4` can increase by at most `1` in every `4` iterations of the loop.\n- The seventh invariant, `i <= l/3`, ensures that `i` is always less than or equal to `l/3`. This is because `i` is incremented only when `l` is divisible by 3. Therefore, `i` can increase by at most `1` in every `3` iterations of the loop.\n- The eighth invariant, `j <= l/2`, ensures that `j` is always less than or equal to `l/2`. This is because `j` is incremented only when `l` is divisible by 2. Therefore, `j` can increase by at most `1` in every `2` iterations of the loop.\n- The ninth invariant, `k <= l`, ensures that `k` is always less than or equal to `l`. This is because `k` is incremented in every iteration of the loop.\n\nAll the variables `v1`, `v2`, `v3`, `v4`, `i`, `j`, and `k` are initialized to `0`, so there are no issues with garbage values. The assertion is true at the end of the loop, so no additional implication is necessary.",
            "Pre-conditions:\n- The macro `assume(e)` checks if the condition `e` is true. If `e` is false, the function returns 0.\n- The function `unknown_int()` returns an integer of unknown value.\n- The variable `SIZE` is initialized with a constant value of 20000001.\n\nVariable Assignments:\n- `n`, `i`, `k`, `j`, `l`, `v1`, `v2`, `v3`, `v4` are all initialized to 0.\n\nLoop Condition:\n- The loop continues as long as `l` is less than `n`.\n\nLoop Invariants:\n- The sum of all variables assigned inside the loop is equal to `l`.\n```\n/*@ \n    loop invariant (i+j+k+v1+v2+v3+v4) == l;\n*/\n```\n- `v1`, `v2`, `v3`, `v4` are non-negative.\n```\n/*@ \n    loop invariant v1 >= 0 && v2 >= 0 && v3 >= 0 && v4 >= 0;\n*/\n```\n- `i`, `j`, `k` are non-negative.\n```\n/*@ \n    loop invariant i >= 0 && j >= 0 && k >= 0;\n*/\n```\n- `l` is less than or equal to `n`.\n```\n/*@ \n    loop invariant l <= n;\n*/\n```\n- `v1`, `v2`, `v3`, `v4` are always less than or equal to `l`.\n```\n/*@ \n    loop invariant v1 <= l && v2 <= l && v3 <= l && v4 <= l;\n*/\n```\n- `i`, `j`, `k` are always less than or equal to `l`.\n```\n/*@ \n    loop invariant i <= l && j <= l && k <= l;\n*/\n```\n- `i`, `j`, `k` are always less than or equal to `n`.\n```\n/*@ \n    loop invariant i <= n && j <= n && k <= n;\n*/\n```\n- If `l` is a multiple of 7, then `v1` is greater than or equal to `(l/7)`.\n```\n/*@ \n    loop invariant (l%7==0) ==> (v1 >= l/7);\n*/\n```\n- If `l` is not a multiple of 7 but is a multiple of 6, then `v2` is greater than or equal to `(l/6)`.\n```\n/*@ \n    loop invariant (l%7!=0 && l%6==0) ==> (v2 >= l/6);\n*/\n```\n- If `l` is not a multiple of 7 or 6 but is a multiple of 5, then `v3` is greater than or equal to `(l/5)`.\n```\n/*@ \n    loop invariant (l%7!=0 && l%6!=0 && l%5==0) ==> (v3 >= l/5);\n*/\n```\n- If `l` is not a multiple of 7, 6 or 5 but is a multiple of 4, then `v4` is greater than or equal to `(l/4)`.\n```\n/*@ \n    loop invariant (l%7!=0 && l%6!=0 && l%5!=0 && l%4==0) ==> (v4 >= l/4);\n*/\n```\n- If `l` is not a multiple of 7, 6, 5 or 4 but is a multiple of 3, then `i` is greater than or equal to `(l/3)`.\n```\n/*@ \n    loop invariant (l%7!=0 && l%6!=0 && l%5!=0 && l%4!=0 && l%3==0) ==> (i >= l/3);\n*/\n```\n- If `l` is not a multiple of 7, 6, 5, 4 or 3 but is a multiple of 2, then `j` is greater than or equal to `(l/2)`.\n```\n/*@ \n    loop invariant (l%7!=0 && l%6!=0 && l%5!=0 && l%4!=0 && l%3!=0 && l%2==0) ==> (j >= l/2);\n*/\n```\n- If `l` is not a multiple of 7, 6, 5, 4, 3 or 2, then `k` is greater than or equal to `l`.\n```\n/*@ \n    loop invariant (l%7!=0 && l%6!=0 && l%5!=0 && l%4!=0 && l%3!=0"
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant 0 <= l <= n;\n    loop invariant 0 <= i+j+k+v1+v2+v3+v4 <= l;\n    loop invariant v1+v2+v3+v4 <= l/2;\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The macro `assume(e)` is defined such that it returns 0 if `!(e)` is true.\n- The function `unknown_int()` returns an integer value that is not known beforehand.\n- The global variable `SIZE` is initialized with a value of 20000001.\n\nLoop condition:\n- The loop continues as long as the value of `l` is less than `n`.\n\nLoop invariants:\n- `n <= SIZE`\n- `0 <= l <= n`\n- `0 <= i+j+k+v1+v2+v3+v4 <= l`\n- `(l%7 == 0 ==> v1' = v1+1) && (l%7 != 0 ==> v1' = v1)`\n- `(l%6 == 0 ==> v2' = v2+1) && (l%6 != 0 ==> v2' = v2)`\n- `(l%5 == 0 ==> v3' = v3+1) && (l%5 != 0 ==> v3' = v3)`\n- `(l%4 == 0 ==> v4' = v4+1) && (l%4 != 0 ==> v4' = v4)`\n- `(l%3 == 0 ==> i' = i+1) && (l%3 != 0 ==> i' = i)`\n- `(l%2 == 0 ==> j' = j+1) && (l%2 != 0 ==> j' = j)`\n- `k' = l - i' - j' - v1' - v2' - v3' - v4'`\n- `((l%7 == 0) || (l%6 == 0) || (l%5 == 0) || (l%4 == 0) || (l%3 == 0) || (l%2 == 0)) ==> (i+j+k+v1+v2+v3+v4 < l)`\n- `(l%7 == 0 && l%6 == 0 && l%5 == 0 && l%4 == 0 && l%3 == 0 && l%2 == 0) ==> (i+j+k+v1+v2+v3+v4 == l)`\n- `(l%7 != 0 && l%6 != 0 && l%5 != 0 && l%4 != 0 && l%3 != 0 && l%2 != 0) ==> (i+j+k+v1+v2+v3+v4 == l)`\n- `((l%7 != 0 && l%6 != 0 && l%5 != 0 && l%4 != 0 && l%3 != 0 && l%2 != 0) || (l%7 == 0 && l%6 == 0 && l%5 == 0 && l%4 == 0 && l%3 == 0 && l%2 == 0)) ==> (i+j+k+v1+v2+v3+v4 <= l)`\n\nExplanation:\n- The first loop invariant `n <= SIZE` ensures that the value of `n` is within the size limit of `SIZE`.\n- The second loop invariant `0 <= l <= n` ensures that the value of `l` remains within the bounds of 0 and `n`.\n- The third loop invariant `0 <= i+j+k+v1+v2+v3+v4 <= l` ensures that the sum of all the variables does not exceed the value of `l` and is always non-negative.\n- The fourth to the ninth loop invariants update the values of `v1`, `v2`, `v3`, `v4`, `i`, `j`, and `k` based on the conditionals within the loop, ensuring that they are updated correctly.\n- The tenth loop invariant `((l%7 == 0) || (l%6 == 0) || (l%5 == 0) || (l%4 == 0) || (l%3 == 0) || (l%2 == 0)) ==> (i+j+k+v1+v2+v3+v4 < l)` ensures that the sum of all the variables is less than the value of `l` if any one of the conditions in the loop is true.\n- The eleventh and twelfth loop invariants ensure that the sum of all the variables is equal to `l` if all the conditions in the loop are false and true, respectively.\n- The thirteenth loop invariant `((l%7 != 0 && l%6 != 0 && l%5 != 0 && l%4 != 0 && l%3 != 0 && l%2 != 0) || (l%7"
            ],
            "/*@ loop invariant (i + j + k + v1 + v2 + v3 + v4) == l;*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The macro `assume` takes a boolean expression as its argument and returns 0 if the expression is false.\n- The function `unknown_int()` returns an integer value that is not known at the time of code analysis.\n- The variable `SIZE` is assigned the value 20000001.\n- The variable `n` is initialized to the return value of `unknown_int()`.\n- The value of `n` is less than or equal to `SIZE`.\n\nLoop Condition:\n- The loop runs as long as `l` is less than `n`.\n\nLoop Invariants:\n- `l <= n`\n- `i + j + k + v1 + v2 + v3 + v4 <= l`\n- `v1 <= l/7`\n- `v2 <= l/6`\n- `v3 <= l/5`\n- `v4 <= l/4`\n- `i <= l/3`\n- `j <= l/2`\n- `k <= l`\n\nExplanation:\n- The first invariant, `l <= n`, ensures that `l` remains less than or equal to `n` throughout the loop execution, which is necessary for the loop to terminate.\n- The second invariant, `i + j + k + v1 + v2 + v3 + v4 <= l`, ensures that the sum of all the variables remains less than or equal to `l` throughout the loop execution. This is necessary to ensure that the assertion at the end of the loop holds true.\n- The third invariant, `v1 <= l/7`, ensures that `v1` is always less than or equal to `l/7`. This is because `v1` is incremented only when `l` is divisible by 7. Therefore, `v1` can increase by at most `1` in every `7` iterations of the loop.\n- The fourth invariant, `v2 <= l/6`, ensures that `v2` is always less than or equal to `l/6`. This is because `v2` is incremented only when `l` is divisible by 6. Therefore, `v2` can increase by at most `1` in every `6` iterations of the loop.\n- The fifth invariant, `v3 <= l/5`, ensures that `v3` is always less than or equal to `l/5`. This is because `v3` is incremented only when `l` is divisible by 5. Therefore, `v3` can increase by at most `1` in every `5` iterations of the loop.\n- The sixth invariant, `v4 <= l/4`, ensures that `v4` is always less than or equal to `l/4`. This is because `v4` is incremented only when `l` is divisible by 4. Therefore, `v4` can increase by at most `1` in every `4` iterations of the loop.\n- The seventh invariant, `i <= l/3`, ensures that `i` is always less than or equal to `l/3`. This is because `i` is incremented only when `l` is divisible by 3. Therefore, `i` can increase by at most `1` in every `3` iterations of the loop.\n- The eighth invariant, `j <= l/2`, ensures that `j` is always less than or equal to `l/2`. This is because `j` is incremented only when `l` is divisible by 2. Therefore, `j` can increase by at most `1` in every `2` iterations of the loop.\n- The ninth invariant, `k <= l`, ensures that `k` is always less than or equal to `l`. This is because `k` is incremented in every iteration of the loop.\n\nAll the variables `v1`, `v2`, `v3`, `v4`, `i`, `j`, and `k` are initialized to `0`, so there are no issues with garbage values. The assertion is true at the end of the loop, so no additional implication is necessary."
            ],
            "/*@ \n    loop invariant (i+j+k+v1+v2+v3+v4) == l;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= l <= n;\n    loop invariant 0 <= i+j+k+v1+v2+v3+v4 <= l;\n    loop invariant v1+v2+v3+v4 <= l/2;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= l <= n is partially proven to be inductive.\nloop invariant 0 <= i+j+k+v1+v2+v3+v4 <= l is partially proven to be inductive.\nloop invariant v1+v2+v3+v4 <= l/2 is established but not preserved.\nAssertion (((((i + j) + k) + v1) + v2) + v3) + v4 == l: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v1=0, v2=0, v3=0, v4=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  /*@\nloop invariant i1: 0 <= l <= n;\nloop invariant i2: 0 <= i+j+k+v1+v2+v3+v4 <= l;\n\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%7))\n\t    v1 = v1 + 1;\n\t  else if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n    {;\n//@ assert((i+j+k+v1+v2+v3+v4) == l);\n}\n\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The macro `assume(e)` is defined such that it returns 0 if `!(e)` is true.\n- The function `unknown_int()` returns an integer value that is not known beforehand.\n- The global variable `SIZE` is initialized with a value of 20000001.\n\nLoop condition:\n- The loop continues as long as the value of `l` is less than `n`.\n\nLoop invariants:\n- `n <= SIZE`\n- `0 <= l <= n`\n- `0 <= i+j+k+v1+v2+v3+v4 <= l`\n- `(l%7 == 0 ==> v1' = v1+1) && (l%7 != 0 ==> v1' = v1)`\n- `(l%6 == 0 ==> v2' = v2+1) && (l%6 != 0 ==> v2' = v2)`\n- `(l%5 == 0 ==> v3' = v3+1) && (l%5 != 0 ==> v3' = v3)`\n- `(l%4 == 0 ==> v4' = v4+1) && (l%4 != 0 ==> v4' = v4)`\n- `(l%3 == 0 ==> i' = i+1) && (l%3 != 0 ==> i' = i)`\n- `(l%2 == 0 ==> j' = j+1) && (l%2 != 0 ==> j' = j)`\n- `k' = l - i' - j' - v1' - v2' - v3' - v4'`\n- `((l%7 == 0) || (l%6 == 0) || (l%5 == 0) || (l%4 == 0) || (l%3 == 0) || (l%2 == 0)) ==> (i+j+k+v1+v2+v3+v4 < l)`\n- `(l%7 == 0 && l%6 == 0 && l%5 == 0 && l%4 == 0 && l%3 == 0 && l%2 == 0) ==> (i+j+k+v1+v2+v3+v4 == l)`\n- `(l%7 != 0 && l%6 != 0 && l%5 != 0 && l%4 != 0 && l%3 != 0 && l%2 != 0) ==> (i+j+k+v1+v2+v3+v4 == l)`\n- `((l%7 != 0 && l%6 != 0 && l%5 != 0 && l%4 != 0 && l%3 != 0 && l%2 != 0) || (l%7 == 0 && l%6 == 0 && l%5 == 0 && l%4 == 0 && l%3 == 0 && l%2 == 0)) ==> (i+j+k+v1+v2+v3+v4 <= l)`\n\nExplanation:\n- The first loop invariant `n <= SIZE` ensures that the value of `n` is within the size limit of `SIZE`.\n- The second loop invariant `0 <= l <= n` ensures that the value of `l` remains within the bounds of 0 and `n`.\n- The third loop invariant `0 <= i+j+k+v1+v2+v3+v4 <= l` ensures that the sum of all the variables does not exceed the value of `l` and is always non-negative.\n- The fourth to the ninth loop invariants update the values of `v1`, `v2`, `v3`, `v4`, `i`, `j`, and `k` based on the conditionals within the loop, ensuring that they are updated correctly.\n- The tenth loop invariant `((l%7 == 0) || (l%6 == 0) || (l%5 == 0) || (l%4 == 0) || (l%3 == 0) || (l%2 == 0)) ==> (i+j+k+v1+v2+v3+v4 < l)` ensures that the sum of all the variables is less than the value of `l` if any one of the conditions in the loop is true.\n- The eleventh and twelfth loop invariants ensure that the sum of all the variables is equal to `l` if all the conditions in the loop are false and true, respectively.\n- The thirteenth loop invariant `((l%7 != 0 && l%6 != 0 && l%5 != 0 && l%4 != 0 && l%3 != 0 && l%2 != 0) || (l%7",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ loop invariant (i + j + k + v1 + v2 + v3 + v4) == l;*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant (i + j + k + v1 + v2 + v3 + v4) == l is inductive.\nAssertion (((((i + j) + k) + v1) + v2) + v3) + v4 == l: Valid"
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The macro `assume` takes a boolean expression as its argument and returns 0 if the expression is false.\n- The function `unknown_int()` returns an integer value that is not known at the time of code analysis.\n- The variable `SIZE` is assigned the value 20000001.\n- The variable `n` is initialized to the return value of `unknown_int()`.\n- The value of `n` is less than or equal to `SIZE`.\n\nLoop Condition:\n- The loop runs as long as `l` is less than `n`.\n\nLoop Invariants:\n- `l <= n`\n- `i + j + k + v1 + v2 + v3 + v4 <= l`\n- `v1 <= l/7`\n- `v2 <= l/6`\n- `v3 <= l/5`\n- `v4 <= l/4`\n- `i <= l/3`\n- `j <= l/2`\n- `k <= l`\n\nExplanation:\n- The first invariant, `l <= n`, ensures that `l` remains less than or equal to `n` throughout the loop execution, which is necessary for the loop to terminate.\n- The second invariant, `i + j + k + v1 + v2 + v3 + v4 <= l`, ensures that the sum of all the variables remains less than or equal to `l` throughout the loop execution. This is necessary to ensure that the assertion at the end of the loop holds true.\n- The third invariant, `v1 <= l/7`, ensures that `v1` is always less than or equal to `l/7`. This is because `v1` is incremented only when `l` is divisible by 7. Therefore, `v1` can increase by at most `1` in every `7` iterations of the loop.\n- The fourth invariant, `v2 <= l/6`, ensures that `v2` is always less than or equal to `l/6`. This is because `v2` is incremented only when `l` is divisible by 6. Therefore, `v2` can increase by at most `1` in every `6` iterations of the loop.\n- The fifth invariant, `v3 <= l/5`, ensures that `v3` is always less than or equal to `l/5`. This is because `v3` is incremented only when `l` is divisible by 5. Therefore, `v3` can increase by at most `1` in every `5` iterations of the loop.\n- The sixth invariant, `v4 <= l/4`, ensures that `v4` is always less than or equal to `l/4`. This is because `v4` is incremented only when `l` is divisible by 4. Therefore, `v4` can increase by at most `1` in every `4` iterations of the loop.\n- The seventh invariant, `i <= l/3`, ensures that `i` is always less than or equal to `l/3`. This is because `i` is incremented only when `l` is divisible by 3. Therefore, `i` can increase by at most `1` in every `3` iterations of the loop.\n- The eighth invariant, `j <= l/2`, ensures that `j` is always less than or equal to `l/2`. This is because `j` is incremented only when `l` is divisible by 2. Therefore, `j` can increase by at most `1` in every `2` iterations of the loop.\n- The ninth invariant, `k <= l`, ensures that `k` is always less than or equal to `l`. This is because `k` is incremented in every iteration of the loop.\n\nAll the variables `v1`, `v2`, `v3`, `v4`, `i`, `j`, and `k` are initialized to `0`, so there are no issues with garbage values. The assertion is true at the end of the loop, so no additional implication is necessary.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant (i+j+k+v1+v2+v3+v4) == l;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant (i+j+k+v1+v2+v3+v4) == l is inductive.\nAssertion (((((i + j) + k) + v1) + v2) + v3) + v4 == l: Valid"
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= l <= n is partially proven to be inductive.\nloop invariant 0 <= i+j+k+v1+v2+v3+v4 <= l is partially proven to be inductive.\nloop invariant v1+v2+v3+v4 <= l/2 is established but not preserved.\nloop invariant (i + j + k + v1 + v2 + v3 + v4) == l is partially proven to be inductive.\nloop invariant (i+j+k+v1+v2+v3+v4) == l is partially proven to be inductive.\nAssertion (((((i + j) + k) + v1) + v2) + v3) + v4 == l: Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v1=0, v2=0, v3=0, v4=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  /*@\nloop invariant i1: 0 <= l <= n;\nloop invariant i2: 0 <= i+j+k+v1+v2+v3+v4 <= l;\nloop invariant i3: v1+v2+v3+v4 <= l/2;\nloop invariant i4: (i + j + k + v1 + v2 + v3 + v4) == l;\nloop invariant i5: (i+j+k+v1+v2+v3+v4) == l;\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%7))\n\t    v1 = v1 + 1;\n\t  else if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n    {;\n//@ assert((i+j+k+v1+v2+v3+v4) == l);\n}\n\n  }\n  return 0;\n}\n",
        "combined_annotation_num_solver_calls": 2,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v1=0, v2=0, v3=0, v4=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  /*@\nloop invariant i1: 0 <= l <= n;\nloop invariant i2: 0 <= i+j+k+v1+v2+v3+v4 <= l;\n\nloop invariant i4: (i + j + k + v1 + v2 + v3 + v4) == l;\nloop invariant i5: (i+j+k+v1+v2+v3+v4) == l;\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%7))\n\t    v1 = v1 + 1;\n\t  else if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n    {;\n//@ assert((i+j+k+v1+v2+v3+v4) == l);\n}\n\n  }\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/const.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq1.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq2.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/afnp2014.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/css2003.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007b.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gsv2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/hhk2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_2.c",
            "../data/benchmarks/sv-benchmarks/loop-new/gauss_sum.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark10_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark11_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark13_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark14_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark15_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark16_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark17_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark18_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark20_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark21_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark22_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark23_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark25_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark26_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark27_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark29_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark30_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark31_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark32_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark33_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark34_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark35_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark36_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark37_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark38_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark39_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark40_polynomial.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark41_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark42_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark43_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark45_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark48_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark49_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark50_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark51_polynomial.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark52_polynomial.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark53_polynomial.c",
            "../data/benchmarks/sv-benchmarks/loops/count_up_down-1.c",
            "../data/benchmarks/sv-benchmarks/loops/for_infinite_loop_1.c",
            "../data/benchmarks/sv-benchmarks/loops/for_infinite_loop_2.c",
            "../data/benchmarks/sv-benchmarks/loops/sum04-2.c",
            "../data/benchmarks/sv-benchmarks/loops/terminator_02-2.c",
            "../data/benchmarks/sv-benchmarks/loops/terminator_03-2.c",
            "../data/benchmarks/sv-benchmarks/loops/trex03-2.c",
            "../data/benchmarks/sv-benchmarks/loops/while_infinite_loop_1.c",
            "../data/benchmarks/sv-benchmarks/loops/while_infinite_loop_2.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/loopv1.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/loopv3.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/sumt2.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/sumt3.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/sumt6.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/sumt7.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../data/benchmarks/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/even.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/mod4.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/odd.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/id_trans.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/bhmr2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/ddlm2013.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gcnr2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gr2006.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_k.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_nondet.c",
            "../data/benchmarks/sv-benchmarks/loop-new/half.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark07_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark12_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark19_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark24_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark28_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark44_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark46_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark47_linear.c",
            "../data/benchmarks/sv-benchmarks/loops/count_up_down-2.c",
            "../data/benchmarks/sv-benchmarks/loops/for_bounded_loop1.c",
            "../data/benchmarks/sv-benchmarks/loops/sum01-1.c",
            "../data/benchmarks/sv-benchmarks/loops/sum01-2.c",
            "../data/benchmarks/sv-benchmarks/loops/sum01_bug02.c",
            "../data/benchmarks/sv-benchmarks/loops/sum01_bug02_sum01_bug02_base.case.c",
            "../data/benchmarks/sv-benchmarks/loops/sum03-1.c",
            "../data/benchmarks/sv-benchmarks/loops/sum03-2.c",
            "../data/benchmarks/sv-benchmarks/loops/sum04-1.c",
            "../data/benchmarks/sv-benchmarks/loops/terminator_02-1.c",
            "../data/benchmarks/sv-benchmarks/loops/terminator_03-1.c",
            "../data/benchmarks/sv-benchmarks/loops/trex03-1.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/iftelse.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_10.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_12.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_6.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_8.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_9.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono4_1.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono5_1.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono6_1.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/sumt4.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/sumt5.c"
        ],
        "skipped": [],
        "total": 398,
        "success_count": 204,
        "failure_count": 194,
        "success_rate": 0.5125628140703518
    }
}