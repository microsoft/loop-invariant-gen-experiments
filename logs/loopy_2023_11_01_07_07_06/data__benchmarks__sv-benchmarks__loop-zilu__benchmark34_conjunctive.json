{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark34_conjunctive.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  if (!((j==0) && (k==n) && (n>0))) return 0;\n  while (j<n && n>0) {\n    j++;k--;\n  }\n  {;\n//@ assert((k == 0));\n}\n\n  return 0;\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  if (!((j==0) && (k==n) && (n>0))) return 0;\n  while (j<n && n>0) {\n    j++;k--;\n  }\n  {;\n//@ assert((k == 0));\n}\n\n  return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- The program has three integer variables j, k, and n.\n- The values of j, k, and n are non-deterministic.\n- The values of j and k are such that j = 0 and k = n.\n- The value of n is greater than 0.\n\nLoop condition:\n- The loop executes while j is less than n and n is greater than 0.\n\nPost-condition:\n- The value of k is 0.\n\nLoop invariants:\n- j <= n\n- j >= 0\n- k <= n\n- k >= 0\n- k + j == n\n- (j<n && n>0) ==> k+j == n (This follows from the loop condition.)\n- (j>=n || n<=0) ==> k == 0 (This follows from the post-condition and loop condition.)\n- (j>=n || n<=0) ==> j <= n (This is always true.)\n- (j>=n || n<=0) ==> j >= 0 (This is always true.)\n\nPutting all the loop invariants together, we get:\n```\n/*@ \n    loop invariant j <= n;\n    loop invariant j >= 0;\n    loop invariant k <= n;\n    loop invariant k >= 0;\n    loop invariant k + j == n;\n    loop invariant (j<n && n>0) ==> k+j == n;\n    loop invariant (j>=n || n<=0) ==> k == 0;\n    loop invariant (j>=n || n<=0) ==> j <= n;\n    loop invariant (j>=n || n<=0) ==> j >= 0;\n*/\n```",
            "First, let's analyze the program and make note of the pre-conditions and variable assignments:\n\n```\nint j = unknown_int();\nint k = unknown_int();\nint n = unknown_int();\n\nif (!((j==0) && (k==n) && (n>0))) return 0;\n```\n\nThe program initializes three integers j, k, and n with non-deterministic values. Then, it checks if j is equal to 0, k is equal to n, and n is greater than 0. If the condition is false, the program returns 0.\n\nNext, we have a while loop with the following loop condition:\n\n```\nwhile (j<n && n>0)\n```\n\nThe loop continues as long as j is less than n and n is greater than 0. Inside the loop, j is incremented by 1 and k is decremented by 1.\n\nFinally, we have an assertion that checks if k is equal to 0.\n\n```\n//@ assert((k == 0));\n```\n\nWe need to find loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition.\n\nBefore the loop execution, we know that j is equal to 0, k is equal to n, and n is greater than 0. We can use these conditions as our loop invariants:\n\n```\n/*@ \n    loop invariant j >= 0 && j <= n;\n    loop invariant k >= 0 && k <= n;\n    loop invariant n > 0;\n*/\n```\n\nIn every iteration of the loop, we know that j is less than n and n is greater than 0. We also know that j is incremented by 1 and k is decremented by 1. Therefore, we can use the following loop invariants:\n\n```\n/*@ \n    loop invariant j >= 0 && j <= n;\n    loop invariant k >= 0 && k <= n;\n    loop invariant n > 0;\n    loop invariant j <= \\old(j) + 1;\n    loop invariant k >= \\old(k) - 1;\n*/\n```\n\nAfter the loop termination, we know that j is greater than or equal to n and n is greater than 0. We also know that k is equal to the initial value of k minus the number of iterations of the loop. Therefore, we can use the following loop invariants:\n\n```\n/*@ \n    loop invariant j >= n || n <= 0;\n    loop invariant k == \\at(k, Pre) - (\\at(j, Here) - \\at(j, Pre));\n    loop invariant n > 0;\n*/\n```\n\nFinally, we can use the guard condition of the assertion to add an implication to the loop invariant:\n\n```\n/*@ \n    loop invariant j >= 0 && j <= n;\n    loop invariant k >= 0 && k <= n;\n    loop invariant n > 0;\n    loop invariant j <= \\old(j) + 1;\n    loop invariant k >= \\old(k) - 1;\n    loop invariant j >= n || n <= 0 ==> k == 0;\n*/\n```\n\nThese loop invariants are sufficient to verify the post-condition of the program.",
            "Pre-conditions:\n- `j`, `k` and `n` are integer variables.\n- The values of `j`, `k` and `n` are unknown and can be any integer value.\n- The condition `((j==0) && (k==n) && (n>0))` must be true before the loop executes. \n\nLoop condition:\n- `j<n && n>0`\n\nPost-condition:\n- `k == 0` after the loop terminates.\n\nLoop invariants:\n- Before the loop, the condition `((j==0) && (k==n) && (n>0))` must be true.\n- In every iteration of the loop, the following conditions must be true:\n  - `0 <= j <= n`\n  - `0 <= k <= n`\n  - `j + k = n`\n- After the loop terminates, the post-condition `k == 0` must be true.\n  - Also, `j == n`\n\nPutting these together, we get the following loop invariants:\n```\n/*@ \n    loop invariant ((j==0) && (k==n) && (n>0));\n    loop invariant 0 <= j <= n;\n    loop invariant 0 <= k <= n;\n    loop invariant j + k == n;\n    loop invariant ((j>=n) ==> (k == 0));\n*/\n```",
            "Pre-conditions:\n- Variables `j`, `k`, and `n` are initialized to the result of `unknown_int()` function calls.\n- The condition `((j==0) && (k==n) && (n>0))` is true.\n\nLoop condition: `j<n && n>0`\n\nPost-condition: `k == 0`\n\nLoop Invariants:\n- `n > 0`\n- `j >= 0`\n- `k <= n`\n- `j <= n`\n- `(j==0 && k==n) ==> k==0`\n- `(j<n && n>0 && k<=n) ==> k+j == n`\n- `(j>=n || n<=0) ==> k==0`\n\nExplanation:\n- The first invariant `n > 0` holds before the loop execution because of the pre-condition.\n- The second invariant `j >= 0` holds before the loop execution because the value of `j` is initialized to the result of `unknown_int()`.\n- The third invariant `k <= n` holds before the loop execution because the value of `k` is initialized to the result of `unknown_int()` which is guaranteed to be less than or equal to `n`.\n- The fourth invariant `j <= n` holds before the loop execution because the value of `j` is initialized to the result of `unknown_int()` which is guaranteed to be less than or equal to `n`.\n- The fifth invariant `(j==0 && k==n) ==> k==0` holds in every iteration of the loop because the loop body increments `j` and decrements `k` such that `j+k` remains equal to `n`. Hence, if `j==0` and `k==n`, then `k` must be equal to `0`.\n- The sixth invariant `(j<n && n>0 && k<=n) ==> k+j == n` holds in every iteration of the loop because the loop body increments `j` and decrements `k` such that `j+k` remains equal to `n`.\n- The seventh invariant `(j>=n || n<=0) ==> k==0` holds after the loop termination because if `j>=n` or `n<=0`, then the loop did not execute and `k` remains equal to its initial value which is `n`. Hence, `k` must be equal to `0`.\n\nHence, the loop invariants for the given program are:\n```\n/*@ \n    loop invariant n > 0;\n    loop invariant j >= 0;\n    loop invariant k <= n;\n    loop invariant j <= n;\n    loop invariant (j==0 && k==n) ==> k==0;\n    loop invariant (j<n && n>0 && k<=n) ==> k+j == n;\n    loop invariant (j>=n || n<=0) ==> k==0;\n*/\n```",
            "Pre-conditions:\n- The variables j, k, and n are initialized with values returned by the function unknown_int().\n- The condition ((j==0) && (k==n) && (n>0)) holds true.\n\nLoop condition:\n- The loop executes while j is less than n and n is greater than 0.\n\nPost-condition:\n- The value of k is 0 after the loop execution.\n\nLoop invariants:\n- The values of j and k are always between 0 and n, inclusive. \n- The value of n is always greater than 0.\n- If j is less than n, then k is greater than or equal to 0.\n- If k is greater than or equal to 0, then j is less than or equal to n.\n- If j is equal to n, then k is equal to 0. \n\nCombining all the loop invariants, we get:\n```\n/*@ \n    loop invariant 0 <= j <= n;\n    loop invariant 0 <= k <= n;\n    loop invariant n > 0;\n    loop invariant j < n ==> k >= 0;\n    loop invariant k >= 0 ==> j <= n;\n    loop invariant j == n ==> k == 0;\n*/\n```\nThe above loop invariants hold true before the loop execution, in every iteration of the loop, and after the loop termination. These loop invariants imply the post-condition that the value of k is 0 after the loop execution."
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant j <= n;\n    loop invariant j >= 0;\n    loop invariant k <= n;\n    loop invariant k >= 0;\n    loop invariant k + j == n;\n    loop invariant (j<n && n>0) ==> k+j == n;\n    loop invariant (j>=n || n<=0) ==> k == 0;\n    loop invariant (j>=n || n<=0) ==> j <= n;\n    loop invariant (j>=n || n<=0) ==> j >= 0;\n*/",
            "/*@ \n    loop invariant j >= 0 && j <= n;\n    loop invariant k >= 0 && k <= n;\n    loop invariant n > 0;\n*/",
            "/*@ \n    loop invariant ((j==0) && (k==n) && (n>0));\n    loop invariant 0 <= j <= n;\n    loop invariant 0 <= k <= n;\n    loop invariant j + k == n;\n    loop invariant ((j>=n) ==> (k == 0));\n*/",
            "/*@ \n    loop invariant n > 0;\n    loop invariant j >= 0;\n    loop invariant k <= n;\n    loop invariant j <= n;\n    loop invariant (j==0 && k==n) ==> k==0;\n    loop invariant (j<n && n>0 && k<=n) ==> k+j == n;\n    loop invariant (j>=n || n<=0) ==> k==0;\n*/",
            "/*@ \n    loop invariant 0 <= j <= n;\n    loop invariant 0 <= k <= n;\n    loop invariant n > 0;\n    loop invariant j < n ==> k >= 0;\n    loop invariant k >= 0 ==> j <= n;\n    loop invariant j == n ==> k == 0;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant j <= n;\n    loop invariant j >= 0;\n    loop invariant k <= n;\n    loop invariant k >= 0;\n    loop invariant k + j == n;\n    loop invariant (j<n && n>0) ==> k+j == n;\n    loop invariant (j>=n || n<=0) ==> k == 0;\n    loop invariant (j>=n || n<=0) ==> j <= n;\n    loop invariant (j>=n || n<=0) ==> j >= 0;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant j <= n is inductive.\nloop invariant j >= 0 is inductive.\nloop invariant k <= n is inductive.\nloop invariant k >= 0 is inductive.\nloop invariant k + j == n is inductive.\nloop invariant (j<n && n>0) ==> k+j == n is inductive.\nloop invariant (j>=n || n<=0) ==> k == 0 is inductive.\nloop invariant (j>=n || n<=0) ==> j <= n is inductive.\nloop invariant (j>=n || n<=0) ==> j >= 0 is inductive.\nAssertion k == 0: Valid"
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant j >= 0 && j <= n;\n    loop invariant k >= 0 && k <= n;\n    loop invariant n > 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant j >= 0 && j <= n is partially proven to be inductive.\nloop invariant k >= 0 && k <= n is established but not preserved.\nloop invariant n > 0 is partially proven to be inductive.\nAssertion k == 0: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  if (!((j==0) && (k==n) && (n>0))) return 0;\n  /*@\nloop invariant i1: j >= 0 && j <= n;\n\nloop invariant i3: n > 0;\n*/\nwhile (j<n && n>0) {\n    j++;k--;\n  }\n  {;\n//@ assert((k == 0));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant ((j==0) && (k==n) && (n>0));\n    loop invariant 0 <= j <= n;\n    loop invariant 0 <= k <= n;\n    loop invariant j + k == n;\n    loop invariant ((j>=n) ==> (k == 0));\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant ((j==0) && (k==n) && (n>0)) is established but not preserved.\nloop invariant 0 <= j <= n is partially proven to be inductive.\nloop invariant 0 <= k <= n is partially proven to be inductive.\nloop invariant j + k == n is partially proven to be inductive.\nloop invariant ((j>=n) ==> (k == 0)) is partially proven to be inductive.\nAssertion k == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  if (!((j==0) && (k==n) && (n>0))) return 0;\n  /*@\n\nloop invariant i2: 0 <= j <= n;\nloop invariant i3: 0 <= k <= n;\nloop invariant i4: j + k == n;\nloop invariant i5: ((j>=n) ==> (k == 0));\n*/\nwhile (j<n && n>0) {\n    j++;k--;\n  }\n  {;\n//@ assert((k == 0));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant n > 0;\n    loop invariant j >= 0;\n    loop invariant k <= n;\n    loop invariant j <= n;\n    loop invariant (j==0 && k==n) ==> k==0;\n    loop invariant (j<n && n>0 && k<=n) ==> k+j == n;\n    loop invariant (j>=n || n<=0) ==> k==0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant n > 0 is partially proven to be inductive.\nloop invariant j >= 0 is partially proven to be inductive.\nloop invariant k <= n is partially proven to be inductive.\nloop invariant j <= n is partially proven to be inductive.\nloop invariant (j==0 && k==n) ==> k==0 is preserved but not established.\nloop invariant (j<n && n>0 && k<=n) ==> k+j == n is partially proven to be inductive.\nloop invariant (j>=n || n<=0) ==> k==0 is partially proven to be inductive.\nAssertion k == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  if (!((j==0) && (k==n) && (n>0))) return 0;\n  /*@\nloop invariant i1: n > 0;\nloop invariant i2: j >= 0;\nloop invariant i3: k <= n;\nloop invariant i4: j <= n;\n\nloop invariant i6: (j<n && n>0 && k<=n) ==> k+j == n;\nloop invariant i7: (j>=n || n<=0) ==> k==0;\n*/\nwhile (j<n && n>0) {\n    j++;k--;\n  }\n  {;\n//@ assert((k == 0));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant 0 <= j <= n;\n    loop invariant 0 <= k <= n;\n    loop invariant n > 0;\n    loop invariant j < n ==> k >= 0;\n    loop invariant k >= 0 ==> j <= n;\n    loop invariant j == n ==> k == 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= j <= n is partially proven to be inductive.\nloop invariant 0 <= k <= n is established but not preserved.\nloop invariant n > 0 is partially proven to be inductive.\nloop invariant j < n ==> k >= 0 is partially proven to be inductive.\nloop invariant k >= 0 ==> j <= n is partially proven to be inductive.\nloop invariant j == n ==> k == 0 is established but not preserved.\nAssertion k == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  if (!((j==0) && (k==n) && (n>0))) return 0;\n  /*@\nloop invariant i1: 0 <= j <= n;\n\nloop invariant i3: n > 0;\n\nloop invariant i5: k >= 0 ==> j <= n;\n\n*/\nwhile (j<n && n>0) {\n    j++;k--;\n  }\n  {;\n//@ assert((k == 0));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant j <= n is partially proven to be inductive.\nloop invariant j >= 0 is partially proven to be inductive.\nloop invariant k <= n is partially proven to be inductive.\nloop invariant k >= 0 is partially proven to be inductive.\nloop invariant k + j == n is partially proven to be inductive.\nloop invariant (j<n && n>0) ==> k+j == n is partially proven to be inductive.\nloop invariant (j>=n || n<=0) ==> k == 0 is partially proven to be inductive.\nloop invariant (j>=n || n<=0) ==> j <= n is partially proven to be inductive.\nloop invariant (j>=n || n<=0) ==> j >= 0 is partially proven to be inductive.\nloop invariant j >= 0 && j <= n is partially proven to be inductive.\nloop invariant k >= 0 && k <= n is partially proven to be inductive.\nloop invariant n > 0 is partially proven to be inductive.\nloop invariant ((j==0) && (k==n) && (n>0)) is partially proven to be inductive.\nloop invariant 0 <= j <= n is partially proven to be inductive.\nloop invariant 0 <= k <= n is partially proven to be inductive.\nloop invariant j + k == n is partially proven to be inductive.\nloop invariant ((j>=n) ==> (k == 0)) is partially proven to be inductive.\nloop invariant (j==0 && k==n) ==> k==0 is preserved but not established.\nloop invariant (j<n && n>0 && k<=n) ==> k+j == n is partially proven to be inductive.\nloop invariant (j>=n || n<=0) ==> k==0 is partially proven to be inductive.\nloop invariant j < n ==> k >= 0 is partially proven to be inductive.\nloop invariant k >= 0 ==> j <= n is partially proven to be inductive.\nloop invariant j == n ==> k == 0 is partially proven to be inductive.\nAssertion k == 0: Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  if (!((j==0) && (k==n) && (n>0))) return 0;\n  /*@\nloop invariant i1: j <= n;\nloop invariant i2: j >= 0;\nloop invariant i3: k <= n;\nloop invariant i4: k >= 0;\nloop invariant i5: k + j == n;\nloop invariant i6: (j<n && n>0) ==> k+j == n;\nloop invariant i7: (j>=n || n<=0) ==> k == 0;\nloop invariant i8: (j>=n || n<=0) ==> j <= n;\nloop invariant i9: (j>=n || n<=0) ==> j >= 0;\nloop invariant i10: j >= 0 && j <= n;\nloop invariant i11: k >= 0 && k <= n;\nloop invariant i12: n > 0;\nloop invariant i13: ((j==0) && (k==n) && (n>0));\nloop invariant i14: 0 <= j <= n;\nloop invariant i15: 0 <= k <= n;\nloop invariant i16: j + k == n;\nloop invariant i17: ((j>=n) ==> (k == 0));\nloop invariant i18: (j==0 && k==n) ==> k==0;\nloop invariant i19: (j<n && n>0 && k<=n) ==> k+j == n;\nloop invariant i20: (j>=n || n<=0) ==> k==0;\nloop invariant i21: j < n ==> k >= 0;\nloop invariant i22: k >= 0 ==> j <= n;\nloop invariant i23: j == n ==> k == 0;\n*/\nwhile (j<n && n>0) {\n    j++;k--;\n  }\n  {;\n//@ assert((k == 0));\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 3,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  if (!((j==0) && (k==n) && (n>0))) return 0;\n  /*@\nloop invariant i1: j <= n;\nloop invariant i2: j >= 0;\nloop invariant i3: k <= n;\nloop invariant i4: k >= 0;\nloop invariant i5: k + j == n;\nloop invariant i6: (j<n && n>0) ==> k+j == n;\nloop invariant i7: (j>=n || n<=0) ==> k == 0;\nloop invariant i8: (j>=n || n<=0) ==> j <= n;\nloop invariant i9: (j>=n || n<=0) ==> j >= 0;\nloop invariant i10: j >= 0 && j <= n;\nloop invariant i11: k >= 0 && k <= n;\nloop invariant i12: n > 0;\n\nloop invariant i14: 0 <= j <= n;\nloop invariant i15: 0 <= k <= n;\nloop invariant i16: j + k == n;\nloop invariant i17: ((j>=n) ==> (k == 0));\n\nloop invariant i19: (j<n && n>0 && k<=n) ==> k+j == n;\nloop invariant i20: (j>=n || n<=0) ==> k==0;\nloop invariant i21: j < n ==> k >= 0;\nloop invariant i22: k >= 0 ==> j <= n;\nloop invariant i23: j == n ==> k == 0;\n*/\nwhile (j<n && n>0) {\n    j++;k--;\n  }\n  {;\n//@ assert((k == 0));\n}\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/const.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq1.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq2.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/afnp2014.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/css2003.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007b.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gsv2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/hhk2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_2.c",
            "../data/benchmarks/sv-benchmarks/loop-new/gauss_sum.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark10_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark11_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark13_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark14_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark15_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark16_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark17_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark18_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark20_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark21_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark22_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark23_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark25_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark26_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark27_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark29_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark30_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark31_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark32_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark33_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark34_conjunctive.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../data/benchmarks/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/even.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/mod4.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/odd.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/id_trans.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/bhmr2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/ddlm2013.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gcnr2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gr2006.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_k.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_nondet.c",
            "../data/benchmarks/sv-benchmarks/loop-new/half.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark07_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark12_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark19_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark24_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark28_linear.c"
        ],
        "skipped": [],
        "total": 341,
        "success_count": 173,
        "failure_count": 168,
        "success_rate": 0.5073313782991202
    }
}