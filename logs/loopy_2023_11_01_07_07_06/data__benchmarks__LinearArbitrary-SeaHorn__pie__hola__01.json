{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
        "benchmark_code": "#define assume(e) if(!(e)) return;\n\nextern int unknown1();\n\nvoid main()\n{\n int x=1; int y=1;\n while(unknown1()) {\n   int t1 = x;\n   int t2 = y;\n   x = t1+ t2;\n   y = t1 + t2;\n }\n {;\n//@ assert(y>=1);\n}\n\n}\n",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return;\n\nextern int unknown1();\n\nvoid main()\n{\n int x=1; int y=1;\n while(unknown1()) {\n   int t1 = x;\n   int t2 = y;\n   x = t1+ t2;\n   y = t1 + t2;\n }\n {;\n//@ assert(y>=1);\n}\n\n}\n\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- The program does not have any pre-conditions.\n- The variables x and y are initialized to 1.\n\nLoop condition:\n- The loop executes as long as the value returned by the function unknown1() is non-zero.\n\nLoop invariants:\n1. Before the loop execution:\n- x and y are positive integers: x > 0 && y > 0.\n- y is greater than or equal to 1: y >= 1.\n\n2. In every iteration of the loop:\n- x and y are positive integers: x > 0 && y > 0.\n- y is greater than or equal to 1: y >= 1.\n- The value of x is the sum of the previous values of x and y: x == \\old(x) + \\old(y).\n- The value of y is the sum of the previous values of x and y: y == \\old(x) + \\old(y).\n\n3. After the loop termination:\n- x and y are positive integers: x > 0 && y > 0.\n- y is greater than or equal to 1: y >= 1.\n- The loop terminates when the function unknown1() returns 0. Therefore, if the loop terminates, then y >= 1.\n\nPutting everything together, the loop invariants are:\n```\n/*@ \n    loop invariant x > 0 && y > 0;\n    loop invariant y >= 1;\n    loop invariant x == \\old(x) + \\old(y);\n    loop invariant y == \\old(x) + \\old(y);\n    loop assigns x, y;\n*/\n``` \nNote that we added the \"loop assigns\" clause to indicate that the loop only modifies the variables x and y.",
            "Pre-conditions:\n- The program has no pre-conditions.\n- Variables x and y are initialized to 1.\n\nLoop condition:\n- The loop continues as long as the return value of unknown1() is non-zero.\n\nLoop invariants:\n- Before the loop execution: x and y are both positive integers (greater than or equal to 1).\n- In every iteration of the loop: x and y are both positive integers (greater than or equal to 1).\n- After the loop termination: y is greater than or equal to 1.\n\nExplanation:\n- Before the loop: Since x and y are initialized to 1, they are both positive integers.\n- In every iteration: The loop only updates x and y by adding their previous values, which are also positive integers, so x and y remain positive integers.\n- After the loop: Since y is only updated by adding two positive integers (x and y), y is always greater than or equal to 1.\n\nFinal loop invariants:\n```\n/*@ \n    loop invariant x >= 1 && y >= 1;\n    loop invariant x >= 1 && y >= 1;\n    loop invariant y >= 1;\n*/\n```",
            "Pre-conditions: None.\n\nVariable assignments: \n- `x` is assigned the value 1.\n- `y` is assigned the value 1.\n\nLoop condition: \n- The loop condition is `unknown1()`. \n\nLoop invariants:\n- `x >= 1`\n- `y >= 1`\n- `y >= x`\n\nExplanation:\n- Before the loop execution, `x` and `y` are both assigned a value of 1, hence their minimum value is 1.\n- In each iteration, `x` and `y` are assigned the sum of their previous values, which means that both `x` and `y` will always be greater than or equal to their previous values. Therefore, `x >= 1` and `y >= 1` must hold at the beginning of each iteration.\n- The sum of `x` and `y` in each iteration is equal to `2 * t1 + t2`, which means that `y` will always be greater than or equal to `x`. Hence, `y >= x` must hold at the beginning of each iteration.\n- After the loop termination, `y` must be greater than or equal to 1, which can be expressed as `y >= 1`.\n- The assertion `//@ assert(y>=1);` is not guarded by any condition, so it must hold at the end of the loop. Therefore, we can use an implication to make sure that it holds at the end of each iteration:\n```\n//@ assert(y>=1) ==> unknown1();\n```\n\nPutting everything together, the loop invariants are:\n```\n/*@ \n    loop invariant x >= 1;\n    loop invariant y >= 1;\n    loop invariant y >= x;\n    loop invariant y >= 1 ==> unknown1();\n*/\n```",
            "Pre-conditions:\n- The `assume` macro takes a boolean expression and returns if the expression is false.\n- The `unknown1()` function returns a non-deterministic integer value.\n\nVariable assignments:\n- `x` is initialized to `1`.\n- `y` is initialized to `1`.\n\nLoop condition:\n- The loop continues as long as the `unknown1()` function returns a non-zero integer value.\n\nPost-condition:\n- The value of `y` is greater than or equal to `1`.\n\nLoop invariants:\n- Before the loop execution, we know that `x` is equal to `1` and `y` is equal to `1`. Therefore, the following loop invariant holds:\n```\n/*@ \n    loop invariant x == 1 && y == 1;\n*/\n```\n- In every iteration of the loop, `x` and `y` are updated according to the following formula:\n```\nx = t1 + t2;\ny = t1 + t2;\n```\nwhere `t1` is the old value of `x` and `t2` is the old value of `y`. Therefore, the following loop invariant holds:\n```\n/*@ \n    loop invariant x == \\old(x) + \\old(y) && y == \\old(x) + \\old(y);\n*/\n```\n- After the loop termination, the value of `y` is greater than or equal to `1`. Since the loop continues as long as `unknown1()` returns a non-zero integer value, we can assume that `y` is always greater than or equal to `1` at the end of the loop. Therefore, the following loop invariant holds:\n```\n/*@ \n    loop invariant y >= 1;\n*/\n```\n- Since the `unknown1()` function returns a non-deterministic integer value, we cannot make any assumptions about the values of `x` and `y` before or after the loop execution. Therefore, we add the following loop invariants:\n```\n/*@ \n    loop invariant x >= 1;\n    loop invariant y >= 1;\n*/\n```",
            "Pre-conditions: None\n\nVariable assignments: \n- int x = 1;\n- int y = 1;\n\nLoop condition: \n- unknown1()\n\nPost-condition: \n- y >= 1\n\nLoop Invariants:\n- Before the loop: \n    - x >= 1\n    - y >= 1\n- In every iteration of the loop:\n    - x >= 1\n    - y >= 1\n    - x >= y\n- After the loop:\n    - y >= 1\n    - x >= y\n\nExplanation:\n- Before the loop, both x and y are initialized to 1, so they must be greater than or equal to 1.\n- In every iteration of the loop, x and y are updated by adding their previous values, so they must be greater than or equal to their previous values, which are both greater than or equal to 1. Also, since x and y are updated by the same value, x will always be greater than or equal to y.\n- After the loop, since y is always updated to the same value as x, y must be greater than or equal to 1 and x must be greater than or equal to y.\n\nFinal loop invariants:\n```\n/*@ \n    loop invariant x >= 1;\n    loop invariant y >= 1;\n    loop invariant x >= y;\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant x > 0 && y > 0;\n    loop invariant y >= 1;\n    loop invariant x == \\old(x) + \\old(y);\n    loop invariant y == \\old(x) + \\old(y);\n    loop assigns x, y;\n*/",
            "/*@ \n    loop invariant x >= 1 && y >= 1;\n    loop invariant x >= 1 && y >= 1;\n    loop invariant y >= 1;\n*/",
            "/*@ \n    loop invariant x >= 1;\n    loop invariant y >= 1;\n    loop invariant y >= x;\n    loop invariant y >= 1 ==> unknown1();\n*/",
            "/*@ \n    loop invariant x == 1 && y == 1;\n*/",
            "/*@ \n    loop invariant x >= 1;\n    loop invariant y >= 1;\n    loop invariant x >= y;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x > 0 && y > 0;\n    loop invariant y >= 1;\n    loop invariant x == \\old(x) + \\old(y);\n    loop invariant y == \\old(x) + \\old(y);\n    loop assigns x, y;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 11: \\old undefined in this context. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return;\n\nextern int unknown1();\n\nvoid main()\n{\n int x=1; int y=1;\n /*@\nloop invariant i1: x > 0 && y > 0;\nloop invariant i2: y >= 1;\n\n\n*/\nwhile(unknown1()) {\n   int t1 = x;\n   int t2 = y;\n   x = t1+ t2;\n   y = t1 + t2;\n }\n {;\n//@ assert(y>=1);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant x >= 1 && y >= 1;\n    loop invariant x >= 1 && y >= 1;\n    loop invariant y >= 1;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant x >= 1 && y >= 1 is inductive.\nloop invariant y >= 1 is inductive.\nAssertion y >= 1: Valid"
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x >= 1;\n    loop invariant y >= 1;\n    loop invariant y >= x;\n    loop invariant y >= 1 ==> unknown1();\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: unexpected token ')'",
                "code_after_prune": "#define assume(e) if(!(e)) return;\n\nextern int unknown1();\n\nvoid main()\n{\n int x=1; int y=1;\n /*@\nloop invariant i1: x >= 1;\nloop invariant i2: y >= 1;\nloop invariant i3: y >= x;\n\n*/\nwhile(unknown1()) {\n   int t1 = x;\n   int t2 = y;\n   x = t1+ t2;\n   y = t1 + t2;\n }\n {;\n//@ assert(y>=1);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x == 1 && y == 1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x == 1 && y == 1 is established but not preserved.\nAssertion y >= 1: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\n\nextern int unknown1();\n\nvoid main()\n{\n int x=1; int y=1;\n /*@\n\n*/\nwhile(unknown1()) {\n   int t1 = x;\n   int t2 = y;\n   x = t1+ t2;\n   y = t1 + t2;\n }\n {;\n//@ assert(y>=1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant x >= 1;\n    loop invariant y >= 1;\n    loop invariant x >= y;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant x >= 1 is inductive.\nloop invariant y >= 1 is inductive.\nloop invariant x >= y is inductive.\nAssertion y >= 1: Valid"
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 16: unexpected token ')'",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return;\n\nextern int unknown1();\n\nvoid main()\n{\n int x=1; int y=1;\n /*@\nloop invariant i1: x > 0 && y > 0;\nloop invariant i2: y >= 1;\nloop invariant i3: x == \\old(x) + \\old(y);\nloop invariant i4: y == \\old(x) + \\old(y);\nloop invariant i5: x >= 1 && y >= 1;\nloop invariant i6: x >= 1;\nloop invariant i7: y >= x;\nloop invariant i8: y >= 1 ==> unknown1();\nloop invariant i9: x == 1 && y == 1;\nloop invariant i10: x >= y;\n*/\nwhile(unknown1()) {\n   int t1 = x;\n   int t2 = y;\n   x = t1+ t2;\n   y = t1 + t2;\n }\n {;\n//@ assert(y>=1);\n}\n\n}\n",
        "combined_annotation_num_solver_calls": 5,
        "code_after_prune": "#define assume(e) if(!(e)) return;\n\nextern int unknown1();\n\nvoid main()\n{\n int x=1; int y=1;\n /*@\nloop invariant i1: x > 0 && y > 0;\nloop invariant i2: y >= 1;\n\n\nloop invariant i5: x >= 1 && y >= 1;\nloop invariant i6: x >= 1;\nloop invariant i7: y >= x;\n\n\nloop invariant i10: x >= y;\n*/\nwhile(unknown1()) {\n   int t1 = x;\n   int t2 = y;\n   x = t1+ t2;\n   y = t1 + t2;\n }\n {;\n//@ assert(y>=1);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c"
        ],
        "skipped": [],
        "total": 156,
        "success_count": 65,
        "failure_count": 91,
        "success_rate": 0.4166666666666667
    }
}