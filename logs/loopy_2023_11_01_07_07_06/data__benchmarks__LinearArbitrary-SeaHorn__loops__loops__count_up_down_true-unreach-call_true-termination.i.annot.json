{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  while(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  while(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "First, let's analyze the program and make a note of the pre-conditions and variable assignments:\n- The program declares and initializes two unsigned integer variables, `x` and `y`, with the values of `n` and `0`, respectively.\n- The program contains a while loop that decrements `x` by 1 and increments `y` by 1 until `x` is no longer greater than 0.\n- The program contains an assertion that `y` is equal to `n`.\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is `x > 0`.\n\nNow, let's output the necessary loop invariants for the loop:\n```\n/*@ \n    loop invariant 0 <= x <= n;\n    loop invariant 0 <= y <= n;\n    loop invariant x + y == n;\n*/\n```\nExplanation of loop invariants:\n- The first loop invariant states that `x` is always greater than or equal to 0 and less than or equal to `n`. This is true before the loop execution and in every iteration of the loop because `x` is initialized to `n` and decremented by 1 in each iteration until it reaches 0.\n- The second loop invariant states that `y` is always greater than or equal to 0 and less than or equal to `n`. This is true before the loop execution and in every iteration of the loop because `y` is initialized to 0 and incremented by 1 in each iteration until `x` reaches 0. \n- The third loop invariant states that the sum of `x` and `y` is always equal to `n`. This is true before the loop execution because `x + y` is initialized to `n`. It is also true in every iteration of the loop because `x` is decremented by 1 and `y` is incremented by 1 in each iteration, so the sum remains constant. Finally, it is true after the loop termination because the loop terminates when `x` reaches 0, so `y` must be equal to `n - x`, which is equal to `n`. \n\nSince the assertion is not guarded by any condition, we can directly use it in the loop invariant:\n```\n/*@ \n    loop invariant 0 <= x <= n;\n    loop invariant 0 <= y <= n;\n    loop invariant x + y == n;\n    loop invariant y == n ==> x == 0;\n*/\n```\nExplanation of loop invariants:\n- The fourth loop invariant states that if `y` is equal to `n`, then `x` must be equal to 0. This is true before the loop execution because `x + y` is initialized to `n`, which means that if `y` is equal to `n`, then `x` must be equal to 0. It is also true in every iteration of the loop because `x` is decremented by 1 and `y` is incremented by 1 in each iteration, so the sum remains constant. Finally, it is true after the loop termination because the loop terminates when `x` reaches 0, so `y` must be equal to `n - x`, which is equal to `n`. If `y` is equal to `n`, then `x` must be equal to 0.",
            "Pre-conditions:\n- None\n\nVariable assignments:\n- `n` is assigned the value returned by `unknown_uint()`.\n- `x` is assigned the value of `n`.\n- `y` is assigned 0.\n\nLoop condition:\n- The loop continues as long as `x` is greater than 0.\n\nLoop invariants:\n- Before the loop: None\n- In every iteration:\n    - `x + y == n`\n    - `x >= 0`\n    - `y <= n`\n    - `x <= n`\n- After the loop:\n    - `y == n`\n\nExplanation:\n- Before the loop: There are no loop invariants that hold before the loop starts.\n- In every iteration:\n    - `x + y == n`: This ensures that the sum of `x` and `y` remains equal to `n` throughout the loop execution.\n    - `x >= 0`: This ensures that `x` never becomes negative during the loop execution.\n    - `y <= n`: This ensures that `y` never exceeds the value of `n` during the loop execution.\n    - `x <= n`: This ensures that `x` never exceeds the value of `n` during the loop execution.\n- After the loop:\n    - `y == n`: This ensures that `y` has the same value as `n` after the loop execution.\n\nNote that since `unknown_uint()` is non-deterministic, we cannot make any assumptions about the initial value of `n`. However, the loop invariants hold true for any value of `n` and ensure that the post-condition (`y == n`) is verified.",
            "Pre-conditions: None\n\nVariable assignments: \n- `unsigned int n = unknown_uint();` assigns a non-deterministic value to `n`.\n- `unsigned int x=n, y=0;` assigns `n` to `x` and `0` to `y`.\n\nLoop condition: `x>0`\n\nPost-condition: `y == n`\n\nLoop Invariants:\n- `0 <= y <= n`\n- `0 <= x <= n`\n- `y + x == n`\n- `x == 0 ==> y == n`\n- `y <= \\at(y, Pre) + \\at(x, Pre)`\n- `x >= \\at(x, Pre) - \\at(y, Pre)`\n\nExplanation:\n- `0 <= y <= n` : `y` is always between `0` and `n` (inclusive).\n- `0 <= x <= n` : `x` is always between `0` and `n` (inclusive).\n- `y + x == n` : The sum of `y` and `x` is always equal to the initial value of `n`.\n- `x == 0 ==> y == n` : When `x` becomes `0`, `y` is equal to the initial value of `n`.\n- `y <= \\at(y, Pre) + \\at(x, Pre)` : The value of `y` in the current iteration is less than or equal to the value of `y` in the previous iteration plus the value of `x` in the previous iteration.\n- `x >= \\at(x, Pre) - \\at(y, Pre)` : The value of `x` in the current iteration is greater than or equal to the value of `x` in the previous iteration minus the value of `y` in the previous iteration.\n\nNote: Since `n` is non-deterministic, we cannot derive any bounds for it. We use implication to handle the conditional nature of the code in the loop invariants.",
            "Pre-conditions: None\n\nVariable assignments: \n- n is assigned the value returned by unknown_uint()\n- x is assigned the value of n\n- y is initialized to 0\n\nLoop condition: x > 0\n\nWe need to find the loop invariants that hold true before the loop execution, in every iteration of the loop, and after the loop termination.\n\nBefore the loop execution:\n- n, x, y are non-negative integers\n- y == 0\n- x == n\n\nIn every iteration of the loop:\n- x >= 0\n- y == n - x\n\nAfter the loop termination:\n- y == n\n\nWe can prove these loop invariants as follows:\n\nBefore the loop execution:\n- n is assigned the value returned by unknown_uint(), which returns a non-negative integer. Thus, n is a non-negative integer. \n- x is assigned the value of n. Since n is a non-negative integer, x is also a non-negative integer.\n- y is initialized to 0. Thus, y is a non-negative integer.\n- Therefore, n, x, y are non-negative integers.\n\n- y is initialized to 0. Thus, y == 0.\n- x is assigned the value of n. Thus, x == n.\n\nIn every iteration of the loop:\n- The loop condition is x > 0. Thus, x >= 0.\n- In each iteration of the loop, x is decremented by 1 and y is incremented by 1. Therefore, y == n - x.\n\nAfter the loop termination:\n- The loop terminates when x == 0. Therefore, y == n - 0, which means y == n.\n\nPutting all the loop invariants together, we get:\n```\n/*@ \n    loop invariant n >= 0 && x >= 0 && y >= 0;\n    loop invariant y == 0;\n    loop invariant x == n;\n    loop invariant x >= 0;\n    loop invariant y == n - x;\n    loop invariant y == n;\n*/\n```",
            "Pre-conditions: \n- The program does not have any pre-conditions.\n- The variables `x` and `y` are initialized with the value of variable `n`.\n\nLoop condition: \n- The loop condition is `x>0`.\n\nPost-condition: \n- The post-condition is `y==n`.\n\nLoop invariants:\n1. Before the loop execution:\n- The value of `x` is equal to `n`.\n- The value of `y` is equal to 0.\n2. In every iteration of the loop:\n- The value of `y` is less than or equal to `n`.\n- The value of `x` is non-negative.\n- The sum of `x` and `y` is equal to `n`.\n3. After the loop termination:\n- The value of `y` is equal to `n`.\n\nWe can represent the above loop invariants as follows:\n```\n/*@ \n    loop invariant x >= 0 && y <= n && x+y == n;\n    loop invariant y <= n;\n    loop invariant x+y == n;\n    loop invariant x==n ==> y==0;\n    loop invariant y==n <== x==0;\n*/\n``` \nNote that we have used implications to handle the non-deterministic value of `n` at the beginning and end of the loop. \n\nAlso, we have added conjunctions for the maximum and minimum values that the variables can take, since we know that `x` is non-negative, and `y` is always less than or equal to `n`."
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant 0 <= x <= n;\n    loop invariant 0 <= y <= n;\n    loop invariant x + y == n;\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- None\n\nVariable assignments:\n- `n` is assigned the value returned by `unknown_uint()`.\n- `x` is assigned the value of `n`.\n- `y` is assigned 0.\n\nLoop condition:\n- The loop continues as long as `x` is greater than 0.\n\nLoop invariants:\n- Before the loop: None\n- In every iteration:\n    - `x + y == n`\n    - `x >= 0`\n    - `y <= n`\n    - `x <= n`\n- After the loop:\n    - `y == n`\n\nExplanation:\n- Before the loop: There are no loop invariants that hold before the loop starts.\n- In every iteration:\n    - `x + y == n`: This ensures that the sum of `x` and `y` remains equal to `n` throughout the loop execution.\n    - `x >= 0`: This ensures that `x` never becomes negative during the loop execution.\n    - `y <= n`: This ensures that `y` never exceeds the value of `n` during the loop execution.\n    - `x <= n`: This ensures that `x` never exceeds the value of `n` during the loop execution.\n- After the loop:\n    - `y == n`: This ensures that `y` has the same value as `n` after the loop execution.\n\nNote that since `unknown_uint()` is non-deterministic, we cannot make any assumptions about the initial value of `n`. However, the loop invariants hold true for any value of `n` and ensure that the post-condition (`y == n`) is verified."
            ],
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions: None\n\nVariable assignments: \n- `unsigned int n = unknown_uint();` assigns a non-deterministic value to `n`.\n- `unsigned int x=n, y=0;` assigns `n` to `x` and `0` to `y`.\n\nLoop condition: `x>0`\n\nPost-condition: `y == n`\n\nLoop Invariants:\n- `0 <= y <= n`\n- `0 <= x <= n`\n- `y + x == n`\n- `x == 0 ==> y == n`\n- `y <= \\at(y, Pre) + \\at(x, Pre)`\n- `x >= \\at(x, Pre) - \\at(y, Pre)`\n\nExplanation:\n- `0 <= y <= n` : `y` is always between `0` and `n` (inclusive).\n- `0 <= x <= n` : `x` is always between `0` and `n` (inclusive).\n- `y + x == n` : The sum of `y` and `x` is always equal to the initial value of `n`.\n- `x == 0 ==> y == n` : When `x` becomes `0`, `y` is equal to the initial value of `n`.\n- `y <= \\at(y, Pre) + \\at(x, Pre)` : The value of `y` in the current iteration is less than or equal to the value of `y` in the previous iteration plus the value of `x` in the previous iteration.\n- `x >= \\at(x, Pre) - \\at(y, Pre)` : The value of `x` in the current iteration is greater than or equal to the value of `x` in the previous iteration minus the value of `y` in the previous iteration.\n\nNote: Since `n` is non-deterministic, we cannot derive any bounds for it. We use implication to handle the conditional nature of the code in the loop invariants."
            ],
            "/*@ \n    loop invariant n >= 0 && x >= 0 && y >= 0;\n    loop invariant y == 0;\n    loop invariant x == n;\n    loop invariant x >= 0;\n    loop invariant y == n - x;\n    loop invariant y == n;\n*/",
            "/*@ \n    loop invariant x >= 0 && y <= n && x+y == n;\n    loop invariant y <= n;\n    loop invariant x+y == n;\n    loop invariant x==n ==> y==0;\n    loop invariant y==n <== x==0;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant 0 <= x <= n;\n    loop invariant 0 <= y <= n;\n    loop invariant x + y == n;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is inductive.\nloop invariant 0 <= y <= n is inductive.\nloop invariant x + y == n is inductive.\nAssertion y == n: Valid"
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- None\n\nVariable assignments:\n- `n` is assigned the value returned by `unknown_uint()`.\n- `x` is assigned the value of `n`.\n- `y` is assigned 0.\n\nLoop condition:\n- The loop continues as long as `x` is greater than 0.\n\nLoop invariants:\n- Before the loop: None\n- In every iteration:\n    - `x + y == n`\n    - `x >= 0`\n    - `y <= n`\n    - `x <= n`\n- After the loop:\n    - `y == n`\n\nExplanation:\n- Before the loop: There are no loop invariants that hold before the loop starts.\n- In every iteration:\n    - `x + y == n`: This ensures that the sum of `x` and `y` remains equal to `n` throughout the loop execution.\n    - `x >= 0`: This ensures that `x` never becomes negative during the loop execution.\n    - `y <= n`: This ensures that `y` never exceeds the value of `n` during the loop execution.\n    - `x <= n`: This ensures that `x` never exceeds the value of `n` during the loop execution.\n- After the loop:\n    - `y == n`: This ensures that `y` has the same value as `n` after the loop execution.\n\nNote that since `unknown_uint()` is non-deterministic, we cannot make any assumptions about the initial value of `n`. However, the loop invariants hold true for any value of `n` and ensure that the post-condition (`y == n`) is verified.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions: None\n\nVariable assignments: \n- `unsigned int n = unknown_uint();` assigns a non-deterministic value to `n`.\n- `unsigned int x=n, y=0;` assigns `n` to `x` and `0` to `y`.\n\nLoop condition: `x>0`\n\nPost-condition: `y == n`\n\nLoop Invariants:\n- `0 <= y <= n`\n- `0 <= x <= n`\n- `y + x == n`\n- `x == 0 ==> y == n`\n- `y <= \\at(y, Pre) + \\at(x, Pre)`\n- `x >= \\at(x, Pre) - \\at(y, Pre)`\n\nExplanation:\n- `0 <= y <= n` : `y` is always between `0` and `n` (inclusive).\n- `0 <= x <= n` : `x` is always between `0` and `n` (inclusive).\n- `y + x == n` : The sum of `y` and `x` is always equal to the initial value of `n`.\n- `x == 0 ==> y == n` : When `x` becomes `0`, `y` is equal to the initial value of `n`.\n- `y <= \\at(y, Pre) + \\at(x, Pre)` : The value of `y` in the current iteration is less than or equal to the value of `y` in the previous iteration plus the value of `x` in the previous iteration.\n- `x >= \\at(x, Pre) - \\at(y, Pre)` : The value of `x` in the current iteration is greater than or equal to the value of `x` in the previous iteration minus the value of `y` in the previous iteration.\n\nNote: Since `n` is non-deterministic, we cannot derive any bounds for it. We use implication to handle the conditional nature of the code in the loop invariants.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant n >= 0 && x >= 0 && y >= 0;\n    loop invariant y == 0;\n    loop invariant x == n;\n    loop invariant x >= 0;\n    loop invariant y == n - x;\n    loop invariant y == n;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant n >= 0 && x >= 0 && y >= 0 is partially proven to be inductive.\nloop invariant y == 0 is partially proven to be inductive.\nloop invariant x == n is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant y == n - x is partially proven to be inductive.\nloop invariant y == n is preserved but not established.\nAssertion y == n: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  /*@\nloop invariant i1: n >= 0 && x >= 0 && y >= 0;\n\n\nloop invariant i4: x >= 0;\nloop invariant i5: y == n - x;\n\n*/\nwhile(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x >= 0 && y <= n && x+y == n;\n    loop invariant y <= n;\n    loop invariant x+y == n;\n    loop invariant x==n ==> y==0;\n    loop invariant y==n <== x==0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 13: unexpected token '='",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  /*@\nloop invariant i1: x >= 0 && y <= n && x+y == n;\nloop invariant i2: y <= n;\nloop invariant i3: x+y == n;\nloop invariant i4: x==n ==> y==0;\n\n*/\nwhile(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 22: unexpected token '='",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: 0 <= y <= n;\nloop invariant i3: x + y == n;\nloop invariant i4: n >= 0 && x >= 0 && y >= 0;\nloop invariant i5: y == 0;\nloop invariant i6: x == n;\nloop invariant i7: x >= 0;\nloop invariant i8: y == n - x;\nloop invariant i9: y == n;\nloop invariant i10: x >= 0 && y <= n && x+y == n;\nloop invariant i11: y <= n;\nloop invariant i12: x+y == n;\nloop invariant i13: x==n ==> y==0;\nloop invariant i14: y==n <== x==0;\n*/\nwhile(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n}",
        "combined_annotation_num_solver_calls": 5,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: 0 <= y <= n;\nloop invariant i3: x + y == n;\nloop invariant i4: n >= 0 && x >= 0 && y >= 0;\n\n\nloop invariant i7: x >= 0;\nloop invariant i8: y == n - x;\n\nloop invariant i10: x >= 0 && y <= n && x+y == n;\nloop invariant i11: y <= n;\nloop invariant i12: x+y == n;\nloop invariant i13: x==n ==> y==0;\n\n*/\nwhile(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c"
        ],
        "skipped": [],
        "total": 136,
        "success_count": 56,
        "failure_count": 80,
        "success_rate": 0.4117647058823529
    }
}