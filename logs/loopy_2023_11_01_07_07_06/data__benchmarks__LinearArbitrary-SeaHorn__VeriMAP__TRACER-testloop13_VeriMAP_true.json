{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  while (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\n  return 0;\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  while (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\n  return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "First, let's analyze the loop body and note the loop condition:\n\n```\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n}\n```\n\nThe loop condition is `new != old`.\n\nNext, let's note the pre-conditions and variable assignments in the program:\n\n```\nold = unknown_uint();\nlock=0;\nnew=old+1;\n```\n\nHere, `old` is assigned the result of a non-deterministic function `unknown_uint()`. We cannot make any assumptions about its value. `lock` is initialized to 0, and `new` is assigned the value of `old+1`.\n\nNow, let's find the necessary loop invariants. We need to find loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition.\n\nWe are given the post-condition `!(lock==0)`.\n\nBefore the loop, we have:\n\n```\n/*@ \n    loop invariant old >= 0 && old <= UINT_MAX;\n    loop invariant new >= 1 && new <= UINT_MAX+1;\n    loop invariant lock == 0 ==> old == new - 1;\n*/\n```\n\nHere, we have used the conjunction to bound the maximum and minimum values that `old` and `new` can take. We have also used the implication to relate `lock` to `old` and `new` such that if `lock` is 0, then `old` must be equal to `new-1`. This is because `lock` is set to 1 at the beginning of each iteration and is set to 0 only if `unknown()` returns a non-zero value, in which case `new` is incremented by 2. Therefore, if `lock` is 0, then `new` must be equal to `old+1`.\n\nIn every iteration of the loop, we have:\n\n```\n/*@ \n    loop invariant old >= 0 && old <= UINT_MAX;\n    loop invariant new >= 1 && new <= UINT_MAX+1;\n    loop invariant lock == 1;\n    loop invariant old == \\old(new) - 1 || old == new;\n    loop invariant (old != new ==> \\old(lock) == 1) && (old == new ==> \\old(lock) == lock);\n*/\n```\n\nHere, we have used the conjunction to bound the maximum and minimum values that `old` and `new` can take. We have also added the invariant `lock == 1` to ensure that `lock` is always 1 during the loop execution. We have used the `\\old` operator to refer to the value of a variable in the previous iteration. We have added the invariant `old == \\old(new) - 1 || old == new` to relate `old` and `new` such that `old` is either equal to the previous value of `new` minus 1, or it is equal to the previous value of `old`. Finally, we have used the implication to relate `lock` to `old` and `new` in such a way that if `old` is not equal to `new`, then the previous value of `lock` must have been 1, and if `old` is equal to `new`, then the previous value of `lock` must be equal to the current value of `lock`.\n\nAfter the loop, we have:\n\n```\n/*@ \n    loop invariant old >= 0 && old <= UINT_MAX;\n    loop invariant new >= 1 && new <= UINT_MAX+1;\n    loop invariant lock == 0 ==> old == new - 1;\n    loop invariant !( lock==0 ) ==> old == new;\n*/\n```\n\nHere, we have used the conjunction to bound the maximum and minimum values that `old` and `new` can take. We have also used the implication to relate `lock` to `old` and `new` such that if `lock` is 0, then `old` must be equal to `new-1`, and if `lock` is not 0, then `old` must be equal to `new`. Finally, we have used the implication to guard the assertion with the condition `!(lock==0)`.\n\nTherefore, the final set of loop invariants for the given program are:\n\n```\n/*@ \n    loop invariant old >= 0 && old <= UINT_MAX;\n    loop invariant new >= 1 && new <= UINT_MAX+1;\n    loop invariant lock == 0 ==> old == new - 1;\n    loop invariant !( lock==0 ) ==> old == new;\n    loop invariant lock == 1;\n    loop invariant old == \\old(new) - 1 || old == new",
            "First, let's note the pre-conditions and variable assignments:\n\nPre-conditions:\nNone.\n\nVariable assignments:\n- `old` is assigned the value of an unknown unsigned integer.\n- `lock` is assigned the value 0.\n- `new` is assigned the value of `old` plus 1.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is `new != old`.\n- Inside the loop, `lock` is assigned the value 1, and then `old` is assigned the value of `new`.\n- If `unknown()` returns a non-zero value, `lock` is assigned the value 0, and `new` is increased by 2.\n\nTo find the necessary loop invariants, we need to analyze the loop body and the post-condition. The post-condition is `!(lock == 0)`. \n\nWe can start by noting that `lock` is always either 0 or 1. Therefore, we can add the following loop invariant:\n\n```\n/*@ \n    loop invariant lock == 0 || lock == 1;\n*/\n```\n\nNext, let's consider the case where `unknown()` returns a non-zero value. In this case, `lock` is set to 0 and `new` is increased by 2. We can add the following loop invariant to capture this behavior:\n\n```\n/*@ \n    loop invariant lock == 0 ==> new >= \\old(new) + 2;\n*/\n```\n\nNow, let's consider the case where `unknown()` returns 0. In this case, `lock` is set to 1 and `old` is assigned the value of `new`. We can add the following loop invariant to capture this behavior:\n\n```\n/*@ \n    loop invariant lock == 1 ==> old == \\old(new);\n*/\n```\n\nNext, let's consider the loop condition. The loop terminates when `new` is equal to `old`. Therefore, we can add the following loop invariant:\n\n```\n/*@ \n    loop invariant new <= old + 1;\n*/\n```\n\nFinally, we can use the loop invariants to prove the post-condition. If `lock` is 0, then the loop invariant `lock == 0 ==> new >= \\old(new) + 2` implies that `new` is at least 2 greater than its previous value, which contradicts the loop invariant `new <= old + 1`. Therefore, if the post-condition holds, `lock` must be 1. Conversely, if `lock` is 1, then the loop invariant `lock == 1 ==> old == \\old(new)` implies that `old` is equal to its previous value, which means that `new` must also be equal to its previous value. Therefore, the post-condition holds if `lock` is 1, which follows from the loop invariant `lock == 0 || lock == 1`. \n\nPutting it all together, we get the following loop invariants:\n\n```\n/*@ \n    loop invariant lock == 0 || lock == 1;\n    loop invariant lock == 0 ==> new >= \\old(new) + 2;\n    loop invariant lock == 1 ==> old == \\old(new);\n    loop invariant new <= old + 1;\n*/\n```",
            "Pre-conditions/Variable Assignments:\n- The function `unknown()` returns an integer value that could be any integer. \n- The function `unknown_uint()` returns an unsigned integer value that could be any unsigned integer.\n- The variable `lock` is assigned the value 0.\n- The variable `old` is assigned the value returned by `unknown_uint()`.\n- The variable `new` is assigned the value of `old+1`.\n\nLoop Condition:\n- The loop continues as long as the value of `new` is not equal to the value of `old`.\n\nLoop Invariants:\n- Since `lock` is assigned the value 0 at the beginning of the program, the following loop invariant holds before the loop execution: \n```\n/*@ loop invariant lock == 0; */\n```\n- The values of `old` and `new` are always non-negative, so we can add the following loop invariants: \n```\n/*@ loop invariant old >= 0;\n    loop invariant new >= 0; */\n```\n- Since `new` is assigned the value of `old+1` before the loop execution, we can add the following loop invariant:\n```\n/*@ loop invariant new == old + 1; */\n```\n- In each iteration of the loop, `lock` is assigned the value 1, so we can add the following loop invariant:\n```\n/*@ loop invariant lock == 1; */\n```\n- In each iteration of the loop, `old` is assigned the value of `new`, so we can add the following loop invariant:\n```\n/*@ loop invariant old == \\old(new); */\n```\n- In each iteration of the loop, `new` is assigned either `old+2` or `old+1`. If `unknown()` returns 0, `new` is assigned the value `old+1`. If `unknown()` returns non-zero, `new` is assigned the value `old+2`. Therefore, we can split the loop invariant into two parts:\n```\n/*@ loop invariant (unknown() == 0 ==> new == old + 1) && (unknown() != 0 ==> new == old + 2); */\n```\n- Since we want to show that `lock` is always non-zero at the end of the loop, we can add the following loop invariant:\n```\n/*@ loop invariant lock != 0 ==> new != old; */\n```\n- Finally, we can use implication to take care of the conditional nature of the code and add the following loop invariant for the assertion:\n```\n/*@ loop invariant (unknown() == 0 ==> new == old + 1) && (unknown() != 0 ==> new == old + 2) ==> (lock != 0 ==> new != old);\n    loop invariant old >= 0;\n    loop invariant new >= 0;\n    loop invariant new == old + 1;\n    loop invariant lock == 0 || lock == 1;\n    loop invariant old == \\old(new);\n*/\n```\n\nTherefore, the final set of loop invariants for the given program is:\n```\n/*@ \n    loop invariant (unknown() == 0 ==> new == old + 1) && (unknown() != 0 ==> new == old + 2) ==> (lock != 0 ==> new != old);\n    loop invariant old >= 0;\n    loop invariant new >= 0;\n    loop invariant new == old + 1;\n    loop invariant lock == 0 || lock == 1;\n    loop invariant old == \\old(new);\n    loop invariant lock == 1;\n*/\n```",
            "Pre-conditions:\n- The function `unknown()` returns an integer value.\n- The function `unknown_uint()` returns an unsigned integer value.\n\nVariable assignments:\n- `old` is assigned the value returned by `unknown_uint()`.\n- `lock` is initialized to 0.\n- `new` is assigned the value of `old` incremented by 1.\n\nLoop condition:\n- The loop continues while `new` is not equal to `old`.\n\nLoop invariants:\n- `lock` is either 0 or 1.\n- `old >= 0`\n- `new > old`\n- `new >= old + 1`\n- `new` is odd\n- If `lock == 0`, then `new` is greater than `old`.\n- If `lock == 1`, then `new` is equal to `old + 1`.\n- If `lock == 0` and `unknown()` returns true, then `new` is greater than `old + 2`.\n- If `lock == 1` and `unknown()` returns true, then `new` is equal to `old + 2`.\n\nLoop invariant explanations:\n- `lock` is either 0 or 1 because it is only assigned these values in the loop.\n- `old >= 0` because it is assigned the result of `unknown_uint()` which returns an unsigned integer.\n- `new > old` and `new >= old + 1` because `new` is assigned the value of `old` incremented by 1.\n- `new` is odd because it is always incremented by 2 when `lock` is set to 0.\n- If `lock == 0`, then `new` is greater than `old` because it is incremented by 2 in this case.\n- If `lock == 1`, then `new` is equal to `old + 1` because it is not incremented in this case.\n- If `lock == 0` and `unknown()` returns true, then `new` is greater than `old + 2` because it is incremented by 2 and the `lock` value is set to 0.\n- If `lock == 1` and `unknown()` returns true, then `new` is equal to `old + 2` because `lock` is set to 0 and then `new` is incremented by 2.\n\nLoop invariants:\n```\n/*@ \n  loop invariant lock == 0 || lock == 1;\n  loop invariant old >= 0;\n  loop invariant new > old;\n  loop invariant new >= old + 1;\n  loop invariant new % 2 == 1;\n  loop invariant lock == 0 ==> new > old;\n  loop invariant lock == 1 ==> new == old + 1;\n  loop invariant lock == 0 && unknown() ==> new > old + 2;\n  loop invariant lock == 1 && unknown() ==> new == old + 2;\n*/\n```\n\nThe loop invariants imply the post-condition `!(lock == 0)` because if `lock` is 0 at the end of the loop, then the loop was exited due to the condition `new == old`, which contradicts the loop invariant `new > old`. Therefore, the assertion holds at the end of the loop if the loop invariants hold.",
            "Pre-conditions:\n- None\n\nVariable assignments:\n- `old`: assigned the value returned by `unknown_uint()`\n- `lock`: assigned the value 0\n- `new`: assigned `old + 1`\n\nLoop condition:\n- `new != old`\n\nLoop invariants:\n```\n//@ loop invariant new > old;\n//@ loop invariant lock == 0 || new == old + 2;\n//@ loop invariant lock == 1 ==> new == old + 2;\n//@ loop invariant lock == 1 ==> !(unknown());\n//@ loop invariant lock <= 1;\n//@ loop invariant old >= 0;\n//@ loop invariant new >= 1;\n```\n\nExplanation:\n- The first loop invariant `new > old` ensures that `new` is always greater than `old` throughout the loop execution. This ensures that progress is made towards the loop termination condition.\n- The second loop invariant `lock == 0 || new == old + 2` states that if `lock` is 0, then `new` can be any value, otherwise it should be equal to `old + 2`. This ensures that `new` is incremented by 2 every time `lock` is set to 0.\n- The third loop invariant `lock == 1 ==> new == old + 2` is an implication that states that if `lock` is 1, then `new` must be equal to `old + 2`. This ensures that `new` is not modified when `lock` is 1.\n- The fourth loop invariant `lock == 1 ==> !(unknown())` is an implication that states that if `lock` is 1, then `unknown()` must return 0. This ensures that `lock` is only set to 0 when `unknown()` returns 1.\n- The fifth loop invariant `lock <= 1` ensures that `lock` can only take values 0 or 1.\n- The sixth loop invariant `old >= 0` ensures that `old` is always non-negative.\n- The seventh loop invariant `new >= 1` ensures that `new` is always greater than or equal to 1. This is necessary because `new` is initialized to `old + 1` and `old` can be 0. \n\nThe final assertion is guarded by the condition `lock == 0`, which implies that `new` is equal to `old + 2`. Therefore, the assertion checks that `lock` is not 0, which means that `new` has not been modified without `lock` being set to 0."
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant old >= 0 && old <= UINT_MAX;\n    loop invariant new >= 1 && new <= UINT_MAX+1;\n    loop invariant lock == 0 ==> old == new - 1;\n*/",
            "/*@ \n    loop invariant lock == 0 || lock == 1;\n*/",
            "/*@ loop invariant lock == 0; */",
            "/*@ \n  loop invariant lock == 0 || lock == 1;\n  loop invariant old >= 0;\n  loop invariant new > old;\n  loop invariant new >= old + 1;\n  loop invariant new % 2 == 1;\n  loop invariant lock == 0 ==> new > old;\n  loop invariant lock == 1 ==> new == old + 1;\n  loop invariant lock == 0 && unknown() ==> new > old + 2;\n  loop invariant lock == 1 && unknown() ==> new == old + 2;\n*/",
            "//@ loop invariant new > old;\n//@ loop invariant lock == 0 || new == old + 2;\n//@ loop invariant lock == 1 ==> new == old + 2;\n//@ loop invariant lock == 1 ==> !(unknown());\n//@ loop invariant lock <= 1;\n//@ loop invariant old >= 0;\n//@ loop invariant new >= 1;"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant old >= 0 && old <= UINT_MAX;\n    loop invariant new >= 1 && new <= UINT_MAX+1;\n    loop invariant lock == 0 ==> old == new - 1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unbound logic variable UINT_MAX. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\n\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant lock == 0 || lock == 1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant lock == 0 || lock == 1 is inductive.\nAssertion !(lock == 0): Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant i1: lock == 0 || lock == 1;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ loop invariant lock == 0; */",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant lock == 0 is established but not preserved.\nAssertion !(lock == 0): Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "/*@ \n  loop invariant lock == 0 || lock == 1;\n  loop invariant old >= 0;\n  loop invariant new > old;\n  loop invariant new >= old + 1;\n  loop invariant new % 2 == 1;\n  loop invariant lock == 0 ==> new > old;\n  loop invariant lock == 1 ==> new == old + 1;\n  loop invariant lock == 0 && unknown() ==> new > old + 2;\n  loop invariant lock == 1 && unknown() ==> new == old + 2;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 24: unexpected token ')'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant i1: lock == 0 || lock == 1;\n\n\n\n\nloop invariant i6: lock == 0 ==> new > old;\n\n\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 6,
                "annotations": "//@ loop invariant new > old;\n//@ loop invariant lock == 0 || new == old + 2;\n//@ loop invariant lock == 1 ==> new == old + 2;\n//@ loop invariant lock == 1 ==> !(unknown());\n//@ loop invariant lock <= 1;\n//@ loop invariant old >= 0;\n//@ loop invariant new >= 1;",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 20: unexpected token ')'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\n\n\n\nloop invariant i5: lock <= 1;\n\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 28: unexpected token ')'",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant i1: old >= 0 && old <= UINT_MAX;\nloop invariant i2: new >= 1 && new <= UINT_MAX+1;\nloop invariant i3: lock == 0 ==> old == new - 1;\nloop invariant i4: lock == 0 || lock == 1;\nloop invariant i5: lock == 0;\nloop invariant i6: old >= 0;\nloop invariant i7: new > old;\nloop invariant i8: new >= old + 1;\nloop invariant i9: new % 2 == 1;\nloop invariant i10: lock == 0 ==> new > old;\nloop invariant i11: lock == 1 ==> new == old + 1;\nloop invariant i12: lock == 0 && unknown() ==> new > old + 2;\nloop invariant i13: lock == 1 && unknown() ==> new == old + 2;\nloop invariant i14: lock == 0 || new == old + 2;\nloop invariant i15: lock == 1 ==> new == old + 2;\nloop invariant i16: lock == 1 ==> !(unknown());\nloop invariant i17: lock <= 1;\nloop invariant i18: new >= 1;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 12,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\n\n\nloop invariant i4: lock == 0 || lock == 1;\n\n\n\n\n\nloop invariant i10: lock == 0 ==> new > old;\n\n\n\n\n\n\nloop invariant i17: lock <= 1;\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c"
        ],
        "skipped": [],
        "total": 234,
        "success_count": 112,
        "failure_count": 122,
        "success_rate": 0.47863247863247865
    }
}