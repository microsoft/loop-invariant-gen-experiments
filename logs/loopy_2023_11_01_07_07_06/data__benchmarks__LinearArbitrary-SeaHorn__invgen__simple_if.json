{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
        "benchmark_code": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n  int n,m;\n  n = unknown ();\n  m = unknown ();\n  int i = 1;\n   \n  while( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return;\n\nvoid main() {\n  int n,m;\n  n = unknown ();\n  m = unknown ();\n  int i = 1;\n   \n  while( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions or variable assignments:\n- Variables n and m are assigned non-deterministic values using the unknown() function.\n- Variable i is initialized to 1.\n\nLoop condition:\n- The loop runs while i is less than n.\n\nLoop invariants:\n- Before the loop execution, i is greater than or equal to 1. (i >= 1)\n- Before the loop execution, n and m are non-negative. (n >= 0 && m >= 0)\n- Before the loop execution, if m is positive, then i is a power of 2. (m > 0 ==> i is a power of 2)\n- Before the loop execution, if m is non-positive, then i is a multiple of 3. (m <= 0 ==> i is a multiple of 3)\n- In every iteration of the loop, i is less than or equal to n. (i <= n)\n- In every iteration of the loop, if m is positive, then i is a power of 2. (m > 0 ==> i is a power of 2)\n- In every iteration of the loop, if m is non-positive, then i is a multiple of 3. (m <= 0 ==> i is a multiple of 3)\n- After the loop termination, i is greater than or equal to n. (i >= n)\n- After the loop termination, if m is positive, then i is a power of 2. (m > 0 ==> i is a power of 2)\n- After the loop termination, if m is non-positive, then i is a multiple of 3. (m <= 0 ==> i is a multiple of 3)\n- After the loop termination, i is greater than 0. (i > 0)\n\nNote: Since n and m are non-deterministic, we cannot infer any additional information about them during the loop execution. Therefore, we only add bounds on their values before the loop execution.",
            "Pre-conditions:\n- The function main does not take any arguments.\n- The function unknown() returns an integer value. The value could be any integer value, positive, negative or zero.\n\nVariable assignments:\n- n is assigned a value returned by the function unknown().\n- m is assigned a value returned by the function unknown().\n- i is assigned the value 1.\n\nLoop condition:\n- The loop condition is `i < n`.\n\nLoop body:\n- If `m > 0`, then `i` is assigned `2*i`.\n- Otherwise, `i` is assigned `3*i`.\n\nPost-condition:\n- `i > 0`.\n\nLoop invariants:\n1. Before the loop execution, `i` is positive or zero. (This is trivially true for the initial value of `i`, which is 1.)\n2. Before the loop execution, `n` is positive or zero. (This is because `unknown()` can return any integer value, positive, negative or zero, and `n` is assigned a value returned by `unknown()`.)\n3. Before the loop execution, `m` is any integer value. (This is because `unknown()` can return any integer value, positive, negative or zero, and `m` is assigned a value returned by `unknown()`.)\n4. In every iteration of the loop, `i` is positive or zero. (This is because `i` is assigned a positive value in each iteration of the loop.)\n5. In every iteration of the loop, `i` is a power of 2 or 3. (This is because `i` is assigned either `2*i` or `3*i` in each iteration of the loop.)\n6. In every iteration of the loop, `i` is less than or equal to `n`. (This is because the loop condition is `i < n`.)\n7. In every iteration of the loop, `m` is any integer value. (This is because `m` is not modified within the loop.)\n8. After the loop termination, `i` is positive. (This is because the loop terminates when `i >= n`, and since `i` is always positive in the loop, it must be positive after the loop termination.)\n9. After the loop termination, `i` is greater than or equal to `n`. (This is because the loop terminates when `i >= n`, and since `i` is less than or equal to `n` in every iteration of the loop, it must be greater than or equal to `n` after the loop termination.)\n\nTherefore, the loop invariants are:\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant n >= 0;\n    loop invariant m;\n    loop invariant i == pow(2, k) || i == pow(3, k);\n    loop invariant i <= n;\n    loop invariant m;\n    loop invariant i > 0 ==> i >= n;\n*/\n```",
            "Pre-conditions:\n- The variables `n` and `m` are initialized with some values.\n- The function `unknown()` returns a non-deterministic integer value.\n\nLoop condition:\n- The loop continues as long as the value of `i` is less than `n`.\n\nPost-condition:\n- The value of `i` is greater than 0.\n\nLoop Invariants:\n- Before the loop execution:\n    - `i` is equal to 1 or greater than 1.\n    - `n` is greater than or equal to `i`.\n    - `m` is less than or equal to 0 or greater than 0.\n- In every iteration of the loop:\n    - If `m` is greater than 0, then the value of `i` is doubled.\n    - If `m` is less than or equal to 0, then the value of `i` is tripled.\n    - The value of `i` is always less than or equal to `n`.\n- After the loop termination:\n    - The value of `i` is greater than 0.\n\nPutting all the loop invariants together, we get:\n```\n/*@ \n    loop invariant i >= 1;\n    loop invariant n >= i;\n    loop invariant (m <= 0) || (m > 0);\n    loop invariant (m > 0) ==> (i == \\old(i)*2);\n    loop invariant (m <= 0) ==> (i == \\old(i)*3);\n    loop invariant i <= n;\n    loop invariant i > 0;\n*/\n```",
            "Pre-conditions:\n- The program takes no inputs.\n- The variables n and m are initialized with non-deterministic values using the function unknown().\n\nLoop analysis:\n- The loop condition is i < n.\n- The loop body consists of an if-else block that updates the value of i based on the value of m.\n\nLoop Invariants:\n- Before the loop execution:\n    - Since n and m are non-deterministic, we cannot bound their values. However, we can assume that n and m are greater than or equal to zero. \n    ```\n    /*@\n        loop invariant i > 0;\n        loop invariant n >= 0;\n        loop invariant m >= 0;\n    */\n    ```\n\n- In every iteration of the loop:\n    - The value of i is either multiplied by 2 or 3 depending on the value of m.\n    ```\n    /*@\n        loop invariant i > 0;\n        loop invariant n >= i;\n        loop invariant (m > 0 ==> i == \\old(i)*2) && (m <= 0 ==> i == \\old(i)*3);\n    */\n    ```\n\n- After the loop termination:\n    - Since the loop terminates when i is greater than or equal to n, we can add an implication to the assertion that checks if i is greater than 0.\n    ```\n    /*@\n        loop invariant i > 0;\n        loop invariant n >= i;\n        loop invariant (m > 0 ==> i == \\old(i)*2) && (m <= 0 ==> i == \\old(i)*3);\n        loop variant n - i;\n    */\n    assume(i >= n);\n    //@ assert i > 0;\n    ```",
            "Pre-conditions:\n- The variables `n` and `m` are assigned some values using the `unknown()` function, which returns some non-deterministic value.\n\nLoop condition:\n- The loop continues as long as `i` is less than `n`.\n\nLoop invariants:\n- Before loop execution: `i > 0`\n- In every iteration: \n    - If `m > 0`, then `i` is a power of 2.\n    - If `m <= 0`, then `i` is a power of 3.\n- After loop termination: \n    - If `m > 0`, then `i >= n`.\n    - If `m <= 0`, then `i >= n/2`.\n\nExplanation:\n- Before the loop starts, `i` is assigned the value of `1`, which is greater than `0`.\n- In every iteration, either `i` is multiplied by `2` or by `3` depending on the value of `m`. If `m > 0`, `i` becomes a power of 2. If `m <= 0`, `i` becomes a power of 3.\n- After the loop terminates, `i` has to be greater than or equal to `n`. If `m > 0`, `i` becomes a power of 2, so the smallest power of 2 greater than or equal to `n` is `2^(ceil(log2(n)))`. Hence, `i >= 2^(ceil(log2(n))) > n`. If `m <= 0`, `i` becomes a power of 3, so the smallest power of 3 greater than or equal to `n/2` is `3^(ceil(log3(n/2)))`. Hence, `i >= 3^(ceil(log3(n/2))) > n/2`. \n- Since the values of `n` and `m` are non-deterministic, we can use implication to make the loop invariants trivially true at the beginning and end of the loop. For example, we can add the following implications:\n    - Before loop execution: `(n <= 0) ==> (i > 0)`\n    - After loop termination: `(m > 0) ==> (i >= n)` and `(m <= 0) ==> (i >= n/2)` \n\nPutting it all together, the loop invariants are:\n```\n/*@ \n    loop invariant i > 0;\n    loop invariant (m > 0) ==> (i >= pow(2, ceil(log2(n))));\n    loop invariant (m <= 0) ==> (i >= pow(3, ceil(log3(n/2))));\n    loop variant n - i;\n*/\n```"
        ],
        "annotation_blocks": [
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions or variable assignments:\n- Variables n and m are assigned non-deterministic values using the unknown() function.\n- Variable i is initialized to 1.\n\nLoop condition:\n- The loop runs while i is less than n.\n\nLoop invariants:\n- Before the loop execution, i is greater than or equal to 1. (i >= 1)\n- Before the loop execution, n and m are non-negative. (n >= 0 && m >= 0)\n- Before the loop execution, if m is positive, then i is a power of 2. (m > 0 ==> i is a power of 2)\n- Before the loop execution, if m is non-positive, then i is a multiple of 3. (m <= 0 ==> i is a multiple of 3)\n- In every iteration of the loop, i is less than or equal to n. (i <= n)\n- In every iteration of the loop, if m is positive, then i is a power of 2. (m > 0 ==> i is a power of 2)\n- In every iteration of the loop, if m is non-positive, then i is a multiple of 3. (m <= 0 ==> i is a multiple of 3)\n- After the loop termination, i is greater than or equal to n. (i >= n)\n- After the loop termination, if m is positive, then i is a power of 2. (m > 0 ==> i is a power of 2)\n- After the loop termination, if m is non-positive, then i is a multiple of 3. (m <= 0 ==> i is a multiple of 3)\n- After the loop termination, i is greater than 0. (i > 0)\n\nNote: Since n and m are non-deterministic, we cannot infer any additional information about them during the loop execution. Therefore, we only add bounds on their values before the loop execution."
            ],
            "/*@ \n    loop invariant i >= 0;\n    loop invariant n >= 0;\n    loop invariant m;\n    loop invariant i == pow(2, k) || i == pow(3, k);\n    loop invariant i <= n;\n    loop invariant m;\n    loop invariant i > 0 ==> i >= n;\n*/",
            "/*@ \n    loop invariant i >= 1;\n    loop invariant n >= i;\n    loop invariant (m <= 0) || (m > 0);\n    loop invariant (m > 0) ==> (i == \\old(i)*2);\n    loop invariant (m <= 0) ==> (i == \\old(i)*3);\n    loop invariant i <= n;\n    loop invariant i > 0;\n*/",
            "    /*@\n        loop invariant i > 0;\n        loop invariant n >= 0;\n        loop invariant m >= 0;\n    */",
            "/*@ \n    loop invariant i > 0;\n    loop invariant (m > 0) ==> (i >= pow(2, ceil(log2(n))));\n    loop invariant (m <= 0) ==> (i >= pow(3, ceil(log3(n/2))));\n    loop variant n - i;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions or variable assignments:\n- Variables n and m are assigned non-deterministic values using the unknown() function.\n- Variable i is initialized to 1.\n\nLoop condition:\n- The loop runs while i is less than n.\n\nLoop invariants:\n- Before the loop execution, i is greater than or equal to 1. (i >= 1)\n- Before the loop execution, n and m are non-negative. (n >= 0 && m >= 0)\n- Before the loop execution, if m is positive, then i is a power of 2. (m > 0 ==> i is a power of 2)\n- Before the loop execution, if m is non-positive, then i is a multiple of 3. (m <= 0 ==> i is a multiple of 3)\n- In every iteration of the loop, i is less than or equal to n. (i <= n)\n- In every iteration of the loop, if m is positive, then i is a power of 2. (m > 0 ==> i is a power of 2)\n- In every iteration of the loop, if m is non-positive, then i is a multiple of 3. (m <= 0 ==> i is a multiple of 3)\n- After the loop termination, i is greater than or equal to n. (i >= n)\n- After the loop termination, if m is positive, then i is a power of 2. (m > 0 ==> i is a power of 2)\n- After the loop termination, if m is non-positive, then i is a multiple of 3. (m <= 0 ==> i is a multiple of 3)\n- After the loop termination, i is greater than 0. (i > 0)\n\nNote: Since n and m are non-deterministic, we cannot infer any additional information about them during the loop execution. Therefore, we only add bounds on their values before the loop execution.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant i >= 0;\n    loop invariant n >= 0;\n    loop invariant m;\n    loop invariant i == pow(2, k) || i == pow(3, k);\n    loop invariant i <= n;\n    loop invariant m;\n    loop invariant i > 0 ==> i >= n;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 13: unbound logic variable k. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n  int n,m;\n  n = unknown ();\n  m = unknown ();\n  int i = 1;\n   \n  /*@\nloop invariant i1: i >= 0;\n\n\n\n\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "/*@ \n    loop invariant i >= 1;\n    loop invariant n >= i;\n    loop invariant (m <= 0) || (m > 0);\n    loop invariant (m > 0) ==> (i == \\old(i)*2);\n    loop invariant (m <= 0) ==> (i == \\old(i)*3);\n    loop invariant i <= n;\n    loop invariant i > 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 13: \\old undefined in this context. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n  int n,m;\n  n = unknown ();\n  m = unknown ();\n  int i = 1;\n   \n  /*@\nloop invariant i1: i >= 1;\n\nloop invariant i3: (m <= 0) || (m > 0);\n\n\n\nloop invariant i7: i > 0;\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "    /*@\n        loop invariant i > 0;\n        loop invariant n >= 0;\n        loop invariant m >= 0;\n    */",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i > 0 is partially proven to be inductive.\nloop invariant n >= 0 is preserved but not established.\nloop invariant m >= 0 is preserved but not established.\nAssertion i > 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n  int n,m;\n  n = unknown ();\n  m = unknown ();\n  int i = 1;\n   \n  /*@\nloop invariant i1: i > 0;\n\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant i > 0;\n    loop invariant (m > 0) ==> (i >= pow(2, ceil(log2(n))));\n    loop invariant (m <= 0) ==> (i >= pow(3, ceil(log3(n/2))));\n    loop variant n - i;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 11: unbound logic function log2. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n  int n,m;\n  n = unknown ();\n  m = unknown ();\n  int i = 1;\n   \n  /*@\nloop invariant i1: i > 0;\n\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 13: unbound logic variable k. Ignoring loop annotation",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n  int n,m;\n  n = unknown ();\n  m = unknown ();\n  int i = 1;\n   \n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: n >= 0;\nloop invariant i3: m;\nloop invariant i4: i == pow(2, k) || i == pow(3, k);\nloop invariant i5: i <= n;\nloop invariant i6: i > 0 ==> i >= n;\nloop invariant i7: i >= 1;\nloop invariant i8: n >= i;\nloop invariant i9: (m <= 0) || (m > 0);\nloop invariant i10: (m > 0) ==> (i == \\old(i)*2);\nloop invariant i11: (m <= 0) ==> (i == \\old(i)*3);\nloop invariant i12: i > 0;\nloop invariant i13: m >= 0;\nloop invariant i14: (m > 0) ==> (i >= pow(2, ceil(log2(n))));\nloop invariant i15: (m <= 0) ==> (i >= pow(3, ceil(log3(n/2))));\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
        "combined_annotation_num_solver_calls": 8,
        "code_after_prune": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n  int n,m;\n  n = unknown ();\n  m = unknown ();\n  int i = 1;\n   \n  /*@\nloop invariant i1: i >= 0;\n\n\n\n\n\nloop invariant i7: i >= 1;\n\nloop invariant i9: (m <= 0) || (m > 0);\n\n\nloop invariant i12: i > 0;\n\n\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c"
        ],
        "skipped": [],
        "total": 103,
        "success_count": 46,
        "failure_count": 57,
        "success_rate": 0.44660194174757284
    }
}