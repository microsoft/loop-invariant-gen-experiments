{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
        "benchmark_code": "#define assume(e) if(!(e)) return;\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main()\n{\n  int i,x,y,NONDET,z;\n\n  x=0;\n  z=1;\n  y = unknown_uint();\n\n  assume( y>=0 );\n  i = 0;\n  while (i < 10) {\n    if (NONDET > 0) {\n      x = x;\n    } else {\n      x++;\n    }\n\n    {;\n//@ assert(!( y < 0 ));\n}\n\n    i++;\n  }\n  {;\n//@ assert(!( z<0 ));\n}\n\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return;\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main()\n{\n  int i,x,y,NONDET,z;\n\n  x=0;\n  z=1;\n  y = unknown_uint();\n\n  assume( y>=0 );\n  i = 0;\n  while (i < 10) {\n    if (NONDET > 0) {\n      x = x;\n    } else {\n      x++;\n    }\n\n    {;\n//@ assert(!( y < 0 ));\n}\n\n    i++;\n  }\n  {;\n//@ assert(!( z<0 ));\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- None\n\nVariable assignments:\n- x = 0\n- z = 1\n- y = unknown_uint()\n\nLoop condition:\n- i < 10\n\nLoop invariants:\n- Before the loop execution:\n    - x >= 0\n    - z >= 1\n    - y >= 0\n- In every iteration of the loop:\n    - i >= 0\n    - i <= 10\n    - x >= 0\n    - z >= 1\n    - y >= 0\n- After the loop termination:\n    - x >= 0\n    - z >= 1\n    - y >= 0\n    - z >= x\n\nWe can explain each of these loop invariants as follows:\n\n- Before the loop execution:\n    - x is initialized to 0, so x >= 0.\n    - z is initialized to 1, so z >= 1.\n    - y is assigned a non-negative value, so y >= 0.\n- In every iteration of the loop:\n    - i is initialized to 0 and incremented by 1 at the end of each iteration, so i >= 0 and i <= 10.\n    - x is incremented by 1 if NONDET is not greater than 0, so x >= 0.\n    - z is initialized to 1 and never modified inside the loop, so z >= 1.\n    - y is not modified inside the loop, so y >= 0.\n- After the loop termination:\n    - x is incremented by 1 inside the loop whenever NONDET is not greater than 0, so z >= x.\n    - x is non-negative inside the loop, so x >= 0.\n    - z is initialized to 1 and never modified inside the loop, so z >= 1.\n    - y is not modified inside the loop, so y >= 0.\n\nNote that the assertion inside the loop is guarded by the condition \"y >= 0\", so we can use this condition in an implication to make the loop invariant trivially true at that location:\n\n- In every iteration of the loop:\n    - (y >= 0) ==> (!(y < 0)))",
            "Pre-conditions:\n- The macro `assume` takes a boolean expression and if it evaluates to false, the function returns. \n- The function `unknown_uint` returns an unsigned integer whose value is not known beforehand.\n- The function `errorFn` is defined but not used.\n- All other variables are declared but not initialized.\n\nLoop condition:\n- The loop continues as long as the value of `i` is less than 10.\n\nLoop Invariants:\n- Before the loop execution:\n  - `y >= 0`\n  - `z >= 1`\n  - `x >= 0`\n  - `i == 0`\n- In every iteration of the loop:\n  - `0 <= i <= 10`\n  - `y >= 0`\n  - `z >= 1`\n  - If `NONDET > 0`, then `x` does not change, else `x` increases by 1. This can be written as: `((NONDET > 0) ==> (x == \\at(x, LoopEntry))) && ((NONDET <= 0) ==> (x == \\at(x, LoopEntry) + 1))`\n- After the loop termination:\n  - `y >= 0`\n  - `z >= 1`\n  - `x >= 0`\n  - `i == 10`\n\nCombining all the loop invariants, we get:\n```\n/*@\n  loop invariant 0 <= i <= 10;\n  loop invariant y >= 0;\n  loop invariant z >= 1;\n  loop invariant ((NONDET > 0) ==> (x == \\at(x, LoopEntry))) && ((NONDET <= 0) ==> (x == \\at(x, LoopEntry) + 1));\n  loop assigns i, x;\n*/\n\n/*@\n  loop invariant x >= 0;\n  loop invariant i == 0 ==> y >= 0;\n  loop invariant i == 0 ==> z >= 1;\n*/\n\n/*@\n  loop invariant y >= 0;\n  loop invariant z >= 1;\n  loop invariant x >= 0;\n  loop invariant i == 10;\n  loop assigns i, x;\n*/\n``` \n\nNote that we have split the loop invariants into three blocks, one for before the loop execution, one for during the loop execution, and one for after the loop termination. We have also added loop assigns clause to indicate which variables are modified by the loop. Additionally, we have added implications to make the invariants true in case of non-deterministic values of variables.",
            "Pre-conditions:\n- `y` is a non-negative integer.\n\nLoop condition:\n- `i < 10`\n\nLoop invariants:\n- `0 <= i <= 10`\n- `x >= 0`\n- `z >= 1`\n- `y >= 0`\n- `i <= 10 ==> y >= 0` (implied by the pre-condition and loop condition)\n- `(i < 10 && NONDET > 0) ==> x >= x_old` (where `x_old` is the value of `x` before the loop iteration)\n- `(i < 10 && NONDET <= 0) ==> x >= x_old + 1`\n- `(i == 10) ==> z >= 1`\n- `!(y < 0)` (guarded by loop body)\n- `!(z < 0)` (after the loop)\n\nPutting it all together:\n```\n/*@ \n  loop invariant 0 <= i <= 10;\n  loop invariant x >= 0;\n  loop invariant z >= 1;\n  loop invariant y >= 0;\n  loop invariant i <= 10 ==> y >= 0;\n  loop invariant (i < 10 && NONDET > 0) ==> x >= x_old;\n  loop invariant (i < 10 && NONDET <= 0) ==> x >= x_old + 1;\n  loop invariant (i == 10) ==> z >= 1;\n  loop invariant !(y < 0);\n  loop invariant !(z < 0);\n*/\n```",
            "Pre-conditions:\n- The value of variable y is non-negative.\n\nVariable Assignments:\n- x is assigned the value 0.\n- z is assigned the value 1.\n- The value of variable y is assigned a non-deterministic unsigned integer value.\n- The value of variable i is assigned 0.\n\nLoop Condition:\n- The loop executes while the value of i is less than 10.\n\nLoop Invariants:\n- Before the loop execution, the value of x is 0, the value of z is 1, the value of y is non-negative, and the value of i is 0.\n```\n/*@ \n    loop invariant x == 0;\n    loop invariant z == 1;\n    loop invariant y >= 0;\n    loop invariant i == 0;\n*/\n```\n- In every iteration of the loop, the value of i is incremented by 1, and the value of x is either incremented by 1 or remains the same based on the value of NONDET.\n```\n/*@ \n    loop invariant i >= 0 && i <= 10;\n    loop invariant x >= 0;\n    loop invariant x <= i;\n*/\n```\n- In every iteration of the loop, the value of y is non-negative.\n```\n/*@ \n    loop invariant y >= 0;\n*/\n```\n- In every iteration of the loop, if the value of NONDET is greater than 0, then the value of x remains the same, otherwise the value of x is incremented by 1.\n```\n/*@ \n    loop invariant (NONDET > 0) ==> (x == \\at(x, LoopEntry));\n    loop invariant (NONDET <= 0) ==> (x == \\at(x, LoopEntry) + 1);\n*/\n```\n- After the loop termination, the value of z is still positive.\n```\n/*@ \n    loop invariant z > 0;\n    loop assigns i, x, z;\n*/\n```\n- The assertion within the loop is always true, since it is guarded by a condition that is assumed to be true in the pre-condition.\n```\n/*@ \n    loop invariant (i < 10) ==> (!(y < 0));\n*/\n```\n- The assertion after the loop is always true, since z is assigned the value 1 at the beginning of the program and is never changed within the loop.\n```\n/*@ \n    assert z >= 0;\n*/\n```",
            "Pre-conditions:\n- The variable `y` is a non-negative integer.\n\nVariable bounds:\n- `x` is a non-negative integer.\n- `z` is a positive integer.\n\nLoop condition:\n- The loop executes while `i` is less than 10.\n\nLoop invariants:\n- Before the loop execution: \n    - `x >= 0`\n    - `z > 0`\n    - `y >= 0`\n- In every iteration of the loop:\n    - `x >= 0`\n    - `z > 0`\n    - `y >= 0`\n    - `0 <= i <= 10`\n- After the loop termination:\n    - `x >= 0`\n    - `z > 0`\n    - `y >= 0`\n    - `i == 10`\n    - `!(z < 0)`\n\nSince the variable `NONDET` is non-deterministic, we need to add an implication to make the loop invariants hold trivially when `NONDET` is greater than 0, which is always true. Therefore, we can add the following loop invariants:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant z > 0;\n    loop invariant y >= 0;\n    loop invariant 0 <= i <= 10;\n    loop invariant i == 10 ==> !(z < 0);\n    loop invariant (NONDET > 0) ==> (x >= 0 && z > 0 && y >= 0 && 0 <= i <= 10);\n*/\n```\n\nNote that we used an implication to take care of the conditional nature of the code. The last loop invariant ensures that the other loop invariants hold trivially when `NONDET` is greater than 0. We also added an implication to the last loop invariant to make the `!(z < 0)` assertion hold after the loop termination."
        ],
        "annotation_blocks": [
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- None\n\nVariable assignments:\n- x = 0\n- z = 1\n- y = unknown_uint()\n\nLoop condition:\n- i < 10\n\nLoop invariants:\n- Before the loop execution:\n    - x >= 0\n    - z >= 1\n    - y >= 0\n- In every iteration of the loop:\n    - i >= 0\n    - i <= 10\n    - x >= 0\n    - z >= 1\n    - y >= 0\n- After the loop termination:\n    - x >= 0\n    - z >= 1\n    - y >= 0\n    - z >= x\n\nWe can explain each of these loop invariants as follows:\n\n- Before the loop execution:\n    - x is initialized to 0, so x >= 0.\n    - z is initialized to 1, so z >= 1.\n    - y is assigned a non-negative value, so y >= 0.\n- In every iteration of the loop:\n    - i is initialized to 0 and incremented by 1 at the end of each iteration, so i >= 0 and i <= 10.\n    - x is incremented by 1 if NONDET is not greater than 0, so x >= 0.\n    - z is initialized to 1 and never modified inside the loop, so z >= 1.\n    - y is not modified inside the loop, so y >= 0.\n- After the loop termination:\n    - x is incremented by 1 inside the loop whenever NONDET is not greater than 0, so z >= x.\n    - x is non-negative inside the loop, so x >= 0.\n    - z is initialized to 1 and never modified inside the loop, so z >= 1.\n    - y is not modified inside the loop, so y >= 0.\n\nNote that the assertion inside the loop is guarded by the condition \"y >= 0\", so we can use this condition in an implication to make the loop invariant trivially true at that location:\n\n- In every iteration of the loop:\n    - (y >= 0) ==> (!(y < 0)))"
            ],
            "/*@\n  loop invariant 0 <= i <= 10;\n  loop invariant y >= 0;\n  loop invariant z >= 1;\n  loop invariant ((NONDET > 0) ==> (x == \\at(x, LoopEntry))) && ((NONDET <= 0) ==> (x == \\at(x, LoopEntry) + 1));\n  loop assigns i, x;\n*/\n\n/*@\n  loop invariant x >= 0;\n  loop invariant i == 0 ==> y >= 0;\n  loop invariant i == 0 ==> z >= 1;\n*/\n\n/*@\n  loop invariant y >= 0;\n  loop invariant z >= 1;\n  loop invariant x >= 0;\n  loop invariant i == 10;\n  loop assigns i, x;\n*/",
            "/*@ \n  loop invariant 0 <= i <= 10;\n  loop invariant x >= 0;\n  loop invariant z >= 1;\n  loop invariant y >= 0;\n  loop invariant i <= 10 ==> y >= 0;\n  loop invariant (i < 10 && NONDET > 0) ==> x >= x_old;\n  loop invariant (i < 10 && NONDET <= 0) ==> x >= x_old + 1;\n  loop invariant (i == 10) ==> z >= 1;\n  loop invariant !(y < 0);\n  loop invariant !(z < 0);\n*/",
            "/*@ \n    loop invariant x == 0;\n    loop invariant z == 1;\n    loop invariant y >= 0;\n    loop invariant i == 0;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant z > 0;\n    loop invariant y >= 0;\n    loop invariant 0 <= i <= 10;\n    loop invariant i == 10 ==> !(z < 0);\n    loop invariant (NONDET > 0) ==> (x >= 0 && z > 0 && y >= 0 && 0 <= i <= 10);\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- None\n\nVariable assignments:\n- x = 0\n- z = 1\n- y = unknown_uint()\n\nLoop condition:\n- i < 10\n\nLoop invariants:\n- Before the loop execution:\n    - x >= 0\n    - z >= 1\n    - y >= 0\n- In every iteration of the loop:\n    - i >= 0\n    - i <= 10\n    - x >= 0\n    - z >= 1\n    - y >= 0\n- After the loop termination:\n    - x >= 0\n    - z >= 1\n    - y >= 0\n    - z >= x\n\nWe can explain each of these loop invariants as follows:\n\n- Before the loop execution:\n    - x is initialized to 0, so x >= 0.\n    - z is initialized to 1, so z >= 1.\n    - y is assigned a non-negative value, so y >= 0.\n- In every iteration of the loop:\n    - i is initialized to 0 and incremented by 1 at the end of each iteration, so i >= 0 and i <= 10.\n    - x is incremented by 1 if NONDET is not greater than 0, so x >= 0.\n    - z is initialized to 1 and never modified inside the loop, so z >= 1.\n    - y is not modified inside the loop, so y >= 0.\n- After the loop termination:\n    - x is incremented by 1 inside the loop whenever NONDET is not greater than 0, so z >= x.\n    - x is non-negative inside the loop, so x >= 0.\n    - z is initialized to 1 and never modified inside the loop, so z >= 1.\n    - y is not modified inside the loop, so y >= 0.\n\nNote that the assertion inside the loop is guarded by the condition \"y >= 0\", so we can use this condition in an implication to make the loop invariant trivially true at that location:\n\n- In every iteration of the loop:\n    - (y >= 0) ==> (!(y < 0)))",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@\n  loop invariant 0 <= i <= 10;\n  loop invariant y >= 0;\n  loop invariant z >= 1;\n  loop invariant ((NONDET > 0) ==> (x == \\at(x, LoopEntry))) && ((NONDET <= 0) ==> (x == \\at(x, LoopEntry) + 1));\n  loop assigns i, x;\n*/\n\n/*@\n  loop invariant x >= 0;\n  loop invariant i == 0 ==> y >= 0;\n  loop invariant i == 0 ==> z >= 1;\n*/\n\n/*@\n  loop invariant y >= 0;\n  loop invariant z >= 1;\n  loop invariant x >= 0;\n  loop invariant i == 10;\n  loop assigns i, x;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant z >= 1 is partially proven to be inductive.\nloop invariant ((NONDET > 0) ==> (x == \\at(x, LoopEntry))) && ((NONDET <= 0) ==> (x == \\at(x, LoopEntry) + 1)) is preserved but not established.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant i == 0 ==> y >= 0 is partially proven to be inductive.\nloop invariant i == 0 ==> z >= 1 is partially proven to be inductive.\nloop invariant i == 10 is preserved but not established.\nAssertion !(y < 0): Partially proven\nAssertion !(z < 0): Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main()\n{\n  int i,x,y,NONDET,z;\n\n  x=0;\n  z=1;\n  y = unknown_uint();\n\n  assume( y>=0 );\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: y >= 0;\nloop invariant i3: z >= 1;\n\nloop invariant i5: x >= 0;\nloop invariant i6: i == 0 ==> y >= 0;\nloop invariant i7: i == 0 ==> z >= 1;\n\n*/\nwhile (i < 10) {\n    if (NONDET > 0) {\n      x = x;\n    } else {\n      x++;\n    }\n\n    {;\n//@ assert(!( y < 0 ));\n}\n\n    i++;\n  }\n  {;\n//@ assert(!( z<0 ));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n  loop invariant 0 <= i <= 10;\n  loop invariant x >= 0;\n  loop invariant z >= 1;\n  loop invariant y >= 0;\n  loop invariant i <= 10 ==> y >= 0;\n  loop invariant (i < 10 && NONDET > 0) ==> x >= x_old;\n  loop invariant (i < 10 && NONDET <= 0) ==> x >= x_old + 1;\n  loop invariant (i == 10) ==> z >= 1;\n  loop invariant !(y < 0);\n  loop invariant !(z < 0);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 23: unbound logic variable x_old. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return;\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main()\n{\n  int i,x,y,NONDET,z;\n\n  x=0;\n  z=1;\n  y = unknown_uint();\n\n  assume( y>=0 );\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: x >= 0;\nloop invariant i3: z >= 1;\nloop invariant i4: y >= 0;\nloop invariant i5: i <= 10 ==> y >= 0;\n\n\nloop invariant i8: (i == 10) ==> z >= 1;\nloop invariant i9: !(y < 0);\nloop invariant i10: !(z < 0);\n*/\nwhile (i < 10) {\n    if (NONDET > 0) {\n      x = x;\n    } else {\n      x++;\n    }\n\n    {;\n//@ assert(!( y < 0 ));\n}\n\n    i++;\n  }\n  {;\n//@ assert(!( z<0 ));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x == 0;\n    loop invariant z == 1;\n    loop invariant y >= 0;\n    loop invariant i == 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x == 0 is established but not preserved.\nloop invariant z == 1 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant i == 0 is established but not preserved.\nAssertion !(y < 0): Partially proven\nAssertion !(z < 0): Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main()\n{\n  int i,x,y,NONDET,z;\n\n  x=0;\n  z=1;\n  y = unknown_uint();\n\n  assume( y>=0 );\n  i = 0;\n  /*@\n\nloop invariant i2: z == 1;\nloop invariant i3: y >= 0;\n\n*/\nwhile (i < 10) {\n    if (NONDET > 0) {\n      x = x;\n    } else {\n      x++;\n    }\n\n    {;\n//@ assert(!( y < 0 ));\n}\n\n    i++;\n  }\n  {;\n//@ assert(!( z<0 ));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant z > 0;\n    loop invariant y >= 0;\n    loop invariant 0 <= i <= 10;\n    loop invariant i == 10 ==> !(z < 0);\n    loop invariant (NONDET > 0) ==> (x >= 0 && z > 0 && y >= 0 && 0 <= i <= 10);\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant z > 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant 0 <= i <= 10 is inductive.\nloop invariant i == 10 ==> !(z < 0) is inductive.\nloop invariant (NONDET > 0) ==> (x >= 0 && z > 0 && y >= 0 && 0 <= i <= 10) is inductive.\nAssertion !(y < 0): Valid\nAssertion !(z < 0): Valid"
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 27: unbound logic variable x_old. Ignoring loop annotation",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return;\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main()\n{\n  int i,x,y,NONDET,z;\n\n  x=0;\n  z=1;\n  y = unknown_uint();\n\n  assume( y>=0 );\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: y >= 0;\nloop invariant i3: z >= 1;\nloop invariant i4: ((NONDET > 0) ==> (x == \\at(x, LoopEntry))) && ((NONDET <= 0) ==> (x == \\at(x, LoopEntry) + 1));\nloop invariant i5: x >= 0;\nloop invariant i6: i == 0 ==> y >= 0;\nloop invariant i7: i == 0 ==> z >= 1;\nloop invariant i8: i == 10;\nloop invariant i9: i <= 10 ==> y >= 0;\nloop invariant i10: (i < 10 && NONDET > 0) ==> x >= x_old;\nloop invariant i11: (i < 10 && NONDET <= 0) ==> x >= x_old + 1;\nloop invariant i12: (i == 10) ==> z >= 1;\nloop invariant i13: !(y < 0);\nloop invariant i14: !(z < 0);\nloop invariant i15: x == 0;\nloop invariant i16: z == 1;\nloop invariant i17: i == 0;\nloop invariant i18: z > 0;\nloop invariant i19: i == 10 ==> !(z < 0);\nloop invariant i20: (NONDET > 0) ==> (x >= 0 && z > 0 && y >= 0 && 0 <= i <= 10);\n*/\nwhile (i < 10) {\n    if (NONDET > 0) {\n      x = x;\n    } else {\n      x++;\n    }\n\n    {;\n//@ assert(!( y < 0 ));\n}\n\n    i++;\n  }\n  {;\n//@ assert(!( z<0 ));\n}\n\n}",
        "combined_annotation_num_solver_calls": 5,
        "code_after_prune": "#define assume(e) if(!(e)) return;\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main()\n{\n  int i,x,y,NONDET,z;\n\n  x=0;\n  z=1;\n  y = unknown_uint();\n\n  assume( y>=0 );\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: y >= 0;\nloop invariant i3: z >= 1;\n\nloop invariant i5: x >= 0;\nloop invariant i6: i == 0 ==> y >= 0;\nloop invariant i7: i == 0 ==> z >= 1;\n\nloop invariant i9: i <= 10 ==> y >= 0;\n\n\nloop invariant i12: (i == 10) ==> z >= 1;\nloop invariant i13: !(y < 0);\nloop invariant i14: !(z < 0);\n\nloop invariant i16: z == 1;\n\nloop invariant i18: z > 0;\nloop invariant i19: i == 10 ==> !(z < 0);\nloop invariant i20: (NONDET > 0) ==> (x >= 0 && z > 0 && y >= 0 && 0 <= i <= 10);\n*/\nwhile (i < 10) {\n    if (NONDET > 0) {\n      x = x;\n    } else {\n      x++;\n    }\n\n    {;\n//@ assert(!( y < 0 ));\n}\n\n    i++;\n  }\n  {;\n//@ assert(!( z<0 ));\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c"
        ],
        "skipped": [],
        "total": 246,
        "success_count": 119,
        "failure_count": 127,
        "success_rate": 0.483739837398374
    }
}