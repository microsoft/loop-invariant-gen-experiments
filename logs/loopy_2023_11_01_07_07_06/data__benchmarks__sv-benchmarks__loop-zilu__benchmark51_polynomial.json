{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark51_polynomial.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!((x>=0) && (x<=50))) return 0;\n  while (unknown_bool()) {\n    if (x>50) x++;\n    if (x == 0) { x ++;\n    } else x--;\n  }\n  {;\n//@ assert((x>=0) && (x<=50));\n}\n\n  return 0;\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!((x>=0) && (x<=50))) return 0;\n  while (unknown_bool()) {\n    if (x>50) x++;\n    if (x == 0) { x ++;\n    } else x--;\n  }\n  {;\n//@ assert((x>=0) && (x<=50));\n}\n\n  return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- None.\n\nVariable assignments:\n- `int x = unknown_int();`: `x` is assigned a non-deterministic integer value.\n\nLoop condition:\n- `unknown_bool()`: The loop executes as long as this function returns true.\n\nLoop invariants:\n- `x >= 0 && x <= 50`: `x` is always between 0 and 50.\n- `x >= 0`: `x` is always non-negative.\n- `x <= 50`: `x` is always less than or equal to 50.\n- `(x > 50 ==> \\old(x) < x) && (x < 0 ==> \\old(x) > x) && (0 <= x <= 50)`: If `x` becomes greater than 50, then it must have been incremented in the previous iteration. If `x` becomes less than 0, then it must have been decremented in the previous iteration. These conditions hold only when `x` is between 0 and 50.\n- `(x == 0 ==> \\old(x) < x) && (x == 1 ==> \\old(x) <= x) && (x > 1 ==> \\old(x) > x)`: If `x` becomes 0, then it must have been incremented in the previous iteration. If `x` becomes 1, then it must have been incremented or not changed in the previous iteration. If `x` becomes greater than 1, then it must have been decremented in the previous iteration.\n- `(\\forall int i; i <= 0 || i >= x; i++) (i <= 50)`: For all values of `i` less than or equal to 0 or greater than or equal to `x`, `i` is less than or equal to 50. This implies that the values between `i` and `x` are also less than or equal to 50. This is true because `x` can only be modified by incrementing or decrementing it by 1 in each iteration, so the values between `i` and `x` must also be between `i` and `x` +/- 1, which are all less than or equal to 50.\n\nPost-condition:\n- `x >= 0 && x <= 50`: `x` is between 0 and 50 after the loop terminates.\n\nPutting everything together:\n```\n/*@ \n    loop invariant x >= 0 && x <= 50;\n    loop invariant x >= 0;\n    loop invariant x <= 50;\n    loop invariant (x > 50 ==> \\old(x) < x) && (x < 0 ==> \\old(x) > x) && (0 <= x <= 50);\n    loop invariant (x == 0 ==> \\old(x) < x) && (x == 1 ==> \\old(x) <= x) && (x > 1 ==> \\old(x) > x);\n    loop invariant (\\forall int i; i <= 0 || i >= x; i++) (i <= 50);\n*/\n```",
            "Pre-conditions: \n- None\n\nVariable assignments:\n- int x = unknown_int();\n\nLoop condition:\n- while (unknown_bool())\n\nPost-condition:\n- (x>=0) && (x<=50)\n\nLoop Invariants:\n- Since x is assigned to unknown_int() at the beginning, we do not know its initial value. Thus, we cannot specify any loop invariants that involve the initial value of x.\n- Before the loop execution: (x>=0) && (x<=50)\n- In every iteration of the loop:\n    - If x > 50, then after executing x++, x will still be greater than 50. Thus, we can add the invariant: (x > 50) ==> (x >= 51)\n    - If x == 0, then after executing x++, x will be 1. Thus, we can add the invariant: (x == 0) ==> (x == 1)\n    - If x < 0, then after executing x--, x will still be less than 0. Thus, we can add the invariant: (x < 0) ==> (x <= -1)\n    - If x is between 1 and 50 (inclusive), then after executing x--, x will be between 0 and 49 (inclusive). Thus, we can add the invariant: ((x >= 1) && (x <= 50)) ==> ((x-1) >= 0 && (x-1) <= 49)\n- After the loop termination: Since the loop condition is unknown_bool(), we cannot assume anything about the final value of x. Thus, we cannot specify any loop invariants that involve the final value of x.\n\nPutting it all together, we get the following loop invariants:\n```\n/*@ \n    loop invariant (x >= 0) && (x <= 50);\n    loop invariant (x > 50) ==> (x >= 51);\n    loop invariant (x == 0) ==> (x == 1);\n    loop invariant (x < 0) ==> (x <= -1);\n    loop invariant ((x >= 1) && (x <= 50)) ==> ((x-1) >= 0 && (x-1) <= 49);\n*/\n```",
            "Pre-conditions: The program has no pre-conditions.\n\nVariable assignments: \n- `int x = unknown_int();` assigns a non-deterministic value to `x`.\n\nLoop condition: `unknown_bool()` returns a non-deterministic Boolean value that determines the loop's termination.\n\nWe want to prove that after the loop, `x` is between 0 and 50 (inclusive).\n\nLoop invariant:\n- Before the loop execution, `x` is between 0 and 50 (inclusive):\n```\n/*@ \n    loop invariant 0 <= x <= 50;\n*/\n```\n- In every iteration of the loop, `x` is between 0 and 51 (inclusive) since `x` can be incremented by one if `x > 50`:\n```\n/*@ \n    loop invariant 0 <= x <= 51;\n*/\n```\n- After the loop termination, `x` is between 0 and 50 (inclusive) since the loop terminates when `unknown_bool()` returns false, and the value of `x` is not modified outside the loop:\n```\n/*@ \n    loop invariant 0 <= x <= 50 ==> !unknown_bool();\n*/\n```\n- If we add the guard condition of the assertion to the loop invariant, we get:\n```\n/*@ \n    loop invariant (unknown_bool() ==> (0 <= x <= 51)) && (!unknown_bool() ==> (0 <= x <= 50));\n*/\n```\n- Since `x` is non-deterministic at the beginning of the loop, we can use an implication to make the invariant true at the loop's entry:\n```\n/*@ \n    loop invariant x >= 0 ==> (unknown_bool() ==> (0 <= x <= 51)) && (!unknown_bool() ==> (0 <= x <= 50));\n*/\n```\n- Since `x` is not modified after the loop, we can use an implication to make the invariant trivially true after the loop:\n```\n/*@ \n    loop invariant (x >= 0 ==> (unknown_bool() ==> (0 <= x <= 51)) && (!unknown_bool() ==> (0 <= x <= 50))) ==> (x >= 0 ==> (x >= 0 && x <= 50));\n*/\n```\nPutting it all together:\n```\n/*@ \n    loop invariant x >= 0 ==> (unknown_bool() ==> (0 <= x <= 51)) && (!unknown_bool() ==> (0 <= x <= 50));\n    loop invariant (x >= 0 ==> (unknown_bool() ==> (0 <= x <= 51)) && (!unknown_bool() ==> (0 <= x <= 50))) ==> (x >= 0 ==> (x >= 0 && x <= 50));\n*/\nwhile (unknown_bool()) {\n    if (x>50) x++;\n    if (x == 0) { x ++;\n    } else x--;\n}\n{;\n    //@ assert (x >= 0 && x <= 50);\n}\n```",
            "Pre-conditions:\n- The program assumes the existence of two external functions `unknown_int` and `unknown_bool` which return an integer and a boolean value respectively.\n- The variable `x` is initialized with the value returned by `unknown_int()`.\n- The program checks if `x` is between 0 and 50 (inclusive) and returns 0 if it is not.\n\nLoop condition:\n- The loop continues as long as `unknown_bool()` returns true.\n\nLoop Invariants:\n- Before the loop execution: `0 <= x <= 50`\n- In every iteration of the loop:\n    - If `x > 50`, then `x' = x + 1`.\n    - If `x == 0`, then `x' = x + 1`.\n    - If `x > 0` and `x <= 50`, then `x' = x - 1`.\n    - Therefore, `0 <= x' <= 51`.\n    - Also, `x' != 0` since if `x == 0`, then `x' = 1`.\n- After the loop termination: `0 <= x <= 51` (because the loop terminates when `unknown_bool()` returns false and we cannot determine the value of `x` at that point)\n\nPutting everything together:\n\n```\n/*@ \n    loop invariant 0 <= x <= 50;\n    loop invariant \n        (x > 50) ==> (0 <= x' <= 51) && (x' != 0) && (x' == x + 1);\n    loop invariant \n        (x == 0) ==> (0 <= x' <= 51) && (x' != 0) && (x' == x + 1);\n    loop invariant \n        (x > 0 && x <= 50) ==> (0 <= x' <= 51) && (x' != 0) && (x' == x - 1);\n    loop invariant 0 <= x <= 51;\n*/\n``` \n\nWe can also add a guard condition to the assertion:\n\n```\n    if (!unknown_bool()) {\n        //@ assert ((x >= 0) && (x <= 50));\n    }\n```\n\nSo the final program with all loop invariants is:\n\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!((x>=0) && (x<=50))) return 0;\n  while (unknown_bool()) {\n    if (x>50) x++;\n    if (x == 0) { x ++;\n    } else x--;\n  }\n  {\n    if (!unknown_bool()) {\n        //@ assert ((x >= 0) && (x <= 50));\n    }\n  }\n\n  return 0;\n}\n```",
            "We start by analyzing the program and understanding its behavior. \n\nThe program initializes an integer variable `x` with an unknown integer value. The program then checks if `x` is between 0 and 50, inclusive. If `x` is not within this range, the program terminates. Otherwise, it enters a while loop. \n\nThe loop condition is `unknown_bool()`, meaning that the loop executes an unknown number of times. Within the loop, there are two conditional statements. If `x` is greater than 50, it is incremented by 1. If `x` is equal to 0, it is incremented by 1. Otherwise, `x` is decremented by 1. \n\nAfter the loop, the program asserts that `x` is between 0 and 50, inclusive. \n\nBased on this analysis, we can start to derive loop invariants for the while loop. \n\nFirst, let's consider the pre-conditions and variable assignments: \n```\nint x = unknown_int();\nif (!((x>=0) && (x<=50))) return 0;\n```\nFrom these, we know that `x` is between 0 and 50, inclusive, at the start of the loop. We can express this as a loop invariant: \n```\n/*@ \n    loop invariant 0 <= x <= 50;\n*/\n```\nNext, we can analyze the loop body. The loop has two conditional statements that affect the value of `x`. We can consider each of these separately. \n\nIf `x` is greater than 50, it is incremented by 1. We can express this as a loop invariant: \n```\n/*@ \n    loop invariant (x > 50) ==> (x' == x+1);\n*/\n```\nHere, `x'` denotes the value of `x` in the next iteration of the loop. \n\nIf `x` is equal to 0, it is incremented by 1. We can express this as a loop invariant: \n```\n/*@ \n    loop invariant (x == 0) ==> (x' == x+1);\n*/\n```\n\nIf neither of the above conditions are true, `x` is decremented by 1. We can express this as a loop invariant: \n```\n/*@ \n    loop invariant !((x > 50) || (x == 0)) ==> (x' == x-1);\n*/\n```\n\nFinally, we know that the loop terminates when the loop condition `unknown_bool()` is false. This means that `x` must be between 0 and 50, inclusive, at the end of the loop. We can express this as a loop invariant: \n```\n/*@ \n    loop invariant !unknown_bool() ==> (0 <= x <= 50);\n*/\n```\n\nPutting all these loop invariants together, we get: \n```\n/*@ \n    loop invariant 0 <= x <= 50;\n    loop invariant (x > 50) ==> (x' == x+1);\n    loop invariant (x == 0) ==> (x' == x+1);\n    loop invariant !((x > 50) || (x == 0)) ==> (x' == x-1);\n    loop invariant !unknown_bool() ==> (0 <= x <= 50);\n*/\n```\nThese loop invariants are sufficient to verify that the post-condition `(x>=0) && (x<=50)` is true at the end of the loop."
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant x >= 0 && x <= 50;\n    loop invariant x >= 0;\n    loop invariant x <= 50;\n    loop invariant (x > 50 ==> \\old(x) < x) && (x < 0 ==> \\old(x) > x) && (0 <= x <= 50);\n    loop invariant (x == 0 ==> \\old(x) < x) && (x == 1 ==> \\old(x) <= x) && (x > 1 ==> \\old(x) > x);\n    loop invariant (\\forall int i; i <= 0 || i >= x; i++) (i <= 50);\n*/",
            "/*@ \n    loop invariant (x >= 0) && (x <= 50);\n    loop invariant (x > 50) ==> (x >= 51);\n    loop invariant (x == 0) ==> (x == 1);\n    loop invariant (x < 0) ==> (x <= -1);\n    loop invariant ((x >= 1) && (x <= 50)) ==> ((x-1) >= 0 && (x-1) <= 49);\n*/",
            "/*@ \n    loop invariant 0 <= x <= 50;\n*/",
            "/*@ \n    loop invariant 0 <= x <= 50;\n    loop invariant \n        (x > 50) ==> (0 <= x' <= 51) && (x' != 0) && (x' == x + 1);\n    loop invariant \n        (x == 0) ==> (0 <= x' <= 51) && (x' != 0) && (x' == x + 1);\n    loop invariant \n        (x > 0 && x <= 50) ==> (0 <= x' <= 51) && (x' != 0) && (x' == x - 1);\n    loop invariant 0 <= x <= 51;\n*/",
            "/*@ \n    loop invariant 0 <= x <= 50;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant x >= 0 && x <= 50;\n    loop invariant x >= 0;\n    loop invariant x <= 50;\n    loop invariant (x > 50 ==> \\old(x) < x) && (x < 0 ==> \\old(x) > x) && (0 <= x <= 50);\n    loop invariant (x == 0 ==> \\old(x) < x) && (x == 1 ==> \\old(x) <= x) && (x > 1 ==> \\old(x) > x);\n    loop invariant (\\forall int i; i <= 0 || i >= x; i++) (i <= 50);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unexpected token ';'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!((x>=0) && (x<=50))) return 0;\n  /*@\nloop invariant i1: x >= 0 && x <= 50;\nloop invariant i2: x >= 0;\nloop invariant i3: x <= 50;\n\n\n\n*/\nwhile (unknown_bool()) {\n    if (x>50) x++;\n    if (x == 0) { x ++;\n    } else x--;\n  }\n  {;\n//@ assert((x>=0) && (x<=50));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant (x >= 0) && (x <= 50);\n    loop invariant (x > 50) ==> (x >= 51);\n    loop invariant (x == 0) ==> (x == 1);\n    loop invariant (x < 0) ==> (x <= -1);\n    loop invariant ((x >= 1) && (x <= 50)) ==> ((x-1) >= 0 && (x-1) <= 49);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant (x >= 0) && (x <= 50) is partially proven to be inductive.\nloop invariant (x > 50) ==> (x >= 51) is partially proven to be inductive.\nloop invariant (x == 0) ==> (x == 1) is neither established nor preserved.\nloop invariant (x < 0) ==> (x <= -1) is partially proven to be inductive.\nloop invariant ((x >= 1) && (x <= 50)) ==> ((x-1) >= 0 && (x-1) <= 49) is partially proven to be inductive.\nAssertion x >= 0 && x <= 50: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!((x>=0) && (x<=50))) return 0;\n  /*@\nloop invariant i1: (x >= 0) && (x <= 50);\nloop invariant i2: (x > 50) ==> (x >= 51);\n\nloop invariant i4: (x < 0) ==> (x <= -1);\nloop invariant i5: ((x >= 1) && (x <= 50)) ==> ((x-1) >= 0 && (x-1) <= 49);\n*/\nwhile (unknown_bool()) {\n    if (x>50) x++;\n    if (x == 0) { x ++;\n    } else x--;\n  }\n  {;\n//@ assert((x>=0) && (x<=50));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant 0 <= x <= 50;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 50 is inductive.\nAssertion x >= 0 && x <= 50: Valid"
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant 0 <= x <= 50;\n    loop invariant \n        (x > 50) ==> (0 <= x' <= 51) && (x' != 0) && (x' == x + 1);\n    loop invariant \n        (x == 0) ==> (0 <= x' <= 51) && (x' != 0) && (x' == x + 1);\n    loop invariant \n        (x > 0 && x <= 50) ==> (0 <= x' <= 51) && (x' != 0) && (x' == x - 1);\n    loop invariant 0 <= x <= 51;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 50 is inductive.\nloop invariant 0 <= x <= 51 is inductive.\nAssertion x >= 0 && x <= 50: Valid"
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant 0 <= x <= 50;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 50 is inductive.\nAssertion x >= 0 && x <= 50: Valid"
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 17: unexpected token ';'",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!((x>=0) && (x<=50))) return 0;\n  /*@\nloop invariant i1: x >= 0 && x <= 50;\nloop invariant i2: x >= 0;\nloop invariant i3: x <= 50;\nloop invariant i4: (x > 50 ==> \\old(x) < x) && (x < 0 ==> \\old(x) > x) && (0 <= x <= 50);\nloop invariant i5: (x == 0 ==> \\old(x) < x) && (x == 1 ==> \\old(x) <= x) && (x > 1 ==> \\old(x) > x);\nloop invariant i6: (\\forall int i; i <= 0 || i >= x; i++) (i <= 50);\nloop invariant i7: (x >= 0) && (x <= 50);\nloop invariant i8: (x > 50) ==> (x >= 51);\nloop invariant i9: (x == 0) ==> (x == 1);\nloop invariant i10: (x < 0) ==> (x <= -1);\nloop invariant i11: ((x >= 1) && (x <= 50)) ==> ((x-1) >= 0 && (x-1) <= 49);\nloop invariant i12: 0 <= x <= 50;\nloop invariant i13: 0 <= x <= 51;\n*/\nwhile (unknown_bool()) {\n    if (x>50) x++;\n    if (x == 0) { x ++;\n    } else x--;\n  }\n  {;\n//@ assert((x>=0) && (x<=50));\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 5,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!((x>=0) && (x<=50))) return 0;\n  /*@\nloop invariant i1: x >= 0 && x <= 50;\nloop invariant i2: x >= 0;\nloop invariant i3: x <= 50;\n\n\n\nloop invariant i7: (x >= 0) && (x <= 50);\nloop invariant i8: (x > 50) ==> (x >= 51);\n\nloop invariant i10: (x < 0) ==> (x <= -1);\nloop invariant i11: ((x >= 1) && (x <= 50)) ==> ((x-1) >= 0 && (x-1) <= 49);\nloop invariant i12: 0 <= x <= 50;\nloop invariant i13: 0 <= x <= 51;\n*/\nwhile (unknown_bool()) {\n    if (x>50) x++;\n    if (x == 0) { x ++;\n    } else x--;\n  }\n  {;\n//@ assert((x>=0) && (x<=50));\n}\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/const.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq1.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq2.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/afnp2014.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/css2003.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007b.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gsv2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/hhk2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_2.c",
            "../data/benchmarks/sv-benchmarks/loop-new/gauss_sum.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark10_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark11_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark13_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark14_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark15_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark16_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark17_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark18_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark20_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark21_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark22_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark23_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark25_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark26_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark27_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark29_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark30_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark31_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark32_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark33_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark34_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark35_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark36_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark37_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark38_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark39_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark40_polynomial.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark41_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark42_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark43_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark45_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark48_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark49_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark50_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark51_polynomial.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../data/benchmarks/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/even.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/mod4.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/odd.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/id_trans.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/bhmr2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/ddlm2013.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gcnr2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gr2006.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_k.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_nondet.c",
            "../data/benchmarks/sv-benchmarks/loop-new/half.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark07_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark12_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark19_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark24_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark28_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark44_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark46_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark47_linear.c"
        ],
        "skipped": [],
        "total": 358,
        "success_count": 187,
        "failure_count": 171,
        "success_rate": 0.5223463687150838
    }
}