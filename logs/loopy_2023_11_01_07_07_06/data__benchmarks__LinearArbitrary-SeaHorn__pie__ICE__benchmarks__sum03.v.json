{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  while(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n}\n",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  while(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n}\n\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- The macro `assume` checks if the expression `e` is true, otherwise it returns 0. \n- There are three external functions: `unknown_int()` returns an unknown integer value, `unknown_uint()` returns an unknown unsigned integer value, and `x` is initialized to 0.\n\nVariable assignments:\n- `sn` is initialized to 0.\n- `loop1` and `n1` are assigned unknown unsigned integer values.\n- `x` is assigned 0.\n- `v1`, `v2`, and `v3` are uninitialized.\n\nLoop condition:\n- The loop condition is `while(1)`, which is an infinite loop.\n\nLoop invariants:\n- The value of `sn` is always equal to the number of times the loop has executed multiplied by the value of `a`.\n- The value of `x` is always equal to the number of times the loop has executed.\n- The value of `sn` is always equal to `x * a` or 0.\n- The values of `v1`, `v2`, and `v3` do not affect the loop invariants.\n- The values of `loop1` and `n1` do not affect the loop invariants.\n\nPutting it all together, the loop invariants are:\n```\n/*@\nloop invariant sn == \\at(x,Pre) * a;\nloop invariant x == \\at(x,Pre) + \\at(\\at(sn, Pre) == 0 ? 0 : \\at(sn, Pre)/a, Here);\nloop invariant sn == x * a || sn == 0;\n*/\n```",
            "Pre-conditions:\n- The macro `assume(e)` implies that the program assumes that the expression `e` is true, otherwise it returns 0.\n- The program defines a macro `a` with the value 1.\n\nVariable Assignments:\n- The variable `sn` is initialized to 0.\n- The variable `loop1` is assigned an unknown unsigned integer value.\n- The variable `n1` is assigned an unknown unsigned integer value.\n- The variable `x` is initialized to 0.\n- The variables `v1`, `v2`, and `v3` are assigned unknown integer values inside the loop.\n\nLoop Invariants:\n- Since `sn` is incremented by `a` in each iteration, the loop invariant `sn == x*a` is true before the loop execution.\n- Since `x` is incremented by 1 in each iteration, the loop invariant `x >= 0` is true before the loop execution.\n- Since `v1`, `v2`, and `v3` are assigned unknown integer values inside the loop, we cannot make any loop invariants for these variables.\n- The loop condition is `while(1)`, which is always true. Therefore, we need to use an implication to make the assertion inside the loop true.\n- The assertion `sn==x*a || sn == 0` is true in every iteration if `sn==x*a` holds. Therefore, the loop invariant `sn==x*a ==> sn==x*a || sn == 0` is true in every iteration.\n- The assertion `sn==x*a || sn == 0` is true in every iteration if `sn==0` holds. Therefore, the loop invariant `sn==0 ==> sn==x*a || sn == 0` is true in every iteration.\n- Since the loop condition is always true, there is no loop invariant that holds after the loop termination.\n\nPutting everything together, we get the following loop invariants:\n```\n/*@ \n    loop invariant sn == x*a;\n    loop invariant x >= 0;\n    loop invariant sn==x*a ==> sn==x*a || sn == 0;\n    loop invariant sn==0 ==> sn==x*a || sn == 0;\n*/\n```",
            "Pre-conditions:\n- The macro `assume` takes a Boolean expression and returns 0 if the expression is false. There are no pre-conditions on the inputs to `unknown_int` and `unknown_uint`.\n- `a` is defined to be 1.\n\nVariable Assignments:\n- `sn` is initialized to 0.\n- `loop1` and `n1` are assigned non-deterministic unsigned integer values.\n- `x` is assigned 0.\n- `v1`, `v2`, and `v3` are assigned non-deterministic integer values.\n\nLoop condition:\n- The loop is an infinite loop with the condition `while(1)`.\n\nLoop invariants:\n- Since the loop is an infinite loop, there is no post-condition to verify.\n- The assertion within the loop body can be used as a loop invariant. \n- Since `v1`, `v2`, and `v3` are non-deterministic, we can add an implication that makes the invariant trivially true for these variables.\n- `sn` is incremented by `a` every iteration, so we can add a conjunction that relates `sn` and `x`.\n- `loop1` and `n1` are non-deterministic and are not used within the loop, so we do not need to include them in any loop invariant.\n\nPutting it all together, the loop invariants are:\n```\n/*@ \nloop invariant x >= 0;\nloop invariant sn == x * a || sn == 0;\nloop invariant v1 >= INT_MIN ==> v2 >= v1;\nloop invariant v2 >= INT_MIN ==> v3 >= v2;\nloop invariant v3 >= INT_MIN;\n*/\n```",
            "Pre-conditions:\n- None\n\nVariable Assignments:\n- `sn` is assigned to 0 initially\n- `loop1` and `n1` are assigned non-deterministic unsigned integer values\n- `x` is assigned to 0 initially\n- `v1`, `v2`, and `v3` are assigned non-deterministic integer values in each iteration of the loop\n\nLoop Condition:\n- The loop runs indefinitely with the condition `while(1)`\n\nLoop Invariants:\n- `sn >= 0` : `sn` is always non-negative\n- `x >= 0` : `x` is always non-negative\n- `sn == x * a || sn == 0` : `sn` is equal to `x` multiplied by `a` or equal to 0\n- `v1, v2, v3` : Since these variables are non-deterministic, we cannot add any meaningful loop invariants for them.\n\nPutting it all together:\n```\n/*@ \n    loop invariant sn >= 0;\n    loop invariant x >= 0;\n    loop invariant sn == x * a || sn == 0;\n*/\n``` \nSince the program runs indefinitely, we cannot add any post-condition.",
            "Pre-conditions:\n- The macro `assume(e)` takes an expression `e` and returns 0 if `e` is false.\n- The function `unknown_int()` returns an unknown integer value.\n- The function `unknown_uint()` returns an unknown unsigned integer value.\n- The macro `a` is defined as 1.\n\nVariable assignments:\n- `sn` is initialized to 0.\n- `loop1` is assigned an unknown unsigned integer value.\n- `n1` is assigned an unknown unsigned integer value.\n- `x` is initialized to 0.\n- `v1`, `v2`, and `v3` are uninitialized integers.\n\nLoop condition:\n- The loop runs indefinitely because the loop condition is always true (`while(1)`).\n\nLoop invariants:\n- `sn == x*a || sn == 0` (before the loop execution and in every iteration of the loop): This invariant states that `sn` is always equal to `x*a` or 0. This is true before the loop because `x` is initialized to 0 and `sn` is initialized to 0. In every iteration of the loop, `sn` is incremented by `a`, so `sn` will either be equal to `x*a` or 0.\n- `x >= 0` (before the loop execution and in every iteration of the loop): This invariant states that `x` is always non-negative. This is true before the loop because `x` is initialized to 0. In every iteration of the loop, `x` is incremented by 1, so `x` will always be non-negative.\n- `v1, v2, v3` (in every iteration of the loop): This invariant states that `v1`, `v2`, and `v3` are non-deterministic integers that can take any value. This is true in every iteration of the loop because these variables are assigned unknown integer values using the `unknown_int()` function.\n- `loop1 >= 0` (before the loop execution): This invariant states that `loop1` is non-negative. This is true before the loop because `loop1` is assigned an unknown unsigned integer value using the `unknown_uint()` function.\n- `n1 >= 0` (before the loop execution): This invariant states that `n1` is non-negative. This is true before the loop because `n1` is assigned an unknown unsigned integer value using the `unknown_uint()` function.\n- `sn <= x*a + a` (in every iteration of the loop): This invariant states that `sn` is always less than or equal to `x*a + a`. This is true in every iteration of the loop because `sn` is incremented by `a` in every iteration, so `sn` will always be less than or equal to `x*a + a`.\n- `x >= loop1` (before the loop execution): This invariant states that `x` is greater than or equal to `loop1`. This is true before the loop because `x` is initialized to 0 and `loop1` is assigned an unknown unsigned integer value using the `unknown_uint()` function, which can be any non-negative value.\n- `x >= n1` (before the loop execution): This invariant states that `x` is greater than or equal to `n1`. This is true before the loop because `x` is initialized to 0 and `n1` is assigned an unknown unsigned integer value using the `unknown_uint()` function, which can be any non-negative value.\n- `sn >= 0` (before the loop execution and in every iteration of the loop): This invariant states that `sn` is always non-negative. This is true before the loop because `sn` is initialized to 0. In every iteration of the loop, `sn` is incremented by `a`, so `sn` will always be non-negative.\n\nPutting all the loop invariants together:\n```\n/*@ \n    loop invariant sn == x*a || sn == 0;\n    loop invariant x >= 0;\n    loop invariant v1;\n    loop invariant v2;\n    loop invariant v3;\n    loop invariant loop1 >= 0;\n    loop invariant n1 >= 0;\n    loop invariant sn <= x*a + a;\n    loop invariant x >= loop1;\n    loop invariant x >= n1;\n    loop invariant sn >= 0;\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@\nloop invariant sn == \\at(x,Pre) * a;\nloop invariant x == \\at(x,Pre) + \\at(\\at(sn, Pre) == 0 ? 0 : \\at(sn, Pre)/a, Here);\nloop invariant sn == x * a || sn == 0;\n*/",
            "/*@ \n    loop invariant sn == x*a;\n    loop invariant x >= 0;\n    loop invariant sn==x*a ==> sn==x*a || sn == 0;\n    loop invariant sn==0 ==> sn==x*a || sn == 0;\n*/",
            "/*@ \nloop invariant x >= 0;\nloop invariant sn == x * a || sn == 0;\nloop invariant v1 >= INT_MIN ==> v2 >= v1;\nloop invariant v2 >= INT_MIN ==> v3 >= v2;\nloop invariant v3 >= INT_MIN;\n*/",
            "/*@ \n    loop invariant sn >= 0;\n    loop invariant x >= 0;\n    loop invariant sn == x * a || sn == 0;\n*/",
            "/*@ \n    loop invariant sn == x*a || sn == 0;\n    loop invariant x >= 0;\n    loop invariant v1;\n    loop invariant v2;\n    loop invariant v3;\n    loop invariant loop1 >= 0;\n    loop invariant n1 >= 0;\n    loop invariant sn <= x*a + a;\n    loop invariant x >= loop1;\n    loop invariant x >= n1;\n    loop invariant sn >= 0;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "/*@\nloop invariant sn == \\at(x,Pre) * a;\nloop invariant x == \\at(x,Pre) + \\at(\\at(sn, Pre) == 0 ? 0 : \\at(sn, Pre)/a, Here);\nloop invariant sn == x * a || sn == 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: unbound logic variable x. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\n\n\nloop invariant i3: sn == x * a || sn == 0;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant sn == x*a;\n    loop invariant x >= 0;\n    loop invariant sn==x*a ==> sn==x*a || sn == 0;\n    loop invariant sn==0 ==> sn==x*a || sn == 0;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant sn == x*a is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant sn==x*a ==> sn==x*a || sn == 0 is inductive.\nloop invariant sn==0 ==> sn==x*a || sn == 0 is inductive.\nAssertion sn == x * 1 || sn == 0: Valid"
            },
            {
                "num_solver_calls": 5,
                "annotations": "/*@ \nloop invariant x >= 0;\nloop invariant sn == x * a || sn == 0;\nloop invariant v1 >= INT_MIN ==> v2 >= v1;\nloop invariant v2 >= INT_MIN ==> v3 >= v2;\nloop invariant v3 >= INT_MIN;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 16: unbound logic variable INT_MIN. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: sn == x * a || sn == 0;\n\n\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant sn >= 0;\n    loop invariant x >= 0;\n    loop invariant sn == x * a || sn == 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant sn >= 0 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant sn == x * a || sn == 0 is partially proven to be inductive.\nAssertion sn == x * 1 || sn == 0: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\nloop invariant i1: sn >= 0;\nloop invariant i2: x >= 0;\nloop invariant i3: sn == x * a || sn == 0;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n}\n",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant sn == x*a || sn == 0;\n    loop invariant x >= 0;\n    loop invariant v1;\n    loop invariant v2;\n    loop invariant v3;\n    loop invariant loop1 >= 0;\n    loop invariant n1 >= 0;\n    loop invariant sn <= x*a + a;\n    loop invariant x >= loop1;\n    loop invariant x >= n1;\n    loop invariant sn >= 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant sn == x*a || sn == 0 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant v1 is neither established nor preserved.\nloop invariant v2 is neither established nor preserved.\nloop invariant v3 is neither established nor preserved.\nloop invariant loop1 >= 0 is partially proven to be inductive.\nloop invariant n1 >= 0 is partially proven to be inductive.\nloop invariant sn <= x*a + a is partially proven to be inductive.\nloop invariant x >= loop1 is neither established nor preserved.\nloop invariant x >= n1 is neither established nor preserved.\nloop invariant sn >= 0 is partially proven to be inductive.\nAssertion sn == x * 1 || sn == 0: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\nloop invariant i1: sn == x*a || sn == 0;\nloop invariant i2: x >= 0;\n\n\n\nloop invariant i6: loop1 >= 0;\nloop invariant i7: n1 >= 0;\nloop invariant i8: sn <= x*a + a;\n\n\nloop invariant i11: sn >= 0;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 14: unbound logic variable x. Ignoring loop annotation",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\nloop invariant i1: sn == \\at(x,Pre) * a;\nloop invariant i2: x == \\at(x,Pre) + \\at(\\at(sn, Pre) == 0 ? 0 : \\at(sn, Pre)/a, Here);\nloop invariant i3: sn == x * a || sn == 0;\nloop invariant i4: sn == x*a;\nloop invariant i5: x >= 0;\nloop invariant i6: sn==x*a ==> sn==x*a || sn == 0;\nloop invariant i7: sn==0 ==> sn==x*a || sn == 0;\nloop invariant i8: v1 >= INT_MIN ==> v2 >= v1;\nloop invariant i9: v2 >= INT_MIN ==> v3 >= v2;\nloop invariant i10: v3 >= INT_MIN;\nloop invariant i11: sn >= 0;\nloop invariant i12: sn == x*a || sn == 0;\nloop invariant i13: v1;\nloop invariant i14: v2;\nloop invariant i15: v3;\nloop invariant i16: loop1 >= 0;\nloop invariant i17: n1 >= 0;\nloop invariant i18: sn <= x*a + a;\nloop invariant i19: x >= loop1;\nloop invariant i20: x >= n1;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n}\n",
        "combined_annotation_num_solver_calls": 7,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\n\n\nloop invariant i3: sn == x * a || sn == 0;\nloop invariant i4: sn == x*a;\nloop invariant i5: x >= 0;\nloop invariant i6: sn==x*a ==> sn==x*a || sn == 0;\nloop invariant i7: sn==0 ==> sn==x*a || sn == 0;\n\n\n\nloop invariant i11: sn >= 0;\nloop invariant i12: sn == x*a || sn == 0;\n\n\n\nloop invariant i16: loop1 >= 0;\nloop invariant i17: n1 >= 0;\nloop invariant i18: sn <= x*a + a;\n\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c"
        ],
        "skipped": [],
        "total": 210,
        "success_count": 97,
        "failure_count": 113,
        "success_rate": 0.46190476190476193
    }
}