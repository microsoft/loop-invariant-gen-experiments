{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   while(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;\n//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   while(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;\n//@ assert(j==2*k+2);\n}\n\n   return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- None.\n\nVariable assignments:\n- `j` is initialized to 2.\n- `k` is initialized to 0.\n\nLoop condition:\n- The loop executes while `unknown1()` returns a non-zero value.\n\nPost-condition:\n- If `k` is not equal to 0, then `j` must be equal to `2*k+2`.\n\nLoop invariants:\n- Since `unknown1()` is a non-deterministic function, we cannot make any assumptions about the number of loop iterations. Therefore, we cannot use loop counter as an invariant.\n- Before the loop execution, `j` is equal to 2 and `k` is equal to 0.\n```\n/*@ \n    loop invariant j >= 2 && k >= 0;\n*/\n```\n- In every iteration of the loop, `j` is either incremented by 2 or 4, and `k` is incremented by 1 if `flag` is 0.\n```\n/*@ \n    loop invariant j == 2*k + 2 + (flag ==> (\\at(j, LoopEntry) == \\at(j, Here) - 4)) && (!flag ==> (\\at(j, LoopEntry) == \\at(j, Here) - 2)) && k == \\at(k, LoopEntry) + (\\at(flag, LoopEntry) && !flag);\n*/\n```\n- After the loop termination, if `k` is not equal to 0, then `j` is equal to `2*k+2`.\n```\n/*@ \n    loop invariant j == 2*k + 2 + (flag ==> (\\at(j, LoopEntry) == \\at(j, Here) - 4)) && (!flag ==> (\\at(j, LoopEntry) == \\at(j, Here) - 2)) && k == \\at(k, LoopEntry) + (\\at(flag, LoopEntry) && !flag);\n    loop invariant (k == 0) || (k != 0 && j == 2*k+2);\n*/\n```",
            "Pre-conditions:\n- None\n\nVariable Assignments:\n- `j` is assigned the value `2`\n- `k` is assigned the value `0`\n- `flag` is assigned the value returned by `unknown2()`\n\nLoop Condition:\n- The loop continues as long as the value returned by `unknown1()` is true\n\nLoop Invariants:\n- Before the loop: \n    - `j >= 2`\n    - `k >= 0`\n    - `flag == 0 || flag == 1`\n- In every iteration:\n    - `(flag ==> j == \\old(j) + 4) && (!flag ==> j == \\old(j) + 2)`\n    - `(flag ==> k == \\old(k)) && (!flag ==> k == \\old(k) + 1)`\n    - `j >= 2`\n    - `k >= 0`\n- After the loop:\n    - `k == 0 ==> j == 2`\n    - `k != 0 ==> j == 2*k + 2`\n    - `j >= 2`\n    - `k >= 0`\n\nExplanation:\n- Before the loop, we simply state the initial values of the variables.\n- In every iteration, we first use implication to capture the behavior of the code inside the loop. If `flag` is true, then `j` is incremented by 4, otherwise `j` is incremented by 2 and `k` is incremented by 1. \n- We also need to make sure that the variables stay within certain bounds in every iteration of the loop. `j` is always greater than or equal to 2, and `k` is always greater than or equal to 0.\n- After the loop, we use implication to capture the behavior of the code after the loop. If `k` is 0, then `j` must be 2. If `k` is not 0, then `j` must be equal to 2 times `k` plus 2. We also restate the bounds on the variables.",
            "Pre-conditions/Variable Assignments:\n- `j` is assigned the value 2.\n- `k` is assigned the value 0.\n- `flag` is assigned the value of `unknown2()`.\n\nLoop Condition:\n- The loop condition is `unknown1()`, which means the loop will execute an unknown number of times until `unknown1()` returns 0.\n\nLoop Invariants:\n- Since `j` is initialized to 2 and is only incremented by either 2 or 4, its value will always be even. Therefore, we can add the following loop invariant:\n```\n/*@ loop invariant j%2 == 0; */\n```\n- Since `k` is only incremented by 1, its value will always be non-negative. Therefore, we can add the following loop invariant:\n```\n/*@ loop invariant k >= 0; */\n```\n- If `flag` is true, then `j` is incremented by 4. If `flag` is false, then `j` is incremented by 2 and `k` is incremented by 1. Therefore, we can add the following loop invariant:\n```\n/*@ loop invariant j == 2*k + 2*unknown2() + \\at(j, Pre) - 2*unknown2()*(\\at(j, Pre)%2); */\n```\n- This loop invariant can be explained as follows: \n  - If `flag` is true, `unknown2()` is 1 and `j` is incremented by 4, which is equivalent to `2*1 + 4`.\n  - If `flag` is false, `unknown2()` is 0 and `j` is incremented by 2 and `k` is incremented by 1, which is equivalent to `2*0 + 2 + 1`.\n  - Therefore, the loop invariant states that after each iteration, `j` is equal to twice the value of `k`, plus twice the value of `unknown2()`, plus the value of `j` before the loop iteration, minus twice the value of `unknown2()` times the parity of `j` before the loop iteration (to ensure that `j` remains even).\n- Since the loop invariant involves `unknown2()`, which is non-deterministic, we can add the following implication at the beginning of the loop:\n```\n/*@ loop invariant \\implies unknown2() >= 0 && unknown2() <= 1; */\n```\n- This implication ensures that the loop invariant is trivially true at the beginning of the loop, regardless of the value of `unknown2()`.\n\nFinal Assertion:\n- The final assertion is `j == 2*k + 2`. Since this assertion is guarded by the condition `if(k!=0)`, we can add the following implication before the assertion:\n```\n/*@ loop invariant k == 0 || j == 2*k + 2; */\n```\n- This implication ensures that the assertion is true only if `k` is non-zero, otherwise the assertion is trivially true.\n\nPutting it all together, we get the following code block containing all the loop invariants:\n```\n/*@ \n  loop invariant j%2 == 0;\n  loop invariant k >= 0;\n  loop invariant j == 2*k + 2*unknown2() + \\at(j, Pre) - 2*unknown2()*(\\at(j, Pre)%2);\n  loop invariant \\implies unknown2() >= 0 && unknown2() <= 1;\n  loop invariant k == 0 || j == 2*k + 2;\n*/\n```",
            "Pre-conditions:\n- None\n\nVariable Assignments:\n- int j = 2; \n- int k = 0;\n- int flag = unknown2();\n\nLoop Condition:\n- unknown1()\n\nWe want to prove that if `k` is not equal to 0 after the loop terminates, then `j` must be equal to `2*k + 2`.\n\nLoop Invariants:\n- `j` is always even.\n- `k` is always non-negative.\n- If `flag` is true, then `j` is always greater than or equal to 6. Otherwise, `j` is always greater than or equal to 2.\n- If `flag` is true, then `j` is always even. Otherwise, `j` is always odd.\n\nExplanation:\n- `j` is initialized to 2 and is incremented by either 2 or 4 in each iteration. Hence, `j` is always even.\n- `k` is initialized to 0 and is incremented by 1 in each iteration. Hence, `k` is always non-negative.\n- If `flag` is true, then `j` is incremented by 4 in each iteration, starting from an even number. Hence, `j` is always greater than or equal to 6 and is always even. Otherwise, `j` is incremented by 2 in each iteration, starting from an even number. Hence, `j` is always greater than or equal to 2 and is always odd.\n- If `flag` is true, then `j` is incremented by 4 in each iteration, starting from an even number. Hence, `j` is always even. Otherwise, `j` is incremented by 2 in each iteration, starting from an odd number. Hence, `j` is always odd.\n\nUsing these loop invariants, we can prove that if `k` is not equal to 0 after the loop terminates, then `j` must be equal to `2*k + 2`.\n\nLoop Invariants:\n```\n/*@ \n    loop invariant j%2 == 0;\n    loop invariant k >= 0;\n    loop invariant (flag ==> j >= 6) && (!flag ==> j >= 2);\n    loop invariant (flag ==> j%2 == 0) && (!flag ==> j%2 == 1);\n*/\n```",
            "Pre-conditions and variable assignments:\n- Two integer variables `j` and `k` are initialized to `2` and `0` respectively.\n- An integer variable `flag` is assigned an unknown value returned by `unknown2()` function.\n\nLoop condition:\n- The while loop executes as long as the value returned by `unknown1()` function is non-zero.\n\nLoop invariants:\n- Before the loop execution: \n    - `j == 2`\n    - `k == 0`\n    - `flag` has an unknown value returned by `unknown2()` function.\n- In every iteration of the loop:\n    - If `flag` is true, then `j == 4*i + 2` where `i` is the number of times the loop has executed so far.\n    - If `flag` is false, then `j == 2*i + 2` and `k == i` where `i` is the number of times the loop has executed so far.\n- After the loop termination:\n    - If `k!=0`, then `j == 2*k + 2`. (Note: this assertion is guarded by the condition `if(k!=0)` which we will use in an implication.)\n\nBounds on variables:\n- `j` is always greater than or equal to `2`.\n- `k` is always greater than or equal to `0`.\n\nPutting it all together:\n```\n/*@ \n    loop invariant j >= 2;\n    loop invariant k >= 0;\n    loop invariant j == 2 || j == 4*i + 2 || j == 2*i + 2;\n    loop invariant k == 0 || (j == 2*i + 2 && k == i);\n    loop variant unknown1();\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n}\n/*@ \n    loop invariant j == 2 || j == 4*i + 2 || j == 2*i + 2;\n    loop invariant k == 0 || (j == 2*i + 2 && k == i);\n    loop invariant k!=0 ==> j == 2*k + 2;\n*/\nif(k!=0)\n     {;\n//@ assert(k!=0 ==> j==2*k+2);\n}\n``` \n\nNote: We have used the implication `k!=0 ==> j == 2*k + 2` in the last loop invariant and assertion because the assertion is guarded by the condition `if(k!=0)`. If `k` is `0`, the assertion is trivially true regardless of the value of `j`."
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant j >= 2 && k >= 0;\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- None\n\nVariable Assignments:\n- `j` is assigned the value `2`\n- `k` is assigned the value `0`\n- `flag` is assigned the value returned by `unknown2()`\n\nLoop Condition:\n- The loop continues as long as the value returned by `unknown1()` is true\n\nLoop Invariants:\n- Before the loop: \n    - `j >= 2`\n    - `k >= 0`\n    - `flag == 0 || flag == 1`\n- In every iteration:\n    - `(flag ==> j == \\old(j) + 4) && (!flag ==> j == \\old(j) + 2)`\n    - `(flag ==> k == \\old(k)) && (!flag ==> k == \\old(k) + 1)`\n    - `j >= 2`\n    - `k >= 0`\n- After the loop:\n    - `k == 0 ==> j == 2`\n    - `k != 0 ==> j == 2*k + 2`\n    - `j >= 2`\n    - `k >= 0`\n\nExplanation:\n- Before the loop, we simply state the initial values of the variables.\n- In every iteration, we first use implication to capture the behavior of the code inside the loop. If `flag` is true, then `j` is incremented by 4, otherwise `j` is incremented by 2 and `k` is incremented by 1. \n- We also need to make sure that the variables stay within certain bounds in every iteration of the loop. `j` is always greater than or equal to 2, and `k` is always greater than or equal to 0.\n- After the loop, we use implication to capture the behavior of the code after the loop. If `k` is 0, then `j` must be 2. If `k` is not 0, then `j` must be equal to 2 times `k` plus 2. We also restate the bounds on the variables."
            ],
            "/*@ loop invariant j%2 == 0; */",
            "/*@ \n    loop invariant j%2 == 0;\n    loop invariant k >= 0;\n    loop invariant (flag ==> j >= 6) && (!flag ==> j >= 2);\n    loop invariant (flag ==> j%2 == 0) && (!flag ==> j%2 == 1);\n*/",
            "/*@ \n    loop invariant j >= 2;\n    loop invariant k >= 0;\n    loop invariant j == 2 || j == 4*i + 2 || j == 2*i + 2;\n    loop invariant k == 0 || (j == 2*i + 2 && k == i);\n    loop variant unknown1();\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n}\n/*@ \n    loop invariant j == 2 || j == 4*i + 2 || j == 2*i + 2;\n    loop invariant k == 0 || (j == 2*i + 2 && k == i);\n    loop invariant k!=0 ==> j == 2*k + 2;\n*/\nif(k!=0)\n     {;\n//@ assert(k!=0 ==> j==2*k+2);\n}"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant j >= 2 && k >= 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant j >= 2 && k >= 0 is inductive.\nAssertion j == 2 * k + 2: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\nloop invariant i1: j >= 2 && k >= 0;\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;\n//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- None\n\nVariable Assignments:\n- `j` is assigned the value `2`\n- `k` is assigned the value `0`\n- `flag` is assigned the value returned by `unknown2()`\n\nLoop Condition:\n- The loop continues as long as the value returned by `unknown1()` is true\n\nLoop Invariants:\n- Before the loop: \n    - `j >= 2`\n    - `k >= 0`\n    - `flag == 0 || flag == 1`\n- In every iteration:\n    - `(flag ==> j == \\old(j) + 4) && (!flag ==> j == \\old(j) + 2)`\n    - `(flag ==> k == \\old(k)) && (!flag ==> k == \\old(k) + 1)`\n    - `j >= 2`\n    - `k >= 0`\n- After the loop:\n    - `k == 0 ==> j == 2`\n    - `k != 0 ==> j == 2*k + 2`\n    - `j >= 2`\n    - `k >= 0`\n\nExplanation:\n- Before the loop, we simply state the initial values of the variables.\n- In every iteration, we first use implication to capture the behavior of the code inside the loop. If `flag` is true, then `j` is incremented by 4, otherwise `j` is incremented by 2 and `k` is incremented by 1. \n- We also need to make sure that the variables stay within certain bounds in every iteration of the loop. `j` is always greater than or equal to 2, and `k` is always greater than or equal to 0.\n- After the loop, we use implication to capture the behavior of the code after the loop. If `k` is 0, then `j` must be 2. If `k` is not 0, then `j` must be equal to 2 times `k` plus 2. We also restate the bounds on the variables.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ loop invariant j%2 == 0; */",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant j%2 == 0 is inductive.\nAssertion j == 2 * k + 2: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\nloop invariant i1: j%2 == 0;\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;\n//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant j%2 == 0;\n    loop invariant k >= 0;\n    loop invariant (flag ==> j >= 6) && (!flag ==> j >= 2);\n    loop invariant (flag ==> j%2 == 0) && (!flag ==> j%2 == 1);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant j%2 == 0 is partially proven to be inductive.\nloop invariant k >= 0 is partially proven to be inductive.\nloop invariant (flag ==> j >= 6) && (!flag ==> j >= 2) is preserved but not established.\nloop invariant (flag ==> j%2 == 0) && (!flag ==> j%2 == 1) is preserved but not established.\nAssertion j == 2 * k + 2: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\nloop invariant i1: j%2 == 0;\nloop invariant i2: k >= 0;\n\n\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;\n//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "/*@ \n    loop invariant j >= 2;\n    loop invariant k >= 0;\n    loop invariant j == 2 || j == 4*i + 2 || j == 2*i + 2;\n    loop invariant k == 0 || (j == 2*i + 2 && k == i);\n    loop variant unknown1();\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n}\n/*@ \n    loop invariant j == 2 || j == 4*i + 2 || j == 2*i + 2;\n    loop invariant k == 0 || (j == 2*i + 2 && k == i);\n    loop invariant k!=0 ==> j == 2*k + 2;\n*/\nif(k!=0)\n     {;\n//@ assert(k!=0 ==> j==2*k+2);\n}",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unbound logic variable i. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\nloop invariant i1: j >= 2;\nloop invariant i2: k >= 0;\n\n\n\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;\n//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 21: unbound logic variable i. Ignoring loop annotation",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\nloop invariant i1: j >= 2 && k >= 0;\nloop invariant i2: j%2 == 0;\nloop invariant i3: k >= 0;\nloop invariant i4: (flag ==> j >= 6) && (!flag ==> j >= 2);\nloop invariant i5: (flag ==> j%2 == 0) && (!flag ==> j%2 == 1);\nloop invariant i6: j >= 2;\nloop invariant i7: j == 2 || j == 4*i + 2 || j == 2*i + 2;\nloop invariant i8: k == 0 || (j == 2*i + 2 && k == i);\nloop invariant i9: k!=0 ==> j == 2*k + 2;\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;\n//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
        "combined_annotation_num_solver_calls": 6,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\nloop invariant i1: j >= 2 && k >= 0;\nloop invariant i2: j%2 == 0;\nloop invariant i3: k >= 0;\n\n\nloop invariant i6: j >= 2;\n\n\n\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;\n//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c"
        ],
        "skipped": [],
        "total": 164,
        "success_count": 68,
        "failure_count": 96,
        "success_rate": 0.4146341463414634
    }
}