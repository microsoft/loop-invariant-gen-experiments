{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-2.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0x0ffffff0;\n\n  while (x > 0) {\n    x -= 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0x0ffffff0;\n\n  while (x > 0) {\n    x -= 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- The program takes no input.\n- The variable x is assigned the value 0x0ffffff0.\n\nLoop Condition:\n- The loop continues as long as the value of x is greater than 0.\n\nLoop Invariants:\n- Before the loop execution, x is non-negative. `(x >= 0)`\n- Before the loop execution, x is even or odd. `(x % 2 == 0 || x % 2 == 1)`\n- In every iteration of the loop, x is non-negative. `(x >= 0)`\n- In every iteration of the loop, x is even or odd. `(x % 2 == 0 || x % 2 == 1)`\n- After the loop termination, x is non-negative. `(x >= 0)`\n- After the loop termination, x is even. `(x % 2 == 0)`\n- The loop terminates. \n\nExplanation:\n- Before the loop, x is non-negative because it is assigned a value 0x0ffffff0, which is non-negative. \n- Before the loop, x is even or odd because it can take either an even or an odd value.\n- In every iteration of the loop, x is decremented by 2, which means that it remains non-negative and even or odd.\n- After the loop, x is non-negative because the loop continues until x becomes 0 or negative, and x is non-negative before every iteration.\n- After the loop, x is even because the loop decrements x by 2 in every iteration, and hence x is even when it becomes 0.\n- Since x is decremented by 2 in every iteration, the loop will eventually terminate. \n\nLoop Invariants (with minimum and maximum bounds of x):\n- Before the loop execution, x is non-negative and less than or equal to 0x0ffffff0. `(x >= 0 && x <= 0x0ffffff0)`\n- Before the loop execution, x is even or odd and less than or equal to 0x0ffffff0. `(x % 2 == 0 || x % 2 == 1) && (x >= 0 && x <= 0x0ffffff0)`\n- In every iteration of the loop, x is non-negative and less than or equal to 0x0ffffff0. `(x >= 0 && x <= 0x0ffffff0)`\n- In every iteration of the loop, x is even or odd and less than or equal to 0x0ffffff0. `(x % 2 == 0 || x % 2 == 1) && (x >= 0 && x <= 0x0ffffff0)`\n- After the loop termination, x is non-negative and less than or equal to 0x0ffffff0. `(x >= 0 && x <= 0x0ffffff0)`\n- After the loop termination, x is even and less than or equal to 0x0ffffff0. `(x % 2 == 0) && (x >= 0 && x <= 0x0ffffff0)`\n- The loop terminates. \n\nExplanation:\n- Before the loop, x is non-negative and less than or equal to 0x0ffffff0 because it is assigned a value 0x0ffffff0, which is non-negative and less than or equal to 0x0ffffff0.\n- Before the loop, x is even or odd and less than or equal to 0x0ffffff0 because it can take either an even or an odd value between 0 and 0x0ffffff0.\n- In every iteration of the loop, x is decremented by 2, which means that it remains non-negative and even or odd and less than or equal to 0x0ffffff0.\n- After the loop, x is non-negative and less than or equal to 0x0ffffff0 because the loop continues until x becomes 0 or negative, and x is non-negative before every iteration.\n- After the loop, x is even and less than or equal to 0x0ffffff0 because the loop decrements x by 2 in every iteration, and hence x is even when it becomes 0 and less than or equal to 0x0ffffff0.\n- Since x is decremented by 2 in every iteration, the loop will eventually terminate.",
            "Pre-conditions:\n- The main function takes no input arguments and returns an integer value.\n- A variable `x` of type unsigned integer is declared and initialized with the value 0x0ffffff0.\n\nLoop Condition:\n- The loop continues as long as the value of variable `x` is greater than 0.\n\nLoop Invariants:\n- Before the loop execution:\n```\n//@ assert(x <= 0x0ffffff0);\n```\n- In every iteration of the loop:\n```\n//@ assert(x % 2 == 0);\n```\n- After the loop termination:\n```\n//@ assert(!(x % 2));\n```\nExplanation:\n- Before the loop execution, we assert that the value of `x` is less than or equal to 0x0ffffff0, which is the maximum value that `x` can take.\n- In every iteration of the loop, we assert that the value of `x` is even. Since `x` is decremented by 2 in each iteration, this invariant holds.\n- After the loop termination, we assert that the value of `x` is odd. Since the loop terminates when `x` becomes 0, the final value of `x` must be odd since it was even before the last iteration. \n\nNote:\n- Since `x` is always positive in the loop, we don't need to add any bound on its minimum value.\n- We don't need to add any relation between `x` and any other variable since `x` is not related to any other variable in the program.\n- There is no non-deterministic behavior in the program, so we don't need to use any implication to make the invariant trivially true.",
            "Pre-conditions:\n- The program takes no input.\n- The variable `x` is initialized with the value `0x0ffffff0`.\n\nLoop condition:\n- The loop executes while `x > 0`.\n\nWe want to prove that `x` is even when the loop terminates.\n\nLoop invariants:\n- Since `x` is initially set to `0x0ffffff0`, it is an even number. Therefore, we can start with the loop invariant `x % 2 == 0`, which holds before the loop execution.\n- In each iteration of the loop, `x` is decremented by 2. Therefore, we can add the loop invariant `x % 2 == 0 ==> (x+2) % 2 == 0`, which holds in every iteration of the loop.\n- When the loop terminates, `x` is equal to 0 or 1. Since we know that `x` is even initially and it is decremented by an even number in each iteration, we can add the loop invariant `x % 2 == 0 ==> x == 0`, which holds after the loop termination.\n- Finally, we can add the implication `x % 2 != 0 ==> x == 1`, which is true when the loop terminates and the assertion is not violated.\n\nPutting it all together, we get the following loop invariants:\n\n```\n/*@ \n    loop invariant x % 2 == 0;\n    loop invariant x % 2 == 0 ==> (x+2) % 2 == 0;\n    loop invariant x % 2 == 0 ==> x == 0;\n    loop invariant x % 2 != 0 ==> x == 1;\n*/\n```",
            "Pre-conditions: None.\n\nVariable assignments: \n- Initialize unsigned integer variable x to 0x0ffffff0.\n\nLoop condition: \n- x > 0\n\nLoop body: \n- x -= 2;\n\nPost-condition:\n- x % 2 == 0\n\nLoop invariants:\n1. Before the loop execution: \n   - x >= 0\n   - x <= 0x0ffffff0\n2. In every iteration of the loop:\n   - x % 2 == 0 ==> (x - 2) % 2 == 0\n   - x >= 0\n   - x <= 0x0ffffff0\n3. After the loop termination:\n   - x % 2 == 0\n\nExplanation:\n1. Before the loop execution, x is initialized to a value greater than zero. Hence, x must be greater than or equal to zero and less than or equal to the maximum value it can take, 0x0ffffff0.\n2. In every iteration of the loop, x is decremented by 2. Hence, if x is even before the iteration, it will remain even after the iteration. Therefore, the parity of x is invariant. Also, x must be greater than or equal to zero and less than or equal to the maximum value it can take, 0x0ffffff0.\n3. After the loop termination, x must be even as given in the post-condition.\n\nTherefore, the loop invariants are:\n```\n/*@ \n    loop invariant x >= 0 && x <= 0x0ffffff0;\n    loop invariant (x % 2 == 0) ==> ((x - 2) % 2 == 0);\n    loop invariant x >= 0 && x <= 0x0ffffff0;\n    loop invariant (x == 0) || (x % 2 == 0);\n*/\n```",
            "Pre-conditions:\n- The program takes no input.\n- The variable x is initialized to the value 0x0ffffff0.\n\nLoop condition:\n- The loop continues while the value of x is greater than 0.\n\nLoop invariants:\n- Before the loop execution: x is non-negative and x is even.\n- In every iteration of the loop: x is even.\n- After the loop termination: x is even and (x <= 0 ==> x == 0).\n\nExplanation:\n- Before the loop execution, x is non-negative because it is initialized to a non-negative value. x is even because 0x0ffffff0 is even.\n- In every iteration of the loop, x is decremented by 2, so x remains even.\n- After the loop termination, x is even because it was even in every iteration of the loop. If x is less than or equal to 0, then x must be 0 because x is non-negative. Therefore, x is even and (x <= 0 ==> x == 0).\n\nPutting it all together, the loop invariants are:\n```\n/*@\n    loop invariant x >= 0 && !(x % 2);\n    loop invariant !(x % 2);\n    loop invariant !(x % 2) && (x <= 0 ==> x == 0);\n*/\n```"
        ],
        "annotation_blocks": [
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The program takes no input.\n- The variable x is assigned the value 0x0ffffff0.\n\nLoop Condition:\n- The loop continues as long as the value of x is greater than 0.\n\nLoop Invariants:\n- Before the loop execution, x is non-negative. `(x >= 0)`\n- Before the loop execution, x is even or odd. `(x % 2 == 0 || x % 2 == 1)`\n- In every iteration of the loop, x is non-negative. `(x >= 0)`\n- In every iteration of the loop, x is even or odd. `(x % 2 == 0 || x % 2 == 1)`\n- After the loop termination, x is non-negative. `(x >= 0)`\n- After the loop termination, x is even. `(x % 2 == 0)`\n- The loop terminates. \n\nExplanation:\n- Before the loop, x is non-negative because it is assigned a value 0x0ffffff0, which is non-negative. \n- Before the loop, x is even or odd because it can take either an even or an odd value.\n- In every iteration of the loop, x is decremented by 2, which means that it remains non-negative and even or odd.\n- After the loop, x is non-negative because the loop continues until x becomes 0 or negative, and x is non-negative before every iteration.\n- After the loop, x is even because the loop decrements x by 2 in every iteration, and hence x is even when it becomes 0.\n- Since x is decremented by 2 in every iteration, the loop will eventually terminate. \n\nLoop Invariants (with minimum and maximum bounds of x):\n- Before the loop execution, x is non-negative and less than or equal to 0x0ffffff0. `(x >= 0 && x <= 0x0ffffff0)`\n- Before the loop execution, x is even or odd and less than or equal to 0x0ffffff0. `(x % 2 == 0 || x % 2 == 1) && (x >= 0 && x <= 0x0ffffff0)`\n- In every iteration of the loop, x is non-negative and less than or equal to 0x0ffffff0. `(x >= 0 && x <= 0x0ffffff0)`\n- In every iteration of the loop, x is even or odd and less than or equal to 0x0ffffff0. `(x % 2 == 0 || x % 2 == 1) && (x >= 0 && x <= 0x0ffffff0)`\n- After the loop termination, x is non-negative and less than or equal to 0x0ffffff0. `(x >= 0 && x <= 0x0ffffff0)`\n- After the loop termination, x is even and less than or equal to 0x0ffffff0. `(x % 2 == 0) && (x >= 0 && x <= 0x0ffffff0)`\n- The loop terminates. \n\nExplanation:\n- Before the loop, x is non-negative and less than or equal to 0x0ffffff0 because it is assigned a value 0x0ffffff0, which is non-negative and less than or equal to 0x0ffffff0.\n- Before the loop, x is even or odd and less than or equal to 0x0ffffff0 because it can take either an even or an odd value between 0 and 0x0ffffff0.\n- In every iteration of the loop, x is decremented by 2, which means that it remains non-negative and even or odd and less than or equal to 0x0ffffff0.\n- After the loop, x is non-negative and less than or equal to 0x0ffffff0 because the loop continues until x becomes 0 or negative, and x is non-negative before every iteration.\n- After the loop, x is even and less than or equal to 0x0ffffff0 because the loop decrements x by 2 in every iteration, and hence x is even when it becomes 0 and less than or equal to 0x0ffffff0.\n- Since x is decremented by 2 in every iteration, the loop will eventually terminate."
            ],
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The main function takes no input arguments and returns an integer value.\n- A variable `x` of type unsigned integer is declared and initialized with the value 0x0ffffff0.\n\nLoop Condition:\n- The loop continues as long as the value of variable `x` is greater than 0.\n\nLoop Invariants:\n- Before the loop execution:\n```\n//@ assert(x <= 0x0ffffff0);\n```\n- In every iteration of the loop:\n```\n//@ assert(x % 2 == 0);\n```\n- After the loop termination:\n```\n//@ assert(!(x % 2));\n```\nExplanation:\n- Before the loop execution, we assert that the value of `x` is less than or equal to 0x0ffffff0, which is the maximum value that `x` can take.\n- In every iteration of the loop, we assert that the value of `x` is even. Since `x` is decremented by 2 in each iteration, this invariant holds.\n- After the loop termination, we assert that the value of `x` is odd. Since the loop terminates when `x` becomes 0, the final value of `x` must be odd since it was even before the last iteration. \n\nNote:\n- Since `x` is always positive in the loop, we don't need to add any bound on its minimum value.\n- We don't need to add any relation between `x` and any other variable since `x` is not related to any other variable in the program.\n- There is no non-deterministic behavior in the program, so we don't need to use any implication to make the invariant trivially true."
            ],
            "/*@ \n    loop invariant x % 2 == 0;\n    loop invariant x % 2 == 0 ==> (x+2) % 2 == 0;\n    loop invariant x % 2 == 0 ==> x == 0;\n    loop invariant x % 2 != 0 ==> x == 1;\n*/",
            "/*@ \n    loop invariant x >= 0 && x <= 0x0ffffff0;\n    loop invariant (x % 2 == 0) ==> ((x - 2) % 2 == 0);\n    loop invariant x >= 0 && x <= 0x0ffffff0;\n    loop invariant (x == 0) || (x % 2 == 0);\n*/",
            "/*@\n    loop invariant x >= 0 && !(x % 2);\n    loop invariant !(x % 2);\n    loop invariant !(x % 2) && (x <= 0 ==> x == 0);\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The program takes no input.\n- The variable x is assigned the value 0x0ffffff0.\n\nLoop Condition:\n- The loop continues as long as the value of x is greater than 0.\n\nLoop Invariants:\n- Before the loop execution, x is non-negative. `(x >= 0)`\n- Before the loop execution, x is even or odd. `(x % 2 == 0 || x % 2 == 1)`\n- In every iteration of the loop, x is non-negative. `(x >= 0)`\n- In every iteration of the loop, x is even or odd. `(x % 2 == 0 || x % 2 == 1)`\n- After the loop termination, x is non-negative. `(x >= 0)`\n- After the loop termination, x is even. `(x % 2 == 0)`\n- The loop terminates. \n\nExplanation:\n- Before the loop, x is non-negative because it is assigned a value 0x0ffffff0, which is non-negative. \n- Before the loop, x is even or odd because it can take either an even or an odd value.\n- In every iteration of the loop, x is decremented by 2, which means that it remains non-negative and even or odd.\n- After the loop, x is non-negative because the loop continues until x becomes 0 or negative, and x is non-negative before every iteration.\n- After the loop, x is even because the loop decrements x by 2 in every iteration, and hence x is even when it becomes 0.\n- Since x is decremented by 2 in every iteration, the loop will eventually terminate. \n\nLoop Invariants (with minimum and maximum bounds of x):\n- Before the loop execution, x is non-negative and less than or equal to 0x0ffffff0. `(x >= 0 && x <= 0x0ffffff0)`\n- Before the loop execution, x is even or odd and less than or equal to 0x0ffffff0. `(x % 2 == 0 || x % 2 == 1) && (x >= 0 && x <= 0x0ffffff0)`\n- In every iteration of the loop, x is non-negative and less than or equal to 0x0ffffff0. `(x >= 0 && x <= 0x0ffffff0)`\n- In every iteration of the loop, x is even or odd and less than or equal to 0x0ffffff0. `(x % 2 == 0 || x % 2 == 1) && (x >= 0 && x <= 0x0ffffff0)`\n- After the loop termination, x is non-negative and less than or equal to 0x0ffffff0. `(x >= 0 && x <= 0x0ffffff0)`\n- After the loop termination, x is even and less than or equal to 0x0ffffff0. `(x % 2 == 0) && (x >= 0 && x <= 0x0ffffff0)`\n- The loop terminates. \n\nExplanation:\n- Before the loop, x is non-negative and less than or equal to 0x0ffffff0 because it is assigned a value 0x0ffffff0, which is non-negative and less than or equal to 0x0ffffff0.\n- Before the loop, x is even or odd and less than or equal to 0x0ffffff0 because it can take either an even or an odd value between 0 and 0x0ffffff0.\n- In every iteration of the loop, x is decremented by 2, which means that it remains non-negative and even or odd and less than or equal to 0x0ffffff0.\n- After the loop, x is non-negative and less than or equal to 0x0ffffff0 because the loop continues until x becomes 0 or negative, and x is non-negative before every iteration.\n- After the loop, x is even and less than or equal to 0x0ffffff0 because the loop decrements x by 2 in every iteration, and hence x is even when it becomes 0 and less than or equal to 0x0ffffff0.\n- Since x is decremented by 2 in every iteration, the loop will eventually terminate.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The main function takes no input arguments and returns an integer value.\n- A variable `x` of type unsigned integer is declared and initialized with the value 0x0ffffff0.\n\nLoop Condition:\n- The loop continues as long as the value of variable `x` is greater than 0.\n\nLoop Invariants:\n- Before the loop execution:\n```\n//@ assert(x <= 0x0ffffff0);\n```\n- In every iteration of the loop:\n```\n//@ assert(x % 2 == 0);\n```\n- After the loop termination:\n```\n//@ assert(!(x % 2));\n```\nExplanation:\n- Before the loop execution, we assert that the value of `x` is less than or equal to 0x0ffffff0, which is the maximum value that `x` can take.\n- In every iteration of the loop, we assert that the value of `x` is even. Since `x` is decremented by 2 in each iteration, this invariant holds.\n- After the loop termination, we assert that the value of `x` is odd. Since the loop terminates when `x` becomes 0, the final value of `x` must be odd since it was even before the last iteration. \n\nNote:\n- Since `x` is always positive in the loop, we don't need to add any bound on its minimum value.\n- We don't need to add any relation between `x` and any other variable since `x` is not related to any other variable in the program.\n- There is no non-deterministic behavior in the program, so we don't need to use any implication to make the invariant trivially true.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x % 2 == 0;\n    loop invariant x % 2 == 0 ==> (x+2) % 2 == 0;\n    loop invariant x % 2 == 0 ==> x == 0;\n    loop invariant x % 2 != 0 ==> x == 1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> (x+2) % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x == 0 is preserved but not established.\nloop invariant x % 2 != 0 ==> x == 1 is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0x0ffffff0;\n\n  /*@\nloop invariant i1: x % 2 == 0;\nloop invariant i2: x % 2 == 0 ==> (x+2) % 2 == 0;\n\nloop invariant i4: x % 2 != 0 ==> x == 1;\n*/\nwhile (x > 0) {\n    x -= 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant x >= 0 && x <= 0x0ffffff0;\n    loop invariant (x % 2 == 0) ==> ((x - 2) % 2 == 0);\n    loop invariant x >= 0 && x <= 0x0ffffff0;\n    loop invariant (x == 0) || (x % 2 == 0);\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant x >= 0 && x <= 0x0ffffff0 is inductive.\nloop invariant (x % 2 == 0) ==> ((x - 2) % 2 == 0) is inductive.\nloop invariant (x == 0) || (x % 2 == 0) is inductive.\nAssertion x % 2 == 0: Valid"
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@\n    loop invariant x >= 0 && !(x % 2);\n    loop invariant !(x % 2);\n    loop invariant !(x % 2) && (x <= 0 ==> x == 0);\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant x >= 0 && !(x % 2) is inductive.\nloop invariant !(x % 2) is inductive.\nloop invariant !(x % 2) && (x <= 0 ==> x == 0) is inductive.\nAssertion x % 2 == 0: Valid"
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant x % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> (x+2) % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x == 0 is preserved but not established.\nloop invariant x % 2 != 0 ==> x == 1 is partially proven to be inductive.\nloop invariant x >= 0 && x <= 0x0ffffff0 is partially proven to be inductive.\nloop invariant (x % 2 == 0) ==> ((x - 2) % 2 == 0) is partially proven to be inductive.\nloop invariant (x == 0) || (x % 2 == 0) is partially proven to be inductive.\nloop invariant x >= 0 && !(x % 2) is partially proven to be inductive.\nloop invariant !(x % 2) is partially proven to be inductive.\nloop invariant !(x % 2) && (x <= 0 ==> x == 0) is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0x0ffffff0;\n\n  /*@\nloop invariant i1: x % 2 == 0;\nloop invariant i2: x % 2 == 0 ==> (x+2) % 2 == 0;\nloop invariant i3: x % 2 == 0 ==> x == 0;\nloop invariant i4: x % 2 != 0 ==> x == 1;\nloop invariant i5: x >= 0 && x <= 0x0ffffff0;\nloop invariant i6: (x % 2 == 0) ==> ((x - 2) % 2 == 0);\nloop invariant i7: (x == 0) || (x % 2 == 0);\nloop invariant i8: x >= 0 && !(x % 2);\nloop invariant i9: !(x % 2);\nloop invariant i10: !(x % 2) && (x <= 0 ==> x == 0);\n*/\nwhile (x > 0) {\n    x -= 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
        "combined_annotation_num_solver_calls": 2,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0x0ffffff0;\n\n  /*@\nloop invariant i1: x % 2 == 0;\nloop invariant i2: x % 2 == 0 ==> (x+2) % 2 == 0;\n\nloop invariant i4: x % 2 != 0 ==> x == 1;\nloop invariant i5: x >= 0 && x <= 0x0ffffff0;\nloop invariant i6: (x % 2 == 0) ==> ((x - 2) % 2 == 0);\nloop invariant i7: (x == 0) || (x % 2 == 0);\nloop invariant i8: x >= 0 && !(x % 2);\nloop invariant i9: !(x % 2);\nloop invariant i10: !(x % 2) && (x <= 0 ==> x == 0);\n*/\nwhile (x > 0) {\n    x -= 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-2.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-1.c"
        ],
        "skipped": [],
        "total": 268,
        "success_count": 128,
        "failure_count": 140,
        "success_rate": 0.47761194029850745
    }
}