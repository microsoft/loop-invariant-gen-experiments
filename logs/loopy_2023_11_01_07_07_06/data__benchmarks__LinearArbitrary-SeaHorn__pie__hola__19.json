{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
        "benchmark_code": "#define assume(e) if(!(e)) return;\n\nextern int unknown1();\n\nvoid main()\n{\n  int n = unknown1 (); \n  int m = unknown1 ();\n  if (n >= 0 && m >= 0 && m < n) {\n  int x=0; \n  int y=m;\n  while(x<n) {\n    x++;\n    if(x>m) y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n  }\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return;\n\nextern int unknown1();\n\nvoid main()\n{\n  int n = unknown1 (); \n  int m = unknown1 ();\n  if (n >= 0 && m >= 0 && m < n) {\n  int x=0; \n  int y=m;\n  while(x<n) {\n    x++;\n    if(x>m) y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n  }\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- The program takes no input from the user.\n- The program calls an external function `unknown1()` twice to obtain the values of `n` and `m`.\n- `n` and `m` are integers.\n- `n` is greater than or equal to `0`.\n- `m` is greater than or equal to `0`.\n- `m` is less than `n`.\n\nLoop condition:\n- The loop executes while `x` is less than `n`.\n\nLoop invariants:\n- `0 <= x <= n`\n- `m <= y <= n`\n- `x <= y`\n- If `x <= m`, then `y = m`.\n- If `x > m`, then `y = x`.\n\nExplanation:\n- `0 <= x` is true before the loop execution.\n- `x <= n` is true before the loop execution as `x` is initialized to `0` and `n` is greater than or equal to `0`.\n- `m <= y <= n` is true before the loop execution as `y` is initialized to `m` and `m` is less than `n`.\n- `x <= y` is true in every iteration as `y` is incremented only when `x` is greater than `m`.\n- If `x <= m`, then `y = m` is true in every iteration as `y` is not incremented until `x` is greater than `m`.\n- If `x > m`, then `y = x` is true in every iteration as `y` is incremented every time `x` is incremented. This also implies that `y` will eventually become equal to `n` when `x` becomes equal to `n`.\n\nUsing these loop invariants, we can prove that `y` is equal to `n` after the loop terminates, which is the post-condition of the program. Therefore, the loop invariants are:\n```\n/*@ \n    loop invariant 0 <= x <= n;\n    loop invariant m <= y <= n;\n    loop invariant x <= y;\n    loop invariant (x <= m ==> y == m);\n    loop invariant (x > m ==> y == x);\n*/\n```",
            "Pre-conditions:\n- The values of `n` and `m` are non-negative.\n- The value of `m` is less than the value of `n`.\n\nLoop condition:\n- The loop continues as long as `x < n`.\n\nLoop invariants:\n- Before the loop execution: `x == 0 && y == m`\n- In every iteration of the loop: \n    - `x >= 1 && x <= n`\n    - `y >= m && y <= n`\n    - If `x > m`, then `y == x`\n- After the loop termination: `y == n`\n\nExplanation:\n- Before the loop execution, `x` is initialized to 0 and `y` is initialized to `m`.\n- In every iteration of the loop, `x` is incremented by 1 and `y` is either incremented by 1 or remains the same. Therefore, `x` is always greater than or equal to 1 and less than or equal to `n`, and `y` is always greater than or equal to `m` and less than or equal to `n`.\n- If `x` is greater than `m`, then `y` is incremented by 1 in that iteration. Therefore, `y` is always equal to `x` when `x` is greater than `m`.\n- After the loop termination, `x` is equal to `n` and `y` is equal to the number of times `y` was incremented in the loop. Since `y` is incremented once for each iteration of the loop where `x` is greater than `m`, and `x` is greater than `m` exactly `n-m` times, we have `y = m + (n-m) = n`. Therefore, `y` is equal to `n` after the loop termination.",
            "Pre-conditions:\n- The program does not have any explicit pre-conditions.\n- The variables `n` and `m` are assigned the return values of the function `unknown1()`, which are unknown to us.\n\nLoop condition:\n- The loop condition is `x<n`.\n\nLoop invariants:\n- Since `y` is initialized to `m`, before the loop execution, the following invariant holds: \n\n```\n/*@ loop invariant 0 <= y <= n;\n*/\n```\n\n- In every iteration of the loop, we need to make sure that `y` is incremented only when `x` is greater than `m`. Thus, the following invariant holds:\n\n```\n/*@ loop invariant 0 <= x <= n;\n    loop invariant (x <= m) ==> (y == m);\n    loop invariant (x > m) ==> (y == (m + x - m));\n*/\n```\n\n- After the loop termination, we need to check if `y` is equal to `n`. However, since `x` is incremented only once per iteration, we need to check if `y` is incremented `n-m` times. Thus, the following invariant holds:\n\n```\n/*@ loop invariant 0 <= x <= n;\n    loop invariant (x <= m) ==> (y == m);\n    loop invariant (x > m) ==> (y == (m + x - m));\n    loop invariant (x == n) ==> (y == (n - m));\n*/\n```\n\n- Since the assertion is guarded by the condition `n >= 0 && m >= 0 && m < n`, we need to add this condition in the implication of the final invariant. Thus, the final loop invariant is:\n\n```\n/*@ loop invariant (n >= 0 && m >= 0 && m < n) ==> \n                    (0 <= x <= n && \n                     (x <= m ==> y == m) && \n                     (x > m ==> y == (m + x - m)) && \n                     (x == n ==> y == (n - m)));\n*/\n``` \n\nNote that we did not need to use any variables that have garbage values. We also did not make any assumptions about the function `unknown1()`.",
            "Pre-conditions:\n- The values of `n` and `m` are non-negative integers.\n- `m` is less than `n`.\n\nLoop Condition:\n- The loop will continue as long as `x` is less than `n`.\n\nPost-condition:\n- The value of `y` is equal to `n`.\n\nLoop Invariants:\n- `0 <= x <= n`\n- `m <= y <= n`\n- `y-x <= n-m`\n\nExplanation:\n- `0 <= x <= n`: The value of `x` starts at 0 and is incremented by 1 at each iteration of the loop. It can never exceed the value of `n`.\n- `m <= y <= n`: The value of `y` is initially set to `m`, and is incremented by 1 only when `x` exceeds the value of `m`. It can never exceed the value of `n`.\n- `y-x <= n-m`: The difference between `y` and `x` is initially `m`, and is incremented by 1 at each iteration of the loop only when `x` exceeds the value of `m`. Therefore, the difference between `y` and `x` can never exceed `n-m`. \n\nFinal loop invariants:\n```\n/*@ \n  loop invariant 0 <= x <= n;\n  loop invariant m <= y <= n;\n  loop invariant y-x <= n-m;\n*/\n``` \nThese loop invariants, along with the pre-conditions and the loop condition, imply the post-condition.",
            "Preconditions:\n- The function `unknown1()` returns an integer value.\n- The variables `n` and `m` are assigned the integer values returned by `unknown1()` function.\n- The values of `n` and `m` satisfy the condition `n >= 0 && m >= 0 && m < n`.\n\nLoop condition: `x < n`\n\nLoop invariants:\n- `0 <= x <= n`\n- `m <= y <= n`\n- `y - x = m`\n- `(x <= m) ==> (y = m)`\n- `(x > m) ==> (y = x)`\n- `((n - x) == (y - m))`\n- `((n - x) >= 0) ==> (y == n)`\n\nThe loop invariant `(0 <= x <= n)` is true before the loop execution as `x` is initialized to 0 and `n >= 0` in the precondition. \n\nThe loop invariant `(m <= y <= n)` is also true before the loop execution as `m <= n` in the precondition and `y` is assigned the value of `m` in the first iteration of the loop.\n\nThe loop invariant `(y - x = m)` is true before the loop execution as `x` is initialized to 0 and `y` is assigned the value of `m` in the first iteration of the loop.\n\nThe loop invariant `((x <= m) ==> (y = m))` is true in every iteration of the loop as `y` is only incremented when `x > m`.\n\nThe loop invariant `((x > m) ==> (y = x))` is true in every iteration of the loop as `y` is incremented by 1 for every iteration where `x > m`.\n\nThe loop invariant `((n - x) == (y - m))` is true in every iteration of the loop as `y - x = m` and `n - x = (n - m) - (y - m)`.\n\nThe loop invariant `((n - x) >= 0) ==> (y == n)` is true after the loop termination as `x` would have reached `n` and `y` would have been incremented to `n` in the last iteration of the loop.\n\nTherefore, the loop invariants are:\n```\n/*@ \n    loop invariant 0 <= x <= n;\n    loop invariant m <= y <= n;\n    loop invariant y - x == m;\n    loop invariant (x <= m) ==> (y == m);\n    loop invariant (x > m) ==> (y == x);\n    loop invariant (n - x) == (y - m);\n    loop invariant ((n - x) >= 0) ==> (y == n);\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant 0 <= x <= n;\n    loop invariant m <= y <= n;\n    loop invariant x <= y;\n    loop invariant (x <= m ==> y == m);\n    loop invariant (x > m ==> y == x);\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The values of `n` and `m` are non-negative.\n- The value of `m` is less than the value of `n`.\n\nLoop condition:\n- The loop continues as long as `x < n`.\n\nLoop invariants:\n- Before the loop execution: `x == 0 && y == m`\n- In every iteration of the loop: \n    - `x >= 1 && x <= n`\n    - `y >= m && y <= n`\n    - If `x > m`, then `y == x`\n- After the loop termination: `y == n`\n\nExplanation:\n- Before the loop execution, `x` is initialized to 0 and `y` is initialized to `m`.\n- In every iteration of the loop, `x` is incremented by 1 and `y` is either incremented by 1 or remains the same. Therefore, `x` is always greater than or equal to 1 and less than or equal to `n`, and `y` is always greater than or equal to `m` and less than or equal to `n`.\n- If `x` is greater than `m`, then `y` is incremented by 1 in that iteration. Therefore, `y` is always equal to `x` when `x` is greater than `m`.\n- After the loop termination, `x` is equal to `n` and `y` is equal to the number of times `y` was incremented in the loop. Since `y` is incremented once for each iteration of the loop where `x` is greater than `m`, and `x` is greater than `m` exactly `n-m` times, we have `y = m + (n-m) = n`. Therefore, `y` is equal to `n` after the loop termination."
            ],
            "/*@ loop invariant 0 <= y <= n;\n*/",
            "/*@ \n  loop invariant 0 <= x <= n;\n  loop invariant m <= y <= n;\n  loop invariant y-x <= n-m;\n*/",
            "/*@ \n    loop invariant 0 <= x <= n;\n    loop invariant m <= y <= n;\n    loop invariant y - x == m;\n    loop invariant (x <= m) ==> (y == m);\n    loop invariant (x > m) ==> (y == x);\n    loop invariant (n - x) == (y - m);\n    loop invariant ((n - x) >= 0) ==> (y == n);\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant 0 <= x <= n;\n    loop invariant m <= y <= n;\n    loop invariant x <= y;\n    loop invariant (x <= m ==> y == m);\n    loop invariant (x > m ==> y == x);\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is inductive.\nloop invariant m <= y <= n is inductive.\nloop invariant x <= y is inductive.\nloop invariant (x <= m ==> y == m) is inductive.\nloop invariant (x > m ==> y == x) is inductive.\nAssertion y == n: Valid"
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The values of `n` and `m` are non-negative.\n- The value of `m` is less than the value of `n`.\n\nLoop condition:\n- The loop continues as long as `x < n`.\n\nLoop invariants:\n- Before the loop execution: `x == 0 && y == m`\n- In every iteration of the loop: \n    - `x >= 1 && x <= n`\n    - `y >= m && y <= n`\n    - If `x > m`, then `y == x`\n- After the loop termination: `y == n`\n\nExplanation:\n- Before the loop execution, `x` is initialized to 0 and `y` is initialized to `m`.\n- In every iteration of the loop, `x` is incremented by 1 and `y` is either incremented by 1 or remains the same. Therefore, `x` is always greater than or equal to 1 and less than or equal to `n`, and `y` is always greater than or equal to `m` and less than or equal to `n`.\n- If `x` is greater than `m`, then `y` is incremented by 1 in that iteration. Therefore, `y` is always equal to `x` when `x` is greater than `m`.\n- After the loop termination, `x` is equal to `n` and `y` is equal to the number of times `y` was incremented in the loop. Since `y` is incremented once for each iteration of the loop where `x` is greater than `m`, and `x` is greater than `m` exactly `n-m` times, we have `y = m + (n-m) = n`. Therefore, `y` is equal to `n` after the loop termination.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ loop invariant 0 <= y <= n;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= n is established but not preserved.\nAssertion y == n: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\n\nextern int unknown1();\n\nvoid main()\n{\n  int n = unknown1 (); \n  int m = unknown1 ();\n  if (n >= 0 && m >= 0 && m < n) {\n  int x=0; \n  int y=m;\n  /*@\n\n*/\nwhile(x<n) {\n    x++;\n    if(x>m) y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n  loop invariant 0 <= x <= n;\n  loop invariant m <= y <= n;\n  loop invariant y-x <= n-m;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is partially proven to be inductive.\nloop invariant m <= y <= n is established but not preserved.\nloop invariant y-x <= n-m is preserved but not established.\nAssertion y == n: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\n\nextern int unknown1();\n\nvoid main()\n{\n  int n = unknown1 (); \n  int m = unknown1 ();\n  if (n >= 0 && m >= 0 && m < n) {\n  int x=0; \n  int y=m;\n  /*@\nloop invariant i1: 0 <= x <= n;\n\n\n*/\nwhile(x<n) {\n    x++;\n    if(x>m) y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant 0 <= x <= n;\n    loop invariant m <= y <= n;\n    loop invariant y - x == m;\n    loop invariant (x <= m) ==> (y == m);\n    loop invariant (x > m) ==> (y == x);\n    loop invariant (n - x) == (y - m);\n    loop invariant ((n - x) >= 0) ==> (y == n);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is partially proven to be inductive.\nloop invariant m <= y <= n is partially proven to be inductive.\nloop invariant y - x == m is partially proven to be inductive.\nloop invariant (x <= m) ==> (y == m) is partially proven to be inductive.\nloop invariant (x > m) ==> (y == x) is partially proven to be inductive.\nloop invariant (n - x) == (y - m) is preserved but not established.\nloop invariant ((n - x) >= 0) ==> (y == n) is partially proven to be inductive.\nAssertion y == n: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\n\nextern int unknown1();\n\nvoid main()\n{\n  int n = unknown1 (); \n  int m = unknown1 ();\n  if (n >= 0 && m >= 0 && m < n) {\n  int x=0; \n  int y=m;\n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: m <= y <= n;\n\nloop invariant i4: (x <= m) ==> (y == m);\nloop invariant i5: (x > m) ==> (y == x);\n\n\n*/\nwhile(x<n) {\n    x++;\n    if(x>m) y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n  }\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= x <= n is partially proven to be inductive.\nloop invariant m <= y <= n is partially proven to be inductive.\nloop invariant x <= y is partially proven to be inductive.\nloop invariant (x <= m ==> y == m) is partially proven to be inductive.\nloop invariant (x > m ==> y == x) is partially proven to be inductive.\nloop invariant 0 <= y <= n is partially proven to be inductive.\nloop invariant y-x <= n-m is preserved but not established.\nloop invariant y - x == m is partially proven to be inductive.\nloop invariant (x <= m) ==> (y == m) is partially proven to be inductive.\nloop invariant (x > m) ==> (y == x) is partially proven to be inductive.\nloop invariant (n - x) == (y - m) is preserved but not established.\nloop invariant ((n - x) >= 0) ==> (y == n) is partially proven to be inductive.\nAssertion y == n: Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return;\n\nextern int unknown1();\n\nvoid main()\n{\n  int n = unknown1 (); \n  int m = unknown1 ();\n  if (n >= 0 && m >= 0 && m < n) {\n  int x=0; \n  int y=m;\n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: m <= y <= n;\nloop invariant i3: x <= y;\nloop invariant i4: (x <= m ==> y == m);\nloop invariant i5: (x > m ==> y == x);\nloop invariant i6: 0 <= y <= n;\nloop invariant i7: y-x <= n-m;\nloop invariant i8: y - x == m;\nloop invariant i9: (x <= m) ==> (y == m);\nloop invariant i10: (x > m) ==> (y == x);\nloop invariant i11: (n - x) == (y - m);\nloop invariant i12: ((n - x) >= 0) ==> (y == n);\n*/\nwhile(x<n) {\n    x++;\n    if(x>m) y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n  }\n}",
        "combined_annotation_num_solver_calls": 4,
        "code_after_prune": "#define assume(e) if(!(e)) return;\n\nextern int unknown1();\n\nvoid main()\n{\n  int n = unknown1 (); \n  int m = unknown1 ();\n  if (n >= 0 && m >= 0 && m < n) {\n  int x=0; \n  int y=m;\n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: m <= y <= n;\nloop invariant i3: x <= y;\nloop invariant i4: (x <= m ==> y == m);\nloop invariant i5: (x > m ==> y == x);\nloop invariant i6: 0 <= y <= n;\n\n\nloop invariant i9: (x <= m) ==> (y == m);\nloop invariant i10: (x > m) ==> (y == x);\n\n\n*/\nwhile(x<n) {\n    x++;\n    if(x>m) y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n  }\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c"
        ],
        "skipped": [],
        "total": 169,
        "success_count": 71,
        "failure_count": 98,
        "success_rate": 0.42011834319526625
    }
}