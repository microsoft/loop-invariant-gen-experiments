{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005_variant.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    while (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    while (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- The macro `assume(e)` assumes that the expression `e` is true. If not, it returns 0. \n- The variable `mid` is assigned a non-negative integer value returned by the function `unknown_int()`.\n- The value of `mid` is between 1 and `LARGE_INT`.\n- `LARGE_INT` is a large positive integer.\n- All other variables are uninitialized and could have garbage values.\n\nLoop condition:\n- `mid > 0`\n\nLoop invariants:\n- `lo >= 0`\n- `hi >= 0`\n- `mid >= 0`\n- `mid <= LARGE_INT`\n- `lo + mid + hi == 2 * mid`\n- `lo <= mid`\n- `hi <= mid`\n- `mid > 0 ==> lo + hi + 1 == 2 * mid`\n\nExplanation:\n- `lo >= 0`, `hi >= 0` and `mid >= 0` are true before the loop execution and in every iteration of the loop.\n- `mid <= LARGE_INT` is true before the loop execution and does not change during the loop execution.\n- `lo + mid + hi == 2 * mid` is true before the loop execution since `lo = 0`, `mid` is initialized to a positive integer value and `hi = 2 * mid - mid = mid`. This is also true in every iteration of the loop since `lo` is incremented by 1 and `hi` is decremented by 1, so their sum remains the same.\n- `lo <= mid` and `hi <= mid` are true before the loop execution and in every iteration of the loop since `lo` is incremented by 1 and `hi` is decremented by 1 in each iteration, so they are always less than or equal to `mid`.\n- `mid > 0 ==> lo + hi + 1 == 2 * mid` is true before the loop execution since `mid > 0` implies that `lo + hi + 1 = 2 * mid` (from the initialization of `lo`, `mid`, and `hi`). This is also true in every iteration of the loop since `lo` is incremented by 1 and `hi` is decremented by 1, so their sum decreases by 2 in each iteration. Thus, the implication holds at all times during the loop execution.\n- Finally, the assertion `lo == hi` is guarded by the condition `mid > 0`, so we can add an implication:\n```\n(mid > 0) ==> (lo == hi)\n``` \nThis implication is true since `lo` and `hi` are both initialized to `mid`, and then `lo` is incremented by 1 and `hi` is decremented by 1 in each iteration of the loop. Therefore, if `mid > 0`, `lo` and `hi` will eventually become equal. \n\nNote: Since all variables are non-deterministic at the beginning of the loop, we do not need to add any implications to make the loop invariants true at that location. Similarly, since there are no assignments to any variables after the loop, we do not need to add any implications to make the loop invariants true after the loop termination.",
            "Pre-conditions:\n- The `unknown_int()` function returns an integer between 1 and `LARGE_INT`.\n\nVariable assignments:\n- `lo` is initialized to 0.\n- `mid` is assigned the value returned by `unknown_int()`.\n- `hi` is assigned the value 2 times `mid`.\n\nLoop condition:\n- `mid > 0`\n\nLoop invariants:\n- `lo >= 0`\n- `hi <= 2 * mid`\n- `mid <= \\old(mid)`\n- `lo <= \\old(lo) + 1`\n- `hi >= \\old(hi) - 1`\n- `(mid == 0) ==> (lo == hi)` (guard condition)\n\nExplanation:\n- `lo >= 0` because it is initialized to 0 and incremented by 1 in each iteration of the loop.\n- `hi <= 2 * mid` because `hi` is initialized to 2 times `mid` and is decremented by 1 in each iteration of the loop.\n- `mid <= \\old(mid)` because `mid` is decremented by 1 in each iteration of the loop.\n- `lo <= \\old(lo) + 1` because `lo` is incremented by 1 in each iteration of the loop.\n- `hi >= \\old(hi) - 1` because `hi` is decremented by 1 in each iteration of the loop.\n- `(mid == 0) ==> (lo == hi)` is the guard condition that ensures that the assertion is only checked when the loop terminates. If `mid` is 0, then `lo` has been incremented by the same amount as `hi` has been decremented, so they must be equal.\n\nAll loop invariants together:\n```\n/*@ \n    loop invariant lo >= 0;\n    loop invariant hi <= 2 * mid;\n    loop invariant mid <= \\old(mid);\n    loop invariant lo <= \\old(lo) + 1;\n    loop invariant hi >= \\old(hi) - 1;\n    loop invariant (mid == 0) ==> (lo == hi);\n*/\n```",
            "Pre-conditions:\n- The macro `assume(e)` is defined to check if a given condition `e` holds. If `e` is false, the macro returns 0, which means the program terminates. \n- The macro `LARGE_INT` is defined as 1000000.\n- There is an external function `unknown_int()` that returns an unknown integer value.\n\nVariable assignments:\n- `lo` is initialized to 0.\n- `mid` is initialized to an unknown integer value returned by `unknown_int()`. \n- `hi` is initialized to `2*mid`.\n\nLoop condition:\n- The loop continues while `mid > 0`.\n\nLoop invariants:\n- `mid >= 0`: `mid` is initialized to a non-negative value and is decremented by 1 in each iteration of the loop. Therefore, `mid` is always non-negative.\n- `lo <= mid`: `lo` is incremented by 1 in each iteration of the loop. Therefore, `lo` is always less than or equal to `mid`.\n- `hi >= mid`: `hi` is decremented by 1 in each iteration of the loop. Therefore, `hi` is always greater than or equal to `mid`.\n- `mid <= LARGE_INT`: `mid` is initialized to an unknown integer value, but we know that it is less than or equal to `LARGE_INT` from the `assume` statement. Therefore, `mid` is always less than or equal to `LARGE_INT`.\n- `lo >= 1`: `lo` is initialized to 0 and incremented by 1 in each iteration of the loop. Therefore, `lo` is always greater than or equal to 1.\n- `hi <= 2*LARGE_INT`: `hi` is initialized to `2*mid`, which is less than or equal to `2*LARGE_INT`. In each iteration, `hi` is decremented by 1, so it is always less than or equal to `2*LARGE_INT`.\n\nLoop invariant implying post-condition:\n- `mid > 0 ==> (lo == hi)`: If `mid` is greater than 0, then the loop continues to execute. In each iteration, `lo` is incremented by 1 and `hi` is decremented by 1, so their difference remains the same. Therefore, when the loop terminates, `lo` and `hi` are equal, which implies the post-condition.\n\nPutting it all together:\n```\n/*@ \n    loop invariant mid >= 0;\n    loop invariant lo <= mid;\n    loop invariant hi >= mid;\n    loop invariant mid <= LARGE_INT;\n    loop invariant lo >= 1;\n    loop invariant hi <= 2*LARGE_INT;\n    loop invariant mid > 0 ==> (lo == hi);\n*/\n```",
            "First, let's analyze the pre-conditions and variable assignments in the program:\n- The program defines a macro `assume` which is used to return 0 if the condition in the argument is not satisfied.\n- The program defines a constant `LARGE_INT` with the value 1000000.\n- The program declares an external function `unknown_int` which returns an integer.\n- The `main` function initializes `lo` to 0 and `mid` to the result of calling `unknown_int` function. If `mid` is not in the range (0, LARGE_INT], the program returns 0.\n- The `main` function initializes `hi` to 2 times the value of `mid`.\n\nNext, let's analyze the loop body:\n- The loop condition is `mid > 0`.\n- In each iteration of the loop, the values of `lo`, `hi`, and `mid` are updated.\n\nNow, let's find the necessary loop invariants to help Frama-C verify the post-condition:\n- Before the loop execution, the following loop invariants are true:\n    - `lo >= 0`\n    - `hi <= 2 * LARGE_INT`\n    - `mid > 0`\n    - `mid <= LARGE_INT`\n    - `lo + hi + mid == 2 * mid`\n- In every iteration of the loop, the following loop invariants are true:\n    - `lo >= 1`\n    - `hi <= 2 * LARGE_INT - 1`\n    - `mid >= 1`\n    - `mid <= LARGE_INT`\n    - `lo + hi + mid == 2 * mid`\n- After the loop termination, the following loop invariants are true:\n    - `mid == 0`\n    - `lo + hi == 2 * mid`\n    - `lo == hi` (implied by the assertion)\n\nWe can prove that these loop invariants imply the post-condition as follows:\n- `mid == 0` implies that the loop condition `mid > 0` is false, which means the loop terminates.\n- `lo + hi == 2 * mid` implies that the sum of `lo` and `hi` is equal to the initial value of `hi` before the loop execution. Since `hi` is initialized to 2 times the initial value of `mid`, this implies that `lo` is equal to the initial value of `mid`.\n- `lo == hi` is the assertion we need to verify. This is true because of the loop invariant `lo + hi + mid == 2 * mid`, which implies that `lo + hi` is equal to the initial value of `mid` before the loop execution, and the loop invariant `mid == 0`, which implies that the final value of `mid` is 0. Therefore, `lo` and `hi` are equal to half of the initial value of `mid`, which means they are equal to each other.\n\nFinally, we can output all the loop invariants in one code block as follows:\n```\n/*@ \n    loop invariant lo >= 0;\n    loop invariant hi <= 2 * LARGE_INT;\n    loop invariant mid > 0;\n    loop invariant mid <= LARGE_INT;\n    loop invariant lo + hi + mid == 2 * mid;\n\n    loop invariant lo >= 1;\n    loop invariant hi <= 2 * LARGE_INT - 1;\n    loop invariant mid >= 1;\n    loop invariant mid <= LARGE_INT;\n    loop invariant lo + hi + mid == 2 * mid;\n\n    loop invariant mid == 0;\n    loop invariant lo + hi == 2 * mid;\n    loop invariant lo == hi ==> \\at(lo, Pre) == \\at(hi, Pre);\n*/\n```",
            "Pre-conditions:\n- The macro `assume(e)` takes a boolean expression `e` and returns 0 if `e` is false.\n- The macro `LARGE_INT` is a constant with a value of 1000000.\n- The function `unknown_int()` returns an integer value that is not known at compile-time.\n\nVariable assignments:\n- `lo` is initialized to 0.\n- `mid` is assigned the value returned by the function `unknown_int()`.\n- `hi` is assigned the value of 2 times `mid`.\n\nLoop condition:\n- The loop continues as long as `mid` is greater than 0.\n\nLoop invariants:\n- `0 <= lo <= mid`\n- `mid <= LARGE_INT`\n- `0 <= hi <= 2*mid`\n- `lo + hi = 2*mid` (This is the main invariant that we need to prove the assertion after the loop.)\n- The value of `mid` decreases by 1 in each iteration of the loop.\n\nExplanation:\n- Before the loop, `lo` is equal to 0 and `mid` is assigned a non-negative integer value from the function `unknown_int()`. Therefore, `0 <= lo <= mid`. Also, the condition `!(mid > 0 && mid <= LARGE_INT)` is checked before the loop, so `mid <= LARGE_INT`.\n- In each iteration of the loop, `lo` is incremented by 1, `hi` is decremented by 1, and `mid` is decremented by 1. Therefore, `0 <= lo + 1 <= mid + 1` and `0 <= hi - 1 <= 2*mid - 1`. Simplifying these inequalities, we get `0 <= lo <= mid` and `0 <= hi <= 2*mid`.\n- After an iteration of the loop, `lo + hi` is equal to its previous value of `2*mid`. Therefore, `lo + hi = 2*mid`.\n- Since `mid` decreases by 1 in each iteration of the loop, it will eventually become 0 and the loop will terminate. At this point, `lo + hi = 2*mid = 0`, and since `lo` and `hi` are both non-negative integers, they must be equal to 0. Therefore, the assertion `lo == hi` is true after the loop terminates.\n\nPutting these together, the loop invariants are:\n```\n/*@ \n    loop invariant 0 <= lo <= mid;\n    loop invariant mid <= LARGE_INT;\n    loop invariant 0 <= hi <= 2*mid;\n    loop invariant lo + hi == 2*mid;\n*/\n```"
        ],
        "annotation_blocks": [
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The macro `assume(e)` assumes that the expression `e` is true. If not, it returns 0. \n- The variable `mid` is assigned a non-negative integer value returned by the function `unknown_int()`.\n- The value of `mid` is between 1 and `LARGE_INT`.\n- `LARGE_INT` is a large positive integer.\n- All other variables are uninitialized and could have garbage values.\n\nLoop condition:\n- `mid > 0`\n\nLoop invariants:\n- `lo >= 0`\n- `hi >= 0`\n- `mid >= 0`\n- `mid <= LARGE_INT`\n- `lo + mid + hi == 2 * mid`\n- `lo <= mid`\n- `hi <= mid`\n- `mid > 0 ==> lo + hi + 1 == 2 * mid`\n\nExplanation:\n- `lo >= 0`, `hi >= 0` and `mid >= 0` are true before the loop execution and in every iteration of the loop.\n- `mid <= LARGE_INT` is true before the loop execution and does not change during the loop execution.\n- `lo + mid + hi == 2 * mid` is true before the loop execution since `lo = 0`, `mid` is initialized to a positive integer value and `hi = 2 * mid - mid = mid`. This is also true in every iteration of the loop since `lo` is incremented by 1 and `hi` is decremented by 1, so their sum remains the same.\n- `lo <= mid` and `hi <= mid` are true before the loop execution and in every iteration of the loop since `lo` is incremented by 1 and `hi` is decremented by 1 in each iteration, so they are always less than or equal to `mid`.\n- `mid > 0 ==> lo + hi + 1 == 2 * mid` is true before the loop execution since `mid > 0` implies that `lo + hi + 1 = 2 * mid` (from the initialization of `lo`, `mid`, and `hi`). This is also true in every iteration of the loop since `lo` is incremented by 1 and `hi` is decremented by 1, so their sum decreases by 2 in each iteration. Thus, the implication holds at all times during the loop execution.\n- Finally, the assertion `lo == hi` is guarded by the condition `mid > 0`, so we can add an implication:\n```\n(mid > 0) ==> (lo == hi)\n``` \nThis implication is true since `lo` and `hi` are both initialized to `mid`, and then `lo` is incremented by 1 and `hi` is decremented by 1 in each iteration of the loop. Therefore, if `mid > 0`, `lo` and `hi` will eventually become equal. \n\nNote: Since all variables are non-deterministic at the beginning of the loop, we do not need to add any implications to make the loop invariants true at that location. Similarly, since there are no assignments to any variables after the loop, we do not need to add any implications to make the loop invariants true after the loop termination."
            ],
            "/*@ \n    loop invariant lo >= 0;\n    loop invariant hi <= 2 * mid;\n    loop invariant mid <= \\old(mid);\n    loop invariant lo <= \\old(lo) + 1;\n    loop invariant hi >= \\old(hi) - 1;\n    loop invariant (mid == 0) ==> (lo == hi);\n*/",
            "/*@ \n    loop invariant mid >= 0;\n    loop invariant lo <= mid;\n    loop invariant hi >= mid;\n    loop invariant mid <= LARGE_INT;\n    loop invariant lo >= 1;\n    loop invariant hi <= 2*LARGE_INT;\n    loop invariant mid > 0 ==> (lo == hi);\n*/",
            "/*@ \n    loop invariant lo >= 0;\n    loop invariant hi <= 2 * LARGE_INT;\n    loop invariant mid > 0;\n    loop invariant mid <= LARGE_INT;\n    loop invariant lo + hi + mid == 2 * mid;\n\n    loop invariant lo >= 1;\n    loop invariant hi <= 2 * LARGE_INT - 1;\n    loop invariant mid >= 1;\n    loop invariant mid <= LARGE_INT;\n    loop invariant lo + hi + mid == 2 * mid;\n\n    loop invariant mid == 0;\n    loop invariant lo + hi == 2 * mid;\n    loop invariant lo == hi ==> \\at(lo, Pre) == \\at(hi, Pre);\n*/",
            "/*@ \n    loop invariant 0 <= lo <= mid;\n    loop invariant mid <= LARGE_INT;\n    loop invariant 0 <= hi <= 2*mid;\n    loop invariant lo + hi == 2*mid;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The macro `assume(e)` assumes that the expression `e` is true. If not, it returns 0. \n- The variable `mid` is assigned a non-negative integer value returned by the function `unknown_int()`.\n- The value of `mid` is between 1 and `LARGE_INT`.\n- `LARGE_INT` is a large positive integer.\n- All other variables are uninitialized and could have garbage values.\n\nLoop condition:\n- `mid > 0`\n\nLoop invariants:\n- `lo >= 0`\n- `hi >= 0`\n- `mid >= 0`\n- `mid <= LARGE_INT`\n- `lo + mid + hi == 2 * mid`\n- `lo <= mid`\n- `hi <= mid`\n- `mid > 0 ==> lo + hi + 1 == 2 * mid`\n\nExplanation:\n- `lo >= 0`, `hi >= 0` and `mid >= 0` are true before the loop execution and in every iteration of the loop.\n- `mid <= LARGE_INT` is true before the loop execution and does not change during the loop execution.\n- `lo + mid + hi == 2 * mid` is true before the loop execution since `lo = 0`, `mid` is initialized to a positive integer value and `hi = 2 * mid - mid = mid`. This is also true in every iteration of the loop since `lo` is incremented by 1 and `hi` is decremented by 1, so their sum remains the same.\n- `lo <= mid` and `hi <= mid` are true before the loop execution and in every iteration of the loop since `lo` is incremented by 1 and `hi` is decremented by 1 in each iteration, so they are always less than or equal to `mid`.\n- `mid > 0 ==> lo + hi + 1 == 2 * mid` is true before the loop execution since `mid > 0` implies that `lo + hi + 1 = 2 * mid` (from the initialization of `lo`, `mid`, and `hi`). This is also true in every iteration of the loop since `lo` is incremented by 1 and `hi` is decremented by 1, so their sum decreases by 2 in each iteration. Thus, the implication holds at all times during the loop execution.\n- Finally, the assertion `lo == hi` is guarded by the condition `mid > 0`, so we can add an implication:\n```\n(mid > 0) ==> (lo == hi)\n``` \nThis implication is true since `lo` and `hi` are both initialized to `mid`, and then `lo` is incremented by 1 and `hi` is decremented by 1 in each iteration of the loop. Therefore, if `mid > 0`, `lo` and `hi` will eventually become equal. \n\nNote: Since all variables are non-deterministic at the beginning of the loop, we do not need to add any implications to make the loop invariants true at that location. Similarly, since there are no assignments to any variables after the loop, we do not need to add any implications to make the loop invariants true after the loop termination.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 6,
                "annotations": "/*@ \n    loop invariant lo >= 0;\n    loop invariant hi <= 2 * mid;\n    loop invariant mid <= \\old(mid);\n    loop invariant lo <= \\old(lo) + 1;\n    loop invariant hi >= \\old(hi) - 1;\n    loop invariant (mid == 0) ==> (lo == hi);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: \\old undefined in this context. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant i1: lo >= 0;\n\n\n\n\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "/*@ \n    loop invariant mid >= 0;\n    loop invariant lo <= mid;\n    loop invariant hi >= mid;\n    loop invariant mid <= LARGE_INT;\n    loop invariant lo >= 1;\n    loop invariant hi <= 2*LARGE_INT;\n    loop invariant mid > 0 ==> (lo == hi);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant mid >= 0 is partially proven to be inductive.\nloop invariant lo <= mid is partially proven to be inductive.\nloop invariant hi >= mid is partially proven to be inductive.\nloop invariant mid <= LARGE_INT is partially proven to be inductive.\nloop invariant lo >= 1 is preserved but not established.\nloop invariant hi <= 2*LARGE_INT is partially proven to be inductive.\nloop invariant mid > 0 ==> (lo == hi) is partially proven to be inductive.\nAssertion lo == hi: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant i1: mid >= 0;\n\nloop invariant i3: hi >= mid;\nloop invariant i4: mid <= LARGE_INT;\n\nloop invariant i6: hi <= 2*LARGE_INT;\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "/*@ \n    loop invariant lo >= 0;\n    loop invariant hi <= 2 * LARGE_INT;\n    loop invariant mid > 0;\n    loop invariant mid <= LARGE_INT;\n    loop invariant lo + hi + mid == 2 * mid;\n\n    loop invariant lo >= 1;\n    loop invariant hi <= 2 * LARGE_INT - 1;\n    loop invariant mid >= 1;\n    loop invariant mid <= LARGE_INT;\n    loop invariant lo + hi + mid == 2 * mid;\n\n    loop invariant mid == 0;\n    loop invariant lo + hi == 2 * mid;\n    loop invariant lo == hi ==> \\at(lo, Pre) == \\at(hi, Pre);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 23: unbound logic variable lo. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant i1: lo >= 0;\nloop invariant i2: hi <= 2 * LARGE_INT;\n\nloop invariant i4: mid <= LARGE_INT;\n\n\n\n\n\n\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= lo <= mid;\n    loop invariant mid <= LARGE_INT;\n    loop invariant 0 <= hi <= 2*mid;\n    loop invariant lo + hi == 2*mid;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= lo <= mid is established but not preserved.\nloop invariant mid <= LARGE_INT is partially proven to be inductive.\nloop invariant 0 <= hi <= 2*mid is established but not preserved.\nloop invariant lo + hi == 2*mid is established but not preserved.\nAssertion lo == hi: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\nloop invariant i2: mid <= LARGE_INT;\n\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 15: \\old undefined in this context. Ignoring loop annotation",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant i1: lo >= 0;\nloop invariant i2: hi <= 2 * mid;\nloop invariant i3: mid <= \\old(mid);\nloop invariant i4: lo <= \\old(lo) + 1;\nloop invariant i5: hi >= \\old(hi) - 1;\nloop invariant i6: (mid == 0) ==> (lo == hi);\nloop invariant i7: mid >= 0;\nloop invariant i8: lo <= mid;\nloop invariant i9: hi >= mid;\nloop invariant i10: mid <= LARGE_INT;\nloop invariant i11: lo >= 1;\nloop invariant i12: hi <= 2*LARGE_INT;\nloop invariant i13: mid > 0 ==> (lo == hi);\nloop invariant i14: hi <= 2 * LARGE_INT;\nloop invariant i15: mid > 0;\nloop invariant i16: lo + hi + mid == 2 * mid;\nloop invariant i17: hi <= 2 * LARGE_INT - 1;\nloop invariant i18: mid >= 1;\nloop invariant i19: mid == 0;\nloop invariant i20: lo + hi == 2 * mid;\nloop invariant i21: lo == hi ==> \\at(lo, Pre) == \\at(hi, Pre);\nloop invariant i22: 0 <= lo <= mid;\nloop invariant i23: 0 <= hi <= 2*mid;\nloop invariant i24: lo + hi == 2*mid;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 13,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant i1: lo >= 0;\n\n\n\n\n\nloop invariant i7: mid >= 0;\n\nloop invariant i9: hi >= mid;\nloop invariant i10: mid <= LARGE_INT;\n\nloop invariant i12: hi <= 2*LARGE_INT;\n\nloop invariant i14: hi <= 2 * LARGE_INT;\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/const.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq1.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq2.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/afnp2014.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../data/benchmarks/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/even.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/mod4.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/odd.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/id_trans.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/bhmr2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005_variant.c"
        ],
        "skipped": [],
        "total": 290,
        "success_count": 137,
        "failure_count": 153,
        "success_rate": 0.4724137931034483
    }
}