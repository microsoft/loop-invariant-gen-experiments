{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_2.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  while (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n    {;\n//@ assert((k == 3*i) && (j == 2*i));\n}\n\n  }\n\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  while (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n    {;\n//@ assert((k == 3*i) && (j == 2*i));\n}\n\n  }\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Preconditions:\n- None.\n\nVariable Assignments:\n- i is assigned 0.\n- j is assigned 0.\n- k is assigned 0.\n\nLoop Condition:\n- The loop condition is `k < 0x0fffffff`.\n\nLoop Invariants:\n- Before the loop execution:\n```\n//@ assert((k == 0) && (i == 0) && (j == 0));\n```\n- In every iteration of the loop:\n```\n//@ assert((k == 3*i) && (j == 2*i));\n```\n- After the loop termination:\n```\n//@ assert((k == 3*i) && (j == 2*i) && (k >= 0x0fffffff));\n```\nExplanation:\n- Before the loop execution, we need to assert that i, j, and k are all equal to 0 since they are assigned 0.\n- In every iteration of the loop, we need to assert that k is always equal to 3 times i and j is always equal to 2 times i. This is because of the assignments inside the loop. \n- After the loop termination, we need to assert that k is still equal to 3 times i and j is still equal to 2 times i, and also that k is greater than or equal to 0x0fffffff, which is the termination condition of the loop. This ensures that the loop has terminated correctly.",
            "Pre-conditions: None\n\nVariable assignments:\n- i = 0\n- j = 0\n- k = 0\n\nLoop condition: k < 0x0fffffff\n\nWe need to find loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition.\n\nAt the beginning of the loop, we have:\n- i >= 0\n- j >= 0\n- k >= 0\n\nAfter each iteration of the loop, we have:\n- i >= 0\n- j >= 0\n- k >= 0\n- k == 3*i\n- j == 2*i\n\nTherefore, we can add the following loop invariants:\n```\n/*@\n    loop invariant i >= 0;\n    loop invariant j >= 0;\n    loop invariant k >= 0;\n    loop invariant k == 3*i;\n    loop invariant j == 2*i;\n*/\n```\n\nSince the loop condition is k < 0x0fffffff, we can add the following loop invariant, which implies the loop condition:\n```\n/*@\n    loop invariant k <= 0x0fffffff;\n*/\n```\n\nThe post-condition is already satisfied by the loop invariants, so we do not need to add any additional loop invariant.\n\nTherefore, the complete set of loop invariants is:\n```\n/*@\n    loop invariant i >= 0;\n    loop invariant j >= 0;\n    loop invariant k >= 0;\n    loop invariant k == 3*i;\n    loop invariant j == 2*i;\n    loop invariant k <= 0x0fffffff;\n*/\n```",
            "Pre-conditions and variable assignments:\n- i, j, k are initialized to 0.\n\nLoop condition:\n- The loop continues as long as k is less than 0x0fffffff.\n\nLoop invariants:\n- Before the loop execution: i == 0 && j == 0 && k == 0.\n- In every iteration of the loop: \n    - k == 3 * i\n    - j == 2 * i\n    - i <= 0x0fffffff / 3  (since k < 0x0fffffff)\n    - j <= 0x0fffffff / 2  (since j is always less than k)\n- After the loop termination: k == 3 * i && j == 2 * i.\n\nPutting it together in ACSL annotations:\n```\n/*@ \n    loop invariant i >= 0 && j >= 0 && k >= 0;\n    loop invariant i <= 0x0fffffff / 3;\n    loop invariant j <= 0x0fffffff / 2;\n    loop invariant k == 3 * i;\n    loop invariant j == 2 * i;\n*/\n```",
            "Pre-conditions:\n- None\n\nVariable assignments:\n- i is initialized to 0\n- j is initialized to 0\n- k is initialized to 0\n\nLoop condition:\n- k < 0x0fffffff\n\nLoop body:\n- i = i + 1\n- j = j + 2\n- k = k + 3\n- Assertion: (k == 3 * i) && (j == 2 * i)\n\nLoop invariants:\n- i, j, and k are non-negative integers.\n- k <= 0x0fffffff\n- (k == 3 * i) && (j == 2 * i) ==> k <= 3 * (0x0fffffff + 1) \n\nExplanation:\n- The loop condition is that k is less than 0x0fffffff. Therefore, k is always non-negative inside the loop.\n- The assertion inside the loop shows that k is always equal to 3 times i and j is always equal to 2 times i. Therefore, i, j, and k are always non-negative integers.\n- Since k starts at 0 and is incremented by 3 in each iteration, k will always be less than or equal to 3 times the maximum value of i. Therefore, we can add a conjunction that bounds k by 3 times (0x0fffffff + 1), which is the maximum value that i can take. \n- Since i, j, and k are non-negative integers and k is bounded by 3 times the maximum value of i, the loop invariants hold true before the loop, in every iteration of the loop, and after the loop termination.\n",
            "Pre-conditions:\n- None\n\nVariable assignments:\n- i = 0\n- j = 0\n- k = 0\n\nLoop condition:\n- k < 0x0fffffff\n\nLoop invariants:\n- i, j, and k are always non-negative (i >= 0 && j >= 0 && k >= 0)\n- k <= 3 * i + 3 (since i is incremented by 1 and k is incremented by 3 in each iteration)\n- j == 2 * i (since j is incremented by 2 in each iteration)\n- if k < 0x0fffffff, then (k == 3 * i && j == 2 * i)\n\nPutting it all together:\n```\n/*@ \n    loop invariant i >= 0 && j >= 0 && k >= 0;\n    loop invariant k <= 3 * i + 3;\n    loop invariant j == 2 * i;\n    loop invariant (k >= 0x0fffffff ==> (k == 3 * i && j == 2 * i));\n*/\n``` \n\nNote that the last invariant is an implication since it takes into account the loop condition. When k becomes greater than or equal to 0x0fffffff, the loop terminates and the implication becomes trivially true."
        ],
        "annotation_blocks": [
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Preconditions:\n- None.\n\nVariable Assignments:\n- i is assigned 0.\n- j is assigned 0.\n- k is assigned 0.\n\nLoop Condition:\n- The loop condition is `k < 0x0fffffff`.\n\nLoop Invariants:\n- Before the loop execution:\n```\n//@ assert((k == 0) && (i == 0) && (j == 0));\n```\n- In every iteration of the loop:\n```\n//@ assert((k == 3*i) && (j == 2*i));\n```\n- After the loop termination:\n```\n//@ assert((k == 3*i) && (j == 2*i) && (k >= 0x0fffffff));\n```\nExplanation:\n- Before the loop execution, we need to assert that i, j, and k are all equal to 0 since they are assigned 0.\n- In every iteration of the loop, we need to assert that k is always equal to 3 times i and j is always equal to 2 times i. This is because of the assignments inside the loop. \n- After the loop termination, we need to assert that k is still equal to 3 times i and j is still equal to 2 times i, and also that k is greater than or equal to 0x0fffffff, which is the termination condition of the loop. This ensures that the loop has terminated correctly."
            ],
            "/*@\n    loop invariant i >= 0;\n    loop invariant j >= 0;\n    loop invariant k >= 0;\n    loop invariant k == 3*i;\n    loop invariant j == 2*i;\n*/",
            "/*@ \n    loop invariant i >= 0 && j >= 0 && k >= 0;\n    loop invariant i <= 0x0fffffff / 3;\n    loop invariant j <= 0x0fffffff / 2;\n    loop invariant k == 3 * i;\n    loop invariant j == 2 * i;\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- None\n\nVariable assignments:\n- i is initialized to 0\n- j is initialized to 0\n- k is initialized to 0\n\nLoop condition:\n- k < 0x0fffffff\n\nLoop body:\n- i = i + 1\n- j = j + 2\n- k = k + 3\n- Assertion: (k == 3 * i) && (j == 2 * i)\n\nLoop invariants:\n- i, j, and k are non-negative integers.\n- k <= 0x0fffffff\n- (k == 3 * i) && (j == 2 * i) ==> k <= 3 * (0x0fffffff + 1) \n\nExplanation:\n- The loop condition is that k is less than 0x0fffffff. Therefore, k is always non-negative inside the loop.\n- The assertion inside the loop shows that k is always equal to 3 times i and j is always equal to 2 times i. Therefore, i, j, and k are always non-negative integers.\n- Since k starts at 0 and is incremented by 3 in each iteration, k will always be less than or equal to 3 times the maximum value of i. Therefore, we can add a conjunction that bounds k by 3 times (0x0fffffff + 1), which is the maximum value that i can take. \n- Since i, j, and k are non-negative integers and k is bounded by 3 times the maximum value of i, the loop invariants hold true before the loop, in every iteration of the loop, and after the loop termination.\n"
            ],
            "/*@ \n    loop invariant i >= 0 && j >= 0 && k >= 0;\n    loop invariant k <= 3 * i + 3;\n    loop invariant j == 2 * i;\n    loop invariant (k >= 0x0fffffff ==> (k == 3 * i && j == 2 * i));\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Preconditions:\n- None.\n\nVariable Assignments:\n- i is assigned 0.\n- j is assigned 0.\n- k is assigned 0.\n\nLoop Condition:\n- The loop condition is `k < 0x0fffffff`.\n\nLoop Invariants:\n- Before the loop execution:\n```\n//@ assert((k == 0) && (i == 0) && (j == 0));\n```\n- In every iteration of the loop:\n```\n//@ assert((k == 3*i) && (j == 2*i));\n```\n- After the loop termination:\n```\n//@ assert((k == 3*i) && (j == 2*i) && (k >= 0x0fffffff));\n```\nExplanation:\n- Before the loop execution, we need to assert that i, j, and k are all equal to 0 since they are assigned 0.\n- In every iteration of the loop, we need to assert that k is always equal to 3 times i and j is always equal to 2 times i. This is because of the assignments inside the loop. \n- After the loop termination, we need to assert that k is still equal to 3 times i and j is still equal to 2 times i, and also that k is greater than or equal to 0x0fffffff, which is the termination condition of the loop. This ensures that the loop has terminated correctly.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@\n    loop invariant i >= 0;\n    loop invariant j >= 0;\n    loop invariant k >= 0;\n    loop invariant k == 3*i;\n    loop invariant j == 2*i;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant i >= 0 is inductive.\nloop invariant j >= 0 is inductive.\nloop invariant k >= 0 is inductive.\nloop invariant k == 3*i is inductive.\nloop invariant j == 2*i is inductive.\nAssertion k == 3 * i && j == 2 * i: Valid"
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant i >= 0 && j >= 0 && k >= 0;\n    loop invariant i <= 0x0fffffff / 3;\n    loop invariant j <= 0x0fffffff / 2;\n    loop invariant k == 3 * i;\n    loop invariant j == 2 * i;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 0 && j >= 0 && k >= 0 is partially proven to be inductive.\nloop invariant i <= 0x0fffffff / 3 is partially proven to be inductive.\nloop invariant j <= 0x0fffffff / 2 is established but not preserved.\nloop invariant k == 3 * i is partially proven to be inductive.\nloop invariant j == 2 * i is partially proven to be inductive.\nAssertion k == 3 * i && j == 2 * i: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: i >= 0 && j >= 0 && k >= 0;\nloop invariant i2: i <= 0x0fffffff / 3;\n\nloop invariant i4: k == 3 * i;\nloop invariant i5: j == 2 * i;\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n    {;\n//@ assert((k == 3*i) && (j == 2*i));\n}\n\n  }\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- None\n\nVariable assignments:\n- i is initialized to 0\n- j is initialized to 0\n- k is initialized to 0\n\nLoop condition:\n- k < 0x0fffffff\n\nLoop body:\n- i = i + 1\n- j = j + 2\n- k = k + 3\n- Assertion: (k == 3 * i) && (j == 2 * i)\n\nLoop invariants:\n- i, j, and k are non-negative integers.\n- k <= 0x0fffffff\n- (k == 3 * i) && (j == 2 * i) ==> k <= 3 * (0x0fffffff + 1) \n\nExplanation:\n- The loop condition is that k is less than 0x0fffffff. Therefore, k is always non-negative inside the loop.\n- The assertion inside the loop shows that k is always equal to 3 times i and j is always equal to 2 times i. Therefore, i, j, and k are always non-negative integers.\n- Since k starts at 0 and is incremented by 3 in each iteration, k will always be less than or equal to 3 times the maximum value of i. Therefore, we can add a conjunction that bounds k by 3 times (0x0fffffff + 1), which is the maximum value that i can take. \n- Since i, j, and k are non-negative integers and k is bounded by 3 times the maximum value of i, the loop invariants hold true before the loop, in every iteration of the loop, and after the loop termination.\n",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant i >= 0 && j >= 0 && k >= 0;\n    loop invariant k <= 3 * i + 3;\n    loop invariant j == 2 * i;\n    loop invariant (k >= 0x0fffffff ==> (k == 3 * i && j == 2 * i));\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 0 && j >= 0 && k >= 0 is partially proven to be inductive.\nloop invariant k <= 3 * i + 3 is partially proven to be inductive.\nloop invariant j == 2 * i is partially proven to be inductive.\nloop invariant (k >= 0x0fffffff ==> (k == 3 * i && j == 2 * i)) is partially proven to be inductive.\nAssertion k == 3 * i && j == 2 * i: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: i >= 0 && j >= 0 && k >= 0;\nloop invariant i2: k <= 3 * i + 3;\nloop invariant i3: j == 2 * i;\nloop invariant i4: (k >= 0x0fffffff ==> (k == 3 * i && j == 2 * i));\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n    {;\n//@ assert((k == 3*i) && (j == 2*i));\n}\n\n  }\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant i >= 0 is partially proven to be inductive.\nloop invariant j >= 0 is partially proven to be inductive.\nloop invariant k >= 0 is partially proven to be inductive.\nloop invariant k == 3*i is partially proven to be inductive.\nloop invariant j == 2*i is partially proven to be inductive.\nloop invariant i >= 0 && j >= 0 && k >= 0 is partially proven to be inductive.\nloop invariant i <= 0x0fffffff / 3 is partially proven to be inductive.\nloop invariant j <= 0x0fffffff / 2 is established but not preserved.\nloop invariant k == 3 * i is partially proven to be inductive.\nloop invariant j == 2 * i is partially proven to be inductive.\nloop invariant k <= 3 * i + 3 is partially proven to be inductive.\nloop invariant (k >= 0x0fffffff ==> (k == 3 * i && j == 2 * i)) is partially proven to be inductive.\nAssertion k == 3 * i && j == 2 * i: Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: j >= 0;\nloop invariant i3: k >= 0;\nloop invariant i4: k == 3*i;\nloop invariant i5: j == 2*i;\nloop invariant i6: i >= 0 && j >= 0 && k >= 0;\nloop invariant i7: i <= 0x0fffffff / 3;\nloop invariant i8: j <= 0x0fffffff / 2;\nloop invariant i9: k == 3 * i;\nloop invariant i10: j == 2 * i;\nloop invariant i11: k <= 3 * i + 3;\nloop invariant i12: (k >= 0x0fffffff ==> (k == 3 * i && j == 2 * i));\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n    {;\n//@ assert((k == 3*i) && (j == 2*i));\n}\n\n  }\n\n}",
        "combined_annotation_num_solver_calls": 2,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: j >= 0;\nloop invariant i3: k >= 0;\nloop invariant i4: k == 3*i;\nloop invariant i5: j == 2*i;\nloop invariant i6: i >= 0 && j >= 0 && k >= 0;\nloop invariant i7: i <= 0x0fffffff / 3;\n\nloop invariant i9: k == 3 * i;\nloop invariant i10: j == 2 * i;\nloop invariant i11: k <= 3 * i + 3;\nloop invariant i12: (k >= 0x0fffffff ==> (k == 3 * i && j == 2 * i));\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n    {;\n//@ assert((k == 3*i) && (j == 2*i));\n}\n\n  }\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_2.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_1.c"
        ],
        "skipped": [],
        "total": 274,
        "success_count": 131,
        "failure_count": 143,
        "success_rate": 0.4781021897810219
    }
}