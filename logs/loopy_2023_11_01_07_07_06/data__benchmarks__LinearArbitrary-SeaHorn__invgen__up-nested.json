{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
        "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int n,j,i,k;\n\n  i = 0;\n  k = 0;\n  j = unknown();\n  n = unknown();\n\n  if ( j<=n ) {\n  while ( j <= n ) {\n    \n    j++;\n  }\n  {;\n//@ assert( i>= 0);\n}\n\n  }\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int n,j,i,k;\n\n  i = 0;\n  k = 0;\n  j = unknown();\n  n = unknown();\n\n  if ( j<=n ) {\n  while ( j <= n ) {\n    \n    j++;\n  }\n  {;\n//@ assert( i>= 0);\n}\n\n  }\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- None\n\nVariable Assignments:\n- i = 0;\n- k = 0;\n- j = unknown();\n- n = unknown();\n\nLoop Body:\n- j++;\n\nLoop Condition:\n- j <= n\n\nPost-condition:\n- i >= 0\n\nLoop Invariants:\n- Before the loop: None\n- In every iteration: None\n- After the loop:\n    - j > n ==> i >= 0\n\nVariable bounds:\n- Since we do not know the value of n and j, we cannot bound them. \n- i and k are bounded below by 0, and there is no upper bound for them.\n\nRelation:\n- None\n\nNon-deterministic variables:\n- j and n are non-deterministic at the beginning of the loop, so we can add an implication to make the invariant true at that location:\n    - true ==> j <= n\n- Since there are no non-deterministic variables at the end of the loop, we don't need to add any implication.\n\nPutting it all together, the loop invariants are:\n```\n/*@ \n    loop invariant true ==> j <= n;\n    loop invariant j > n ==> i >= 0;\n*/\n```",
            "Pre-conditions:\n- The function `unknown()` returns an integer value.\n- The values returned by `unknown()` for `j` and `n` are unknown (non-deterministic).\n- The program does not modify the values of `j` and `n` after their initialization.\n\nLoop condition:\n- The loop executes as long as `j` is less than or equal to `n`.\n\nLoop invariants:\n- Before the loop execution: `i == 0 && k == 0 && j >= 0 && n >= 0`\n- In every iteration of the loop: `i >= 0 && j <= n + 1 && k >= 0`\n    - `i >= 0` because `i` is not modified inside the loop.\n    - `j <= n + 1` because `j` is incremented in every iteration of the loop until `j` becomes `n + 1`.\n    - `k >= 0` because `k` is not modified inside the loop.\n- After the loop termination: `(j == n + 1 ==> i >= 0) && (j != n + 1 ==> i >= 0)`\n    - `(j == n + 1 ==> i >= 0)` because `i` is not modified inside the loop and `j` becomes `n + 1` when the loop terminates.\n    - `(j != n + 1 ==> i >= 0)` because `i` is not modified inside the loop and `j` is not equal to `n + 1` when the loop terminates.\n- Combining all the loop invariants:\n```\n/*@ \n    loop invariant i == 0 && k == 0 && j >= 0 && n >= 0;\n    loop invariant i >= 0 && j <= n + 1 && k >= 0;\n    loop invariant (j == n + 1 ==> i >= 0) && (j != n + 1 ==> i >= 0);\n*/\n```",
            "First, let's analyze the loop body. The loop body only increments the value of j by 1 in each iteration. Hence, we can say that the value of j will be incremented by (n-j+1) times before the loop terminates.\n\nNow let's look at the pre-conditions and variable assignments in the program. The program initializes i and k to 0, and assigns non-deterministic values to j and n. \n\nBased on the loop condition, we can add the following loop invariants:\n```\n/*@ \n    loop invariant j <= n+1;\n    loop invariant j-i == \\at(n, Pre) - \\at(i, Pre) + 1;\n    loop invariant i >= 0;\n*/\n```\nExplanation:\n- The first loop invariant ensures that the loop condition is satisfied at the beginning of each iteration and prevents j from exceeding n+1 at any point during the loop execution.\n- The second loop invariant specifies the relationship between j, i, and n. It ensures that the loop terminates after (n-j+1) iterations.\n- The third loop invariant ensures that the value of i never becomes negative during the loop execution.\n\nSince there are no guard conditions in this program, we do not need to use implication to take care of the conditional nature of the code. \n\nAlso, since there are no bounds on the values of j and n, we cannot add any conjunctions to bound their maximum and minimum values.\n\nFinally, the assertion at the end of the loop is not guarded by any condition, so we can simply add it to the loop invariants:\n```\n/*@ \n    loop invariant j <= n+1;\n    loop invariant j-i == \\at(n, Pre) - \\at(i, Pre) + 1;\n    loop invariant i >= 0;\n    loop invariant i >= 0 ==> i >= 0;\n*/\n```\nNote that we used an implication to make the last loop invariant trivially true at the end of the loop, since the value of i is non-deterministic at that point.",
            "Pre-conditions:\n- None\n\nVariable Assignments:\n- i = 0\n- k = 0\n- j = unknown()\n- n = unknown()\n\nLoop condition:\n- j <= n\n\nLoop Invariants:\n- i >= 0\n- j <= n\n\nExplanation:\n- Since i is initialized to 0 and is not updated inside the loop, i will always be greater than or equal to 0.\n- Since j is incremented by 1 in every iteration, and the loop condition is j <= n, j will always be less than or equal to n at the end of each iteration. Therefore, j <= n is a loop invariant.\n- The loop terminates when j becomes greater than n. Therefore, at the end of the loop, j > n. However, this does not give us any useful information to prove the post-condition. Therefore, we do not include it as a loop invariant.\n- Since we do not know the values of unknown variables, we cannot include any bounds or relations involving them.\n- Since there are no conditional statements inside the loop, we do not need to use any guards in the loop invariants.\n- Since the post-condition only requires that i >= 0, we do not need to include any other loop invariants. The loop invariants we have already listed imply the post-condition. \n\nTherefore, the loop invariants are:\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant j <= n;\n*/\n```",
            "Pre-conditions:\n- None\n\nVariable Assignments:\n- `i = 0`\n- `k = 0`\n- `j = unknown()`\n- `n = unknown()`\n\nLoop Condition:\n- `j <= n`\n\nLoop Invariants:\n- `j <= n` (before loop execution)\n- `i >= 0` (after loop execution)\n\nExplanation:\n- Before the loop execution, `j` is initialized to a non-deterministic value and `n` is initialized to another non-deterministic value. The loop condition `j <= n` is true before entering the loop.\n- Inside the loop, `j` is incremented and the loop condition `j <= n` remains true in every iteration of the loop.\n- After the loop execution, the only statement is an assertion. The assertion `i >= 0` holds true because the value of `i` is not modified inside the loop and it was initialized to `0` before the loop execution.\n- Since there are no other statements that modify the values of `i`, `j`, `k`, and `n`, we do not need any other loop invariants for these variables.\n\nTherefore, the loop invariants for the given program are:\n```\n/*@ \n    loop invariant j <= n;\n    loop invariant i >= 0;\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant true ==> j <= n;\n    loop invariant j > n ==> i >= 0;\n*/",
            "/*@ \n    loop invariant i == 0 && k == 0 && j >= 0 && n >= 0;\n    loop invariant i >= 0 && j <= n + 1 && k >= 0;\n    loop invariant (j == n + 1 ==> i >= 0) && (j != n + 1 ==> i >= 0);\n*/",
            "/*@ \n    loop invariant j <= n+1;\n    loop invariant j-i == \\at(n, Pre) - \\at(i, Pre) + 1;\n    loop invariant i >= 0;\n*/",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant j <= n;\n*/",
            "/*@ \n    loop invariant j <= n;\n    loop invariant i >= 0;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant true ==> j <= n;\n    loop invariant j > n ==> i >= 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 16: unbound logic variable true. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int n,j,i,k;\n\n  i = 0;\n  k = 0;\n  j = unknown();\n  n = unknown();\n\n  if ( j<=n ) {\n  /*@\n\n\n*/\nwhile ( j <= n ) {\n    \n    j++;\n  }\n  {;\n//@ assert( i>= 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant i == 0 && k == 0 && j >= 0 && n >= 0;\n    loop invariant i >= 0 && j <= n + 1 && k >= 0;\n    loop invariant (j == n + 1 ==> i >= 0) && (j != n + 1 ==> i >= 0);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i == 0 && k == 0 && j >= 0 && n >= 0 is preserved but not established.\nloop invariant i >= 0 && j <= n + 1 && k >= 0 is partially proven to be inductive.\nloop invariant (j == n + 1 ==> i >= 0) && (j != n + 1 ==> i >= 0) is partially proven to be inductive.\nAssertion i >= 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int n,j,i,k;\n\n  i = 0;\n  k = 0;\n  j = unknown();\n  n = unknown();\n\n  if ( j<=n ) {\n  /*@\n\nloop invariant i2: i >= 0 && j <= n + 1 && k >= 0;\nloop invariant i3: (j == n + 1 ==> i >= 0) && (j != n + 1 ==> i >= 0);\n*/\nwhile ( j <= n ) {\n    \n    j++;\n  }\n  {;\n//@ assert( i>= 0);\n}\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant j <= n+1;\n    loop invariant j-i == \\at(n, Pre) - \\at(i, Pre) + 1;\n    loop invariant i >= 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unbound logic variable n. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int n,j,i,k;\n\n  i = 0;\n  k = 0;\n  j = unknown();\n  n = unknown();\n\n  if ( j<=n ) {\n  /*@\nloop invariant i1: j <= n+1;\n\nloop invariant i3: i >= 0;\n*/\nwhile ( j <= n ) {\n    \n    j++;\n  }\n  {;\n//@ assert( i>= 0);\n}\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant i >= 0;\n    loop invariant j <= n;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 0 is partially proven to be inductive.\nloop invariant j <= n is established but not preserved.\nAssertion i >= 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int n,j,i,k;\n\n  i = 0;\n  k = 0;\n  j = unknown();\n  n = unknown();\n\n  if ( j<=n ) {\n  /*@\nloop invariant i1: i >= 0;\n\n*/\nwhile ( j <= n ) {\n    \n    j++;\n  }\n  {;\n//@ assert( i>= 0);\n}\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant j <= n;\n    loop invariant i >= 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant j <= n is established but not preserved.\nloop invariant i >= 0 is partially proven to be inductive.\nAssertion i >= 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int n,j,i,k;\n\n  i = 0;\n  k = 0;\n  j = unknown();\n  n = unknown();\n\n  if ( j<=n ) {\n  /*@\n\nloop invariant i2: i >= 0;\n*/\nwhile ( j <= n ) {\n    \n    j++;\n  }\n  {;\n//@ assert( i>= 0);\n}\n\n  }\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 16: unbound logic variable true. Ignoring loop annotation",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int n,j,i,k;\n\n  i = 0;\n  k = 0;\n  j = unknown();\n  n = unknown();\n\n  if ( j<=n ) {\n  /*@\nloop invariant i1: true ==> j <= n;\nloop invariant i2: j > n ==> i >= 0;\nloop invariant i3: i == 0 && k == 0 && j >= 0 && n >= 0;\nloop invariant i4: i >= 0 && j <= n + 1 && k >= 0;\nloop invariant i5: (j == n + 1 ==> i >= 0) && (j != n + 1 ==> i >= 0);\nloop invariant i6: j <= n+1;\nloop invariant i7: j-i == \\at(n, Pre) - \\at(i, Pre) + 1;\nloop invariant i8: i >= 0;\nloop invariant i9: j <= n;\n*/\nwhile ( j <= n ) {\n    \n    j++;\n  }\n  {;\n//@ assert( i>= 0);\n}\n\n  }\n}",
        "combined_annotation_num_solver_calls": 4,
        "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int n,j,i,k;\n\n  i = 0;\n  k = 0;\n  j = unknown();\n  n = unknown();\n\n  if ( j<=n ) {\n  /*@\n\nloop invariant i2: j > n ==> i >= 0;\n\nloop invariant i4: i >= 0 && j <= n + 1 && k >= 0;\nloop invariant i5: (j == n + 1 ==> i >= 0) && (j != n + 1 ==> i >= 0);\nloop invariant i6: j <= n+1;\n\nloop invariant i8: i >= 0;\n\n*/\nwhile ( j <= n ) {\n    \n    j++;\n  }\n  {;\n//@ assert( i>= 0);\n}\n\n  }\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c"
        ],
        "skipped": [],
        "total": 105,
        "success_count": 47,
        "failure_count": 58,
        "success_rate": 0.44761904761904764
    }
}