{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loop-new/half.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    for(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    for(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- The program has no pre-conditions.\n- Variable `k` is initialized through a call to an external function `unknown_int()`.\n- The value of `k` is within the range `-1000000` to `1000000`.\n\nLoop condition:\n- The loop executes while the variable `i` is less than `2*k`.\n\nPost-condition:\n- If `k` is less than `0`, then `n` is not equal to `k`. Otherwise, `n` is equal to `k`.\n\nLoop Invariants:\n- Before the loop execution:\n    - `0 <= i <= 2*k`\n    - `n >= 0`\n    - `k <= 1000000`\n    - `k >= -1000000`\n- In every iteration of the loop:\n    - `0 <= i <= 2*k`\n    - `n >= 0`\n    - `k <= 1000000`\n    - `k >= -1000000`\n    - `(i % 2 == 0) ==> (n <= i/2 + 1)`\n- After the loop termination:\n    - `0 <= i <= 2*k`\n    - `n >= 0`\n    - `k <= 1000000`\n    - `k >= -1000000`\n    - `(k < 0) ==> (n != k)`\n    - `(k >= 0) ==> (n == k)`\n\nWe need to explain some of the invariants:\n- `0 <= i <= 2*k`: This invariant is true because `i` starts at `0` and increases by `1` in each iteration, until it reaches `2*k`.\n- `n >= 0`: This invariant is true because the value of `n` is incremented by `1` in each iteration of the loop, and it starts at `0`.\n- `k <= 1000000` and `k >= -1000000`: These invariants are true because `k` is initialized through a call to `unknown_int()` and the value of `k` is checked to be within the range `-1000000` to `1000000`.\n- `(i % 2 == 0) ==> (n <= i/2 + 1)`: This invariant is true because `n` is incremented by `1` every time `i` is even, and `i/2 + 1` is the number of even numbers up to and including `i`. Therefore, `n` cannot be greater than `i/2 + 1` when `i` is even.\n- `(k < 0) ==> (n != k)` and `(k >= 0) ==> (n == k)`: These invariants are true because the post-condition states that if `k` is less than `0`, then `n` is not equal to `k`, and if `k` is greater than or equal to `0`, then `n` is equal to `k`.",
            "Pre-conditions: None\n\nVariable assignments: \n- `i` is assigned the value `0`.\n- `n` is assigned the value `0`.\n- `k` is assigned the value returned by `unknown_int()`.\n\nLoop condition: `i < 2*k`\n\nPost-condition: `k < 0 || n == k`\n\nLoop invariants:\n```\n/*@ \n    loop invariant 0 <= i <= 2*k;\n    loop invariant n <= i/2;\n    loop invariant -LARGE_INT <= k <= LARGE_INT;\n    loop invariant (k < 0 || n == k) ==> (i >= 2*k);\n*/\n```\nExplanation:\n- The first loop invariant `0 <= i <= 2*k` ensures that `i` stays within the bounds of 0 and 2*k.\n- The second loop invariant `n <= i/2` ensures that `n` is always less than or equal to `i/2`. Since `n` is incremented only when `i` is even, this ensures that `n` keeps track of the number of even values of `i`.\n- The third loop invariant `-LARGE_INT <= k <= LARGE_INT` ensures that `k` stays within the bounds of -LARGE_INT and LARGE_INT.\n- The fourth loop invariant `(k < 0 || n == k) ==> (i >= 2*k)` is an implication that uses the guard condition `k < 0 || n == k`. If the guard condition is true, then the implication is trivially true. If the guard condition is false, then it implies that `n` is not equal to `k`, which in turn implies that `i` must be greater than or equal to `2*k` to satisfy the post-condition.",
            "Pre-conditions:\n- The macro `assume(e)` is defined such that if `!(e)` is true, the program returns 0.\n- The function `unknown_int()` returns an integer value.\n- The integer constant `LARGE_INT` is defined as 1000000.\n\nVariable assignments:\n- `int i` is initialized to 0.\n- `int n` is initialized to 0.\n- `int k` is assigned the return value of the function `unknown_int()`.\n\nLoop condition:\n- The loop iterates while the value of `i` is less than 2 times the value of `k`. \n\nLoop invariants:\n- Before the loop execution:\n    - Since `i` is initialized to 0, we can add the invariant `i >= 0`.\n    - Since `n` is initialized to 0, we can add the invariant `n >= 0`.\n    - Since `k` is assigned the value of `unknown_int()`, we cannot make any assumptions about its value. However, we can add the invariant `-LARGE_INT <= k <= LARGE_INT`, which is a conjunction of the individual bounds.\n- In every iteration of the loop:\n    - Since the loop only increments `i` by 1, we can add the invariant `i >= 0`.\n    - Since the loop condition is `i < 2*k`, we can add the invariant `i <= 2*k - 1`.\n    - Since `n` is incremented by 1 if `i` is even, we can add the invariant `n = (i+1)/2`.\n- After the loop termination:\n    - Since the loop terminates when `i` is equal to or greater than 2 times the value of `k`, we can add the invariant `i >= 2*k`.\n    - We need to use implication to take care of the conditional assertion. Since the assertion is true if `k < 0` or `n == k`, we can add the invariant `(k >= 0 ==> n == k) && (k < 0 ==> true)`. Here, we use the fact that any statement implies `true`, so we can use `true` in the second part of the implication.\n    \nPutting all the loop invariants together, we get:\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant i <= 2*k - 1;\n    loop invariant n = (i+1)/2;\n    loop invariant i >= 2*k;\n    loop invariant -LARGE_INT <= k <= LARGE_INT;\n    loop invariant (k >= 0 ==> n == k) && (k < 0 ==> true);\n*/\n``` \n\nNote: We don't need to add any implications to handle non-deterministic variables in this program, as all variables are initialized before the loop and their values are deterministic.",
            "Pre-conditions/variable assignments:\n- `i` is initialized to 0.\n- `n` is initialized to 0.\n- `k` is assigned a value returned by `unknown_int()` function.\n- The program checks if `k` is within the range [-1000000, 1000000] (inclusive).\n\nLoop condition:\n- The loop continues while `i` is less than 2*k.\n\nLoop invariants:\n- Before the loop execution: None.\n\n- In every iteration of the loop:\n    1. `0 <= i <= 2*k`\n    2. `n` is the number of even numbers in the range [0, i-1].\n    3. `n <= (i+1)/2`\n    4. `n >= 0`\n\n- After the loop termination:\n    1. `i == 2*k`\n    2. `n == k` or `k < 0`\n    \nExplanation:\n- The first loop invariant is true before the loop execution since `i` is initialized to 0 and `k` is non-negative.\n- The second loop invariant is true in every iteration of the loop since `n` is incremented only when `i` is even.\n- The third loop invariant is true in every iteration of the loop since `n` can increase by at most 1 for every increment of `i`.\n- The fourth loop invariant is true in every iteration of the loop since `n` is non-negative.\n- The first loop invariant after the loop termination is true since the loop terminates when `i` becomes equal to 2*k.\n- The second loop invariant after the loop termination is true since `n` counts the number of even numbers from 0 to 2*k-1, which is equal to k. If `k` is negative, then the assertion trivially holds.",
            "Pre-conditions:\n- The function `unknown_int()` returns an integer value for `k`.\n- `k` is within the range of `-1000000` to `1000000`.\n\nVariable assignments:\n- `i` is initialized to `0`.\n- `n` is initialized to `0`.\n\nLoop condition:\n- `i < 2*k`\n\nPost-condition:\n- If `k` is less than `0`, then `n` should be equal to `0`. Otherwise, `n` should be equal to `k`.\n\nLoop invariants:\n- Before the loop execution: None needed.\n- In every iteration of the loop: \n    - `0 <= i <= 2*k`\n    - If `i` is even, then `0 <= n <= i/2`.\n    - If `i` is odd, then `0 <= n <= (i-1)/2`.\n- After the loop termination:\n    - If `k < 0`, then `n = 0 ==> k < 0 || n == k`.\n    - If `k >= 0`, then `n = k ==> k < 0 || n == k`.\n\nExplanation:\n- Before the loop execution, there are no loop invariants that are needed.\n- In every iteration of the loop, `i` is incremented by 1, so `0 <= i <= 2*k` is always true.\n- If `i` is even, then `n` is incremented by 1, so `0 <= n <= i/2` is always true. Similarly, if `i` is odd, then `n` remains the same and `0 <= n <= (i-1)/2` is always true.\n- After the loop termination, we need to ensure that the post-condition holds. If `k < 0`, then `n` should always be equal to `0` because we only increment `n` when `i` is even. Therefore, `n = 0 ==> k < 0 || n == k` is always true. If `k >= 0`, then `n` should be equal to `k` because we increment `n` exactly `k` times when `i` is even. Therefore, `n = k ==> k < 0 || n == k` is always true. \n\nNote that since all the variables are initialized to 0, there are no bounds that we need to consider for them. However, we need to ensure that `k` is within the range of `-1000000` to `1000000`."
        ],
        "annotation_blocks": [
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The program has no pre-conditions.\n- Variable `k` is initialized through a call to an external function `unknown_int()`.\n- The value of `k` is within the range `-1000000` to `1000000`.\n\nLoop condition:\n- The loop executes while the variable `i` is less than `2*k`.\n\nPost-condition:\n- If `k` is less than `0`, then `n` is not equal to `k`. Otherwise, `n` is equal to `k`.\n\nLoop Invariants:\n- Before the loop execution:\n    - `0 <= i <= 2*k`\n    - `n >= 0`\n    - `k <= 1000000`\n    - `k >= -1000000`\n- In every iteration of the loop:\n    - `0 <= i <= 2*k`\n    - `n >= 0`\n    - `k <= 1000000`\n    - `k >= -1000000`\n    - `(i % 2 == 0) ==> (n <= i/2 + 1)`\n- After the loop termination:\n    - `0 <= i <= 2*k`\n    - `n >= 0`\n    - `k <= 1000000`\n    - `k >= -1000000`\n    - `(k < 0) ==> (n != k)`\n    - `(k >= 0) ==> (n == k)`\n\nWe need to explain some of the invariants:\n- `0 <= i <= 2*k`: This invariant is true because `i` starts at `0` and increases by `1` in each iteration, until it reaches `2*k`.\n- `n >= 0`: This invariant is true because the value of `n` is incremented by `1` in each iteration of the loop, and it starts at `0`.\n- `k <= 1000000` and `k >= -1000000`: These invariants are true because `k` is initialized through a call to `unknown_int()` and the value of `k` is checked to be within the range `-1000000` to `1000000`.\n- `(i % 2 == 0) ==> (n <= i/2 + 1)`: This invariant is true because `n` is incremented by `1` every time `i` is even, and `i/2 + 1` is the number of even numbers up to and including `i`. Therefore, `n` cannot be greater than `i/2 + 1` when `i` is even.\n- `(k < 0) ==> (n != k)` and `(k >= 0) ==> (n == k)`: These invariants are true because the post-condition states that if `k` is less than `0`, then `n` is not equal to `k`, and if `k` is greater than or equal to `0`, then `n` is equal to `k`."
            ],
            "/*@ \n    loop invariant 0 <= i <= 2*k;\n    loop invariant n <= i/2;\n    loop invariant -LARGE_INT <= k <= LARGE_INT;\n    loop invariant (k < 0 || n == k) ==> (i >= 2*k);\n*/",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant i <= 2*k - 1;\n    loop invariant n = (i+1)/2;\n    loop invariant i >= 2*k;\n    loop invariant -LARGE_INT <= k <= LARGE_INT;\n    loop invariant (k >= 0 ==> n == k) && (k < 0 ==> true);\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions/variable assignments:\n- `i` is initialized to 0.\n- `n` is initialized to 0.\n- `k` is assigned a value returned by `unknown_int()` function.\n- The program checks if `k` is within the range [-1000000, 1000000] (inclusive).\n\nLoop condition:\n- The loop continues while `i` is less than 2*k.\n\nLoop invariants:\n- Before the loop execution: None.\n\n- In every iteration of the loop:\n    1. `0 <= i <= 2*k`\n    2. `n` is the number of even numbers in the range [0, i-1].\n    3. `n <= (i+1)/2`\n    4. `n >= 0`\n\n- After the loop termination:\n    1. `i == 2*k`\n    2. `n == k` or `k < 0`\n    \nExplanation:\n- The first loop invariant is true before the loop execution since `i` is initialized to 0 and `k` is non-negative.\n- The second loop invariant is true in every iteration of the loop since `n` is incremented only when `i` is even.\n- The third loop invariant is true in every iteration of the loop since `n` can increase by at most 1 for every increment of `i`.\n- The fourth loop invariant is true in every iteration of the loop since `n` is non-negative.\n- The first loop invariant after the loop termination is true since the loop terminates when `i` becomes equal to 2*k.\n- The second loop invariant after the loop termination is true since `n` counts the number of even numbers from 0 to 2*k-1, which is equal to k. If `k` is negative, then the assertion trivially holds."
            ],
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The function `unknown_int()` returns an integer value for `k`.\n- `k` is within the range of `-1000000` to `1000000`.\n\nVariable assignments:\n- `i` is initialized to `0`.\n- `n` is initialized to `0`.\n\nLoop condition:\n- `i < 2*k`\n\nPost-condition:\n- If `k` is less than `0`, then `n` should be equal to `0`. Otherwise, `n` should be equal to `k`.\n\nLoop invariants:\n- Before the loop execution: None needed.\n- In every iteration of the loop: \n    - `0 <= i <= 2*k`\n    - If `i` is even, then `0 <= n <= i/2`.\n    - If `i` is odd, then `0 <= n <= (i-1)/2`.\n- After the loop termination:\n    - If `k < 0`, then `n = 0 ==> k < 0 || n == k`.\n    - If `k >= 0`, then `n = k ==> k < 0 || n == k`.\n\nExplanation:\n- Before the loop execution, there are no loop invariants that are needed.\n- In every iteration of the loop, `i` is incremented by 1, so `0 <= i <= 2*k` is always true.\n- If `i` is even, then `n` is incremented by 1, so `0 <= n <= i/2` is always true. Similarly, if `i` is odd, then `n` remains the same and `0 <= n <= (i-1)/2` is always true.\n- After the loop termination, we need to ensure that the post-condition holds. If `k < 0`, then `n` should always be equal to `0` because we only increment `n` when `i` is even. Therefore, `n = 0 ==> k < 0 || n == k` is always true. If `k >= 0`, then `n` should be equal to `k` because we increment `n` exactly `k` times when `i` is even. Therefore, `n = k ==> k < 0 || n == k` is always true. \n\nNote that since all the variables are initialized to 0, there are no bounds that we need to consider for them. However, we need to ensure that `k` is within the range of `-1000000` to `1000000`."
            ]
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The program has no pre-conditions.\n- Variable `k` is initialized through a call to an external function `unknown_int()`.\n- The value of `k` is within the range `-1000000` to `1000000`.\n\nLoop condition:\n- The loop executes while the variable `i` is less than `2*k`.\n\nPost-condition:\n- If `k` is less than `0`, then `n` is not equal to `k`. Otherwise, `n` is equal to `k`.\n\nLoop Invariants:\n- Before the loop execution:\n    - `0 <= i <= 2*k`\n    - `n >= 0`\n    - `k <= 1000000`\n    - `k >= -1000000`\n- In every iteration of the loop:\n    - `0 <= i <= 2*k`\n    - `n >= 0`\n    - `k <= 1000000`\n    - `k >= -1000000`\n    - `(i % 2 == 0) ==> (n <= i/2 + 1)`\n- After the loop termination:\n    - `0 <= i <= 2*k`\n    - `n >= 0`\n    - `k <= 1000000`\n    - `k >= -1000000`\n    - `(k < 0) ==> (n != k)`\n    - `(k >= 0) ==> (n == k)`\n\nWe need to explain some of the invariants:\n- `0 <= i <= 2*k`: This invariant is true because `i` starts at `0` and increases by `1` in each iteration, until it reaches `2*k`.\n- `n >= 0`: This invariant is true because the value of `n` is incremented by `1` in each iteration of the loop, and it starts at `0`.\n- `k <= 1000000` and `k >= -1000000`: These invariants are true because `k` is initialized through a call to `unknown_int()` and the value of `k` is checked to be within the range `-1000000` to `1000000`.\n- `(i % 2 == 0) ==> (n <= i/2 + 1)`: This invariant is true because `n` is incremented by `1` every time `i` is even, and `i/2 + 1` is the number of even numbers up to and including `i`. Therefore, `n` cannot be greater than `i/2 + 1` when `i` is even.\n- `(k < 0) ==> (n != k)` and `(k >= 0) ==> (n == k)`: These invariants are true because the post-condition states that if `k` is less than `0`, then `n` is not equal to `k`, and if `k` is greater than or equal to `0`, then `n` is equal to `k`.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant 0 <= i <= 2*k;\n    loop invariant n <= i/2;\n    loop invariant -LARGE_INT <= k <= LARGE_INT;\n    loop invariant (k < 0 || n == k) ==> (i >= 2*k);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 2*k is preserved but not established.\nloop invariant n <= i/2 is established but not preserved.\nloop invariant -LARGE_INT <= k <= LARGE_INT is partially proven to be inductive.\nloop invariant (k < 0 || n == k) ==> (i >= 2*k) is partially proven to be inductive.\nAssertion k < 0 || n == k: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\nloop invariant i3: -LARGE_INT <= k <= LARGE_INT;\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "/*@ \n    loop invariant i >= 0;\n    loop invariant i <= 2*k - 1;\n    loop invariant n = (i+1)/2;\n    loop invariant i >= 2*k;\n    loop invariant -LARGE_INT <= k <= LARGE_INT;\n    loop invariant (k >= 0 ==> n == k) && (k < 0 ==> true);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 13: Assignment operators not allowed in annotations.",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\nloop invariant i1: i >= 0;\n\n\n\nloop invariant i5: -LARGE_INT <= k <= LARGE_INT;\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions/variable assignments:\n- `i` is initialized to 0.\n- `n` is initialized to 0.\n- `k` is assigned a value returned by `unknown_int()` function.\n- The program checks if `k` is within the range [-1000000, 1000000] (inclusive).\n\nLoop condition:\n- The loop continues while `i` is less than 2*k.\n\nLoop invariants:\n- Before the loop execution: None.\n\n- In every iteration of the loop:\n    1. `0 <= i <= 2*k`\n    2. `n` is the number of even numbers in the range [0, i-1].\n    3. `n <= (i+1)/2`\n    4. `n >= 0`\n\n- After the loop termination:\n    1. `i == 2*k`\n    2. `n == k` or `k < 0`\n    \nExplanation:\n- The first loop invariant is true before the loop execution since `i` is initialized to 0 and `k` is non-negative.\n- The second loop invariant is true in every iteration of the loop since `n` is incremented only when `i` is even.\n- The third loop invariant is true in every iteration of the loop since `n` can increase by at most 1 for every increment of `i`.\n- The fourth loop invariant is true in every iteration of the loop since `n` is non-negative.\n- The first loop invariant after the loop termination is true since the loop terminates when `i` becomes equal to 2*k.\n- The second loop invariant after the loop termination is true since `n` counts the number of even numbers from 0 to 2*k-1, which is equal to k. If `k` is negative, then the assertion trivially holds.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The function `unknown_int()` returns an integer value for `k`.\n- `k` is within the range of `-1000000` to `1000000`.\n\nVariable assignments:\n- `i` is initialized to `0`.\n- `n` is initialized to `0`.\n\nLoop condition:\n- `i < 2*k`\n\nPost-condition:\n- If `k` is less than `0`, then `n` should be equal to `0`. Otherwise, `n` should be equal to `k`.\n\nLoop invariants:\n- Before the loop execution: None needed.\n- In every iteration of the loop: \n    - `0 <= i <= 2*k`\n    - If `i` is even, then `0 <= n <= i/2`.\n    - If `i` is odd, then `0 <= n <= (i-1)/2`.\n- After the loop termination:\n    - If `k < 0`, then `n = 0 ==> k < 0 || n == k`.\n    - If `k >= 0`, then `n = k ==> k < 0 || n == k`.\n\nExplanation:\n- Before the loop execution, there are no loop invariants that are needed.\n- In every iteration of the loop, `i` is incremented by 1, so `0 <= i <= 2*k` is always true.\n- If `i` is even, then `n` is incremented by 1, so `0 <= n <= i/2` is always true. Similarly, if `i` is odd, then `n` remains the same and `0 <= n <= (i-1)/2` is always true.\n- After the loop termination, we need to ensure that the post-condition holds. If `k < 0`, then `n` should always be equal to `0` because we only increment `n` when `i` is even. Therefore, `n = 0 ==> k < 0 || n == k` is always true. If `k >= 0`, then `n` should be equal to `k` because we increment `n` exactly `k` times when `i` is even. Therefore, `n = k ==> k < 0 || n == k` is always true. \n\nNote that since all the variables are initialized to 0, there are no bounds that we need to consider for them. However, we need to ensure that `k` is within the range of `-1000000` to `1000000`.",
                "error": "Output does not contain at least 1 code block"
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 17: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= 2*k;\nloop invariant i2: n <= i/2;\nloop invariant i3: -LARGE_INT <= k <= LARGE_INT;\nloop invariant i4: (k < 0 || n == k) ==> (i >= 2*k);\nloop invariant i5: i >= 0;\nloop invariant i6: i <= 2*k - 1;\nloop invariant i7: n = (i+1)/2;\nloop invariant i8: i >= 2*k;\nloop invariant i9: (k >= 0 ==> n == k) && (k < 0 ==> true);\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 7,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\nloop invariant i3: -LARGE_INT <= k <= LARGE_INT;\n\nloop invariant i5: i >= 0;\n\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/const.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq1.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq2.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/afnp2014.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/css2003.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007b.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gsv2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/hhk2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_2.c",
            "../data/benchmarks/sv-benchmarks/loop-new/gauss_sum.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../data/benchmarks/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/even.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/mod4.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/odd.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/id_trans.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/bhmr2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/ddlm2013.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gcnr2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gr2006.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_k.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_nondet.c",
            "../data/benchmarks/sv-benchmarks/loop-new/half.c"
        ],
        "skipped": [],
        "total": 307,
        "success_count": 146,
        "failure_count": 161,
        "success_rate": 0.4755700325732899
    }
}