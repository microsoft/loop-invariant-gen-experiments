{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i;\n    int k;\n    k = unknown_int();\n    if (!(0 <= k && k <= 10)) return 0;\n    for (i = 0; i < LARGE_INT*k; i += k) ;\n    {;\n//@ assert(i == LARGE_INT*k);\n}\n\n    return 0;\n}",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i;\n    int k;\n    k = unknown_int();\n    if (!(0 <= k && k <= 10)) return 0;\n    for (i = 0; i < LARGE_INT*k; i += k) ;\n    {;\n//@ assert(i == LARGE_INT*k);\n}\n\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- The macro `assume` takes a boolean expression and returns 0 if the expression is false.\n- The macro `LARGE_INT` is a positive integer constant.\n- The function `unknown_int` returns an integer value.\n- The variable `i` is an integer.\n- The variable `k` is an integer.\n- The value of `k` is returned by the function `unknown_int`.\n- The value of `k` is between 0 and 10 (inclusive).\n\nLoop condition:\n- The loop continues as long as `i` is less than `LARGE_INT*k`.\n\nPost-condition:\n- The assertion `i == LARGE_INT*k` holds true after the loop terminates.\n\nLoop invariants:\n- Since `k` is between 0 and 10 (inclusive), we can infer that `LARGE_INT*k` is between 0 and 10000000 (inclusive). Therefore, we can add the following invariant before the loop:\n```\n/*@ loop invariant 0 <= i <= 10000000;*/\n```\n- In every iteration of the loop, `i` is incremented by `k`. Therefore, we can add the following invariant inside the loop:\n```\n/*@ loop invariant 0 <= i <= 10000000;\n    loop invariant i % k == 0; */\n```\n- The loop terminates when `i` becomes equal to `LARGE_INT*k`. Therefore, we can add the following invariant after the loop:\n```\n/*@ loop invariant i == i_old + k*n;\n    loop invariant 0 <= i <= 10000000;\n    loop invariant i_old == LARGE_INT*(k-1);\n    loop invariant i >= i_old;\n    loop invariant i % k == 0; */\n```\nHere, `i_old` is the value of `i` at the beginning of the loop and `n` is the number of iterations of the loop. The first invariant ensures that `i` is equal to `LARGE_INT*k` at the end of the loop. The second invariant ensures that `i` is between 0 and 10000000 at all times. The third invariant ensures that the initial value of `i` is equal to `LARGE_INT*(k-1)`. The fourth invariant ensures that `i` is always greater than or equal to the initial value of `i`. The fifth invariant ensures that `i` is always a multiple of `k`.",
            "Pre-conditions and Variable Assignments:\n- The program does not have any pre-conditions.\n- `i` and `k` are assigned integer values.\n- `k` is assigned a value returned by an external function `unknown_int()`.\n- The program checks if `k` is between 0 and 10 (inclusive).\n\nLoop Condition:\n- The loop condition is `i < LARGE_INT*k`.\n\nPost-condition:\n- The post-condition is `i == LARGE_INT*k`.\n\nLoop Invariants:\n- `0 <= k <= 10` (from the pre-condition).\n- `0 <= i <= LARGE_INT*k` (since `i` starts from 0 and increments by `k` in each iteration).\n- `i % k == 0` (since `i` increments by `k` in each iteration, it must be a multiple of `k`).\n- `i == LARGE_INT*k ==> i % k == 0` (since the post-condition is implied by the loop invariants, we can use implication here).\n\nPutting all the loop invariants together, we get:\n```\n/*@ \n    loop invariant 0 <= k <= 10;\n    loop invariant 0 <= i <= LARGE_INT*k;\n    loop invariant i % k == 0;\n    loop invariant i == LARGE_INT*k ==> i % k == 0;\n*/\n```",
            "First, let's analyze the loop body and the loop condition. The loop body is empty, and the loop condition is `i < LARGE_INT*k`. \n\nNext, let's consider the pre-conditions and variable assignments. The only variable assignment is `k = unknown_int()`, where `unknown_int()` is a function that returns a non-deterministic integer value. The only pre-condition is `0 <= k && k <= 10`.\n\nNow, let's derive the loop invariants. \n\nBefore the loop execution, we can state that `i = 0`, since `i` is initialized to 0 before the loop. We can also state that `0 <= k <= 10`, since `k` is non-deterministic, but we know that it satisfies the pre-condition `0 <= k && k <= 10`.\n\nIn every iteration of the loop, we can state that `0 <= i <= LARGE_INT*k`, since `i` is incremented by `k` in each iteration and starts at 0. We can also state that `0 <= k <= 10`, since `k` is not modified inside the loop.\n\nAfter the loop termination, we can state that `i = LARGE_INT*k`, since the loop condition is `i < LARGE_INT*k` and the loop terminates when the condition is false. We can also state that `0 <= k <= 10`, since `k` is not modified inside the loop.\n\nPutting it all together, we get the following loop invariants:\n\n```\n//@ loop invariant i == 0;\n//@ loop invariant 0 <= k <= 10;\n//@ loop invariant 0 <= i <= LARGE_INT*k;\n//@ loop invariant i == LARGE_INT*k ==> 0 <= k <= 10;\n``` \n\nNote that we used an implication for the last loop invariant to take into account the conditional nature of the assertion.",
            "Pre-conditions:\n- The `unknown_int()` function returns an integer `k` such that `0 <= k <= 10`.\n\nVariable assignments:\n- `k` is assigned the value returned by `unknown_int()`.\n\nLoop condition:\n- `i < LARGE_INT*k`\n\nPost-condition:\n- `i` is equal to `LARGE_INT*k`.\n\nLoop invariants:\n- `0 <= k <= 10` (pre-condition)\n- `i >= 0`\n- `i % k == 0`\n- `i <= LARGE_INT*k`\n- `i == j*k` (where `j` is an integer such that `0 <= j <= LARGE_INT`)\n\nExplanation:\n- The first invariant is the pre-condition.\n- The second invariant `i >= 0` holds before and after the loop, as `i` is initialized to 0 and incremented by `k` in each iteration of the loop.\n- The third invariant `i % k == 0` holds in every iteration of the loop, as `i` is incremented by `k` in each iteration.\n- The fourth invariant `i <= LARGE_INT*k` holds before and after the loop, as `i` is incremented by `k` in each iteration and the loop terminates when `i` becomes equal to `LARGE_INT*k`.\n- The fifth invariant `i == j*k` holds before and after the loop, as `i` is initialized to 0 and incremented by `k` in each iteration of the loop, so `i` is always a multiple of `k`.\n\nPutting all the loop invariants together:\n```\n/*@ \n    loop invariant 0 <= k <= 10;\n    loop invariant i >= 0;\n    loop invariant i % k == 0;\n    loop invariant i <= LARGE_INT*k;\n    loop invariant i == j*k;\n*/\n```\nNote: We do not need to use implication in this case as there is no conditional statement inside the loop.",
            "Pre-conditions and variable assignments:\n- The macro `assume(e)` takes a boolean expression `e` and returns 0 if `e` is false.\n- The macro `LARGE_INT` is defined as 1000000.\n- The function `unknown_int()` returns an integer value.\n- The variable `i` is an integer and is initialized to 0.\n- The variable `k` is an integer and is assigned the value of `unknown_int()`.\n- The condition `!(0 <= k && k <= 10)` is checked. If it is true, the program returns 0.\n\nLoop condition:\n- The loop condition is `i < LARGE_INT*k`.\n\nPost-condition:\n- The value of `i` should be `LARGE_INT*k`.\n\nLoop invariants:\n1. Before loop execution:\n- `0 <= k <= 10` (from the condition at the beginning of the program).\n- `i == 0` (since `i` is initialized to 0).\n\n2. In every iteration of the loop:\n- `0 <= k <= 10` (since `k` is not modified in the loop).\n- `0 <= i <= LARGE_INT*k` (since `i` is incremented by `k` in each iteration).\n- `i % k == 0` (since `i` is incremented by `k` in each iteration).\n- `i/LARGE_INT == 0` (since `i` is less than `LARGE_INT*k` in each iteration).\n\n3. After loop termination:\n- `(i == LARGE_INT*k) ==> (0 <= k <= 10)` (since the condition `!(0 <= k && k <= 10)` is checked before the loop).\n- `i == LARGE_INT*k` (since that is the post-condition).\n\nPutting it together, we get the following loop invariants:\n```\n/*@ \n    loop invariant 0 <= k <= 10;\n    loop invariant i == 0;\n    loop invariant 0 <= k <= 10;\n    loop invariant 0 <= i <= LARGE_INT*k;\n    loop invariant i % k == 0;\n    loop invariant i/LARGE_INT == 0;\n    loop invariant (i == LARGE_INT*k) ==> (0 <= k <= 10);\n    loop invariant i == LARGE_INT*k;\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@ loop invariant 0 <= i <= 10000000;*/",
            "/*@ \n    loop invariant 0 <= k <= 10;\n    loop invariant 0 <= i <= LARGE_INT*k;\n    loop invariant i % k == 0;\n    loop invariant i == LARGE_INT*k ==> i % k == 0;\n*/",
            "//@ loop invariant i == 0;\n//@ loop invariant 0 <= k <= 10;\n//@ loop invariant 0 <= i <= LARGE_INT*k;\n//@ loop invariant i == LARGE_INT*k ==> 0 <= k <= 10;",
            "/*@ \n    loop invariant 0 <= k <= 10;\n    loop invariant i >= 0;\n    loop invariant i % k == 0;\n    loop invariant i <= LARGE_INT*k;\n    loop invariant i == j*k;\n*/",
            "/*@ \n    loop invariant 0 <= k <= 10;\n    loop invariant i == 0;\n    loop invariant 0 <= k <= 10;\n    loop invariant 0 <= i <= LARGE_INT*k;\n    loop invariant i % k == 0;\n    loop invariant i/LARGE_INT == 0;\n    loop invariant (i == LARGE_INT*k) ==> (0 <= k <= 10);\n    loop invariant i == LARGE_INT*k;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "/*@ loop invariant 0 <= i <= 10000000;*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 10000000 is established but not preserved.\nAssertion i == 1000000 * k: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i;\n    int k;\n    k = unknown_int();\n    if (!(0 <= k && k <= 10)) return 0;\n    /*@\n\n*/\nfor (i = 0; i < LARGE_INT*k; i += k) ;\n    {;\n//@ assert(i == LARGE_INT*k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant 0 <= k <= 10;\n    loop invariant 0 <= i <= LARGE_INT*k;\n    loop invariant i % k == 0;\n    loop invariant i == LARGE_INT*k ==> i % k == 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= k <= 10 is partially proven to be inductive.\nloop invariant 0 <= i <= LARGE_INT*k is partially proven to be inductive.\nloop invariant i % k == 0 is preserved but not established.\nloop invariant i == LARGE_INT*k ==> i % k == 0 is partially proven to be inductive.\nAssertion i == 1000000 * k: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i;\n    int k;\n    k = unknown_int();\n    if (!(0 <= k && k <= 10)) return 0;\n    /*@\nloop invariant i1: 0 <= k <= 10;\n\n\n\n*/\nfor (i = 0; i < LARGE_INT*k; i += k) ;\n    {;\n//@ assert(i == LARGE_INT*k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "//@ loop invariant i == 0;\n//@ loop invariant 0 <= k <= 10;\n//@ loop invariant 0 <= i <= LARGE_INT*k;\n//@ loop invariant i == LARGE_INT*k ==> 0 <= k <= 10;",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i == 0 is established but not preserved.\nloop invariant 0 <= k <= 10 is partially proven to be inductive.\nloop invariant 0 <= i <= LARGE_INT*k is partially proven to be inductive.\nloop invariant i == LARGE_INT*k ==> 0 <= k <= 10 is partially proven to be inductive.\nAssertion i == 1000000 * k: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i;\n    int k;\n    k = unknown_int();\n    if (!(0 <= k && k <= 10)) return 0;\n    /*@\n\nloop invariant i2: 0 <= k <= 10;\n\nloop invariant i4: i == LARGE_INT*k ==> 0 <= k <= 10;\n*/\nfor (i = 0; i < LARGE_INT*k; i += k) ;\n    {;\n//@ assert(i == LARGE_INT*k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "/*@ \n    loop invariant 0 <= k <= 10;\n    loop invariant i >= 0;\n    loop invariant i % k == 0;\n    loop invariant i <= LARGE_INT*k;\n    loop invariant i == j*k;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: unbound logic variable j. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i;\n    int k;\n    k = unknown_int();\n    if (!(0 <= k && k <= 10)) return 0;\n    /*@\nloop invariant i1: 0 <= k <= 10;\nloop invariant i2: i >= 0;\n\n\n\n*/\nfor (i = 0; i < LARGE_INT*k; i += k) ;\n    {;\n//@ assert(i == LARGE_INT*k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "/*@ \n    loop invariant 0 <= k <= 10;\n    loop invariant i == 0;\n    loop invariant 0 <= k <= 10;\n    loop invariant 0 <= i <= LARGE_INT*k;\n    loop invariant i % k == 0;\n    loop invariant i/LARGE_INT == 0;\n    loop invariant (i == LARGE_INT*k) ==> (0 <= k <= 10);\n    loop invariant i == LARGE_INT*k;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= k <= 10 is partially proven to be inductive.\nloop invariant i == 0 is partially proven to be inductive.\nloop invariant 0 <= i <= LARGE_INT*k is partially proven to be inductive.\nloop invariant i % k == 0 is preserved but not established.\nloop invariant i/LARGE_INT == 0 is partially proven to be inductive.\nloop invariant (i == LARGE_INT*k) ==> (0 <= k <= 10) is partially proven to be inductive.\nloop invariant i == LARGE_INT*k is preserved but not established.\nAssertion i == 1000000 * k: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i;\n    int k;\n    k = unknown_int();\n    if (!(0 <= k && k <= 10)) return 0;\n    /*@\nloop invariant i1: 0 <= k <= 10;\n\n\n\n\nloop invariant i6: (i == LARGE_INT*k) ==> (0 <= k <= 10);\n\n*/\nfor (i = 0; i < LARGE_INT*k; i += k) ;\n    {;\n//@ assert(i == LARGE_INT*k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 20: unbound logic variable j. Ignoring loop annotation",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i;\n    int k;\n    k = unknown_int();\n    if (!(0 <= k && k <= 10)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= 10000000;\nloop invariant i2: 0 <= k <= 10;\nloop invariant i3: 0 <= i <= LARGE_INT*k;\nloop invariant i4: i % k == 0;\nloop invariant i5: i == LARGE_INT*k ==> i % k == 0;\nloop invariant i6: i == 0;\nloop invariant i7: i == LARGE_INT*k ==> 0 <= k <= 10;\nloop invariant i8: i >= 0;\nloop invariant i9: i <= LARGE_INT*k;\nloop invariant i10: i == j*k;\nloop invariant i11: i/LARGE_INT == 0;\nloop invariant i12: (i == LARGE_INT*k) ==> (0 <= k <= 10);\nloop invariant i13: i == LARGE_INT*k;\n*/\nfor (i = 0; i < LARGE_INT*k; i += k) ;\n    {;\n//@ assert(i == LARGE_INT*k);\n}\n\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 8,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i;\n    int k;\n    k = unknown_int();\n    if (!(0 <= k && k <= 10)) return 0;\n    /*@\n\nloop invariant i2: 0 <= k <= 10;\n\n\n\n\nloop invariant i7: i == LARGE_INT*k ==> 0 <= k <= 10;\nloop invariant i8: i >= 0;\n\n\n\nloop invariant i12: (i == LARGE_INT*k) ==> (0 <= k <= 10);\n\n*/\nfor (i = 0; i < LARGE_INT*k; i += k) ;\n    {;\n//@ assert(i == LARGE_INT*k);\n}\n\n    return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c"
        ],
        "skipped": [],
        "total": 132,
        "success_count": 55,
        "failure_count": 77,
        "success_rate": 0.4166666666666667
    }
}