{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern int unknown1();\n\nint main() {\n\n  int i = unknown1();\n  int j = unknown1();\n  \n  int x = i;\n  int y = j;\n \n  while(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\t{;\n//@ assert(y==0);\n}\n\n}\n",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nextern int unknown1();\n\nint main() {\n\n  int i = unknown1();\n  int j = unknown1();\n  \n  int x = i;\n  int y = j;\n \n  while(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\t{;\n//@ assert(y==0);\n}\n\n}\n\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- None\n\nVariable Assignments:\n- i = unknown1()\n- j = unknown1()\n- x = i\n- y = j\n\nLoop Condition:\n- x!=0\n\nPost-condition:\n- y==0 (if i==j)\n\nLoop Invariants:\n- i >= 0\n- j >= 0\n- x >= 0\n- y >= 0\n- i == \\old(i)\n- j == \\old(j)\n- x >= 0 && x <= i\n- y == j-x\n- (x==0 ==> y==0)\n\nExplanation:\n- The loop starts with x = i and decrements it by 1 in each iteration. Therefore, x >= 0 and x <= i.\n- The value of y is updated in each iteration as y = j - x. Therefore, y >= 0.\n- Since there are no assignments to i and j inside the loop, their values remain the same throughout the loop. Hence, i == \\old(i) and j == \\old(j).\n- Since the loop terminates when x becomes 0, we need to ensure that y becomes 0 at this point. Therefore, (x==0 ==> y==0).\n- Combining the above invariants, we get y == j-x and (x==0 ==> y==0).\n- Since i and j are non-deterministic, we cannot make any assumptions about their initial values. Therefore, i >= 0 and j >= 0.\n- Finally, since y is updated based on x, we know that y <= x <= i. Therefore, x >= 0 && x <= i and y >= 0.\n\nPutting it all together:\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant j >= 0;\n    loop invariant x >= 0 && x <= i;\n    loop invariant y == j-x;\n    loop invariant i == \\old(i);\n    loop invariant j == \\old(j);\n    loop invariant (x==0 ==> y==0);\n*/\n```",
            "Pre-conditions:\n- None\n\nVariable assignments:\n- i is assigned the value returned by unknown1() function.\n- j is assigned the value returned by unknown1() function.\n- x is assigned the value of i.\n- y is assigned the value of j.\n\nLoop condition:\n- x!=0\n\nLoop invariants:\n- Before the loop execution:\n    - None\n\n- In every iteration of the loop:\n    - x >= 0\n    - y >= 0\n    - x + y = i + j\n    - x <= i\n    - y <= j\n    \n    Explanation: \n    - x >= 0 and y >= 0 ensure that x and y are always greater than or equal to zero, which is necessary because they are decremented in each iteration of the loop.\n    - x + y = i + j is a constant relation that holds true throughout the loop execution, because at each iteration of the loop, x and y are both decremented by 1, thus maintaining the sum of i+j.\n    - x <= i and y <= j are upper bounds on the values of x and y, respectively. x is initialized to i, so it cannot exceed i. Similarly, y is initialized to j, so it cannot exceed j.\n    \n- After the loop termination:\n    - x == 0\n    - i == j ==> y == 0\n    \n    Explanation:\n    - x == 0 is the loop termination condition and is necessary because the loop continues until x becomes 0.\n    - i == j ==> y == 0 is an implication that takes care of the conditional nature of the code. The assertion y == 0 is true only if i == j.",
            "Pre-conditions:\n- None.\n\nVariable assignments:\n- i is assigned the result of unknown1().\n- j is assigned the result of unknown1().\n- x is assigned the value of i.\n- y is assigned the value of j.\n\nLoop condition:\n- The loop continues as long as x is not equal to 0.\n\nLoop invariants:\n- Before the loop: None.\n- In every iteration of the loop: \n    - x is decremented by 1.\n    - y is decremented by 1.\n    - x is less than or equal to i.\n    - y is less than or equal to j.\n- After the loop termination:\n    - x is equal to 0.\n    - x plus the absolute difference between i and j is equal to y.\n    - i is equal to j implies that y is equal to 0.\n\nNote that we need to use implication to handle the conditional nature of the assertion. \n\nPutting it all together, the loop invariants are:\n\n```\n/*@ \n    loop invariant x <= i;\n    loop invariant y <= j;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x + abs(i-j) == y;\n    loop invariant i != j ==> y >= 0;\n*/\n```",
            "Pre-conditions:\n- There are no pre-conditions for this program.\n\nVariable assignments:\n- `i` is assigned the value of `unknown1()`.\n- `j` is assigned the value of `unknown1()`.\n- `x` is assigned the value of `i`.\n- `y` is assigned the value of `j`.\n\nLoop condition:\n- The loop continues as long as `x` is not equal to 0.\n\nPost-condition:\n- If `i` is equal to `j`, then `y` is equal to 0.\n\nLoop invariants:\n- `i` and `j` are non-negative integers.\n- `x` and `y` are non-negative integers and at the beginning of each iteration of the loop, `x` is no greater than its initial value `i` and `y` is no greater than its initial value `j`.\n- In each iteration of the loop, the difference between `x` and `y` is equal to the difference between their initial values `i` and `j`.\n- After the loop termination, if `i` is equal to `j`, then `y` is equal to 0.\n\nPutting it all together, the loop invariants are:\n```\n/*@ \n    loop invariant i >= 0 && j >= 0;\n    loop invariant x >= 0 && y >= 0;\n    loop invariant x <= i && y <= j;\n    loop invariant x - y == i - j;\n    loop assigns x, y;\n*/\nwhile(x!=0) {\n    x--;\n    y--;\n}\n/*@ \n    loop invariant i >= 0 && j >= 0;\n    loop invariant x >= 0 && y >= 0;\n    loop invariant x <= i && y <= j;\n    loop invariant x - y == i - j;\n    loop assigns x, y;\n*/\nif(i==j) {\n    //@ assert y==0;\n}\n```",
            "Pre-conditions:\n- The program does not have any pre-conditions.\n- The program defines a macro `assume(e)` that returns 0 if the condition `e` is false.\n\nVariable Assignments:\n- The program initializes two variables `i` and `j` using the function `unknown1()`.\n- It initializes two variables `x` and `y` with the values of `i` and `j` respectively.\n\nLoop Condition:\n- The while loop iterates as long as `x` is not equal to 0.\n\nPost-condition:\n- The program asserts that if `i` is equal to `j`, then `y` is equal to 0.\n\nLoop Invariants:\n- Since `i` and `j` are initialized with non-deterministic values, we do not know their bounds. Therefore, we cannot use any bounds for these variables.\n- Before the loop execution, the value of `x` is equal to the value of `i` and the value of `y` is equal to the value of `j`. Therefore, we can use the following loop invariants:\n```\n/*@ \n    loop invariant x >= 0 && y >= 0;\n    loop invariant x <= i && y <= j;\n*/\n```\n- In every iteration of the loop, the value of `x` is decremented by 1 and the value of `y` is also decremented by 1. Therefore, we can use the following loop invariant:\n```\n/*@ \n    loop invariant x + y == i + j;\n*/\n```\n- After the loop termination, if `i` is equal to `j`, then `x` must be equal to 0. Therefore, we can use the following loop invariant:\n```\n/*@ \n    loop invariant i == j ==> x == 0;\n*/\n```\n- Since the assertion is guarded by a condition `if(i==j)`, we can use the following loop invariant:\n```\n/*@ \n    loop invariant !(i == j) || y == 0;\n*/\n```\n\nPutting all the loop invariants together, we get:\n```\n#define assume(e) if(!(e)) return 0;\n\nextern int unknown1();\n\nint main() {\n\n  int i = unknown1();\n  int j = unknown1();\n  \n  int x = i;\n  int y = j;\n \n  /*@ \n    loop invariant x >= 0 && y >= 0;\n    loop invariant x <= i && y <= j;\n    loop invariant x + y == i + j;\n    loop invariant i == j ==> x == 0;\n    loop invariant !(i == j) || y == 0;\n  */\n  while(x!=0) {\n    x--;\n    y--;\n  }\n  //@ assert !(i == j) || y == 0;\n}\n```\n\nThese loop invariants ensure that the post-condition `if(i==j) { y==0; }` is satisfied."
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant i >= 0;\n    loop invariant j >= 0;\n    loop invariant x >= 0 && x <= i;\n    loop invariant y == j-x;\n    loop invariant i == \\old(i);\n    loop invariant j == \\old(j);\n    loop invariant (x==0 ==> y==0);\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- None\n\nVariable assignments:\n- i is assigned the value returned by unknown1() function.\n- j is assigned the value returned by unknown1() function.\n- x is assigned the value of i.\n- y is assigned the value of j.\n\nLoop condition:\n- x!=0\n\nLoop invariants:\n- Before the loop execution:\n    - None\n\n- In every iteration of the loop:\n    - x >= 0\n    - y >= 0\n    - x + y = i + j\n    - x <= i\n    - y <= j\n    \n    Explanation: \n    - x >= 0 and y >= 0 ensure that x and y are always greater than or equal to zero, which is necessary because they are decremented in each iteration of the loop.\n    - x + y = i + j is a constant relation that holds true throughout the loop execution, because at each iteration of the loop, x and y are both decremented by 1, thus maintaining the sum of i+j.\n    - x <= i and y <= j are upper bounds on the values of x and y, respectively. x is initialized to i, so it cannot exceed i. Similarly, y is initialized to j, so it cannot exceed j.\n    \n- After the loop termination:\n    - x == 0\n    - i == j ==> y == 0\n    \n    Explanation:\n    - x == 0 is the loop termination condition and is necessary because the loop continues until x becomes 0.\n    - i == j ==> y == 0 is an implication that takes care of the conditional nature of the code. The assertion y == 0 is true only if i == j."
            ],
            "/*@ \n    loop invariant x <= i;\n    loop invariant y <= j;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x + abs(i-j) == y;\n    loop invariant i != j ==> y >= 0;\n*/",
            "/*@ \n    loop invariant i >= 0 && j >= 0;\n    loop invariant x >= 0 && y >= 0;\n    loop invariant x <= i && y <= j;\n    loop invariant x - y == i - j;\n    loop assigns x, y;\n*/\nwhile(x!=0) {\n    x--;\n    y--;\n}\n/*@ \n    loop invariant i >= 0 && j >= 0;\n    loop invariant x >= 0 && y >= 0;\n    loop invariant x <= i && y <= j;\n    loop invariant x - y == i - j;\n    loop assigns x, y;\n*/\nif(i==j) {\n    //@ assert y==0;\n}",
            "/*@ \n    loop invariant x >= 0 && y >= 0;\n    loop invariant x <= i && y <= j;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 5,
                "annotations": "/*@ \n    loop invariant i >= 0;\n    loop invariant j >= 0;\n    loop invariant x >= 0 && x <= i;\n    loop invariant y == j-x;\n    loop invariant i == \\old(i);\n    loop invariant j == \\old(j);\n    loop invariant (x==0 ==> y==0);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 18: \\old undefined in this context. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nextern int unknown1();\n\nint main() {\n\n  int i = unknown1();\n  int j = unknown1();\n  \n  int x = i;\n  int y = j;\n \n  /*@\n\n\n\n\n\n\n\n*/\nwhile(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\t{;\n//@ assert(y==0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- None\n\nVariable assignments:\n- i is assigned the value returned by unknown1() function.\n- j is assigned the value returned by unknown1() function.\n- x is assigned the value of i.\n- y is assigned the value of j.\n\nLoop condition:\n- x!=0\n\nLoop invariants:\n- Before the loop execution:\n    - None\n\n- In every iteration of the loop:\n    - x >= 0\n    - y >= 0\n    - x + y = i + j\n    - x <= i\n    - y <= j\n    \n    Explanation: \n    - x >= 0 and y >= 0 ensure that x and y are always greater than or equal to zero, which is necessary because they are decremented in each iteration of the loop.\n    - x + y = i + j is a constant relation that holds true throughout the loop execution, because at each iteration of the loop, x and y are both decremented by 1, thus maintaining the sum of i+j.\n    - x <= i and y <= j are upper bounds on the values of x and y, respectively. x is initialized to i, so it cannot exceed i. Similarly, y is initialized to j, so it cannot exceed j.\n    \n- After the loop termination:\n    - x == 0\n    - i == j ==> y == 0\n    \n    Explanation:\n    - x == 0 is the loop termination condition and is necessary because the loop continues until x becomes 0.\n    - i == j ==> y == 0 is an implication that takes care of the conditional nature of the code. The assertion y == 0 is true only if i == j.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 5,
                "annotations": "/*@ \n    loop invariant x <= i;\n    loop invariant y <= j;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x + abs(i-j) == y;\n    loop invariant i != j ==> y >= 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 18: unbound logic function abs. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nextern int unknown1();\n\nint main() {\n\n  int i = unknown1();\n  int j = unknown1();\n  \n  int x = i;\n  int y = j;\n \n  /*@\nloop invariant i1: x <= i;\nloop invariant i2: y <= j;\n\n\n\n\n*/\nwhile(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\t{;\n//@ assert(y==0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant i >= 0 && j >= 0;\n    loop invariant x >= 0 && y >= 0;\n    loop invariant x <= i && y <= j;\n    loop invariant x - y == i - j;\n    loop assigns x, y;\n*/\nwhile(x!=0) {\n    x--;\n    y--;\n}\n/*@ \n    loop invariant i >= 0 && j >= 0;\n    loop invariant x >= 0 && y >= 0;\n    loop invariant x <= i && y <= j;\n    loop invariant x - y == i - j;\n    loop assigns x, y;\n*/\nif(i==j) {\n    //@ assert y==0;\n}",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 0 && j >= 0 is preserved but not established.\nloop invariant x >= 0 && y >= 0 is established but not preserved.\nloop invariant x <= i && y <= j is partially proven to be inductive.\nloop invariant x - y == i - j is partially proven to be inductive.\nAssertion y == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nextern int unknown1();\n\nint main() {\n\n  int i = unknown1();\n  int j = unknown1();\n  \n  int x = i;\n  int y = j;\n \n  /*@\n\n\nloop invariant i3: x <= i && y <= j;\nloop invariant i4: x - y == i - j;\n*/\nwhile(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\t{;\n//@ assert(y==0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 0 && y >= 0;\n    loop invariant x <= i && y <= j;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 && y >= 0 is neither established nor preserved.\nloop invariant x <= i && y <= j is partially proven to be inductive.\nAssertion y == 0: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nextern int unknown1();\n\nint main() {\n\n  int i = unknown1();\n  int j = unknown1();\n  \n  int x = i;\n  int y = j;\n \n  /*@\n\nloop invariant i2: x <= i && y <= j;\n*/\nwhile(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\t{;\n//@ assert(y==0);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 18: \\old undefined in this context. Ignoring loop annotation",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n\nextern int unknown1();\n\nint main() {\n\n  int i = unknown1();\n  int j = unknown1();\n  \n  int x = i;\n  int y = j;\n \n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: j >= 0;\nloop invariant i3: x >= 0 && x <= i;\nloop invariant i4: y == j-x;\nloop invariant i5: i == \\old(i);\nloop invariant i6: j == \\old(j);\nloop invariant i7: (x==0 ==> y==0);\nloop invariant i8: x <= i;\nloop invariant i9: y <= j;\nloop invariant i10: x >= 0;\nloop invariant i11: y >= 0;\nloop invariant i12: x + abs(i-j) == y;\nloop invariant i13: i != j ==> y >= 0;\nloop invariant i14: i >= 0 && j >= 0;\nloop invariant i15: x >= 0 && y >= 0;\nloop invariant i16: x <= i && y <= j;\nloop invariant i17: x - y == i - j;\n*/\nwhile(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\t{;\n//@ assert(y==0);\n}\n\n}\n",
        "combined_annotation_num_solver_calls": 8,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nextern int unknown1();\n\nint main() {\n\n  int i = unknown1();\n  int j = unknown1();\n  \n  int x = i;\n  int y = j;\n \n  /*@\n\n\n\n\n\n\n\nloop invariant i8: x <= i;\nloop invariant i9: y <= j;\n\n\n\n\n\n\nloop invariant i16: x <= i && y <= j;\nloop invariant i17: x - y == i - j;\n*/\nwhile(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\t{;\n//@ assert(y==0);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c"
        ],
        "skipped": [],
        "total": 167,
        "success_count": 69,
        "failure_count": 98,
        "success_rate": 0.41317365269461076
    }
}