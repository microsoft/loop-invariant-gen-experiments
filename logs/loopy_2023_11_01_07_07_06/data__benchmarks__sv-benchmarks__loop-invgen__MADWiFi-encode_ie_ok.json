{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  for (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}\n",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  for (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}\n\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- `leader_len`, `bufsize`, and `ielen` are initialized to some non-negative integer values less than `LARGE_INT`.\n\nLoop condition:\n- `i < ielen && bufsize > 2`\n\nLoop invariants:\n```\n/*@ \n    loop invariant 0 <= p <= bufsize_0;\n    loop invariant bufsize_0 >= bufsize >= 0;\n    loop invariant i >= 0;\n    loop invariant i <= ielen;\n    loop invariant bufsize_0 >= 2*ielen ==> p+2*(ielen-i) <= bufsize_0;\n    loop invariant !(bufsize_0 >= 2*ielen) ==> p+2*(ielen-i) <= bufsize_0+2;\n*/\n```\nExplanation:\n- The first loop invariant ensures that `p` is always within the bounds of the buffer.\n- The second loop invariant ensures that `bufsize` is always non-negative and does not exceed the initial value of `bufsize_0`.\n- The third loop invariant ensures that `i` is always non-negative.\n- The fourth loop invariant ensures that `i` does not exceed the initial value of `ielen`.\n- The fifth loop invariant ensures that if `bufsize_0` is large enough to accommodate all iterations of the loop, then `p` does not exceed the buffer size at the end of the loop.\n- The sixth loop invariant ensures that if `bufsize_0` is not large enough to accommodate all iterations of the loop, then `p` does not exceed the buffer size plus 2 at the end of the loop. \n\nNote:\n- Since the values of `leader_len` and `ielen` are not changing inside the loop, we do not need to add any loop invariants for them.\n- The assertion inside the loop is not guarded by any condition, so we do not need to use an implication for it.",
            "Pre-conditions:\n- `leader_len`, `bufsize` and `ielen` are initialized with values returned by the `unknown_int()` function.\n- `leader_len`, `bufsize` and `ielen` are less than `LARGE_INT`.\n- `leader_len`, `bufsize` and `ielen` are greater than 0.\n- `bufsize` is greater than or equal to `leader_len`.\n\nLoop Condition:\n- `i < ielen && bufsize > 2`\n\nLoop Invariants:\n```\n//@ assert(leader_len < LARGE_INT);\n//@ assert(bufsize < LARGE_INT);\n//@ assert(ielen < LARGE_INT);\n//@ assert(leader_len > 0);\n//@ assert(bufsize > 0);\n//@ assert(ielen > 0);\n//@ assert(bufsize >= leader_len);\n\n/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant bufsize >= 2*i;\n    loop invariant bufsize <= bufsize_0;\n    loop invariant p <= bufsize_0;\n    loop invariant p >= leader_len;\n    loop invariant p % 2 == 0;\n    loop invariant (i == ielen) ==> (bufsize <= 2);\n*/\n```\n\nExplanation of the Loop Invariants:\n- `0 <= i <= ielen`: The loop counter `i` starts at 0 and is incremented by 1 in each iteration. The loop invariant ensures that `i` is always between 0 and `ielen` (inclusive).\n- `bufsize >= 2*i`: The loop invariant ensures that `bufsize` is always at least twice the value of `i`. This ensures that there are enough bytes left in the buffer to read `i` elements of size 2.\n- `bufsize <= bufsize_0`: The loop invariant ensures that `bufsize` never exceeds its initial value `bufsize_0`.\n- `p <= bufsize_0`: The loop invariant ensures that `p` never exceeds the initial value of `bufsize` (`bufsize_0`).\n- `p >= leader_len`: The loop invariant ensures that `p` is always greater than or equal to `leader_len`, which is the offset from the start of the buffer where the reading starts.\n- `p % 2 == 0`: The loop invariant ensures that `p` is always even, which is necessary since the buffer is being read in elements of size 2.\n- `(i == ielen) ==> (bufsize <= 2)`: This loop invariant states that if the loop has completed reading all `ielen` elements, then there are at most 2 bytes left in the buffer. This is because each iteration reads 2 bytes, and the loop condition ensures that there are at least 2 bytes left in the buffer at the start of each iteration.",
            "We can start by analyzing the loop body and the loop condition. The loop condition is `i < ielen && bufsize > 2`. The loop body contains two assertions, which we can use to derive some loop invariants. Let's start with the loop invariants that are true before the loop execution:\n\n- `0 <= p <= bufsize_0`: This invariant bounds the value of `p` between 0 and `bufsize_0` inclusive before the loop execution.\n- `2 <= bufsize <= bufsize_0`: This invariant bounds the value of `bufsize` between 2 and `bufsize_0` inclusive before the loop execution.\n- `0 <= i <= ielen`: This invariant bounds the value of `i` between 0 and `ielen` inclusive before the loop execution.\n\nNow let's consider the loop invariants that are true in every iteration of the loop:\n\n- `0 <= p <= bufsize_0`: This invariant holds true in every iteration of the loop since `p` is incremented by 2 in each iteration and `bufsize_0` remains constant.\n- `2 <= bufsize <= bufsize_0`: This invariant holds true in every iteration of the loop since `bufsize` is decremented by 2 in each iteration and `bufsize_0` remains constant.\n- `0 <= i <= ielen`: This invariant holds true in every iteration of the loop since `i` is incremented by 1 in each iteration and `ielen` remains constant.\n- `p+1 <= bufsize_0`: This invariant holds true in every iteration of the loop since `p` is incremented by 2 in each iteration.\n\nFinally, let's consider the loop invariants that are true after the loop termination:\n\n- `i == ielen || bufsize <= 2`: This invariant holds true after the loop termination since the loop condition is false and therefore `i` must be equal to `ielen` or `bufsize` must be less than or equal to 2.\n- `0 <= p <= bufsize_0`: This invariant holds true after the loop termination since the loop condition is false and therefore `p` must be less than or equal to `bufsize_0`.\n\nPutting all these loop invariants together, we get:\n\n```\n/*@ \n    loop invariant 0 <= p <= bufsize_0;\n    loop invariant 2 <= bufsize <= bufsize_0;\n    loop invariant 0 <= i <= ielen;\n    loop invariant p+1 <= bufsize_0;\n    loop invariant i == ielen || bufsize <= 2;\n    loop invariant 0 <= p <= bufsize_0 ==> i == ielen || bufsize <= 2;\n*/\n```",
            "Pre-conditions:\n- `leader_len`, `bufsize`, and `ielen` are initialized with values returned by `unknown_int()` function.\n- `leader_len`, `bufsize`, and `ielen` are less than `LARGE_INT`.\n- `leader_len`, `bufsize`, and `ielen` are greater than 0.\n\nLoop condition:\n- `i < ielen && bufsize > 2`\n\nLoop invariants:\n```\n/*@ loop invariant 0 <= p <= bufsize_0;\n    loop invariant bufsize_0 > 0;\n    loop invariant bufsize > 0;\n    loop invariant leader_len > 0;\n    loop invariant ielen > 0;\n    loop invariant leader_len < LARGE_INT;\n    loop invariant bufsize < LARGE_INT;\n    loop invariant ielen < LARGE_INT;\n    loop invariant bufsize_0 >= bufsize;\n    loop invariant bufsize_0 >= leader_len;\n    loop invariant bufsize >= leader_len;\n    loop invariant bufsize >= 2*ielen;\n    loop invariant i >= 0;\n    loop invariant i <= ielen;\n    loop invariant (i < ielen && bufsize > 2) ==> (0 <= p && p+1 < bufsize_0);\n*/\n```\n\nExplanation of the loop invariants:\n- `0 <= p <= bufsize_0`: The value of `p` is always non-negative and less than or equal to the initial value of `bufsize`.\n- `bufsize_0 > 0`: The initial value of `bufsize` is positive.\n- `bufsize > 0`: The value of `bufsize` is always positive inside the loop.\n- `leader_len > 0`: The value of `leader_len` is positive.\n- `ielen > 0`: The value of `ielen` is positive.\n- `leader_len < LARGE_INT`, `bufsize < LARGE_INT`, and `ielen < LARGE_INT`: The values of `leader_len`, `bufsize`, and `ielen` are less than `LARGE_INT`.\n- `bufsize_0 >= bufsize`: The value of `bufsize` is always less than or equal to the initial value of `bufsize`.\n- `bufsize_0 >= leader_len`: The value of `leader_len` is always less than or equal to the initial value of `bufsize`.\n- `bufsize >= leader_len`: The value of `bufsize` is always greater than or equal to `leader_len`.\n- `bufsize >= 2*ielen`: The value of `bufsize` is always greater than or equal to `2*ielen`.\n- `i >= 0`: The value of `i` is always non-negative inside the loop.\n- `i <= ielen`: The value of `i` is always less than or equal to the initial value of `ielen`.\n- `(i < ielen && bufsize > 2) ==> (0 <= p && p+1 < bufsize_0)`: This invariant is used to guard the assertions inside the loop. It states that if the loop condition is true, then the assertions are also true.",
            "Pre-conditions:\n- leader_len, bufsize, ielen are integers initialized by unknown_int() function.\n- leader_len, bufsize, ielen are less than LARGE_INT.\n- leader_len, bufsize, ielen are greater than zero.\n\nLoop condition:\n- i < ielen && bufsize > 2\n\nLoop invariants:\n```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant bufsize_0 >= bufsize >= leader_len;\nloop invariant ielen >= i >= 0;\nloop invariant bufsize_0 >= 2*ielen + leader_len;\nloop invariant (bufsize <= 2 ==> i == 0) ==> (bufsize <= 2 ==> 0 <= p <= bufsize_0);\nloop invariant bufsize > 2 ==> 0 <= p <= bufsize_0 - bufsize + 2*i;\nloop invariant bufsize <= 2 ==> 0 <= p <= bufsize_0;\nloop invariant (bufsize <= 2*ielen ==> i == 0) ==> (bufsize <= 2*ielen ==> 0 <= p <= bufsize_0);\nloop invariant bufsize > 2*ielen ==> i <= ielen;\n*/\n```\n\nExplanation:\n- The first invariant ensures that p is always between 0 and bufsize_0.\n- The second invariant ensures that bufsize is always between leader_len and bufsize_0 and leader_len is less than bufsize_0.\n- The third invariant ensures that i is always between 0 and ielen.\n- The fourth invariant ensures that bufsize_0 is always greater than or equal to 2 times ielen plus leader_len.\n- The fifth invariant ensures that if bufsize is less than or equal to 2, then i must be 0 and p must be between 0 and bufsize_0.\n- The sixth invariant ensures that if bufsize is greater than 2, then p must be between 0 and bufsize_0 - bufsize + 2 times i.\n- The seventh invariant ensures that if bufsize is less than or equal to 2, then p must be between 0 and bufsize_0.\n- The eighth invariant ensures that if bufsize is less than or equal to 2 times ielen, then i must be 0 and p must be between 0 and bufsize_0.\n- The ninth invariant ensures that if bufsize is greater than 2 times ielen, then i must be less than or equal to ielen."
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant 0 <= p <= bufsize_0;\n    loop invariant bufsize_0 >= bufsize >= 0;\n    loop invariant i >= 0;\n    loop invariant i <= ielen;\n    loop invariant bufsize_0 >= 2*ielen ==> p+2*(ielen-i) <= bufsize_0;\n    loop invariant !(bufsize_0 >= 2*ielen) ==> p+2*(ielen-i) <= bufsize_0+2;\n*/",
            "//@ assert(leader_len < LARGE_INT);\n//@ assert(bufsize < LARGE_INT);\n//@ assert(ielen < LARGE_INT);\n//@ assert(leader_len > 0);\n//@ assert(bufsize > 0);\n//@ assert(ielen > 0);\n//@ assert(bufsize >= leader_len);\n\n/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant bufsize >= 2*i;\n    loop invariant bufsize <= bufsize_0;\n    loop invariant p <= bufsize_0;\n    loop invariant p >= leader_len;\n    loop invariant p % 2 == 0;\n    loop invariant (i == ielen) ==> (bufsize <= 2);\n*/",
            "/*@ \n    loop invariant 0 <= p <= bufsize_0;\n    loop invariant 2 <= bufsize <= bufsize_0;\n    loop invariant 0 <= i <= ielen;\n    loop invariant p+1 <= bufsize_0;\n    loop invariant i == ielen || bufsize <= 2;\n    loop invariant 0 <= p <= bufsize_0 ==> i == ielen || bufsize <= 2;\n*/",
            "/*@ loop invariant 0 <= p <= bufsize_0;\n    loop invariant bufsize_0 > 0;\n    loop invariant bufsize > 0;\n    loop invariant leader_len > 0;\n    loop invariant ielen > 0;\n    loop invariant leader_len < LARGE_INT;\n    loop invariant bufsize < LARGE_INT;\n    loop invariant ielen < LARGE_INT;\n    loop invariant bufsize_0 >= bufsize;\n    loop invariant bufsize_0 >= leader_len;\n    loop invariant bufsize >= leader_len;\n    loop invariant bufsize >= 2*ielen;\n    loop invariant i >= 0;\n    loop invariant i <= ielen;\n    loop invariant (i < ielen && bufsize > 2) ==> (0 <= p && p+1 < bufsize_0);\n*/",
            "/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant bufsize_0 >= bufsize >= leader_len;\nloop invariant ielen >= i >= 0;\nloop invariant bufsize_0 >= 2*ielen + leader_len;\nloop invariant (bufsize <= 2 ==> i == 0) ==> (bufsize <= 2 ==> 0 <= p <= bufsize_0);\nloop invariant bufsize > 2 ==> 0 <= p <= bufsize_0 - bufsize + 2*i;\nloop invariant bufsize <= 2 ==> 0 <= p <= bufsize_0;\nloop invariant (bufsize <= 2*ielen ==> i == 0) ==> (bufsize <= 2*ielen ==> 0 <= p <= bufsize_0);\nloop invariant bufsize > 2*ielen ==> i <= ielen;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= p <= bufsize_0;\n    loop invariant bufsize_0 >= bufsize >= 0;\n    loop invariant i >= 0;\n    loop invariant i <= ielen;\n    loop invariant bufsize_0 >= 2*ielen ==> p+2*(ielen-i) <= bufsize_0;\n    loop invariant !(bufsize_0 >= 2*ielen) ==> p+2*(ielen-i) <= bufsize_0+2;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize_0 >= bufsize >= 0 is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant i <= ielen is partially proven to be inductive.\nloop invariant bufsize_0 >= 2*ielen ==> p+2*(ielen-i) <= bufsize_0 is partially proven to be inductive.\nloop invariant !(bufsize_0 >= 2*ielen) ==> p+2*(ielen-i) <= bufsize_0+2 is partially proven to be inductive.\nAssertion 0 <= p: Valid\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: bufsize_0 >= bufsize >= 0;\nloop invariant i3: i >= 0;\nloop invariant i4: i <= ielen;\nloop invariant i5: bufsize_0 >= 2*ielen ==> p+2*(ielen-i) <= bufsize_0;\nloop invariant i6: !(bufsize_0 >= 2*ielen) ==> p+2*(ielen-i) <= bufsize_0+2;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}\n",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "//@ assert(leader_len < LARGE_INT);\n//@ assert(bufsize < LARGE_INT);\n//@ assert(ielen < LARGE_INT);\n//@ assert(leader_len > 0);\n//@ assert(bufsize > 0);\n//@ assert(ielen > 0);\n//@ assert(bufsize >= leader_len);\n\n/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant bufsize >= 2*i;\n    loop invariant bufsize <= bufsize_0;\n    loop invariant p <= bufsize_0;\n    loop invariant p >= leader_len;\n    loop invariant p % 2 == 0;\n    loop invariant (i == ielen) ==> (bufsize <= 2);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant bufsize >= 2*i is established but not preserved.\nloop invariant bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant p >= leader_len is partially proven to be inductive.\nloop invariant p % 2 == 0 is preserved but not established.\nloop invariant (i == ielen) ==> (bufsize <= 2) is established but not preserved.\nAssertion 0 <= p: Unproven\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\n\nloop invariant i3: bufsize <= bufsize_0;\nloop invariant i4: p <= bufsize_0;\nloop invariant i5: p >= leader_len;\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "/*@ \n    loop invariant 0 <= p <= bufsize_0;\n    loop invariant 2 <= bufsize <= bufsize_0;\n    loop invariant 0 <= i <= ielen;\n    loop invariant p+1 <= bufsize_0;\n    loop invariant i == ielen || bufsize <= 2;\n    loop invariant 0 <= p <= bufsize_0 ==> i == ielen || bufsize <= 2;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant 2 <= bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant p+1 <= bufsize_0 is partially proven to be inductive.\nloop invariant i == ielen || bufsize <= 2 is preserved but not established.\nloop invariant 0 <= p <= bufsize_0 ==> i == ielen || bufsize <= 2 is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: 2 <= bufsize <= bufsize_0;\nloop invariant i3: 0 <= i <= ielen;\n\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ loop invariant 0 <= p <= bufsize_0;\n    loop invariant bufsize_0 > 0;\n    loop invariant bufsize > 0;\n    loop invariant leader_len > 0;\n    loop invariant ielen > 0;\n    loop invariant leader_len < LARGE_INT;\n    loop invariant bufsize < LARGE_INT;\n    loop invariant ielen < LARGE_INT;\n    loop invariant bufsize_0 >= bufsize;\n    loop invariant bufsize_0 >= leader_len;\n    loop invariant bufsize >= leader_len;\n    loop invariant bufsize >= 2*ielen;\n    loop invariant i >= 0;\n    loop invariant i <= ielen;\n    loop invariant (i < ielen && bufsize > 2) ==> (0 <= p && p+1 < bufsize_0);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize_0 > 0 is partially proven to be inductive.\nloop invariant bufsize > 0 is partially proven to be inductive.\nloop invariant leader_len > 0 is partially proven to be inductive.\nloop invariant ielen > 0 is partially proven to be inductive.\nloop invariant leader_len < LARGE_INT is partially proven to be inductive.\nloop invariant bufsize < LARGE_INT is partially proven to be inductive.\nloop invariant ielen < LARGE_INT is partially proven to be inductive.\nloop invariant bufsize_0 >= bufsize is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len is partially proven to be inductive.\nloop invariant bufsize >= leader_len is preserved but not established.\nloop invariant bufsize >= 2*ielen is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant i <= ielen is partially proven to be inductive.\nloop invariant (i < ielen && bufsize > 2) ==> (0 <= p && p+1 < bufsize_0) is established but not preserved.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: bufsize_0 > 0;\nloop invariant i3: bufsize > 0;\nloop invariant i4: leader_len > 0;\nloop invariant i5: ielen > 0;\nloop invariant i6: leader_len < LARGE_INT;\nloop invariant i7: bufsize < LARGE_INT;\nloop invariant i8: ielen < LARGE_INT;\nloop invariant i9: bufsize_0 >= bufsize;\nloop invariant i10: bufsize_0 >= leader_len;\n\nloop invariant i12: bufsize >= 2*ielen;\nloop invariant i13: i >= 0;\nloop invariant i14: i <= ielen;\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant bufsize_0 >= bufsize >= leader_len;\nloop invariant ielen >= i >= 0;\nloop invariant bufsize_0 >= 2*ielen + leader_len;\nloop invariant (bufsize <= 2 ==> i == 0) ==> (bufsize <= 2 ==> 0 <= p <= bufsize_0);\nloop invariant bufsize > 2 ==> 0 <= p <= bufsize_0 - bufsize + 2*i;\nloop invariant bufsize <= 2 ==> 0 <= p <= bufsize_0;\nloop invariant (bufsize <= 2*ielen ==> i == 0) ==> (bufsize <= 2*ielen ==> 0 <= p <= bufsize_0);\nloop invariant bufsize > 2*ielen ==> i <= ielen;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize_0 >= bufsize >= leader_len is preserved but not established.\nloop invariant ielen >= i >= 0 is partially proven to be inductive.\nloop invariant bufsize_0 >= 2*ielen + leader_len is partially proven to be inductive.\nloop invariant (bufsize <= 2 ==> i == 0) ==> (bufsize <= 2 ==> 0 <= p <= bufsize_0) is partially proven to be inductive.\nloop invariant bufsize > 2 ==> 0 <= p <= bufsize_0 - bufsize + 2*i is partially proven to be inductive.\nloop invariant bufsize <= 2 ==> 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant (bufsize <= 2*ielen ==> i == 0) ==> (bufsize <= 2*ielen ==> 0 <= p <= bufsize_0) is partially proven to be inductive.\nloop invariant bufsize > 2*ielen ==> i <= ielen is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\n\nloop invariant i3: ielen >= i >= 0;\nloop invariant i4: bufsize_0 >= 2*ielen + leader_len;\nloop invariant i5: (bufsize <= 2 ==> i == 0) ==> (bufsize <= 2 ==> 0 <= p <= bufsize_0);\nloop invariant i6: bufsize > 2 ==> 0 <= p <= bufsize_0 - bufsize + 2*i;\nloop invariant i7: bufsize <= 2 ==> 0 <= p <= bufsize_0;\nloop invariant i8: (bufsize <= 2*ielen ==> i == 0) ==> (bufsize <= 2*ielen ==> 0 <= p <= bufsize_0);\nloop invariant i9: bufsize > 2*ielen ==> i <= ielen;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize_0 >= bufsize >= 0 is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant i <= ielen is partially proven to be inductive.\nloop invariant bufsize_0 >= 2*ielen ==> p+2*(ielen-i) <= bufsize_0 is partially proven to be inductive.\nloop invariant !(bufsize_0 >= 2*ielen) ==> p+2*(ielen-i) <= bufsize_0+2 is partially proven to be inductive.\nloop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant bufsize >= 2*i is partially proven to be inductive.\nloop invariant bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant p >= leader_len is partially proven to be inductive.\nloop invariant p % 2 == 0 is preserved but not established.\nloop invariant (i == ielen) ==> (bufsize <= 2) is partially proven to be inductive.\nloop invariant 2 <= bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant p+1 <= bufsize_0 is partially proven to be inductive.\nloop invariant i == ielen || bufsize <= 2 is preserved but not established.\nloop invariant 0 <= p <= bufsize_0 ==> i == ielen || bufsize <= 2 is partially proven to be inductive.\nloop invariant bufsize_0 > 0 is partially proven to be inductive.\nloop invariant bufsize > 0 is partially proven to be inductive.\nloop invariant leader_len > 0 is partially proven to be inductive.\nloop invariant ielen > 0 is partially proven to be inductive.\nloop invariant leader_len < LARGE_INT is partially proven to be inductive.\nloop invariant bufsize < LARGE_INT is partially proven to be inductive.\nloop invariant ielen < LARGE_INT is partially proven to be inductive.\nloop invariant bufsize_0 >= bufsize is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len is partially proven to be inductive.\nloop invariant bufsize >= leader_len is preserved but not established.\nloop invariant bufsize >= 2*ielen is partially proven to be inductive.\nloop invariant (i < ielen && bufsize > 2) ==> (0 <= p && p+1 < bufsize_0) is partially proven to be inductive.\nloop invariant bufsize_0 >= bufsize >= leader_len is partially proven to be inductive.\nloop invariant ielen >= i >= 0 is partially proven to be inductive.\nloop invariant bufsize_0 >= 2*ielen + leader_len is partially proven to be inductive.\nloop invariant (bufsize <= 2 ==> i == 0) ==> (bufsize <= 2 ==> 0 <= p <= bufsize_0) is partially proven to be inductive.\nloop invariant bufsize > 2 ==> 0 <= p <= bufsize_0 - bufsize + 2*i is partially proven to be inductive.\nloop invariant bufsize <= 2 ==> 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant (bufsize <= 2*ielen ==> i == 0) ==> (bufsize <= 2*ielen ==> 0 <= p <= bufsize_0) is partially proven to be inductive.\nloop invariant bufsize > 2*ielen ==> i <= ielen is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: bufsize_0 >= bufsize >= 0;\nloop invariant i3: i >= 0;\nloop invariant i4: i <= ielen;\nloop invariant i5: bufsize_0 >= 2*ielen ==> p+2*(ielen-i) <= bufsize_0;\nloop invariant i6: !(bufsize_0 >= 2*ielen) ==> p+2*(ielen-i) <= bufsize_0+2;\nloop invariant i7: 0 <= i <= ielen;\nloop invariant i8: bufsize >= 2*i;\nloop invariant i9: bufsize <= bufsize_0;\nloop invariant i10: p <= bufsize_0;\nloop invariant i11: p >= leader_len;\nloop invariant i12: p % 2 == 0;\nloop invariant i13: (i == ielen) ==> (bufsize <= 2);\nloop invariant i14: 2 <= bufsize <= bufsize_0;\nloop invariant i15: p+1 <= bufsize_0;\nloop invariant i16: i == ielen || bufsize <= 2;\nloop invariant i17: 0 <= p <= bufsize_0 ==> i == ielen || bufsize <= 2;\nloop invariant i18: bufsize_0 > 0;\nloop invariant i19: bufsize > 0;\nloop invariant i20: leader_len > 0;\nloop invariant i21: ielen > 0;\nloop invariant i22: leader_len < LARGE_INT;\nloop invariant i23: bufsize < LARGE_INT;\nloop invariant i24: ielen < LARGE_INT;\nloop invariant i25: bufsize_0 >= bufsize;\nloop invariant i26: bufsize_0 >= leader_len;\nloop invariant i27: bufsize >= leader_len;\nloop invariant i28: bufsize >= 2*ielen;\nloop invariant i29: (i < ielen && bufsize > 2) ==> (0 <= p && p+1 < bufsize_0);\nloop invariant i30: bufsize_0 >= bufsize >= leader_len;\nloop invariant i31: ielen >= i >= 0;\nloop invariant i32: bufsize_0 >= 2*ielen + leader_len;\nloop invariant i33: (bufsize <= 2 ==> i == 0) ==> (bufsize <= 2 ==> 0 <= p <= bufsize_0);\nloop invariant i34: bufsize > 2 ==> 0 <= p <= bufsize_0 - bufsize + 2*i;\nloop invariant i35: bufsize <= 2 ==> 0 <= p <= bufsize_0;\nloop invariant i36: (bufsize <= 2*ielen ==> i == 0) ==> (bufsize <= 2*ielen ==> 0 <= p <= bufsize_0);\nloop invariant i37: bufsize > 2*ielen ==> i <= ielen;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}\n",
        "combined_annotation_num_solver_calls": 5,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: bufsize_0 >= bufsize >= 0;\nloop invariant i3: i >= 0;\nloop invariant i4: i <= ielen;\nloop invariant i5: bufsize_0 >= 2*ielen ==> p+2*(ielen-i) <= bufsize_0;\nloop invariant i6: !(bufsize_0 >= 2*ielen) ==> p+2*(ielen-i) <= bufsize_0+2;\nloop invariant i7: 0 <= i <= ielen;\nloop invariant i8: bufsize >= 2*i;\nloop invariant i9: bufsize <= bufsize_0;\nloop invariant i10: p <= bufsize_0;\nloop invariant i11: p >= leader_len;\n\n\nloop invariant i14: 2 <= bufsize <= bufsize_0;\n\n\n\nloop invariant i18: bufsize_0 > 0;\nloop invariant i19: bufsize > 0;\nloop invariant i20: leader_len > 0;\nloop invariant i21: ielen > 0;\nloop invariant i22: leader_len < LARGE_INT;\nloop invariant i23: bufsize < LARGE_INT;\nloop invariant i24: ielen < LARGE_INT;\nloop invariant i25: bufsize_0 >= bufsize;\nloop invariant i26: bufsize_0 >= leader_len;\n\nloop invariant i28: bufsize >= 2*ielen;\nloop invariant i29: (i < ielen && bufsize > 2) ==> (0 <= p && p+1 < bufsize_0);\n\nloop invariant i31: ielen >= i >= 0;\nloop invariant i32: bufsize_0 >= 2*ielen + leader_len;\nloop invariant i33: (bufsize <= 2 ==> i == 0) ==> (bufsize <= 2 ==> 0 <= p <= bufsize_0);\nloop invariant i34: bufsize > 2 ==> 0 <= p <= bufsize_0 - bufsize + 2*i;\nloop invariant i35: bufsize <= 2 ==> 0 <= p <= bufsize_0;\nloop invariant i36: (bufsize <= 2*ielen ==> i == 0) ==> (bufsize <= 2*ielen ==> 0 <= p <= bufsize_0);\nloop invariant i37: bufsize > 2*ielen ==> i <= ielen;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/const.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq1.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq2.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../data/benchmarks/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/even.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/mod4.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/odd.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/id_trans.c"
        ],
        "skipped": [],
        "total": 284,
        "success_count": 135,
        "failure_count": 149,
        "success_rate": 0.4753521126760563
    }
}