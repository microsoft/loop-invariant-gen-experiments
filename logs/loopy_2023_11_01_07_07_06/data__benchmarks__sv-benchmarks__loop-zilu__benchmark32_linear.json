{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark32_linear.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x==1 || x==2)) return 0;\n  while (unknown_bool()) {\n    if(x==1) x=2;\n    else if (x==2) x=1;\n  }\n  {;\n//@ assert(x<=8);\n}\n\n  return 0;\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x==1 || x==2)) return 0;\n  while (unknown_bool()) {\n    if(x==1) x=2;\n    else if (x==2) x=1;\n  }\n  {;\n//@ assert(x<=8);\n}\n\n  return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- The function `unknown_int()` returns an integer value.\n- The function `unknown_bool()` returns a Boolean value.\n\nLoop condition:\n- The loop executes as long as `unknown_bool()` returns true.\n\nVariable assignments:\n- `x` is assigned a value returned by `unknown_int()`.\n\nLoop Invariants:\n- `x` is either 1 or 2 before the loop execution. (Pre-condition)\n- If `x` is 1, then it will be 2 in the next iteration of the loop. If `x` is 2, then it will be 1 in the next iteration of the loop. (Loop body)\n- `x` is always 1 or 2 throughout the loop execution. (Combination of pre-condition and loop body)\n- If `x` is 1, then it will be 2 after an even number of iterations of the loop. If `x` is 2, then it will be 1 after an even number of iterations of the loop. (Combination of pre-condition and loop body)\n- If `x` is 1, then it will be 1 after an odd number of iterations of the loop. If `x` is 2, then it will be 2 after an odd number of iterations of the loop. (Combination of pre-condition and loop body)\n- If `x` is 1, then it will be less than or equal to 8 after the loop termination. (Assertion with guard condition `unknown_bool()`)\n\nPutting all the loop invariants together:\n```\n/*@ \n    loop invariant x==1 || x==2; // Pre-condition\n    loop invariant (x==1 ==> \\at(x, Pre)==2) && (x==2 ==> \\at(x, Pre)==1); // Loop body\n    loop invariant x==1 || x==2; // Combination of pre-condition and loop body\n    loop invariant (\\at(x, Pre)==1 && x==2) || (\\at(x, Pre)==2 && x==1); // Combination of pre-condition and loop body\n    loop invariant (\\at(x, Pre)==1 && x<=8 && !unknown_bool()) ==> x==1; // Assertion with guard condition\n    loop invariant (\\at(x, Pre)==2 && x<=8 && !unknown_bool()) ==> x==2; // Assertion with guard condition\n*/\n```",
            "Pre-conditions:\n- The program does not have any explicit pre-conditions.\n- The variable `x` is assigned a value using the function `unknown_int()`.\n\nLoop condition:\n- The loop will continue as long as the function `unknown_bool()` returns true.\n\nPost-condition:\n- The value of `x` at the end of the loop is less than or equal to 8.\n\nLoop Invariants:\n- `x` is either 1 or 2 at the start of the loop. `(x == 1 || x == 2)`\n- The value of `x` is always either 1 or 2 inside the loop. `(x == 1 || x == 2)`\n- If `x` is 1 before an iteration of the loop, then it will be 2 after that iteration. If `x` is 2 before an iteration of the loop, then it will be 1 after that iteration. `((x == 1 && \\old(x) == 1 ==> x == 2) && (x == 2 && \\old(x) == 2 ==> x == 1))`\n- The value of `x` is always less than or equal to 8 at the end of the loop, given that the loop termination condition is false. `(!unknown_bool() ==> x <= 8)`\n\nPutting it all together:\n```\n/*@ \n    loop invariant (x == 1 || x == 2);\n    loop invariant (x == 1 || x == 2);\n    loop invariant ((x == 1 && \\old(x) == 1 ==> x == 2) && (x == 2 && \\old(x) == 2 ==> x == 1));\n    loop invariant (!unknown_bool() ==> x <= 8);\n*/\n```\n\nNote: We have used the `\\old` operator to refer to the value of `x` before the current iteration of the loop. Since `x` is deterministic within the loop, we don't need to add any bounds on its values. Also, there are no other variables in the program, so we don't need to add any relations between variables.",
            "Pre-conditions:\n\n- `x` is an integer variable that contains a value returned by `unknown_int()`.\n\n\nLoop condition:\n\n- The loop will continue as long as `unknown_bool()` returns true. \n\n\nLoop invariants:\n\n- `x==1 || x==2`\n    - This is true before the loop execution because of the `if` condition at the beginning of the program.\n    - This is true in every iteration of the loop because the value of `x` is only updated inside the loop body and is only assigned the value of `1` or `2`.\n    - This is true after the loop termination because the loop only terminates when `unknown_bool()` returns false and since the value of `x` is only updated to `1` or `2` inside the loop body, `x` can only be equal to `1` or `2` at the end of the loop. \n- `x != 3`\n    - This is true before the loop execution because of the `if` condition at the beginning of the program.\n    - This is true in every iteration of the loop because the value of `x` is only updated inside the loop body and is only assigned the value of `1` or `2`.\n    - This is true after the loop termination because the loop only terminates when `unknown_bool()` returns false and since the value of `x` is only updated to `1` or `2` inside the loop body, `x` can never be equal to `3` at the end of the loop. \n- `x <= 2 || x >= 1`\n    - This is true before the loop execution because of the `if` condition at the beginning of the program.\n    - This is true in every iteration of the loop because the value of `x` is only updated inside the loop body and is only assigned the value of `1` or `2`.\n    - This is true after the loop termination because the loop only terminates when `unknown_bool()` returns false and since the value of `x` is only updated to `1` or `2` inside the loop body, `x` can only be equal to `1` or `2` at the end of the loop. \n- `(x==1) ==> (x<=2 && x!=1)`\n    - This is true before the loop execution because of the `if` condition at the beginning of the program.\n    - This is true in every iteration of the loop because the value of `x` is only updated inside the loop body and is only assigned the value of `1` or `2`.\n    - This is true after the loop termination because the loop only terminates when `unknown_bool()` returns false and since the value of `x` is only updated to `1` or `2` inside the loop body, if `x` is equal to `1` at the end of the loop, then it cannot be equal to `2` and it cannot be equal to `3`. Therefore, `x` must be less than or equal to `2` and not equal to `1`. This implies that `(x<=2 && x!=1)` is true. \n- `(x==2) ==> (x<=2 && x!=2)`\n    - This is true before the loop execution because of the `if` condition at the beginning of the program.\n    - This is true in every iteration of the loop because the value of `x` is only updated inside the loop body and is only assigned the value of `1` or `2`.\n    - This is true after the loop termination because the loop only terminates when `unknown_bool()` returns false and since the value of `x` is only updated to `1` or `2` inside the loop body, if `x` is equal to `2` at the end of the loop, then it cannot be equal to `1` and it cannot be equal to `3`. Therefore, `x` must be less than or equal to `2` and not equal to `2`. This implies that `(x<=2 && x!=2)` is true. \n\nPutting all the loop invariants together:\n\n```\n/*@ \n    loop invariant x==1 || x==2;\n    loop invariant x != 3;\n    loop invariant x <= 2 || x >= 1;\n    loop invariant (x==1) ==> (x<=2 && x!=1);\n    loop invariant (x==2) ==> (x<=2 && x!=2);\n*/\n```",
            "Pre-conditions:\n- None\n\nVariable Assignments:\n- `int x = unknown_int();`\n\nLoop Invariants:\n- `x==1 || x==2` (pre-condition for the loop)\n- `x==1 || x==2 ==> (x==1 || x==2)` (invariant that x will always be either 1 or 2)\n- `(x==1 && \\old(x)==1) ==> (x==2)` (invariant that if x is 1, it will become 2 in the loop)\n- `(x==2 && \\old(x)==2) ==> (x==1)` (invariant that if x is 2, it will become 1 in the loop)\n- `x<=8` (post-condition, guarded by the loop condition)\n\nExplanation:\n- The pre-condition for the loop is that x should be either 1 or 2. This is because the loop body changes the value of x between 1 and 2.\n- The first invariant simply states that x will always be either 1 or 2, which follows from the pre-condition.\n- The second invariant states that if x is 1, it will become 2 in the loop. This is because of the if statement inside the loop body. The implication ensures that this only holds if x was 1 in the previous iteration.\n- The third invariant is similar, but for the case when x is 2 and becomes 1 in the loop.\n- The last invariant is the post-condition, which states that x should be less than or equal to 8 at the end of the loop. This is guarded by the loop condition, which is unknown_bool(), meaning that we don't know how many times the loop will execute. Therefore, we can't say anything about the exact value of x at the end of the loop, but we can say that it will be less than or equal to 8.",
            "First, let's note the pre-conditions and variable assignments in the program:\n- x is an integer variable that is assigned the result of a call to an external function unknown_int().\n- The program has a precondition that x should be either 1 or 2, which is enforced by the if statement that checks if x is equal to 1 or 2.\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is unknown_bool(), which means that the loop may execute any number of times.\n\nBased on the program and loop condition, we can come up with the following loop invariants:\n```\n/*@ \n    loop invariant x == 1 || x == 2 || x == 3;\n    loop invariant x != 8;\n    loop invariant (x == 1 && \\old(x) == 2) ==> x <= 3;\n    loop invariant (x == 2 && \\old(x) == 1) ==> x <= 3;\n    loop invariant !(\\at(unknown_bool(), Pre)) ==> x <= 8;\n*/\n```\nLet's explain each of these loop invariants:\n- The first loop invariant states that x can only be either 1, 2, or 3. This is derived from the precondition of the program, and the fact that the loop body only changes the value of x between 1 and 2.\n- The second loop invariant states that x cannot be equal to 8. This is derived from the assertion in the program, which states that x should be less than or equal to 8.\n- The third and fourth loop invariants state that if x is changed from 1 to 2 or from 2 to 1, then x should be less than or equal to 3. This is because the loop body only allows x to be changed between 1 and 2, and if x changes from 1 to 2 or from 2 to 1, then it skips the value 3. This ensures that the maximum value of x is 3.\n- The fifth loop invariant states that if the loop condition is false, then x should be less than or equal to 8. This is because the loop only changes the value of x between 1 and 2, and if the loop condition becomes false, then x cannot be greater than 8.\n\nNote that we used the \\old() notation to refer to the value of x before the loop execution, and the \\at() notation to refer to the value of unknown_bool() in the previous iteration of the loop. Also, we used implication (==>) to take care of the conditional nature of the loop."
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant x==1 || x==2; // Pre-condition\n    loop invariant (x==1 ==> \\at(x, Pre)==2) && (x==2 ==> \\at(x, Pre)==1); // Loop body\n    loop invariant x==1 || x==2; // Combination of pre-condition and loop body\n    loop invariant (\\at(x, Pre)==1 && x==2) || (\\at(x, Pre)==2 && x==1); // Combination of pre-condition and loop body\n    loop invariant (\\at(x, Pre)==1 && x<=8 && !unknown_bool()) ==> x==1; // Assertion with guard condition\n    loop invariant (\\at(x, Pre)==2 && x<=8 && !unknown_bool()) ==> x==2; // Assertion with guard condition\n*/",
            "/*@ \n    loop invariant (x == 1 || x == 2);\n    loop invariant (x == 1 || x == 2);\n    loop invariant ((x == 1 && \\old(x) == 1 ==> x == 2) && (x == 2 && \\old(x) == 2 ==> x == 1));\n    loop invariant (!unknown_bool() ==> x <= 8);\n*/",
            "/*@ \n    loop invariant x==1 || x==2;\n    loop invariant x != 3;\n    loop invariant x <= 2 || x >= 1;\n    loop invariant (x==1) ==> (x<=2 && x!=1);\n    loop invariant (x==2) ==> (x<=2 && x!=2);\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- None\n\nVariable Assignments:\n- `int x = unknown_int();`\n\nLoop Invariants:\n- `x==1 || x==2` (pre-condition for the loop)\n- `x==1 || x==2 ==> (x==1 || x==2)` (invariant that x will always be either 1 or 2)\n- `(x==1 && \\old(x)==1) ==> (x==2)` (invariant that if x is 1, it will become 2 in the loop)\n- `(x==2 && \\old(x)==2) ==> (x==1)` (invariant that if x is 2, it will become 1 in the loop)\n- `x<=8` (post-condition, guarded by the loop condition)\n\nExplanation:\n- The pre-condition for the loop is that x should be either 1 or 2. This is because the loop body changes the value of x between 1 and 2.\n- The first invariant simply states that x will always be either 1 or 2, which follows from the pre-condition.\n- The second invariant states that if x is 1, it will become 2 in the loop. This is because of the if statement inside the loop body. The implication ensures that this only holds if x was 1 in the previous iteration.\n- The third invariant is similar, but for the case when x is 2 and becomes 1 in the loop.\n- The last invariant is the post-condition, which states that x should be less than or equal to 8 at the end of the loop. This is guarded by the loop condition, which is unknown_bool(), meaning that we don't know how many times the loop will execute. Therefore, we can't say anything about the exact value of x at the end of the loop, but we can say that it will be less than or equal to 8."
            ],
            "/*@ \n    loop invariant x == 1 || x == 2 || x == 3;\n    loop invariant x != 8;\n    loop invariant (x == 1 && \\old(x) == 2) ==> x <= 3;\n    loop invariant (x == 2 && \\old(x) == 1) ==> x <= 3;\n    loop invariant !(\\at(unknown_bool(), Pre)) ==> x <= 8;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 5,
                "annotations": "/*@ \n    loop invariant x==1 || x==2; // Pre-condition\n    loop invariant (x==1 ==> \\at(x, Pre)==2) && (x==2 ==> \\at(x, Pre)==1); // Loop body\n    loop invariant x==1 || x==2; // Combination of pre-condition and loop body\n    loop invariant (\\at(x, Pre)==1 && x==2) || (\\at(x, Pre)==2 && x==1); // Combination of pre-condition and loop body\n    loop invariant (\\at(x, Pre)==1 && x<=8 && !unknown_bool()) ==> x==1; // Assertion with guard condition\n    loop invariant (\\at(x, Pre)==2 && x<=8 && !unknown_bool()) ==> x==2; // Assertion with guard condition\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: unexpected token ')'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x==1 || x==2)) return 0;\n  /*@\nloop invariant i1: x==1 || x==2;\n\n\n\n\n*/\nwhile (unknown_bool()) {\n    if(x==1) x=2;\n    else if (x==2) x=1;\n  }\n  {;\n//@ assert(x<=8);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant (x == 1 || x == 2);\n    loop invariant (x == 1 || x == 2);\n    loop invariant ((x == 1 && \\old(x) == 1 ==> x == 2) && (x == 2 && \\old(x) == 2 ==> x == 1));\n    loop invariant (!unknown_bool() ==> x <= 8);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: unexpected token ')'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x==1 || x==2)) return 0;\n  /*@\nloop invariant i1: (x == 1 || x == 2);\n\n\n*/\nwhile (unknown_bool()) {\n    if(x==1) x=2;\n    else if (x==2) x=1;\n  }\n  {;\n//@ assert(x<=8);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x==1 || x==2;\n    loop invariant x != 3;\n    loop invariant x <= 2 || x >= 1;\n    loop invariant (x==1) ==> (x<=2 && x!=1);\n    loop invariant (x==2) ==> (x<=2 && x!=2);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x==1 || x==2 is partially proven to be inductive.\nloop invariant x != 3 is partially proven to be inductive.\nloop invariant x <= 2 || x >= 1 is partially proven to be inductive.\nloop invariant (x==1) ==> (x<=2 && x!=1) is preserved but not established.\nloop invariant (x==2) ==> (x<=2 && x!=2) is preserved but not established.\nAssertion x <= 8: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x==1 || x==2)) return 0;\n  /*@\nloop invariant i1: x==1 || x==2;\nloop invariant i2: x != 3;\nloop invariant i3: x <= 2 || x >= 1;\n\n\n*/\nwhile (unknown_bool()) {\n    if(x==1) x=2;\n    else if (x==2) x=1;\n  }\n  {;\n//@ assert(x<=8);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- None\n\nVariable Assignments:\n- `int x = unknown_int();`\n\nLoop Invariants:\n- `x==1 || x==2` (pre-condition for the loop)\n- `x==1 || x==2 ==> (x==1 || x==2)` (invariant that x will always be either 1 or 2)\n- `(x==1 && \\old(x)==1) ==> (x==2)` (invariant that if x is 1, it will become 2 in the loop)\n- `(x==2 && \\old(x)==2) ==> (x==1)` (invariant that if x is 2, it will become 1 in the loop)\n- `x<=8` (post-condition, guarded by the loop condition)\n\nExplanation:\n- The pre-condition for the loop is that x should be either 1 or 2. This is because the loop body changes the value of x between 1 and 2.\n- The first invariant simply states that x will always be either 1 or 2, which follows from the pre-condition.\n- The second invariant states that if x is 1, it will become 2 in the loop. This is because of the if statement inside the loop body. The implication ensures that this only holds if x was 1 in the previous iteration.\n- The third invariant is similar, but for the case when x is 2 and becomes 1 in the loop.\n- The last invariant is the post-condition, which states that x should be less than or equal to 8 at the end of the loop. This is guarded by the loop condition, which is unknown_bool(), meaning that we don't know how many times the loop will execute. Therefore, we can't say anything about the exact value of x at the end of the loop, but we can say that it will be less than or equal to 8.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant x == 1 || x == 2 || x == 3;\n    loop invariant x != 8;\n    loop invariant (x == 1 && \\old(x) == 2) ==> x <= 3;\n    loop invariant (x == 2 && \\old(x) == 1) ==> x <= 3;\n    loop invariant !(\\at(unknown_bool(), Pre)) ==> x <= 8;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 16: unexpected token ')'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x==1 || x==2)) return 0;\n  /*@\nloop invariant i1: x == 1 || x == 2 || x == 3;\nloop invariant i2: x != 8;\n\n\n\n*/\nwhile (unknown_bool()) {\n    if(x==1) x=2;\n    else if (x==2) x=1;\n  }\n  {;\n//@ assert(x<=8);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 15: unexpected token ')'",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x==1 || x==2)) return 0;\n  /*@\nloop invariant i1: x==1 || x==2;\nloop invariant i2: (x==1 ==> \\at(x, Pre)==2) && (x==2 ==> \\at(x, Pre)==1);\nloop invariant i3: (\\at(x, Pre)==1 && x==2) || (\\at(x, Pre)==2 && x==1);\nloop invariant i4: (\\at(x, Pre)==1 && x<=8 && !unknown_bool()) ==> x==1;\nloop invariant i5: (\\at(x, Pre)==2 && x<=8 && !unknown_bool()) ==> x==2;\nloop invariant i6: (x == 1 || x == 2);\nloop invariant i7: ((x == 1 && \\old(x) == 1 ==> x == 2) && (x == 2 && \\old(x) == 2 ==> x == 1));\nloop invariant i8: (!unknown_bool() ==> x <= 8);\nloop invariant i9: x != 3;\nloop invariant i10: x <= 2 || x >= 1;\nloop invariant i11: (x==1) ==> (x<=2 && x!=1);\nloop invariant i12: (x==2) ==> (x<=2 && x!=2);\nloop invariant i13: x == 1 || x == 2 || x == 3;\nloop invariant i14: x != 8;\nloop invariant i15: (x == 1 && \\old(x) == 2) ==> x <= 3;\nloop invariant i16: (x == 2 && \\old(x) == 1) ==> x <= 3;\nloop invariant i17: !(\\at(unknown_bool(), Pre)) ==> x <= 8;\n*/\nwhile (unknown_bool()) {\n    if(x==1) x=2;\n    else if (x==2) x=1;\n  }\n  {;\n//@ assert(x<=8);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 11,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x==1 || x==2)) return 0;\n  /*@\nloop invariant i1: x==1 || x==2;\n\n\n\n\nloop invariant i6: (x == 1 || x == 2);\n\n\nloop invariant i9: x != 3;\nloop invariant i10: x <= 2 || x >= 1;\n\n\nloop invariant i13: x == 1 || x == 2 || x == 3;\nloop invariant i14: x != 8;\n\n\n\n*/\nwhile (unknown_bool()) {\n    if(x==1) x=2;\n    else if (x==2) x=1;\n  }\n  {;\n//@ assert(x<=8);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/const.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq1.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq2.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/afnp2014.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/css2003.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007b.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gsv2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/hhk2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_2.c",
            "../data/benchmarks/sv-benchmarks/loop-new/gauss_sum.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark10_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark11_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark13_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark14_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark15_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark16_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark17_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark18_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark20_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark21_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark22_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark23_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark25_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark26_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark27_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark29_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark30_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark31_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark32_linear.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../data/benchmarks/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/even.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/mod4.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/odd.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/id_trans.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/bhmr2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/ddlm2013.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gcnr2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gr2006.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_k.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_nondet.c",
            "../data/benchmarks/sv-benchmarks/loop-new/half.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark07_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark12_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark19_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark24_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark28_linear.c"
        ],
        "skipped": [],
        "total": 339,
        "success_count": 171,
        "failure_count": 168,
        "success_rate": 0.504424778761062
    }
}