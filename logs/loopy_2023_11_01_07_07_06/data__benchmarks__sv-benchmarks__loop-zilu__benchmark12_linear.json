{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark12_linear.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int t = unknown_int();\n  \n  if (!(x!=y && y==t)) return 0;\n  while (unknown_bool()) {\n    if(x>0) y=y+x;\n  }\n  {;\n//@ assert(y>=t);\n}\n\n  return 0;\n}",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int t = unknown_int();\n  \n  if (!(x!=y && y==t)) return 0;\n  while (unknown_bool()) {\n    if(x>0) y=y+x;\n  }\n  {;\n//@ assert(y>=t);\n}\n\n  return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- Three integer variables x, y, and t are declared but not initialized.\n- The function assume(e) is a macro that returns 0 if the expression e evaluates to false.\n- The functions unknown_int() and unknown_bool() have unknown return values.\n\nLoop Condition:\n- The while loop iterates as long as the function unknown_bool() returns true.\n\nPost-condition:\n- The value of y is greater than or equal to the value of t.\n\nLoop Invariants:\n- Since x, y, and t are not initialized, we cannot add any bounds on them.\n- The loop condition is unknown, so we cannot make any assumptions about it.\n- Before the loop execution, the post-condition is not true, so we cannot use it as a loop invariant.\n- After the loop execution, we cannot make any guarantees about the values of x, y, or t.\n- Therefore, we need to focus on loop invariants that are true in every iteration of the loop.\n- Since we know that the loop body is executed only when unknown_bool() returns true, we can use this information to write the following loop invariant:\n```\n/*@ \n   loop invariant unknown_bool() ==> (y >= t);\n*/\n```\n- This loop invariant is true before the loop execution because unknown_bool() is unknown, so the implication is trivially true.\n- This loop invariant is true in every iteration of the loop because if unknown_bool() is true, then the loop body is executed, which ensures that y is greater than or equal to t.\n- This loop invariant is true after the loop execution because if unknown_bool() is false, then the implication is trivially true. If unknown_bool() is still true, then the loop invariant ensures that y is greater than or equal to t. \n\nTherefore, the loop invariant for the given program is:\n```\n/*@ \n   loop invariant unknown_bool() ==> (y >= t);\n*/\n```",
            "Pre-conditions:\n- None.\n\nVariable Assignments:\n- x = unknown_int()\n- y = unknown_int()\n- t = unknown_int()\n\nLoop Condition:\n- unknown_bool()\n\nPost-condition:\n- y >= t\n\nLoop Invariants:\n- Before loop execution: x!=y && y==t (this follows from the if statement before the loop)\n- In every iteration of the loop: \n    - y >= \\old(y)\n    - If x > 0, then y >= \\old(y) + x\n    - x does not change\n    - t does not change\n- After loop termination: y >= t\n\nExplanation:\n- Before the loop, we know that x is not equal to y and y is equal to t, based on the if statement. \n- In every iteration of the loop, y is non-decreasing (since it only increases if x > 0), so we have the invariant y >= \\old(y). Also, if x > 0, then y increases by at least x, so we have the invariant y >= \\old(y) + x. Since x and t are not modified in the loop, we have the additional invariants x does not change and t does not change.\n- After the loop terminates, we know that the loop condition is false, so we can use an implication to make the post-condition trivially true if the loop does not execute. Since y is non-decreasing in the loop, if the loop does execute, then y will be greater than or equal to its value before the loop, which is t, so we have the invariant y >= t.",
            "Pre-conditions:\n- The function main has no parameters.\n- The function unknown_int returns an integer value.\n- The function unknown_bool returns a Boolean value.\n\nVariable assignments:\n- x is assigned the value returned by the function unknown_int.\n- y is assigned the value returned by the function unknown_int.\n- t is assigned the value returned by the function unknown_int.\n\nLoop condition:\n- The loop runs while the function unknown_bool returns true.\n\nPost-condition:\n- y is greater than or equal to t.\n\nLoop Invariants:\n- The condition `!(x!=y && y==t)` implies that either x is equal to y or y is not equal to t. Therefore, we can assume that x and t are not equal to y at the beginning of the loop.\n- Before the loop execution, y >= t holds trivially since y and t are assigned non-deterministic values.\n- In every iteration of the loop, if x is greater than 0, then y is increased by x. Therefore, we can add the loop invariant `y >= \\old(y) + x` to ensure that y keeps increasing.\n- After the loop termination, the loop condition `!unknown_bool()` is false, implying that `unknown_bool()` is true at least once before the loop termination. Therefore, we can add the loop invariant `y >= t ==> unknown_bool()` to ensure that the loop terminates only when the post-condition is satisfied.\n\nPutting it all together:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int t = unknown_int();\n  \n  assume(x!=y && y!=t);\n  while (unknown_bool()) {\n    assume(y >= t);\n    assume(y >= \\old(y) + x);\n    if(x>0) y=y+x;\n  }\n  assert(y>=t);\n  return 0;\n}\n```",
            "First, let's analyze the program.\n\n## Program Analysis\n\nThe program initializes three variables `x`, `y`, and `t` with non-deterministic values. Then, it checks if `x!=y` and `y==t`, and if this condition is not satisfied, the program terminates. Otherwise, it enters a while loop with a non-deterministic condition. Inside the loop, if `x` is greater than zero, it adds `x` to `y`. Finally, outside the loop, the program checks if `y` is greater than or equal to `t`, and if not, the program fails.\n\n## Loop Invariant\n\n### Pre-conditions and Variable Assignments\n\n```\nint x = unknown_int();\nint y = unknown_int();\nint t = unknown_int();\n```\nHere, `x`, `y`, and `t` are non-deterministically initialized.\n\n### Loop Condition\n\n```\nwhile (unknown_bool())\n```\nHere, the loop executes while the condition `unknown_bool()` is true.\n\n### Post-condition\n\n```\n//@ assert(y>=t);\n```\nHere, the post-condition is that `y` is greater than or equal to `t`.\n\n### Loop Invariants\n\nFrom the pre-condition, we know that `x`, `y`, and `t` have garbage values. We cannot make any assumptions about their values. However, we can add bounds to these variables if such bounds exist.\n\n#### Bounds on `x`\n\nSince `x` is only used in the loop to add to `y`, we can add the following loop invariant to bound the maximum value of `x`:\n\n```\n/*@ loop invariant x <= INT_MAX; */\n```\n\nThis invariant ensures that `x` is always less than or equal to the maximum value of the `int` data type.\n\n#### Bounds on `y` and `t`\n\nSince the post-condition requires that `y` is greater than or equal to `t`, we can add the following loop invariant to bound the minimum value of `y`:\n\n```\n/*@ loop invariant y >= t; */\n```\n\nThis invariant ensures that `y` is always greater than or equal to `t`.\n\n#### Loop Invariant for Non-deterministic Condition\n\nSince the loop condition `unknown_bool()` is non-deterministic, we cannot make any assumptions about the number of iterations of the loop. Therefore, we can add the following loop invariant to make the invariant trivially true at the beginning of the loop:\n\n```\n/*@ loop invariant \\true; */\n```\n\nThis invariant ensures that the invariant is always true at the beginning of the loop.\n\n#### Loop Invariant for Loop Body\n\nInside the loop, if `x` is greater than zero, it adds `x` to `y`. Therefore, we can add the following loop invariant to ensure that `y` is always greater than or equal to its previous value:\n\n```\n/*@ loop invariant y >= \\at(y, Pre); */\n```\n\nThis invariant ensures that `y` is always greater than or equal to its previous value before executing the loop body.\n\n#### Loop Invariant for Post-condition\n\nSince the post-condition is guarded by the condition `unknown_bool()`, we can add the following loop invariant to use the guard condition in an implication:\n\n```\n/*@ loop invariant y >= t ==> unknown_bool() == \\false; */\n```\n\nThis invariant ensures that if `y` is greater than or equal to `t`, then the loop condition `unknown_bool()` is false.\n\nPutting all of these loop invariants together, we get:\n\n```\n/*@ \n  loop invariant x <= INT_MAX;\n  loop invariant y >= t;\n  loop invariant y >= \\at(y, Pre);\n  loop invariant y >= t ==> unknown_bool() == \\false;\n  loop invariant \\true;\n*/\n```",
            "Pre-conditions:\n- None.\n\nVariable assignments:\n- `int x = unknown_int();`\n- `int y = unknown_int();`\n- `int t = unknown_int();`\n\nLoop condition:\n- `unknown_bool()`\n\nPost-condition:\n- `y >= t`\n\nLoop invariants:\n- `x != y ==> y >= t`\n- `x <= 0 ==> y >= t`\n- `y <= t ==> !unknown_bool() ==> y >= t`\n\nExplanation:\n- The first loop invariant `x != y ==> y >= t` states that if `x` is not equal to `y`, then `y` must be greater than or equal to `t`. This is necessary because if `x` is not equal to `y`, then the condition in the if statement inside the loop may change the value of `y`. Therefore, we need to ensure that `y` remains greater than or equal to `t` throughout the loop execution.\n- The second loop invariant `x <= 0 ==> y >= t` states that if `x` is less than or equal to zero, then `y` must be greater than or equal to `t`. This is necessary because if `x` is less than or equal to zero, then the condition in the if statement inside the loop will not be true and `y` will not change. Therefore, we need to ensure that `y` remains greater than or equal to `t` throughout the loop execution.\n- The third loop invariant `y <= t ==> !unknown_bool() ==> y >= t` states that if `y` is less than or equal to `t`, then the loop must terminate and `y` must be greater than or equal to `t`. This is necessary because if `y` is less than or equal to `t`, then the condition in the if statement inside the loop will not be true and the loop will terminate. Therefore, we need to ensure that `y` remains greater than or equal to `t` throughout the loop execution. Note that we use the negation of `unknown_bool()` in the implication to ensure that the loop terminates when `y` is less than or equal to `t`."
        ],
        "annotation_blocks": [
            "/*@ \n   loop invariant unknown_bool() ==> (y >= t);\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- None.\n\nVariable Assignments:\n- x = unknown_int()\n- y = unknown_int()\n- t = unknown_int()\n\nLoop Condition:\n- unknown_bool()\n\nPost-condition:\n- y >= t\n\nLoop Invariants:\n- Before loop execution: x!=y && y==t (this follows from the if statement before the loop)\n- In every iteration of the loop: \n    - y >= \\old(y)\n    - If x > 0, then y >= \\old(y) + x\n    - x does not change\n    - t does not change\n- After loop termination: y >= t\n\nExplanation:\n- Before the loop, we know that x is not equal to y and y is equal to t, based on the if statement. \n- In every iteration of the loop, y is non-decreasing (since it only increases if x > 0), so we have the invariant y >= \\old(y). Also, if x > 0, then y increases by at least x, so we have the invariant y >= \\old(y) + x. Since x and t are not modified in the loop, we have the additional invariants x does not change and t does not change.\n- After the loop terminates, we know that the loop condition is false, so we can use an implication to make the post-condition trivially true if the loop does not execute. Since y is non-decreasing in the loop, if the loop does execute, then y will be greater than or equal to its value before the loop, which is t, so we have the invariant y >= t."
            ],
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The function main has no parameters.\n- The function unknown_int returns an integer value.\n- The function unknown_bool returns a Boolean value.\n\nVariable assignments:\n- x is assigned the value returned by the function unknown_int.\n- y is assigned the value returned by the function unknown_int.\n- t is assigned the value returned by the function unknown_int.\n\nLoop condition:\n- The loop runs while the function unknown_bool returns true.\n\nPost-condition:\n- y is greater than or equal to t.\n\nLoop Invariants:\n- The condition `!(x!=y && y==t)` implies that either x is equal to y or y is not equal to t. Therefore, we can assume that x and t are not equal to y at the beginning of the loop.\n- Before the loop execution, y >= t holds trivially since y and t are assigned non-deterministic values.\n- In every iteration of the loop, if x is greater than 0, then y is increased by x. Therefore, we can add the loop invariant `y >= \\old(y) + x` to ensure that y keeps increasing.\n- After the loop termination, the loop condition `!unknown_bool()` is false, implying that `unknown_bool()` is true at least once before the loop termination. Therefore, we can add the loop invariant `y >= t ==> unknown_bool()` to ensure that the loop terminates only when the post-condition is satisfied.\n\nPutting it all together:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int t = unknown_int();\n  \n  assume(x!=y && y!=t);\n  while (unknown_bool()) {\n    assume(y >= t);\n    assume(y >= \\old(y) + x);\n    if(x>0) y=y+x;\n  }\n  assert(y>=t);\n  return 0;\n}\n```"
            ],
            "/*@ loop invariant x <= INT_MAX; */",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- None.\n\nVariable assignments:\n- `int x = unknown_int();`\n- `int y = unknown_int();`\n- `int t = unknown_int();`\n\nLoop condition:\n- `unknown_bool()`\n\nPost-condition:\n- `y >= t`\n\nLoop invariants:\n- `x != y ==> y >= t`\n- `x <= 0 ==> y >= t`\n- `y <= t ==> !unknown_bool() ==> y >= t`\n\nExplanation:\n- The first loop invariant `x != y ==> y >= t` states that if `x` is not equal to `y`, then `y` must be greater than or equal to `t`. This is necessary because if `x` is not equal to `y`, then the condition in the if statement inside the loop may change the value of `y`. Therefore, we need to ensure that `y` remains greater than or equal to `t` throughout the loop execution.\n- The second loop invariant `x <= 0 ==> y >= t` states that if `x` is less than or equal to zero, then `y` must be greater than or equal to `t`. This is necessary because if `x` is less than or equal to zero, then the condition in the if statement inside the loop will not be true and `y` will not change. Therefore, we need to ensure that `y` remains greater than or equal to `t` throughout the loop execution.\n- The third loop invariant `y <= t ==> !unknown_bool() ==> y >= t` states that if `y` is less than or equal to `t`, then the loop must terminate and `y` must be greater than or equal to `t`. This is necessary because if `y` is less than or equal to `t`, then the condition in the if statement inside the loop will not be true and the loop will terminate. Therefore, we need to ensure that `y` remains greater than or equal to `t` throughout the loop execution. Note that we use the negation of `unknown_bool()` in the implication to ensure that the loop terminates when `y` is less than or equal to `t`."
            ]
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n   loop invariant unknown_bool() ==> (y >= t);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: unexpected token ')'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int t = unknown_int();\n  \n  if (!(x!=y && y==t)) return 0;\n  /*@\n\n*/\nwhile (unknown_bool()) {\n    if(x>0) y=y+x;\n  }\n  {;\n//@ assert(y>=t);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- None.\n\nVariable Assignments:\n- x = unknown_int()\n- y = unknown_int()\n- t = unknown_int()\n\nLoop Condition:\n- unknown_bool()\n\nPost-condition:\n- y >= t\n\nLoop Invariants:\n- Before loop execution: x!=y && y==t (this follows from the if statement before the loop)\n- In every iteration of the loop: \n    - y >= \\old(y)\n    - If x > 0, then y >= \\old(y) + x\n    - x does not change\n    - t does not change\n- After loop termination: y >= t\n\nExplanation:\n- Before the loop, we know that x is not equal to y and y is equal to t, based on the if statement. \n- In every iteration of the loop, y is non-decreasing (since it only increases if x > 0), so we have the invariant y >= \\old(y). Also, if x > 0, then y increases by at least x, so we have the invariant y >= \\old(y) + x. Since x and t are not modified in the loop, we have the additional invariants x does not change and t does not change.\n- After the loop terminates, we know that the loop condition is false, so we can use an implication to make the post-condition trivially true if the loop does not execute. Since y is non-decreasing in the loop, if the loop does execute, then y will be greater than or equal to its value before the loop, which is t, so we have the invariant y >= t.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The function main has no parameters.\n- The function unknown_int returns an integer value.\n- The function unknown_bool returns a Boolean value.\n\nVariable assignments:\n- x is assigned the value returned by the function unknown_int.\n- y is assigned the value returned by the function unknown_int.\n- t is assigned the value returned by the function unknown_int.\n\nLoop condition:\n- The loop runs while the function unknown_bool returns true.\n\nPost-condition:\n- y is greater than or equal to t.\n\nLoop Invariants:\n- The condition `!(x!=y && y==t)` implies that either x is equal to y or y is not equal to t. Therefore, we can assume that x and t are not equal to y at the beginning of the loop.\n- Before the loop execution, y >= t holds trivially since y and t are assigned non-deterministic values.\n- In every iteration of the loop, if x is greater than 0, then y is increased by x. Therefore, we can add the loop invariant `y >= \\old(y) + x` to ensure that y keeps increasing.\n- After the loop termination, the loop condition `!unknown_bool()` is false, implying that `unknown_bool()` is true at least once before the loop termination. Therefore, we can add the loop invariant `y >= t ==> unknown_bool()` to ensure that the loop terminates only when the post-condition is satisfied.\n\nPutting it all together:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int t = unknown_int();\n  \n  assume(x!=y && y!=t);\n  while (unknown_bool()) {\n    assume(y >= t);\n    assume(y >= \\old(y) + x);\n    if(x>0) y=y+x;\n  }\n  assert(y>=t);\n  return 0;\n}\n```",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ loop invariant x <= INT_MAX; */",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: unbound logic variable INT_MAX. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int t = unknown_int();\n  \n  if (!(x!=y && y==t)) return 0;\n  /*@\n\n*/\nwhile (unknown_bool()) {\n    if(x>0) y=y+x;\n  }\n  {;\n//@ assert(y>=t);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- None.\n\nVariable assignments:\n- `int x = unknown_int();`\n- `int y = unknown_int();`\n- `int t = unknown_int();`\n\nLoop condition:\n- `unknown_bool()`\n\nPost-condition:\n- `y >= t`\n\nLoop invariants:\n- `x != y ==> y >= t`\n- `x <= 0 ==> y >= t`\n- `y <= t ==> !unknown_bool() ==> y >= t`\n\nExplanation:\n- The first loop invariant `x != y ==> y >= t` states that if `x` is not equal to `y`, then `y` must be greater than or equal to `t`. This is necessary because if `x` is not equal to `y`, then the condition in the if statement inside the loop may change the value of `y`. Therefore, we need to ensure that `y` remains greater than or equal to `t` throughout the loop execution.\n- The second loop invariant `x <= 0 ==> y >= t` states that if `x` is less than or equal to zero, then `y` must be greater than or equal to `t`. This is necessary because if `x` is less than or equal to zero, then the condition in the if statement inside the loop will not be true and `y` will not change. Therefore, we need to ensure that `y` remains greater than or equal to `t` throughout the loop execution.\n- The third loop invariant `y <= t ==> !unknown_bool() ==> y >= t` states that if `y` is less than or equal to `t`, then the loop must terminate and `y` must be greater than or equal to `t`. This is necessary because if `y` is less than or equal to `t`, then the condition in the if statement inside the loop will not be true and the loop will terminate. Therefore, we need to ensure that `y` remains greater than or equal to `t` throughout the loop execution. Note that we use the negation of `unknown_bool()` in the implication to ensure that the loop terminates when `y` is less than or equal to `t`.",
                "error": "Output does not contain at least 1 code block"
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 14: unexpected token ')'",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int t = unknown_int();\n  \n  if (!(x!=y && y==t)) return 0;\n  /*@\nloop invariant i1: unknown_bool() ==> (y >= t);\nloop invariant i2: x <= INT_MAX;\n*/\nwhile (unknown_bool()) {\n    if(x>0) y=y+x;\n  }\n  {;\n//@ assert(y>=t);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 3,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int t = unknown_int();\n  \n  if (!(x!=y && y==t)) return 0;\n  /*@\n\n\n*/\nwhile (unknown_bool()) {\n    if(x>0) y=y+x;\n  }\n  {;\n//@ assert(y>=t);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/const.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq1.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq2.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/afnp2014.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/css2003.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007b.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gsv2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/hhk2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_2.c",
            "../data/benchmarks/sv-benchmarks/loop-new/gauss_sum.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark10_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark11_linear.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../data/benchmarks/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/even.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/mod4.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/odd.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/id_trans.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/bhmr2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/ddlm2013.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gcnr2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gr2006.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_k.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_nondet.c",
            "../data/benchmarks/sv-benchmarks/loop-new/half.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark07_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark12_linear.c"
        ],
        "skipped": [],
        "total": 319,
        "success_count": 154,
        "failure_count": 165,
        "success_rate": 0.4827586206896552
    }
}