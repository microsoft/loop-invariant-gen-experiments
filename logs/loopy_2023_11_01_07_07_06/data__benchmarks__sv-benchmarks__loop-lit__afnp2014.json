{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loop-lit/afnp2014.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int x = 1;\n    int y = 0;\n    while (y < 1000 && unknown_int()) {\n        x = x + y;\n        y = y + 1;\n    }\n    {;\n//@ assert(x >= y);\n}\n\n    return 0;\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int x = 1;\n    int y = 0;\n    while (y < 1000 && unknown_int()) {\n        x = x + y;\n        y = y + 1;\n    }\n    {;\n//@ assert(x >= y);\n}\n\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- The program has no pre-conditions.\n\nVariable assignments:\n- x is assigned the value 1.\n- y is assigned the value 0.\n\nLoop condition:\n- The loop continues as long as y is less than 1000 and the return value of the function unknown_int() is non-zero.\n\nLoop invariants:\n- Before the loop execution: x >= 1 && y >= 0\n- In every iteration of the loop: \n    - y < 1000 && (unknown_int() == 0 ==> x >= y)\n    - x >= 1 && y >= 0\n    - x >= y\n- After the loop termination: y >= 1000 ==> x >= y\n\nExplanation:\n- Before the loop execution, x is assigned the value 1 and y is assigned the value 0. Therefore, x >= 1 and y >= 0.\n- In every iteration of the loop, y is less than 1000 and unknown_int() is either non-zero or zero. If unknown_int() returns zero, then x >= y. This is because if the loop terminates due to the unknown_int() function returning zero, then the loop invariant should still hold. Additionally, x >= 1 and y >= 0 should still hold.\n- After the loop termination, y is either equal to or greater than 1000. If y is greater than or equal to 1000, then x must be greater than or equal to y, because the loop does not terminate until y is greater than or equal to 1000. Therefore, y >= 1000 ==> x >= y.\n\nNote: Since there are no bounds on the value that unknown_int() can return, we cannot make any assumptions about x or y based on unknown_int(). Therefore, we use implication to make the loop invariant hold regardless of the return value of unknown_int().",
            "Pre-conditions: None.\n\nVariable assignments: \n- x is assigned the value 1.\n- y is assigned the value 0.\n\nLoop condition: y < 1000 && unknown_int()\n\nLoop invariants:\n- Before the loop execution: \n    - x >= 1\n    - y >= 0 \n- In every iteration of the loop:\n    - x >= y\n    - y < 1000\n    - (unknown_int() == 0) || (unknown_int() == 1) \n        - Since unknown_int() is non-deterministic, we cannot make any assumptions about its value. Therefore, we use an implication to make this invariant trivially true in every iteration:\n        - (unknown_int() == 0) || (unknown_int() == 1) ==> true\n- After the loop termination:\n    - y >= 1000\n    - x >= y\n    - (unknown_int() == 0) || (unknown_int() == 1) \n        - Since unknown_int() is non-deterministic, we cannot make any assumptions about its value. Therefore, we use an implication to make this invariant trivially true after the loop termination:\n        - (unknown_int() == 0) || (unknown_int() == 1) ==> true\n        \nPutting everything together, we get:\n\n```\n/*@ \n    loop invariant x >= 1;\n    loop invariant y >= 0;\n    loop invariant x >= y;\n    loop invariant y < 1000;\n    loop invariant (unknown_int() == 0) || (unknown_int() == 1) ==> true;\n*/\n``` \n\nNote that we did not need to add any conjunctions for bounding the maximum and minimum values of x and y, since we do not have any information about the range of values that unknown_int() can return.",
            "Pre-conditions:\n- `x` is initialized to 1.\n- `y` is initialized to 0.\n\nLoop Condition:\n- `y < 1000 && unknown_int()`\n\nLoop Invariants:\n- Before the loop execution:\n    - `x >= 1`\n    - `y >= 0`\n- In every iteration of the loop:\n    - `x >= y`\n    - `y < 1000`\n- After the loop termination:\n    - `x >= y`\n\nLet's explain the loop invariants:\n- Before the loop execution, `x` and `y` are initialized to non-negative values, so `x >= 1` and `y >= 0`.\n- In every iteration of the loop, `x` is updated by adding `y`, and `y` is incremented by 1. So, `x` is always greater than or equal to the previous value of `y`. Hence, `x >= y`.\n- The loop condition is `y < 1000 && unknown_int()`. So, when the loop terminates, either `y >= 1000` or `!unknown_int()`. If `y >= 1000`, then `x` must be greater than or equal to 1000, which implies `x >= y`. If `!unknown_int()`, then the loop invariant is trivially true, as the assertion is not evaluated. Hence, the loop invariant `x >= y` holds after the loop termination.\n- Since the assertion `x >= y` is not always evaluated (it depends on the loop condition), we need to use an implication to take into account the condition:\n    - `y < 1000 && unknown_int() ==> x >= y`\n- Since there are no other variables in the program, we do not need to add any other conjunctions to bound their values or relations.",
            "Pre-conditions: The program initializes integer variables x and y with 1 and 0 respectively.\n\nLoop condition: y < 1000 && unknown_int()\n\nPost-condition: x >= y\n\nLoop Invariants:\n- Before the loop execution:\n    - x >= 1\n    - y >= 0\n- In every iteration of the loop:\n    - y <= 999\n    - x >= y\n    - x >= 1\n- After the loop termination:\n    - y >= 1000 ==> x >= 999\n\nExplanation:\n- Before the loop execution:\n    - The initial values of x and y are 1 and 0 respectively. Therefore, x >= 1 and y >= 0.\n- In every iteration of the loop:\n    - The loop condition is y < 1000 && unknown_int(). Therefore, y <= 999.\n    - In each iteration, x is incremented by y and y is incremented by 1. Therefore, x >= y.\n    - The initial value of x is 1. Therefore, x >= 1.\n- After the loop termination:\n    - If y >= 1000, then the loop condition y < 1000 is false, and the loop terminates. Therefore, y < 1000 ==> x >= y.\n    - If y >= 1000, then x must be greater than or equal to 999 because in each iteration x is incremented by y, and y is incremented by 1, and the maximum value of y is 999. Therefore, y >= 1000 ==> x >= 999.\n\nPutting it all together:\n```\n/*@ \n    loop invariant x >= 1;\n    loop invariant y >= 0;\n    loop invariant y <= 999;\n    loop invariant x >= y;\n    loop invariant x >= 1;\n\n    loop assigns x, y;\n\n    loop variant 1000 - y;\n*/\nwhile (y < 1000 && unknown_int()) {\n    x = x + y;\n    y = y + 1;\n}\n\n/*@ \n    loop invariant y >= 1000 ==> x >= 999;\n*/\n{;\n//@ assert(x >= y);\n}\n```",
            "Pre-conditions:\n- The function main takes no arguments.\n- The function unknown_int returns an integer value.\n- The variable x is initialized to 1.\n- The variable y is initialized to 0.\n\nLoop condition:\n- The loop continues as long as y is less than 1000 and the function unknown_int returns a non-zero value.\n\nPost-condition:\n- The value of variable x is greater than or equal to the value of variable y.\n\nLoop invariants:\n1. Before the loop execution: \n   - x >= 1\n   - y >= 0\n2. In every iteration of the loop:\n   - x >= y\n   - y <= 999\n3. After the loop termination:\n   - x >= y\n\nExplanation:\n1. Before the loop execution:\n   - The initial value of x is 1, so x >= 1.\n   - The initial value of y is 0, so y >= 0.\n2. In every iteration of the loop:\n   - The loop condition requires that y is less than 1000, so y <= 999.\n   - The loop body updates the value of x to be x + y, and the value of y to be y + 1. Since the loop condition is still true, we know that y is less than 1000, so y + 1 is less than or equal to 1000. Therefore, the new value of x is greater than or equal to the old value of x, which was already greater than or equal to y. Hence, x >= y.\n3. After the loop termination:\n   - The loop terminates when y is either 1000 or when unknown_int() returns 0. Since y <= 999 is a loop invariant, we know that y is less than or equal to 1000 after the loop terminates. Therefore, x is greater than or equal to y, since x >= y at the end of each iteration of the loop."
        ],
        "annotation_blocks": [
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The program has no pre-conditions.\n\nVariable assignments:\n- x is assigned the value 1.\n- y is assigned the value 0.\n\nLoop condition:\n- The loop continues as long as y is less than 1000 and the return value of the function unknown_int() is non-zero.\n\nLoop invariants:\n- Before the loop execution: x >= 1 && y >= 0\n- In every iteration of the loop: \n    - y < 1000 && (unknown_int() == 0 ==> x >= y)\n    - x >= 1 && y >= 0\n    - x >= y\n- After the loop termination: y >= 1000 ==> x >= y\n\nExplanation:\n- Before the loop execution, x is assigned the value 1 and y is assigned the value 0. Therefore, x >= 1 and y >= 0.\n- In every iteration of the loop, y is less than 1000 and unknown_int() is either non-zero or zero. If unknown_int() returns zero, then x >= y. This is because if the loop terminates due to the unknown_int() function returning zero, then the loop invariant should still hold. Additionally, x >= 1 and y >= 0 should still hold.\n- After the loop termination, y is either equal to or greater than 1000. If y is greater than or equal to 1000, then x must be greater than or equal to y, because the loop does not terminate until y is greater than or equal to 1000. Therefore, y >= 1000 ==> x >= y.\n\nNote: Since there are no bounds on the value that unknown_int() can return, we cannot make any assumptions about x or y based on unknown_int(). Therefore, we use implication to make the loop invariant hold regardless of the return value of unknown_int()."
            ],
            "/*@ \n    loop invariant x >= 1;\n    loop invariant y >= 0;\n    loop invariant x >= y;\n    loop invariant y < 1000;\n    loop invariant (unknown_int() == 0) || (unknown_int() == 1) ==> true;\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- `x` is initialized to 1.\n- `y` is initialized to 0.\n\nLoop Condition:\n- `y < 1000 && unknown_int()`\n\nLoop Invariants:\n- Before the loop execution:\n    - `x >= 1`\n    - `y >= 0`\n- In every iteration of the loop:\n    - `x >= y`\n    - `y < 1000`\n- After the loop termination:\n    - `x >= y`\n\nLet's explain the loop invariants:\n- Before the loop execution, `x` and `y` are initialized to non-negative values, so `x >= 1` and `y >= 0`.\n- In every iteration of the loop, `x` is updated by adding `y`, and `y` is incremented by 1. So, `x` is always greater than or equal to the previous value of `y`. Hence, `x >= y`.\n- The loop condition is `y < 1000 && unknown_int()`. So, when the loop terminates, either `y >= 1000` or `!unknown_int()`. If `y >= 1000`, then `x` must be greater than or equal to 1000, which implies `x >= y`. If `!unknown_int()`, then the loop invariant is trivially true, as the assertion is not evaluated. Hence, the loop invariant `x >= y` holds after the loop termination.\n- Since the assertion `x >= y` is not always evaluated (it depends on the loop condition), we need to use an implication to take into account the condition:\n    - `y < 1000 && unknown_int() ==> x >= y`\n- Since there are no other variables in the program, we do not need to add any other conjunctions to bound their values or relations."
            ],
            "/*@ \n    loop invariant x >= 1;\n    loop invariant y >= 0;\n    loop invariant y <= 999;\n    loop invariant x >= y;\n    loop invariant x >= 1;\n\n    loop assigns x, y;\n\n    loop variant 1000 - y;\n*/\nwhile (y < 1000 && unknown_int()) {\n    x = x + y;\n    y = y + 1;\n}\n\n/*@ \n    loop invariant y >= 1000 ==> x >= 999;\n*/\n{;\n//@ assert(x >= y);\n}",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The function main takes no arguments.\n- The function unknown_int returns an integer value.\n- The variable x is initialized to 1.\n- The variable y is initialized to 0.\n\nLoop condition:\n- The loop continues as long as y is less than 1000 and the function unknown_int returns a non-zero value.\n\nPost-condition:\n- The value of variable x is greater than or equal to the value of variable y.\n\nLoop invariants:\n1. Before the loop execution: \n   - x >= 1\n   - y >= 0\n2. In every iteration of the loop:\n   - x >= y\n   - y <= 999\n3. After the loop termination:\n   - x >= y\n\nExplanation:\n1. Before the loop execution:\n   - The initial value of x is 1, so x >= 1.\n   - The initial value of y is 0, so y >= 0.\n2. In every iteration of the loop:\n   - The loop condition requires that y is less than 1000, so y <= 999.\n   - The loop body updates the value of x to be x + y, and the value of y to be y + 1. Since the loop condition is still true, we know that y is less than 1000, so y + 1 is less than or equal to 1000. Therefore, the new value of x is greater than or equal to the old value of x, which was already greater than or equal to y. Hence, x >= y.\n3. After the loop termination:\n   - The loop terminates when y is either 1000 or when unknown_int() returns 0. Since y <= 999 is a loop invariant, we know that y is less than or equal to 1000 after the loop terminates. Therefore, x is greater than or equal to y, since x >= y at the end of each iteration of the loop."
            ]
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The program has no pre-conditions.\n\nVariable assignments:\n- x is assigned the value 1.\n- y is assigned the value 0.\n\nLoop condition:\n- The loop continues as long as y is less than 1000 and the return value of the function unknown_int() is non-zero.\n\nLoop invariants:\n- Before the loop execution: x >= 1 && y >= 0\n- In every iteration of the loop: \n    - y < 1000 && (unknown_int() == 0 ==> x >= y)\n    - x >= 1 && y >= 0\n    - x >= y\n- After the loop termination: y >= 1000 ==> x >= y\n\nExplanation:\n- Before the loop execution, x is assigned the value 1 and y is assigned the value 0. Therefore, x >= 1 and y >= 0.\n- In every iteration of the loop, y is less than 1000 and unknown_int() is either non-zero or zero. If unknown_int() returns zero, then x >= y. This is because if the loop terminates due to the unknown_int() function returning zero, then the loop invariant should still hold. Additionally, x >= 1 and y >= 0 should still hold.\n- After the loop termination, y is either equal to or greater than 1000. If y is greater than or equal to 1000, then x must be greater than or equal to y, because the loop does not terminate until y is greater than or equal to 1000. Therefore, y >= 1000 ==> x >= y.\n\nNote: Since there are no bounds on the value that unknown_int() can return, we cannot make any assumptions about x or y based on unknown_int(). Therefore, we use implication to make the loop invariant hold regardless of the return value of unknown_int().",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 1;\n    loop invariant y >= 0;\n    loop invariant x >= y;\n    loop invariant y < 1000;\n    loop invariant (unknown_int() == 0) || (unknown_int() == 1) ==> true;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: unexpected token ')'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int x = 1;\n    int y = 0;\n    /*@\nloop invariant i1: x >= 1;\nloop invariant i2: y >= 0;\nloop invariant i3: x >= y;\n\n\n*/\nwhile (y < 1000 && unknown_int()) {\n        x = x + y;\n        y = y + 1;\n    }\n    {;\n//@ assert(x >= y);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- `x` is initialized to 1.\n- `y` is initialized to 0.\n\nLoop Condition:\n- `y < 1000 && unknown_int()`\n\nLoop Invariants:\n- Before the loop execution:\n    - `x >= 1`\n    - `y >= 0`\n- In every iteration of the loop:\n    - `x >= y`\n    - `y < 1000`\n- After the loop termination:\n    - `x >= y`\n\nLet's explain the loop invariants:\n- Before the loop execution, `x` and `y` are initialized to non-negative values, so `x >= 1` and `y >= 0`.\n- In every iteration of the loop, `x` is updated by adding `y`, and `y` is incremented by 1. So, `x` is always greater than or equal to the previous value of `y`. Hence, `x >= y`.\n- The loop condition is `y < 1000 && unknown_int()`. So, when the loop terminates, either `y >= 1000` or `!unknown_int()`. If `y >= 1000`, then `x` must be greater than or equal to 1000, which implies `x >= y`. If `!unknown_int()`, then the loop invariant is trivially true, as the assertion is not evaluated. Hence, the loop invariant `x >= y` holds after the loop termination.\n- Since the assertion `x >= y` is not always evaluated (it depends on the loop condition), we need to use an implication to take into account the condition:\n    - `y < 1000 && unknown_int() ==> x >= y`\n- Since there are no other variables in the program, we do not need to add any other conjunctions to bound their values or relations.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x >= 1;\n    loop invariant y >= 0;\n    loop invariant y <= 999;\n    loop invariant x >= y;\n    loop invariant x >= 1;\n\n    loop assigns x, y;\n\n    loop variant 1000 - y;\n*/\nwhile (y < 1000 && unknown_int()) {\n    x = x + y;\n    y = y + 1;\n}\n\n/*@ \n    loop invariant y >= 1000 ==> x >= 999;\n*/\n{;\n//@ assert(x >= y);\n}",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 1 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant y <= 999 is established but not preserved.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant y >= 1000 ==> x >= 999 is partially proven to be inductive.\nAssertion x >= y: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int x = 1;\n    int y = 0;\n    /*@\nloop invariant i1: x >= 1;\nloop invariant i2: y >= 0;\n\nloop invariant i4: x >= y;\nloop invariant i5: y >= 1000 ==> x >= 999;\n*/\nwhile (y < 1000 && unknown_int()) {\n        x = x + y;\n        y = y + 1;\n    }\n    {;\n//@ assert(x >= y);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The function main takes no arguments.\n- The function unknown_int returns an integer value.\n- The variable x is initialized to 1.\n- The variable y is initialized to 0.\n\nLoop condition:\n- The loop continues as long as y is less than 1000 and the function unknown_int returns a non-zero value.\n\nPost-condition:\n- The value of variable x is greater than or equal to the value of variable y.\n\nLoop invariants:\n1. Before the loop execution: \n   - x >= 1\n   - y >= 0\n2. In every iteration of the loop:\n   - x >= y\n   - y <= 999\n3. After the loop termination:\n   - x >= y\n\nExplanation:\n1. Before the loop execution:\n   - The initial value of x is 1, so x >= 1.\n   - The initial value of y is 0, so y >= 0.\n2. In every iteration of the loop:\n   - The loop condition requires that y is less than 1000, so y <= 999.\n   - The loop body updates the value of x to be x + y, and the value of y to be y + 1. Since the loop condition is still true, we know that y is less than 1000, so y + 1 is less than or equal to 1000. Therefore, the new value of x is greater than or equal to the old value of x, which was already greater than or equal to y. Hence, x >= y.\n3. After the loop termination:\n   - The loop terminates when y is either 1000 or when unknown_int() returns 0. Since y <= 999 is a loop invariant, we know that y is less than or equal to 1000 after the loop terminates. Therefore, x is greater than or equal to y, since x >= y at the end of each iteration of the loop.",
                "error": "Output does not contain at least 1 code block"
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 12: unexpected token ')'",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int x = 1;\n    int y = 0;\n    /*@\nloop invariant i1: x >= 1;\nloop invariant i2: y >= 0;\nloop invariant i3: x >= y;\nloop invariant i4: y < 1000;\nloop invariant i5: (unknown_int() == 0) || (unknown_int() == 1) ==> true;\nloop invariant i6: y <= 999;\nloop invariant i7: y >= 1000 ==> x >= 999;\n*/\nwhile (y < 1000 && unknown_int()) {\n        x = x + y;\n        y = y + 1;\n    }\n    {;\n//@ assert(x >= y);\n}\n\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 4,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int x = 1;\n    int y = 0;\n    /*@\nloop invariant i1: x >= 1;\nloop invariant i2: y >= 0;\nloop invariant i3: x >= y;\n\n\n\nloop invariant i7: y >= 1000 ==> x >= 999;\n*/\nwhile (y < 1000 && unknown_int()) {\n        x = x + y;\n        y = y + 1;\n    }\n    {;\n//@ assert(x >= y);\n}\n\n    return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/const.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq1.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq2.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/afnp2014.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../data/benchmarks/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/even.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/mod4.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/odd.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/id_trans.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/sendmail-close-angle.c"
        ],
        "skipped": [],
        "total": 287,
        "success_count": 137,
        "failure_count": 150,
        "success_rate": 0.47735191637630664
    }
}