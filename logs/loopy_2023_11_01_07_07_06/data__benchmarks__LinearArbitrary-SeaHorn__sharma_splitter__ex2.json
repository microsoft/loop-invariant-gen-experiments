{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\twhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\twhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions: None\n\nVariable assignments: \n- x = 0\n- y = 0\n- z = 0\n\nLoop condition: x < 100\n\nWe want to prove the following assertions:\n- z == 400\n- y == 2\n- x == 100\n\nLoop invariants:\n- x >= 0 && x <= 100\n- y >= -1 && y <= 6\n- z >= 0 && z <= 500\n- (x <= 50 ==> y == x) && (x > 50 ==> y == 100 - x)\n- (x < 25 ==> z == 5 * x) && (x >= 25 ==> z == 5 * 25 + (x - 25))\n- (x == 0 ==> y == 0) && (x == 0 ==> z == 0)\n- (x == 100 ==> y == 2) && (x == 100 ==> z == 400)\n- (x < 100 ==> (y >= -1 && y <= 6 && z >= 0 && z <= 500))\n- (x < 100 ==> ((x <= 50 ==> y == x) && (x > 50 ==> y == 100 - x)))\n- (x < 100 ==> ((x < 25 ==> z == 5 * x) && (x >= 25 ==> z == 5 * 25 + (x - 25))))\n\nExplanation of loop invariants:\n- The first three loop invariants are straightforward bounds on the variables x, y, and z respectively.\n- The fourth loop invariant describes the relationship between x and y. When x is less than or equal to 50, y increments by 1 with every iteration. When x is greater than 50, y decrements by 1 with every iteration. This relationship holds throughout the loop.\n- The fifth loop invariant describes the relationship between x and z. When x is less than 25, z increments by 1 with every iteration. When x is greater than or equal to 25, z increments by 5 with every iteration. This relationship holds throughout the loop.\n- The sixth loop invariant describes the initial values of y and z when x is 0.\n- The seventh loop invariant describes the final values of y and z when x is 100.\n- The eighth, ninth, and tenth loop invariants together imply that the bounds on y and z hold true throughout the loop.\n- The eighth loop invariant together with the fourth loop invariant implies that the relationship between x and y holds true throughout the loop.\n- The ninth loop invariant together with the fifth loop invariant implies that the relationship between x and z holds true throughout the loop. \n\nNote: Since there are no non-deterministic variables, we do not need to add any implications to make the invariants true at the beginning or end of the loop.",
            "Pre-conditions or variable assignments:\n- The program declares and initializes three integer variables x, y, and z to 0.\n\nLoop condition:\n- The loop executes while x < 100.\n\nLoop invariants:\n- Before the loop execution, all variables have minimum and maximum bounds:\n```\n/*@ \n    loop invariant x >= 0 && x <= 100;\n    loop invariant y >= 0 && y <= 100;\n    loop invariant z >= 0 && z <= 500;\n*/\n```\n- In every iteration of the loop, the following invariants hold:\n```\n/*@ \n    loop invariant x >= 0 && x <= 100;\n    loop invariant y >= 0 && y <= 100;\n    loop invariant z >= 0 && z <= 500;\n    loop invariant (x <= 50 ==> y == x + 2) && (x > 50 ==> y == 152 - x);\n    loop invariant (x < 25 ==> z == x + 1) && (x >= 25 ==> z == 5 * x - 124);\n*/\n```\n- After the loop termination, the post-conditions hold. Since the assertions are not guarded by any condition, we can directly include them in the loop invariants:\n```\n/*@ \n    loop invariant x >= 0 && x <= 100;\n    loop invariant y >= 0 && y <= 100;\n    loop invariant z >= 0 && z <= 500;\n    loop invariant (x <= 50 ==> y == x + 2) && (x > 50 ==> y == 152 - x);\n    loop invariant (x < 25 ==> z == x + 1) && (x >= 25 ==> z == 5 * x - 124);\n    loop invariant (x == 100 ==> z==400);\n    loop invariant (x == 100 ==> y==2);\n    loop invariant (x == 100);\n*/\n``` \n\nNote that we used implication to handle the conditional nature of the code and included all necessary bounds and relations between the variables in the loop invariants.",
            "Pre-conditions: None\n\nVariable assignments: \n- x=0\n- y=0\n- z=0\n\nLoop condition: x<100\n\nWe want to prove that after the loop execution, the following post-conditions hold:\n- z==400\n- y==2\n- x==100\n\nLet's analyze the loop body to find loop invariants.\n\nIn the loop body:\n- x is incremented by 1 in each iteration.\n- y is incremented by 1 when x is less than or equal to 50, and decremented by 1 otherwise.\n- z is incremented by 1 when x is less than 25, and incremented by 5 otherwise.\n\nFrom the above, we can derive the following loop invariants:\n```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= z <= 400;\nloop invariant x <= 100;\nloop invariant y <= 2;\nloop invariant z <= 400;\nloop invariant (x <= 50) ==> (y == x/25 + 1);\nloop invariant (x > 50) ==> (y == 3 - x/25);\nloop invariant (x <= 25) ==> (z == x);\nloop invariant (x > 25) ==> (z == 5*(x-25) + 25);\n*/\n```\nExplanation of the loop invariants:\n- The first three loop invariants set the lower and upper bounds for x, y, and z respectively.\n- The fourth, fifth, and sixth loop invariants state that x, y, and z do not exceed their maximum values during the loop execution.\n- The seventh loop invariant is true when x is less than or equal to 50, and it ensures that y is incremented by 1 for every 25 steps of x. When x=0, y=1, and when x=50, y=3.\n- The eighth loop invariant is true when x is greater than 50, and it ensures that y is decremented by 1 for every 25 steps of x. When x=51, y=2, and when x=100, y=0.\n- The ninth loop invariant is true when x is less than or equal to 25, and it ensures that z is incremented by 1 for every step of x. When x=0, z=0, and when x=25, z=25.\n- The tenth loop invariant is true when x is greater than 25, and it ensures that z is incremented by 5 for every step of x. When x=26, z=30, and when x=100, z=400.\n\nThese loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination, and they imply the post-conditions. Therefore, they can be used to verify the correctness of the program.",
            "Pre-conditions or variable assignments:\n- The variables x, y, and z are initialized to 0.\n\nLoop condition:\n- The loop continues as long as the value of x is less than 100.\n\nLoop invariants:\n- Before the loop: x == 0 && y == 0 && z == 0\n- In every iteration: \n\t- 0 <= x <= 100\n\t- 0 <= y <= 2\n\t- 0 <= z <= 400\n\t- (x <= 50) ==> (y <= x+1)\n\t- (x > 50) ==> (y >= x-49)\n\t- (x < 25) ==> (z == x+1)\n\t- (x >= 25) ==> (z == 4*x-96)\n- After the loop: x == 100 && y == 2 && z == 400\n\nExplanation:\n- Before the loop, we know that the values of x, y, and z are all 0.\n- In every iteration of the loop, we know that x is between 0 and 100 (inclusive), y is between 0 and 2 (inclusive), and z is between 0 and 400 (inclusive).\n- We also know that if x is less than or equal to 50, then y is less than or equal to x+1, and if x is greater than 50, then y is greater than or equal to x-49. This is because when x is less than or equal to 50, y is incremented by 1, and when x is greater than 50, y is decremented by 1. Therefore, y starts at 0, increases to a maximum of 51, and then decreases back to 2. \n- Similarly, we know that if x is less than 25, then z is equal to x+1, and if x is greater than or equal to 25, then z is equal to 4*x-96. This is because when x is less than 25, z is incremented by 1, and when x is greater than or equal to 25, z is incremented by 5. Therefore, z starts at 0, increases to a maximum of 101, and then increases to a maximum of 400. \n- After the loop, we know that x is equal to 100, y is equal to 2, and z is equal to 400. This is because the loop increments x by 1 on each iteration, and y and z are both modified in a way that ensures their final values.",
            "Pre-conditions:\n- None\n\nVariable assignments:\n- x=0\n- y=0\n- z=0\n\nLoop condition:\n- x<100\n\nLoop invariants:\n- `0<=x<=100`\n- `0<=y<=2`\n- `0<=z<=400`\n- `y>=1 ==> x<=50`\n- `y<=1 ==> x>50`\n- `z>=1 ==> x<25`\n- `z<=5 ==> x>=25`\n- `(x<25 ==> z==x+1) && (x>=25 ==> z==5*x-124)`\n- `(x<=50 ==> y==x+1) && (x>50 ==> y==-x+101)`\n\nPost-condition:\n- `z==400`\n- `y==2`\n- `x==100`\n\nPutting everything together, we get:\n```\n/*@ \n    loop invariant 0<=x<=100;\n    loop invariant 0<=y<=2;\n    loop invariant 0<=z<=400;\n    loop invariant y>=1 ==> x<=50;\n    loop invariant y<=1 ==> x>50;\n    loop invariant z>=1 ==> x<25;\n    loop invariant z<=5 ==> x>=25;\n    loop invariant (x<25 ==> z==x+1) && (x>=25 ==> z==5*x-124);\n    loop invariant (x<=50 ==> y==x+1) && (x>50 ==> y==-x+101);\n*/\n```"
        ],
        "annotation_blocks": [
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions: None\n\nVariable assignments: \n- x = 0\n- y = 0\n- z = 0\n\nLoop condition: x < 100\n\nWe want to prove the following assertions:\n- z == 400\n- y == 2\n- x == 100\n\nLoop invariants:\n- x >= 0 && x <= 100\n- y >= -1 && y <= 6\n- z >= 0 && z <= 500\n- (x <= 50 ==> y == x) && (x > 50 ==> y == 100 - x)\n- (x < 25 ==> z == 5 * x) && (x >= 25 ==> z == 5 * 25 + (x - 25))\n- (x == 0 ==> y == 0) && (x == 0 ==> z == 0)\n- (x == 100 ==> y == 2) && (x == 100 ==> z == 400)\n- (x < 100 ==> (y >= -1 && y <= 6 && z >= 0 && z <= 500))\n- (x < 100 ==> ((x <= 50 ==> y == x) && (x > 50 ==> y == 100 - x)))\n- (x < 100 ==> ((x < 25 ==> z == 5 * x) && (x >= 25 ==> z == 5 * 25 + (x - 25))))\n\nExplanation of loop invariants:\n- The first three loop invariants are straightforward bounds on the variables x, y, and z respectively.\n- The fourth loop invariant describes the relationship between x and y. When x is less than or equal to 50, y increments by 1 with every iteration. When x is greater than 50, y decrements by 1 with every iteration. This relationship holds throughout the loop.\n- The fifth loop invariant describes the relationship between x and z. When x is less than 25, z increments by 1 with every iteration. When x is greater than or equal to 25, z increments by 5 with every iteration. This relationship holds throughout the loop.\n- The sixth loop invariant describes the initial values of y and z when x is 0.\n- The seventh loop invariant describes the final values of y and z when x is 100.\n- The eighth, ninth, and tenth loop invariants together imply that the bounds on y and z hold true throughout the loop.\n- The eighth loop invariant together with the fourth loop invariant implies that the relationship between x and y holds true throughout the loop.\n- The ninth loop invariant together with the fifth loop invariant implies that the relationship between x and z holds true throughout the loop. \n\nNote: Since there are no non-deterministic variables, we do not need to add any implications to make the invariants true at the beginning or end of the loop."
            ],
            "/*@ \n    loop invariant x >= 0 && x <= 100;\n    loop invariant y >= 0 && y <= 100;\n    loop invariant z >= 0 && z <= 500;\n*/",
            "/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= z <= 400;\nloop invariant x <= 100;\nloop invariant y <= 2;\nloop invariant z <= 400;\nloop invariant (x <= 50) ==> (y == x/25 + 1);\nloop invariant (x > 50) ==> (y == 3 - x/25);\nloop invariant (x <= 25) ==> (z == x);\nloop invariant (x > 25) ==> (z == 5*(x-25) + 25);\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions or variable assignments:\n- The variables x, y, and z are initialized to 0.\n\nLoop condition:\n- The loop continues as long as the value of x is less than 100.\n\nLoop invariants:\n- Before the loop: x == 0 && y == 0 && z == 0\n- In every iteration: \n\t- 0 <= x <= 100\n\t- 0 <= y <= 2\n\t- 0 <= z <= 400\n\t- (x <= 50) ==> (y <= x+1)\n\t- (x > 50) ==> (y >= x-49)\n\t- (x < 25) ==> (z == x+1)\n\t- (x >= 25) ==> (z == 4*x-96)\n- After the loop: x == 100 && y == 2 && z == 400\n\nExplanation:\n- Before the loop, we know that the values of x, y, and z are all 0.\n- In every iteration of the loop, we know that x is between 0 and 100 (inclusive), y is between 0 and 2 (inclusive), and z is between 0 and 400 (inclusive).\n- We also know that if x is less than or equal to 50, then y is less than or equal to x+1, and if x is greater than 50, then y is greater than or equal to x-49. This is because when x is less than or equal to 50, y is incremented by 1, and when x is greater than 50, y is decremented by 1. Therefore, y starts at 0, increases to a maximum of 51, and then decreases back to 2. \n- Similarly, we know that if x is less than 25, then z is equal to x+1, and if x is greater than or equal to 25, then z is equal to 4*x-96. This is because when x is less than 25, z is incremented by 1, and when x is greater than or equal to 25, z is incremented by 5. Therefore, z starts at 0, increases to a maximum of 101, and then increases to a maximum of 400. \n- After the loop, we know that x is equal to 100, y is equal to 2, and z is equal to 400. This is because the loop increments x by 1 on each iteration, and y and z are both modified in a way that ensures their final values."
            ],
            "/*@ \n    loop invariant 0<=x<=100;\n    loop invariant 0<=y<=2;\n    loop invariant 0<=z<=400;\n    loop invariant y>=1 ==> x<=50;\n    loop invariant y<=1 ==> x>50;\n    loop invariant z>=1 ==> x<25;\n    loop invariant z<=5 ==> x>=25;\n    loop invariant (x<25 ==> z==x+1) && (x>=25 ==> z==5*x-124);\n    loop invariant (x<=50 ==> y==x+1) && (x>50 ==> y==-x+101);\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions: None\n\nVariable assignments: \n- x = 0\n- y = 0\n- z = 0\n\nLoop condition: x < 100\n\nWe want to prove the following assertions:\n- z == 400\n- y == 2\n- x == 100\n\nLoop invariants:\n- x >= 0 && x <= 100\n- y >= -1 && y <= 6\n- z >= 0 && z <= 500\n- (x <= 50 ==> y == x) && (x > 50 ==> y == 100 - x)\n- (x < 25 ==> z == 5 * x) && (x >= 25 ==> z == 5 * 25 + (x - 25))\n- (x == 0 ==> y == 0) && (x == 0 ==> z == 0)\n- (x == 100 ==> y == 2) && (x == 100 ==> z == 400)\n- (x < 100 ==> (y >= -1 && y <= 6 && z >= 0 && z <= 500))\n- (x < 100 ==> ((x <= 50 ==> y == x) && (x > 50 ==> y == 100 - x)))\n- (x < 100 ==> ((x < 25 ==> z == 5 * x) && (x >= 25 ==> z == 5 * 25 + (x - 25))))\n\nExplanation of loop invariants:\n- The first three loop invariants are straightforward bounds on the variables x, y, and z respectively.\n- The fourth loop invariant describes the relationship between x and y. When x is less than or equal to 50, y increments by 1 with every iteration. When x is greater than 50, y decrements by 1 with every iteration. This relationship holds throughout the loop.\n- The fifth loop invariant describes the relationship between x and z. When x is less than 25, z increments by 1 with every iteration. When x is greater than or equal to 25, z increments by 5 with every iteration. This relationship holds throughout the loop.\n- The sixth loop invariant describes the initial values of y and z when x is 0.\n- The seventh loop invariant describes the final values of y and z when x is 100.\n- The eighth, ninth, and tenth loop invariants together imply that the bounds on y and z hold true throughout the loop.\n- The eighth loop invariant together with the fourth loop invariant implies that the relationship between x and y holds true throughout the loop.\n- The ninth loop invariant together with the fifth loop invariant implies that the relationship between x and z holds true throughout the loop. \n\nNote: Since there are no non-deterministic variables, we do not need to add any implications to make the invariants true at the beginning or end of the loop.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 0 && x <= 100;\n    loop invariant y >= 0 && y <= 100;\n    loop invariant z >= 0 && z <= 500;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 && x <= 100 is partially proven to be inductive.\nloop invariant y >= 0 && y <= 100 is established but not preserved.\nloop invariant z >= 0 && z <= 500 is established but not preserved.\nAssertion z == 400: Unproven\nAssertion y == 2: Unproven\nAssertion x == 100: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: x >= 0 && x <= 100;\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= z <= 400;\nloop invariant x <= 100;\nloop invariant y <= 2;\nloop invariant z <= 400;\nloop invariant (x <= 50) ==> (y == x/25 + 1);\nloop invariant (x > 50) ==> (y == 3 - x/25);\nloop invariant (x <= 25) ==> (z == x);\nloop invariant (x > 25) ==> (z == 5*(x-25) + 25);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant 0 <= y <= 2 is partially proven to be inductive.\nloop invariant 0 <= z <= 400 is partially proven to be inductive.\nloop invariant x <= 100 is partially proven to be inductive.\nloop invariant y <= 2 is partially proven to be inductive.\nloop invariant z <= 400 is partially proven to be inductive.\nloop invariant (x <= 50) ==> (y == x/25 + 1) is preserved but not established.\nloop invariant (x > 50) ==> (y == 3 - x/25) is partially proven to be inductive.\nloop invariant (x <= 25) ==> (z == x) is partially proven to be inductive.\nloop invariant (x > 25) ==> (z == 5*(x-25) + 25) is partially proven to be inductive.\nAssertion z == 400: Partially proven\nAssertion y == 2: Partially proven\nAssertion x == 100: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\n\nloop invariant i3: 0 <= z <= 400;\nloop invariant i4: x <= 100;\n\nloop invariant i6: z <= 400;\n\n\nloop invariant i9: (x <= 25) ==> (z == x);\nloop invariant i10: (x > 25) ==> (z == 5*(x-25) + 25);\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions or variable assignments:\n- The variables x, y, and z are initialized to 0.\n\nLoop condition:\n- The loop continues as long as the value of x is less than 100.\n\nLoop invariants:\n- Before the loop: x == 0 && y == 0 && z == 0\n- In every iteration: \n\t- 0 <= x <= 100\n\t- 0 <= y <= 2\n\t- 0 <= z <= 400\n\t- (x <= 50) ==> (y <= x+1)\n\t- (x > 50) ==> (y >= x-49)\n\t- (x < 25) ==> (z == x+1)\n\t- (x >= 25) ==> (z == 4*x-96)\n- After the loop: x == 100 && y == 2 && z == 400\n\nExplanation:\n- Before the loop, we know that the values of x, y, and z are all 0.\n- In every iteration of the loop, we know that x is between 0 and 100 (inclusive), y is between 0 and 2 (inclusive), and z is between 0 and 400 (inclusive).\n- We also know that if x is less than or equal to 50, then y is less than or equal to x+1, and if x is greater than 50, then y is greater than or equal to x-49. This is because when x is less than or equal to 50, y is incremented by 1, and when x is greater than 50, y is decremented by 1. Therefore, y starts at 0, increases to a maximum of 51, and then decreases back to 2. \n- Similarly, we know that if x is less than 25, then z is equal to x+1, and if x is greater than or equal to 25, then z is equal to 4*x-96. This is because when x is less than 25, z is incremented by 1, and when x is greater than or equal to 25, z is incremented by 5. Therefore, z starts at 0, increases to a maximum of 101, and then increases to a maximum of 400. \n- After the loop, we know that x is equal to 100, y is equal to 2, and z is equal to 400. This is because the loop increments x by 1 on each iteration, and y and z are both modified in a way that ensures their final values.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 7,
                "annotations": "/*@ \n    loop invariant 0<=x<=100;\n    loop invariant 0<=y<=2;\n    loop invariant 0<=z<=400;\n    loop invariant y>=1 ==> x<=50;\n    loop invariant y<=1 ==> x>50;\n    loop invariant z>=1 ==> x<25;\n    loop invariant z<=5 ==> x>=25;\n    loop invariant (x<25 ==> z==x+1) && (x>=25 ==> z==5*x-124);\n    loop invariant (x<=50 ==> y==x+1) && (x>50 ==> y==-x+101);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0<=x<=100 is partially proven to be inductive.\nloop invariant 0<=y<=2 is partially proven to be inductive.\nloop invariant 0<=z<=400 is partially proven to be inductive.\nloop invariant y>=1 ==> x<=50 is partially proven to be inductive.\nloop invariant y<=1 ==> x>50 is preserved but not established.\nloop invariant z>=1 ==> x<25 is partially proven to be inductive.\nloop invariant z<=5 ==> x>=25 is partially proven to be inductive.\nloop invariant (x<25 ==> z==x+1) && (x>=25 ==> z==5*x-124) is partially proven to be inductive.\nloop invariant (x<=50 ==> y==x+1) && (x>50 ==> y==-x+101) is partially proven to be inductive.\nAssertion z == 400: Partially proven\nAssertion y == 2: Partially proven\nAssertion x == 100: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0<=x<=100;\n\n\n\n\n\n\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant x >= 0 && x <= 100 is partially proven to be inductive.\nloop invariant y >= 0 && y <= 100 is partially proven to be inductive.\nloop invariant z >= 0 && z <= 500 is partially proven to be inductive.\nloop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant 0 <= y <= 2 is partially proven to be inductive.\nloop invariant 0 <= z <= 400 is partially proven to be inductive.\nloop invariant x <= 100 is partially proven to be inductive.\nloop invariant y <= 2 is partially proven to be inductive.\nloop invariant z <= 400 is partially proven to be inductive.\nloop invariant (x <= 50) ==> (y == x/25 + 1) is preserved but not established.\nloop invariant (x > 50) ==> (y == 3 - x/25) is partially proven to be inductive.\nloop invariant (x <= 25) ==> (z == x) is partially proven to be inductive.\nloop invariant (x > 25) ==> (z == 5*(x-25) + 25) is partially proven to be inductive.\nloop invariant 0<=x<=100 is partially proven to be inductive.\nloop invariant 0<=y<=2 is partially proven to be inductive.\nloop invariant 0<=z<=400 is partially proven to be inductive.\nloop invariant y>=1 ==> x<=50 is partially proven to be inductive.\nloop invariant y<=1 ==> x>50 is partially proven to be inductive.\nloop invariant z>=1 ==> x<25 is partially proven to be inductive.\nloop invariant z<=5 ==> x>=25 is partially proven to be inductive.\nloop invariant (x<25 ==> z==x+1) && (x>=25 ==> z==5*x-124) is partially proven to be inductive.\nloop invariant (x<=50 ==> y==x+1) && (x>50 ==> y==-x+101) is partially proven to be inductive.\nAssertion z == 400: Partially proven\nAssertion y == 2: Partially proven\nAssertion x == 100: Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: x >= 0 && x <= 100;\nloop invariant i2: y >= 0 && y <= 100;\nloop invariant i3: z >= 0 && z <= 500;\nloop invariant i4: 0 <= x <= 100;\nloop invariant i5: 0 <= y <= 2;\nloop invariant i6: 0 <= z <= 400;\nloop invariant i7: x <= 100;\nloop invariant i8: y <= 2;\nloop invariant i9: z <= 400;\nloop invariant i10: (x <= 50) ==> (y == x/25 + 1);\nloop invariant i11: (x > 50) ==> (y == 3 - x/25);\nloop invariant i12: (x <= 25) ==> (z == x);\nloop invariant i13: (x > 25) ==> (z == 5*(x-25) + 25);\nloop invariant i14: 0<=x<=100;\nloop invariant i15: 0<=y<=2;\nloop invariant i16: 0<=z<=400;\nloop invariant i17: y>=1 ==> x<=50;\nloop invariant i18: y<=1 ==> x>50;\nloop invariant i19: z>=1 ==> x<25;\nloop invariant i20: z<=5 ==> x>=25;\nloop invariant i21: (x<25 ==> z==x+1) && (x>=25 ==> z==5*x-124);\nloop invariant i22: (x<=50 ==> y==x+1) && (x>50 ==> y==-x+101);\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
        "combined_annotation_num_solver_calls": 10,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: x >= 0 && x <= 100;\n\nloop invariant i3: z >= 0 && z <= 500;\nloop invariant i4: 0 <= x <= 100;\n\nloop invariant i6: 0 <= z <= 400;\nloop invariant i7: x <= 100;\n\nloop invariant i9: z <= 400;\n\n\nloop invariant i12: (x <= 25) ==> (z == x);\nloop invariant i13: (x > 25) ==> (z == 5*(x-25) + 25);\nloop invariant i14: 0<=x<=100;\n\nloop invariant i16: 0<=z<=400;\n\n\n\n\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c"
        ],
        "skipped": [],
        "total": 225,
        "success_count": 104,
        "failure_count": 121,
        "success_rate": 0.4622222222222222
    }
}