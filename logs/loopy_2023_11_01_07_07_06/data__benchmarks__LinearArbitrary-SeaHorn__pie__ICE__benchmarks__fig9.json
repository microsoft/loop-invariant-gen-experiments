{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\n\tint x, y;\n\tx = 0;\n\ty = 0;\n\n\twhile(y >= 0) {\n\n\t\ty = y + x;\n\t\n\t}\n\n\t{;\n//@ assert(0 == 1);\n}\n\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main() {\n\n\tint x, y;\n\tx = 0;\n\ty = 0;\n\n\twhile(y >= 0) {\n\n\t\ty = y + x;\n\t\n\t}\n\n\t{;\n//@ assert(0 == 1);\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Before the loop execution:\n- x >= 0\n- y >= 0\n\nIn every iteration of the loop:\n- x >= 0\n- y >= 0\n- y_old >= y, where y_old is the value of y at the beginning of the iteration.\n\nAfter the loop termination:\n- x >= 0\n- y >= 0\n- y_old >= y, where y_old is the value of y at the beginning of the last iteration.\n\nThese invariants imply that y is non-negative at the end of the loop. However, they do not imply the assertion in the code block following the loop, because the assertion is always false. Therefore, we need to strengthen the loop invariants.\n\nWe can observe that x is never changed in the loop, and y is only increased by x in each iteration. Therefore, after n iterations, y is equal to n*x. Thus, we can add the following invariant:\n\n- y == k*x, where k is a non-negative integer and y_old <= y.\n\nThis invariant implies that y is always a multiple of x, and if x is positive, then y is always increasing. \n\nNow, we can use implication to strengthen the loop invariants to imply the assertion:\n- (y >= 0 && x == 0) ==> 0 == 1\n- (y >= 0 && x > 0 && y % x == 0) ==> 0 == 1\n\nThe first implication covers the case when x is zero and y is non-negative. In this case, the loop will never terminate, and the assertion will fail. The second implication covers the case when x is positive and y is always a multiple of x. In this case, the loop will also never terminate, and the assertion will fail.\n\nTherefore, the final loop invariants are:\n\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y_old >= y;\n    loop invariant y == k*x, where k is a non-negative integer and y_old <= y;\n    loop invariant (y >= 0 && x == 0) ==> 0 == 1;\n    loop invariant (y >= 0 && x > 0 && y % x == 0) ==> 0 == 1;\n*/\n",
            "We need to find loop invariants for the while loop in the given program. Let's follow the steps to find the necessary loop invariants:\n\n**Step 1: Pre-conditions**\n- None.\n\n**Step 2: Loop condition**\n- The loop condition is `y >= 0`.\n\n**Step 3: Post-condition**\n- `assert(0 == 1)`\n\n**Step 4: Analysis of loop body**\n- The loop body has only one statement: `y = y + x;`\n\n**Step 5: Loop invariants**\n- Before the loop execution, `x` and `y` should be greater than or equal to 0.\n```\n/*@ loop invariant x >= 0;\n    loop invariant y >= 0;\n*/\n```\n- In every iteration of the loop, the value of `y` should be greater than or equal to its previous value.\n```\n/*@ loop invariant y >= \\at(y, Pre);\n*/\n```\n- In every iteration of the loop, the value of `x` should be less than or equal to `y`.\n```\n/*@ loop invariant x <= y;\n*/\n```\n- After the loop termination, the assertion is executed only if `y` is less than 0.\n```\n/*@ loop invariant y < 0 ==> (0 == 1);\n*/\n```\n\nNote that since `x` and `y` are initialized to 0 before the loop, the loop invariants hold trivially before the loop execution. Also, since there is no assignment to `x` inside the loop, the loop invariant for `x` holds trivially in every iteration of the loop.\n\nTherefore, the final set of loop invariants are:\n```\n/*@ loop invariant y >= 0;\n    loop invariant y >= \\at(y, Pre);\n    loop invariant x <= y;\n    loop invariant y < 0 ==> (0 == 1);\n*/\n```",
            "Pre-conditions: None\n\nVariable assignments: \n- x = 0\n- y = 0\n\nLoop condition: y >= 0\n\nPost-condition: 0 == 1\n\nSince the loop condition is y >= 0, we can infer that y is non-negative throughout the loop. Therefore, we can add the following loop invariant before the loop execution:\n\n```\n/*@ loop invariant y >= 0; */\n```\n\nSince x is not modified inside the loop, we can add the following loop invariant that holds in every iteration of the loop:\n\n```\n/*@ loop invariant x >= 0; */\n```\n\nNow, we need to find a loop invariant that implies the post-condition. Since the assertion is always false, we can use any loop invariant that is false or doesn't imply the assertion. One such loop invariant is:\n\n```\n/*@ loop invariant 1 == 0 ==> x >= 0; */\n```\n\nThis invariant is always true since the antecedent is false. Therefore, we can add it to the loop invariants.\n\nFinally, since there are no non-deterministic values in the program, we don't need to add any implications to make the loop invariants trivially true at the beginning or end of the loop.\n\nPutting everything together, we get the following loop invariants:\n\n```\n/*@ \n    loop invariant y >= 0;\n    loop invariant x >= 0;\n    loop invariant 1 == 0 ==> x >= 0;\n*/\n```",
            "Pre-conditions: None.\n\nVariable assignments: \n- x = 0;\n- y = 0;\n\nLoop condition: y >= 0\n\nPost-condition: assert(0 == 1)\n\nLoop invariants:\n- Before the loop: \n    - x >= 0\n    - y >= 0\n\n- In every iteration:\n    - x >= 0\n    - y >= 0\n    - y >= \\old(y)  (* y is non-decreasing *)\n    - x <= \\max(0, -\\old(y)) (* to ensure that y doesn't become negative *)\n\n- After the loop:\n    - y >= \\old(y)  (* y is non-decreasing *)\n    - x <= \\max(0, -\\old(y)) (* to ensure that y doesn't become negative *)\n    - y < 0 ==> 0 == 1  (* if y becomes negative, the assertion should fail *)\n\nPutting all the loop invariants together, we get:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y >= \\old(y);\n    loop invariant x <= \\max(0, -\\old(y));\n    loop invariant y >= 0 ==> (y < 0 ==> 0 == 1);\n*/\n```",
            "Pre-conditions:\n- None\n\nVariable assignments:\n- x = 0;\n- y = 0;\n\nLoop condition:\n- y >= 0\n\nLoop body:\n- y = y + x;\n\nPost-condition:\n- 0 == 1 (always false)\n\nLoop invariants:\n- Since x is initialized to 0 and not modified within the loop, we can add the invariant:\n```\n/*@ loop invariant x >= 0 && x <= 0; */\n```\n- Since y is initialized to 0 and incremented by x in each iteration of the loop, we can add the invariant:\n```\n/*@ loop invariant y >= 0; */\n```\n- Since the loop only terminates when y becomes negative, we can add the invariant:\n```\n/*@ loop invariant y >= 0 ==> y >= x; */\n```\n- Since the post-condition is always false, we can add the invariant:\n```\n/*@ loop invariant 0 == 1 ==> y < 0; */\n```\nPutting all the loop invariants together, we have:\n```\n/*@ \n    loop invariant x >= 0 && x <= 0;\n    loop invariant y >= 0;\n    loop invariant y >= 0 ==> y >= x;\n    loop invariant 0 == 1 ==> y < 0;\n*/\n```\nNote that the last invariant is trivially true, but it helps to make the implication in the post-condition explicit."
        ],
        "annotation_blocks": [
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Before the loop execution:\n- x >= 0\n- y >= 0\n\nIn every iteration of the loop:\n- x >= 0\n- y >= 0\n- y_old >= y, where y_old is the value of y at the beginning of the iteration.\n\nAfter the loop termination:\n- x >= 0\n- y >= 0\n- y_old >= y, where y_old is the value of y at the beginning of the last iteration.\n\nThese invariants imply that y is non-negative at the end of the loop. However, they do not imply the assertion in the code block following the loop, because the assertion is always false. Therefore, we need to strengthen the loop invariants.\n\nWe can observe that x is never changed in the loop, and y is only increased by x in each iteration. Therefore, after n iterations, y is equal to n*x. Thus, we can add the following invariant:\n\n- y == k*x, where k is a non-negative integer and y_old <= y.\n\nThis invariant implies that y is always a multiple of x, and if x is positive, then y is always increasing. \n\nNow, we can use implication to strengthen the loop invariants to imply the assertion:\n- (y >= 0 && x == 0) ==> 0 == 1\n- (y >= 0 && x > 0 && y % x == 0) ==> 0 == 1\n\nThe first implication covers the case when x is zero and y is non-negative. In this case, the loop will never terminate, and the assertion will fail. The second implication covers the case when x is positive and y is always a multiple of x. In this case, the loop will also never terminate, and the assertion will fail.\n\nTherefore, the final loop invariants are:\n\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y_old >= y;\n    loop invariant y == k*x, where k is a non-negative integer and y_old <= y;\n    loop invariant (y >= 0 && x == 0) ==> 0 == 1;\n    loop invariant (y >= 0 && x > 0 && y % x == 0) ==> 0 == 1;\n*/\n"
            ],
            "/*@ loop invariant x >= 0;\n    loop invariant y >= 0;\n*/",
            "/*@ loop invariant y >= 0; */",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y >= \\old(y);\n    loop invariant x <= \\max(0, -\\old(y));\n    loop invariant y >= 0 ==> (y < 0 ==> 0 == 1);\n*/",
            "/*@ loop invariant x >= 0 && x <= 0; */"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Before the loop execution:\n- x >= 0\n- y >= 0\n\nIn every iteration of the loop:\n- x >= 0\n- y >= 0\n- y_old >= y, where y_old is the value of y at the beginning of the iteration.\n\nAfter the loop termination:\n- x >= 0\n- y >= 0\n- y_old >= y, where y_old is the value of y at the beginning of the last iteration.\n\nThese invariants imply that y is non-negative at the end of the loop. However, they do not imply the assertion in the code block following the loop, because the assertion is always false. Therefore, we need to strengthen the loop invariants.\n\nWe can observe that x is never changed in the loop, and y is only increased by x in each iteration. Therefore, after n iterations, y is equal to n*x. Thus, we can add the following invariant:\n\n- y == k*x, where k is a non-negative integer and y_old <= y.\n\nThis invariant implies that y is always a multiple of x, and if x is positive, then y is always increasing. \n\nNow, we can use implication to strengthen the loop invariants to imply the assertion:\n- (y >= 0 && x == 0) ==> 0 == 1\n- (y >= 0 && x > 0 && y % x == 0) ==> 0 == 1\n\nThe first implication covers the case when x is zero and y is non-negative. In this case, the loop will never terminate, and the assertion will fail. The second implication covers the case when x is positive and y is always a multiple of x. In this case, the loop will also never terminate, and the assertion will fail.\n\nTherefore, the final loop invariants are:\n\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y_old >= y;\n    loop invariant y == k*x, where k is a non-negative integer and y_old <= y;\n    loop invariant (y >= 0 && x == 0) ==> 0 == 1;\n    loop invariant (y >= 0 && x > 0 && y % x == 0) ==> 0 == 1;\n*/\n",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ loop invariant x >= 0;\n    loop invariant y >= 0;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nAssertion 0 == 1: Valid"
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ loop invariant y >= 0; */",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant y >= 0 is established but not preserved.\nAssertion 0 == 1: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\n\tint x, y;\n\tx = 0;\n\ty = 0;\n\n\t/*@\n\n*/\nwhile(y >= 0) {\n\n\t\ty = y + x;\n\t\n\t}\n\n\t{;\n//@ assert(0 == 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y >= \\old(y);\n    loop invariant x <= \\max(0, -\\old(y));\n    loop invariant y >= 0 ==> (y < 0 ==> 0 == 1);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: \\old undefined in this context. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\n\tint x, y;\n\tx = 0;\n\ty = 0;\n\n\t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\n\n\nloop invariant i5: y >= 0 ==> (y < 0 ==> 0 == 1);\n*/\nwhile(y >= 0) {\n\n\t\ty = y + x;\n\t\n\t}\n\n\t{;\n//@ assert(0 == 1);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ loop invariant x >= 0 && x <= 0; */",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 && x <= 0 is inductive.\nAssertion 0 == 1: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\n\tint x, y;\n\tx = 0;\n\ty = 0;\n\n\t/*@\nloop invariant i1: x >= 0 && x <= 0;\n*/\nwhile(y >= 0) {\n\n\t\ty = y + x;\n\t\n\t}\n\n\t{;\n//@ assert(0 == 1);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 12: \\old undefined in this context. Ignoring loop annotation",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\n\tint x, y;\n\tx = 0;\n\ty = 0;\n\n\t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: y >= \\old(y);\nloop invariant i4: x <= \\max(0, -\\old(y));\nloop invariant i5: y >= 0 ==> (y < 0 ==> 0 == 1);\nloop invariant i6: x >= 0 && x <= 0;\n*/\nwhile(y >= 0) {\n\n\t\ty = y + x;\n\t\n\t}\n\n\t{;\n//@ assert(0 == 1);\n}\n\n}",
        "combined_annotation_num_solver_calls": 3,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\n\tint x, y;\n\tx = 0;\n\ty = 0;\n\n\t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\n\n\nloop invariant i5: y >= 0 ==> (y < 0 ==> 0 == 1);\nloop invariant i6: x >= 0 && x <= 0;\n*/\nwhile(y >= 0) {\n\n\t\ty = y + x;\n\t\n\t}\n\n\t{;\n//@ assert(0 == 1);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c"
        ],
        "skipped": [],
        "total": 197,
        "success_count": 88,
        "failure_count": 109,
        "success_rate": 0.4467005076142132
    }
}