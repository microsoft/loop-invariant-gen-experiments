{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loop-lit/jm2006_variant.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    while(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    while(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- `i` and `j` are initialized with non-deterministic values.\n- `LARGE_INT` is a constant with a large positive value.\n\nVariable bounds:\n- `i >= 0 && i <= LARGE_INT`\n- `j >= 0`\n\nLoop condition:\n- `x != 0`\n\nLoop invariants:\n```\n/*@ \n    loop invariant 0 <= x <= i;\n    loop invariant 0 <= y <= j;\n    loop invariant z == i - x;\n    loop invariant x + y/2 == i + j/2;\n*/\n```\nExplanation:\n- The first invariant ensures that `x` remains between 0 and `i` (both inclusive) throughout the loop execution.\n- The second invariant ensures that `y` remains non-negative throughout the loop execution.\n- The third invariant ensures that the value of `z` is equal to the difference between the initial value of `i` and the current value of `x`. This holds true as `z` increments by 1 in each iteration of the loop, and `i - x` decreases by 1 in each iteration of the loop, until `x` becomes 0.\n- The fourth invariant ensures that the sum of `x` and `y/2` remains constant throughout the loop execution, and is equal to the sum of the initial values of `i` and `j/2`. This is because in each iteration of the loop, `x` decreases by 1 and `y` decreases by 2, so the sum of `x` and `y/2` remains constant.\n\nImplication to handle non-deterministic variables:\n- Since `i` and `j` are non-deterministic, we can add the following implication at the beginning of the loop to make the invariants trivially true for the first iteration:\n```\n    loop invariant (i < 0 || i > LARGE_INT) ==> (x == i && y == j && z == 0);\n```\n- Since the value of `x` becomes 0 after the loop execution, we can add the following implication after the loop to make the invariants trivially true for the last iteration:\n```\n    loop invariant x == 0 ==> (i == j ==> y == -z);\n```\n- Finally, we can use implication to handle the assertion that is guarded by a condition:\n```\n    if (i == j) {\n        //@ assert (y == -z) ==> (i == j);\n    }\n```",
            "Pre-conditions:\n- Variables i and j are assigned non-negative integer values.\n- i is less than or equal to LARGE_INT.\n\nLoop condition:\n- The loop continues as long as x is not equal to 0.\n\nPost-condition:\n- If i is equal to j, then y is equal to negative z.\n\nLoop invariants:\n```\n/*@ \n    loop invariant 0 <= x <= i;\n    loop invariant j + 2*z == y;\n    loop invariant z <= i;\n    loop invariant z == (\\at(i, Pre) - x);\n    loop invariant (x == 0) ==> (y == j - 2*z);\n*/\n```\nExplanation:\n- The first loop invariant ensures that the value of x is always between 0 and i.\n- The second loop invariant ensures that the value of y is always equal to j plus twice the number of times the loop has executed.\n- The third loop invariant ensures that the value of z is always less than or equal to i.\n- The fourth loop invariant ensures that the value of z is always equal to the difference between the original value of i and the current value of x.\n- The fifth loop invariant ensures that if x is 0 (i.e., the loop has terminated), then y is equal to j minus twice the number of times the loop has executed. This is necessary because if the loop has terminated, then x can only be 0, and we need to ensure that the relationship between y and z still holds.",
            "First, let's analyze the pre-conditions and variable assignments in the program:\n\n- `i` and `j` are assigned values from a non-deterministic function `unknown_int()`.\n- `i` must be between `0` and `LARGE_INT` (inclusive).\n- `j` must be greater than or equal to `0`.\n- `x` is initialized to `i`.\n- `y` is initialized to `j`.\n- `z` is initialized to `0`.\n\nNow, let's analyze the loop body and the loop condition:\n\n- The loop condition is `x != 0`.\n- In each iteration, `x` is decremented by `1`, `y` is decremented by `2`, and `z` is incremented by `1`.\n\nBased on this analysis, we can come up with the following loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= x <= i;\n    loop invariant j >= y >= j - 2 * z;\n    loop invariant 0 <= z <= i;\n*/\n```\n\nExplanation:\n\n- The first invariant states that `x` is always between `0` and `i`, inclusive. This is true before the loop starts and in every iteration of the loop because `x` is decremented by `1` in each iteration, and it started with a value between `0` and `i` (inclusive).\n- The second invariant states that `y` is always between `j - 2 * z` and `j`, inclusive. This is true before the loop starts and in every iteration of the loop because `y` is decremented by `2` in each iteration, and it started with a value greater than or equal to `j`.\n- The third invariant states that `z` is always between `0` and `i`, inclusive. This is true before the loop starts and in every iteration of the loop because `z` is incremented by `1` in each iteration, and it started with a value of `0`.\n\nNow, let's analyze the post-condition:\n\n- If `i` is equal to `j`, then `y` must be equal to `-z`.\n\nTo prove the post-condition, we need to add an implication based on the guard condition of the assertion:\n\n```\nif (i == j) {\n    //@ assert (y == -z);\n}\n```\n\nThe implication is:\n\n```\n(i == j) ==> (y == -z)\n```\n\nTherefore, our final loop invariants are:\n\n```\n/*@ \n    loop invariant 0 <= x <= i;\n    loop invariant j >= y >= j - 2 * z;\n    loop invariant 0 <= z <= i;\n    loop invariant (i != j) || (y == -z);\n*/\n```",
            "Pre-conditions:\n\n- `i` and `j` are initialized with values returned by `unknown_int()` function.\n- `i` is greater than or equal to zero and less than or equal to `LARGE_INT`.\n- `j` is greater than or equal to zero.\n\nLoop Condition:\n\n- `x` is not equal to zero.\n\nLoop Invariants:\n\n- `i >= 0 && i <= LARGE_INT`\n- `j >= 0`\n- `x >= 0`\n- `y = j - 2*z`\n- `z >= 0`\n\nExplanation:\n\n- The first two invariants are the pre-conditions of the program.\n- The third invariant states that `x` is always non-negative during the loop execution.\n- The fourth invariant is derived from the loop body. In each iteration, `y` is decremented by 2 and `z` is incremented by 1. Therefore, `y` equals `j - 2*z`.\n- The last invariant states that `z` is always non-negative during the loop execution.\n\nPost-condition:\n\n- If `i` is equal to `j`, then `y` is equal to `-z`.\n\nTherefore, we need to add an implication for the post-condition:\n\n- `i == j ==> y == -z`\n\nPutting it all together:\n\n```\n/*@ \n    loop invariant i >= 0 && i <= LARGE_INT;\n    loop invariant j >= 0;\n    loop invariant x >= 0;\n    loop invariant y == j - 2*z;\n    loop invariant z >= 0;\n\n    loop invariant i == j ==> y == -z;\n*/\n```\n\nNote: The program contains non-deterministic behavior due to the `unknown_int()` function, which makes it impossible to bound the exact values of `i` and `j`. However, we can still make certain assumptions about their lower bounds and use those invariants to reason about the program.",
            "Pre-conditions:\n- The program does not have any pre-condition.\n- The program assigns values to i and j using the function `unknown_int()`.\n- The program checks if i is between 0 and LARGE_INT, and j is greater than or equal to 0. If any of these conditions is not satisfied, the program returns 0 and terminates.\n\nLoop condition:\n- The loop condition is `x != 0`.\n\nLoop invariants:\n- Before the loop execution, the following loop invariants hold:\n    ```\n    // i, j are non-negative\n    i >= 0 && j >= 0\n    \n    // i is less than or equal to LARGE_INT\n    i <= LARGE_INT\n    \n    // z is initialized to 0\n    z == 0\n    ```\n- In every iteration of the loop, the following loop invariants hold:\n    ```\n    // x >= 0\n    x >= 0\n    \n    // y is decreased by 2 in each iteration\n    y == j - 2 * z\n    \n    // z is increased by 1 in each iteration\n    z == old_z + 1\n    ```\n- After the loop termination, the following loop invariants hold:\n    ```\n    // x == 0\n    x == 0\n    \n    // y == j - 2 * z\n    y == j - 2 * z\n    \n    // If i == j, then y == -z\n    (i == j) ==> (y == -z)\n    ```\n\nExplanation:\n- The first loop invariant ensures that i and j are non-negative, which is necessary for the loop to execute correctly. \n- The second loop invariant ensures that i is less than or equal to LARGE_INT, which is necessary to satisfy the pre-condition. \n- The third loop invariant ensures that z is initialized to 0 before the loop execution.\n- The first invariant in every iteration ensures that x remains non-negative throughout the loop execution.\n- The second invariant in every iteration ensures that y is decreased by 2 in each iteration of the loop. This is because x is decreased by 1 and y is decreased by 2 in each iteration.\n- The third invariant in every iteration ensures that z is increased by 1 in each iteration of the loop.\n- The first invariant after the loop termination ensures that x is 0, which is necessary for the program to continue executing correctly.\n- The second invariant after the loop termination ensures that y is equal to j minus twice the number of times the loop was executed.\n- The third invariant after the loop termination ensures that if i and j are equal, then y is equal to the negative of the number of times the loop was executed. This is because in each iteration of the loop, y is decreased by 2 and z is increased by 1. Therefore, y is equal to negative z when the loop terminates."
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant 0 <= x <= i;\n    loop invariant 0 <= y <= j;\n    loop invariant z == i - x;\n    loop invariant x + y/2 == i + j/2;\n*/",
            "/*@ \n    loop invariant 0 <= x <= i;\n    loop invariant j + 2*z == y;\n    loop invariant z <= i;\n    loop invariant z == (\\at(i, Pre) - x);\n    loop invariant (x == 0) ==> (y == j - 2*z);\n*/",
            "/*@ \n    loop invariant 0 <= x <= i;\n    loop invariant j >= y >= j - 2 * z;\n    loop invariant 0 <= z <= i;\n*/",
            "/*@ \n    loop invariant i >= 0 && i <= LARGE_INT;\n    loop invariant j >= 0;\n    loop invariant x >= 0;\n    loop invariant y == j - 2*z;\n    loop invariant z >= 0;\n\n    loop invariant i == j ==> y == -z;\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The program does not have any pre-condition.\n- The program assigns values to i and j using the function `unknown_int()`.\n- The program checks if i is between 0 and LARGE_INT, and j is greater than or equal to 0. If any of these conditions is not satisfied, the program returns 0 and terminates.\n\nLoop condition:\n- The loop condition is `x != 0`.\n\nLoop invariants:\n- Before the loop execution, the following loop invariants hold:\n    ```\n    // i, j are non-negative\n    i >= 0 && j >= 0\n    \n    // i is less than or equal to LARGE_INT\n    i <= LARGE_INT\n    \n    // z is initialized to 0\n    z == 0\n    ```\n- In every iteration of the loop, the following loop invariants hold:\n    ```\n    // x >= 0\n    x >= 0\n    \n    // y is decreased by 2 in each iteration\n    y == j - 2 * z\n    \n    // z is increased by 1 in each iteration\n    z == old_z + 1\n    ```\n- After the loop termination, the following loop invariants hold:\n    ```\n    // x == 0\n    x == 0\n    \n    // y == j - 2 * z\n    y == j - 2 * z\n    \n    // If i == j, then y == -z\n    (i == j) ==> (y == -z)\n    ```\n\nExplanation:\n- The first loop invariant ensures that i and j are non-negative, which is necessary for the loop to execute correctly. \n- The second loop invariant ensures that i is less than or equal to LARGE_INT, which is necessary to satisfy the pre-condition. \n- The third loop invariant ensures that z is initialized to 0 before the loop execution.\n- The first invariant in every iteration ensures that x remains non-negative throughout the loop execution.\n- The second invariant in every iteration ensures that y is decreased by 2 in each iteration of the loop. This is because x is decreased by 1 and y is decreased by 2 in each iteration.\n- The third invariant in every iteration ensures that z is increased by 1 in each iteration of the loop.\n- The first invariant after the loop termination ensures that x is 0, which is necessary for the program to continue executing correctly.\n- The second invariant after the loop termination ensures that y is equal to j minus twice the number of times the loop was executed.\n- The third invariant after the loop termination ensures that if i and j are equal, then y is equal to the negative of the number of times the loop was executed. This is because in each iteration of the loop, y is decreased by 2 and z is increased by 1. Therefore, y is equal to negative z when the loop terminates."
            ]
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= x <= i;\n    loop invariant 0 <= y <= j;\n    loop invariant z == i - x;\n    loop invariant x + y/2 == i + j/2;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= i is partially proven to be inductive.\nloop invariant 0 <= y <= j is established but not preserved.\nloop invariant z == i - x is partially proven to be inductive.\nloop invariant x + y/2 == i + j/2 is established but not preserved.\nAssertion y == -z: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\nloop invariant i1: 0 <= x <= i;\n\nloop invariant i3: z == i - x;\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "/*@ \n    loop invariant 0 <= x <= i;\n    loop invariant j + 2*z == y;\n    loop invariant z <= i;\n    loop invariant z == (\\at(i, Pre) - x);\n    loop invariant (x == 0) ==> (y == j - 2*z);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 19: unbound logic variable i. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\nloop invariant i1: 0 <= x <= i;\n\n\n\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= x <= i;\n    loop invariant j >= y >= j - 2 * z;\n    loop invariant 0 <= z <= i;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= i is partially proven to be inductive.\nloop invariant j >= y >= j - 2 * z is partially proven to be inductive.\nloop invariant 0 <= z <= i is established but not preserved.\nAssertion y == -z: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\nloop invariant i1: 0 <= x <= i;\nloop invariant i2: j >= y >= j - 2 * z;\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant i >= 0 && i <= LARGE_INT;\n    loop invariant j >= 0;\n    loop invariant x >= 0;\n    loop invariant y == j - 2*z;\n    loop invariant z >= 0;\n\n    loop invariant i == j ==> y == -z;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 0 && i <= LARGE_INT is partially proven to be inductive.\nloop invariant j >= 0 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant y == j - 2*z is partially proven to be inductive.\nloop invariant z >= 0 is partially proven to be inductive.\nloop invariant i == j ==> y == -z is neither established nor preserved.\nAssertion y == -z: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\nloop invariant i1: i >= 0 && i <= LARGE_INT;\nloop invariant i2: j >= 0;\nloop invariant i3: x >= 0;\nloop invariant i4: y == j - 2*z;\nloop invariant i5: z >= 0;\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The program does not have any pre-condition.\n- The program assigns values to i and j using the function `unknown_int()`.\n- The program checks if i is between 0 and LARGE_INT, and j is greater than or equal to 0. If any of these conditions is not satisfied, the program returns 0 and terminates.\n\nLoop condition:\n- The loop condition is `x != 0`.\n\nLoop invariants:\n- Before the loop execution, the following loop invariants hold:\n    ```\n    // i, j are non-negative\n    i >= 0 && j >= 0\n    \n    // i is less than or equal to LARGE_INT\n    i <= LARGE_INT\n    \n    // z is initialized to 0\n    z == 0\n    ```\n- In every iteration of the loop, the following loop invariants hold:\n    ```\n    // x >= 0\n    x >= 0\n    \n    // y is decreased by 2 in each iteration\n    y == j - 2 * z\n    \n    // z is increased by 1 in each iteration\n    z == old_z + 1\n    ```\n- After the loop termination, the following loop invariants hold:\n    ```\n    // x == 0\n    x == 0\n    \n    // y == j - 2 * z\n    y == j - 2 * z\n    \n    // If i == j, then y == -z\n    (i == j) ==> (y == -z)\n    ```\n\nExplanation:\n- The first loop invariant ensures that i and j are non-negative, which is necessary for the loop to execute correctly. \n- The second loop invariant ensures that i is less than or equal to LARGE_INT, which is necessary to satisfy the pre-condition. \n- The third loop invariant ensures that z is initialized to 0 before the loop execution.\n- The first invariant in every iteration ensures that x remains non-negative throughout the loop execution.\n- The second invariant in every iteration ensures that y is decreased by 2 in each iteration of the loop. This is because x is decreased by 1 and y is decreased by 2 in each iteration.\n- The third invariant in every iteration ensures that z is increased by 1 in each iteration of the loop.\n- The first invariant after the loop termination ensures that x is 0, which is necessary for the program to continue executing correctly.\n- The second invariant after the loop termination ensures that y is equal to j minus twice the number of times the loop was executed.\n- The third invariant after the loop termination ensures that if i and j are equal, then y is equal to the negative of the number of times the loop was executed. This is because in each iteration of the loop, y is decreased by 2 and z is increased by 1. Therefore, y is equal to negative z when the loop terminates.",
                "error": "Output does not contain at least 1 code block"
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 22: unbound logic variable i. Ignoring loop annotation",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\nloop invariant i1: 0 <= x <= i;\nloop invariant i2: 0 <= y <= j;\nloop invariant i3: z == i - x;\nloop invariant i4: x + y/2 == i + j/2;\nloop invariant i5: j + 2*z == y;\nloop invariant i6: z <= i;\nloop invariant i7: z == (\\at(i, Pre) - x);\nloop invariant i8: (x == 0) ==> (y == j - 2*z);\nloop invariant i9: j >= y >= j - 2 * z;\nloop invariant i10: 0 <= z <= i;\nloop invariant i11: i >= 0 && i <= LARGE_INT;\nloop invariant i12: j >= 0;\nloop invariant i13: x >= 0;\nloop invariant i14: y == j - 2*z;\nloop invariant i15: z >= 0;\nloop invariant i16: i == j ==> y == -z;\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 4,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\nloop invariant i1: 0 <= x <= i;\n\nloop invariant i3: z == i - x;\n\n\nloop invariant i6: z <= i;\n\nloop invariant i8: (x == 0) ==> (y == j - 2*z);\nloop invariant i9: j >= y >= j - 2 * z;\nloop invariant i10: 0 <= z <= i;\nloop invariant i11: i >= 0 && i <= LARGE_INT;\nloop invariant i12: j >= 0;\nloop invariant i13: x >= 0;\nloop invariant i14: y == j - 2*z;\nloop invariant i15: z >= 0;\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/const.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq1.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq2.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/afnp2014.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/css2003.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007b.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gsv2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/hhk2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006_variant.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../data/benchmarks/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/even.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/mod4.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/odd.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/id_trans.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/bhmr2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/ddlm2013.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gcnr2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gr2006.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006.c"
        ],
        "skipped": [],
        "total": 300,
        "success_count": 142,
        "failure_count": 158,
        "success_rate": 0.47333333333333333
    }
}