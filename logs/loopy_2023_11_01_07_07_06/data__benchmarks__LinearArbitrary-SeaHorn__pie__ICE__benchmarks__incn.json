{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
        "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\nvoid main()\n{\n  int x, N;\n  x = 0;\n  N = unknown_int();\n  if (N < 0)\n    \nreturn;\n\n  while(x < N)\n  {\n    x = x + 1;\n  }\n  {;\n//@ assert(x == N);\n}\n    \nreturn;\n\n}\n",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\nvoid main()\n{\n  int x, N;\n  x = 0;\n  N = unknown_int();\n  if (N < 0)\n    \nreturn;\n\n  while(x < N)\n  {\n    x = x + 1;\n  }\n  {;\n//@ assert(x == N);\n}\n    \nreturn;\n\n}\n\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- The program has no pre-conditions.\n- The variable 'x' is initialized to 0.\n- The variable 'N' is assigned the value returned by the function unknown_int(). Since we don't know anything about this function, we cannot make any assumptions about the value of 'N'.\n\nLoop condition:\n- The loop will execute as long as 'x' is less than 'N'.\n\nPost-condition:\n- The value of 'x' should be equal to the value of 'N' at the end of the loop.\n\nLoop invariants:\n- Since we don't know anything about the value of 'N', we cannot bound the maximum or minimum values it can take.\n- The variable 'x' is initialized to 0, so we can add the following invariant before the loop execution:\n```\n/*@ \n    loop invariant 0 <= x;\n*/\n```\n- In every iteration of the loop, 'x' is incremented by 1. So, we can add the following invariant:\n```\n/*@ \n    loop invariant 0 <= x <= N;\n*/\n```\n- The loop will terminate when 'x' becomes equal to 'N'. So, we can add the following invariant after the loop termination:\n```\n/*@ \n    loop invariant x == N;\n*/\n```\n- Since we don't know anything about the function unknown_int(), we cannot make any assumptions about the value of 'N'. However, we can use implication to make the invariant trivially true in case 'N' is negative:\n```\n/*@ \n    loop invariant N >= 0 ==> 0 <= x <= N;\n*/\n```\n- Finally, we can use implication to take care of the conditional nature of the assertion:\n```\n/*@ \n    loop invariant N >= 0 ==> (x == N) ==> (x == N);\n*/\n```\nPutting everything together, the loop invariants are:\n```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= x <= N;\n    loop invariant x == N;\n    loop invariant N >= 0 ==> 0 <= x <= N;\n    loop invariant N >= 0 ==> (x == N) ==> (x == N);\n*/\n```",
            "Pre-conditions:\n- None\n\nVariable Assignments:\n- x = 0\n- N = unknown_int()\n\nLoop condition:\n- x < N\n\nPost-condition:\n- x == N\n\nLoop Invariants:\n- x >= 0 (minimum bound for x)\n- N >= 0 (minimum bound for N)\n- x <= N (maximum bound for x)\n- N <= unknown_int() (maximum bound for N)\n- x <= N ==> x + 1 <= N (in every iteration, x+1 is less than or equal to N)\n- x == N ==> x >= N (if x equals N, then x must be greater than or equal to N)\n\nPutting all the loop invariants together:\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant N >= 0;\n    loop invariant x <= N;\n    loop invariant N <= unknown_int();\n    loop invariant x <= N ==> x + 1 <= N;\n    loop invariant x == N ==> x >= N;\n*/\n```",
            "Step 1: Pre-conditions or variable assignments\n```\nint x, N;\nx = 0;\nN = unknown_int();\nif (N < 0)\n    return;\n```\n- `x` is initialized to 0\n- `N` is assigned a non-deterministic value using `unknown_int()`\n- If `N` is negative, the program terminates early\n\nStep 2: Loop condition\n```\nwhile (x < N)\n```\n- The loop executes while `x` is less than `N`\n\nStep 3: Loop invariants\n```\n/*@ \n    loop invariant 0 <= x <= N;\n    loop invariant \\forall integer i; 0 <= i < x ==> i < N;\n    loop invariant x == N || x < N;\n*/\n```\n- The first invariant ensures that `x` remains between 0 and `N` throughout the loop execution.\n- The second invariant ensures that all integers less than `x` are also less than `N`.\n- The third invariant ensures that `x` either becomes equal to `N` or remains less than `N` throughout the loop execution.\n- Since `N` is non-deterministic, we cannot make any assumptions about its value. Therefore, we cannot make any stronger assertions about `x` and its relation to `N`.\n\nStep 4: Implications for conditional assertion\n```\n{;\n//@ assert (N >= 0) ==> (x == N);\n}\n```\n- This assertion is guarded by the condition `N >= 0`\n- If `N` is negative, the assertion is trivially true and does not need to be verified\n- If `N` is non-negative, the assertion states that `x` becomes equal to `N` at the end of the loop. This is ensured by the loop invariants.\n\nStep 5: Putting it all together\n```\n#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\nvoid main()\n{\n  int x, N;\n  x = 0;\n  N = unknown_int();\n  assume(N >= 0);\n\n  /*@ \n    loop invariant 0 <= x <= N;\n    loop invariant \\forall integer i; 0 <= i < x ==> i < N;\n    loop invariant x == N || x < N;\n  */\n  while(x < N)\n  {\n    x = x + 1;\n  }\n\n  {;\n    //@ assert (N >= 0) ==> (x == N);\n  }\n}\n```\nNote that we have added an assumption `assume(N >= 0)` to specify that `N` is non-negative. This is necessary to prevent Frama-C from reporting a possible integer overflow in the loop condition when `N` is negative.",
            "Pre-conditions or variable assignments:\n- `x` is assigned the value 0.\n- `N` is assigned the value returned by `unknown_int()`, which we know nothing about except that it returns an integer.\n\nLoop condition:\n- The loop executes while `x` is less than `N`.\n\nPost-condition:\n- The value of `x` should be equal to `N`.\n\nLoop invariants:\n- Before the loop execution: `x >= 0`, `N >= 0`\n- In every iteration of the loop: `0 <= x <= N`\n- After the loop termination: `x == N`\n\nExplanation:\n- Before the loop execution:\n    - `x` is assigned the value 0, so `x >= 0` is true.\n    - `N` is assigned the value returned by `unknown_int()`, which can be negative. However, we are given that if `N` is negative, the program should return, so we can assume that `N >= 0`.\n- In every iteration of the loop:\n    - `x` starts at 0 and increments by 1 in each iteration, so `0 <= x`.\n    - The loop executes while `x < N`, so `x <= N`.\n- After the loop termination:\n    - The loop terminates when `x` is equal to `N`, so `x == N`.\n\nPutting it all together:\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant N >= 0;\n    loop invariant 0 <= x <= N;\n    loop invariant x == N ==> (/*@ assert x == N; @*/);\n*/\n```",
            "First, let's write down the pre-conditions and variable assignments in the program:\n\nPre-conditions:\n- N is an integer\n- N is non-negative\n\nVariable Assignments:\n- x is an integer\n- x is assigned 0\n\nNext, let's analyze the loop body and make a note of the loop condition. The loop condition is `x < N`.\n\nNow, let's find the necessary loop invariants:\n- Before the loop execution, `x == 0` and `N >= 0`\n- In every iteration of the loop, `x <= N`\n- After the loop termination, `x == N`\n\nLet's combine these loop invariants into one code block:\n\n```\n/*@\nloop invariant x >= 0 && N >= 0;\nloop invariant x <= N;\nloop invariant x == \\old(x) + \\at(LoopCurrentIteration, Pre);\nloop variant N - x;\n*/\nwhile(x < N)\n{\n  x = x + 1;\n}\n{;\n//@ assert x == N;\n}\n```\nWe have added a loop variant to ensure the loop termination. The loop variant `N - x` is decreasing by at least 1 in each iteration of the loop, since `x` is incremented by 1 in each iteration. This guarantees that the loop will eventually terminate.\n\nNote that we have used the `\\old` and `\\at` keywords to refer to the value of `x` before the loop execution and in the previous iteration of the loop, respectively. We have also used the `LoopCurrentIteration` keyword to refer to the current iteration of the loop.\n\nAdditionally, we have added the condition `x == \\old(x) + \\at(LoopCurrentIteration, Pre)` to ensure that `x` is incremented by exactly 1 in each iteration of the loop. This is necessary because the loop condition `x < N` does not guarantee that `x` is incremented by exactly 1 in each iteration."
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant 0 <= x;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant N >= 0;\n    loop invariant x <= N;\n    loop invariant N <= unknown_int();\n    loop invariant x <= N ==> x + 1 <= N;\n    loop invariant x == N ==> x >= N;\n*/",
            "/*@ \n    loop invariant 0 <= x <= N;\n    loop invariant \\forall integer i; 0 <= i < x ==> i < N;\n    loop invariant x == N || x < N;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant N >= 0;\n    loop invariant 0 <= x <= N;\n    loop invariant x == N ==> (/*@ assert x == N; @*/);\n*/",
            "/*@\nloop invariant x >= 0 && N >= 0;\nloop invariant x <= N;\nloop invariant x == \\old(x) + \\at(LoopCurrentIteration, Pre);\nloop variant N - x;\n*/\nwhile(x < N)\n{\n  x = x + 1;\n}\n{;\n//@ assert x == N;\n}"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= x;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x is inductive.\nAssertion x == N: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\nvoid main()\n{\n  int x, N;\n  x = 0;\n  N = unknown_int();\n  if (N < 0)\n    \nreturn;\n\n  /*@\nloop invariant i1: 0 <= x;\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n  }\n  {;\n//@ assert(x == N);\n}\n    \nreturn;\n\n}\n",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant N >= 0;\n    loop invariant x <= N;\n    loop invariant N <= unknown_int();\n    loop invariant x <= N ==> x + 1 <= N;\n    loop invariant x == N ==> x >= N;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unexpected token ')'",
                "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\nvoid main()\n{\n  int x, N;\n  x = 0;\n  N = unknown_int();\n  if (N < 0)\n    \nreturn;\n\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: N >= 0;\nloop invariant i3: x <= N;\n\n\nloop invariant i6: x == N ==> x >= N;\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n  }\n  {;\n//@ assert(x == N);\n}\n    \nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant 0 <= x <= N;\n    loop invariant \\forall integer i; 0 <= i < x ==> i < N;\n    loop invariant x == N || x < N;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant 0 <= x <= N is inductive.\nloop invariant \\forall integer i; 0 <= i < x ==> i < N is inductive.\nloop invariant x == N || x < N is inductive.\nAssertion x == N: Valid"
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant N >= 0;\n    loop invariant 0 <= x <= N;\n    loop invariant x == N ==> (/*@ assert x == N; @*/);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: lexical error, unexpected block-comment opening",
                "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\nvoid main()\n{\n  int x, N;\n  x = 0;\n  N = unknown_int();\n  if (N < 0)\n    \nreturn;\n\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: N >= 0;\nloop invariant i3: 0 <= x <= N;\n\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n  }\n  {;\n//@ assert(x == N);\n}\n    \nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@\nloop invariant x >= 0 && N >= 0;\nloop invariant x <= N;\nloop invariant x == \\old(x) + \\at(LoopCurrentIteration, Pre);\nloop variant N - x;\n*/\nwhile(x < N)\n{\n  x = x + 1;\n}\n{;\n//@ assert x == N;\n}",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 16: \\old undefined in this context. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\nvoid main()\n{\n  int x, N;\n  x = 0;\n  N = unknown_int();\n  if (N < 0)\n    \nreturn;\n\n  /*@\nloop invariant i1: x >= 0 && N >= 0;\nloop invariant i2: x <= N;\n\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n  }\n  {;\n//@ assert(x == N);\n}\n    \nreturn;\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 18: unexpected token ')'",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\nvoid main()\n{\n  int x, N;\n  x = 0;\n  N = unknown_int();\n  if (N < 0)\n    \nreturn;\n\n  /*@\nloop invariant i1: 0 <= x;\nloop invariant i2: x >= 0;\nloop invariant i3: N >= 0;\nloop invariant i4: x <= N;\nloop invariant i5: N <= unknown_int();\nloop invariant i6: x <= N ==> x + 1 <= N;\nloop invariant i7: x == N ==> x >= N;\nloop invariant i8: 0 <= x <= N;\nloop invariant i9: \\forall integer i; 0 <= i < x ==> i < N;\nloop invariant i10: x == N || x < N;\nloop invariant i11: x == N ==> (/*@ assert x == N; @*/);\nloop invariant i12: x >= 0 && N >= 0;\nloop invariant i13: x == \\old(x) + \\at(LoopCurrentIteration, Pre);\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n  }\n  {;\n//@ assert(x == N);\n}\n    \nreturn;\n\n}\n",
        "combined_annotation_num_solver_calls": 5,
        "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\nvoid main()\n{\n  int x, N;\n  x = 0;\n  N = unknown_int();\n  if (N < 0)\n    \nreturn;\n\n  /*@\nloop invariant i1: 0 <= x;\nloop invariant i2: x >= 0;\nloop invariant i3: N >= 0;\nloop invariant i4: x <= N;\n\n\nloop invariant i7: x == N ==> x >= N;\nloop invariant i8: 0 <= x <= N;\nloop invariant i9: \\forall integer i; 0 <= i < x ==> i < N;\nloop invariant i10: x == N || x < N;\n\nloop invariant i12: x >= 0 && N >= 0;\n\n*/\nwhile(x < N)\n  {\n    x = x + 1;\n  }\n  {;\n//@ assert(x == N);\n}\n    \nreturn;\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c"
        ],
        "skipped": [],
        "total": 203,
        "success_count": 93,
        "failure_count": 110,
        "success_rate": 0.458128078817734
    }
}