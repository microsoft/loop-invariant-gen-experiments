{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  i,  n=unknown_uint(),  sn=0;\n  for(i=1; i<=n; i++){\n    sn = sn +(2);\n    if(i==4)sn=-10;\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  i,  n=unknown_uint(),  sn=0;\n  for(i=1; i<=n; i++){\n    sn = sn +(2);\n    if(i==4)sn=-10;\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions or variable assignments:\n- The program defines a macro `assume(e)` which returns 0 if `e` is false.\n- The program also defines an external function `unknown_uint` which returns an arbitrary unsigned integer.\n- The `main` function initializes variables `i`, `n`, and `sn`.\n- Variable `n` is assigned the return value of `unknown_uint`.\n- Variables `i` and `sn` are initialized to 1 and 0 respectively.\n\nLoop condition:\n- The while loop executes as long as `i <= n`.\n\nLoop invariants:\n- Before the loop execution: None needed.\n- In every iteration of the loop:\n  - `1 <= i <= n+1`\n  - `sn = 2*(i-1) || sn = -10` (since `sn` is set to -10 when `i=4`)\n- After the loop termination:\n  - `sn = 2*n || sn = 0` (since `sn` is incremented by 2 in each iteration of the loop, except when `i=4`)\n\nPutting it all together:\n```\n/*@ \n    loop invariant 1 <= i <= n+1;\n    loop invariant sn == 2*(i-1) || sn == -10;\n    loop invariant sn == 2*n || sn == 0 ==> i == n+1;\n*/\n```",
            "Pre-conditions/variable assignments:\n- The program defines a macro `assume(e)` which returns 0 if `!(e)` is true.\n- The program uses the external function `unknown_uint()` which returns an unsigned integer of unknown value.\n- The program defines variables `i`, `n` and `sn` of type `int` and initializes `n` with the return value of `unknown_uint()` and `sn` with 0.\n\nLoop condition:\n- The loop condition is `i<=n`.\n\nLoop invariants:\n- Before the loop execution, `sn` is 0 and `n >= 0`.\n- In every iteration of the loop, `sn` is even and `sn <= i*2` and `i >= 1`.\n- After the loop termination, the following two conditions hold:\n    - If `i <= 4`, then `sn = i*2`.\n    - If `i > 4`, then `sn = (n - 4)*2`.\n    \nExplanation:\n- Before the loop execution, `sn` is initialized to 0 and `n` is non-negative.\n- In every iteration of the loop, `sn` is incremented by 2, which means `sn` is always even. `sn` is also less than or equal to `i*2`, because in each iteration, `i` is incremented by 1 and `sn` is incremented by 2. `i` is always greater than or equal to 1, because it is initialized to 1 and incremented by 1 in each iteration.\n- After the loop termination, there are two cases to consider:\n    - If `i <= 4`, then the condition `i==4` was triggered and `sn` was set to -10. This means that the sum of the first `i-1` terms is `2*(i-1)-10` and the sum of the remaining terms is `2*(n-i+1)`. Adding these two sums gives `2*n-10`, which is equal to `n*2-10`. Since `sn` should be equal to the sum of all terms, we have `sn = n*2-10` when `i <= 4`.\n    - If `i > 4`, then the loop terminated normally and `sn` is equal to the sum of all terms, which is `n*2`.\n\nWe can write these loop invariants in ACSL annotations as follows:\n\n```\n/*@ \n  loop invariant sn%2 == 0;\n  loop invariant sn <= i*2;\n  loop invariant i >= 1;\n  loop invariant sn == 0;\n  loop invariant n >= 0;\n  loop invariant i <= n+1;\n  loop invariant (i <= 4 ==> sn == i*2) && (i > 4 ==> sn == (n-4)*2);\n  loop assigns i, sn;\n*/\n``` \n\nNote that we have used the implication operator `==>` to encode the conditional nature of the assertion in the loop invariant. Also, we have added a loop assign clause to specify which variables are modified by the loop. Since `n` is not modified by the loop, it does not need to be included in the loop assigns clause.",
            "Pre-conditions:\n- None\n\nVariable Assignments:\n- n is assigned the value returned by unknown_uint(), which is an external function that returns an unsigned integer.\n\nLoop Condition:\n- The loop iterates while the value of i is less than or equal to n.\n\nLoop Invariants:\n- Before loop execution: None\n- In every iteration of the loop: \n    - sn is always even.\n    - If i is less than or equal to 4, then sn is equal to 2*(i-1).\n    - If i is greater than 4, then sn is equal to 2*(i-1)-12.\n- After loop termination:\n    - sn is equal to 2*n or 0.\n    \nThe loop invariants can be written as follows:\n```\n/*@ \n    loop invariant 1: sn%2==0;\n    loop invariant 2: (i<=4 ==> sn==2*(i-1)) && (i>4 ==> sn==2*(i-1)-12);\n    loop invariant 3: (i>n ==> sn==2*n || sn==0);\n*/\n```",
            "Pre-conditions/Variable Assignments:\n- The program defines a macro `assume` which takes a boolean expression and returns 0 if the expression is false.\n- The program declares an external function `unknown_uint` which returns an unsigned integer. \n- The program initializes an integer variable `n` with the return value of `unknown_uint`.\n- The program initializes an integer variable `i` to 1.\n- The program initializes an integer variable `sn` to 0.\n\nLoop Condition:\n- The loop executes while the value of `i` is less than or equal to `n`.\n\nLoop Invariants:\n- Before the loop execution: `sn == 0 ==> i == 1`\n- In every iteration: `sn == 2*(i-1) || sn == -10`\n- After the loop termination: `sn == 2*n || sn == 0`\n\nExplanation:\n- Before the loop execution: If `sn` is equal to 0, then `i` must be equal to 1, since `sn` is updated in the loop and never set to 0 again. This makes sure that the loop starts with the correct value of `i`. \n- In every iteration: The value of `sn` is updated in the loop with `sn = sn + 2`. Since `i` is incremented by 1 in every iteration, we can express the value of `sn` in terms of `i` as `sn = 2*(i-1)`. However, if `i` is equal to 4, then the value of `sn` is set to -10. This is why we have the disjunction `sn == 2*(i-1) || sn == -10`.\n- After the loop termination: The value of `sn` should be equal to the sum of 2 from 1 to `n`, which is `2*n`. However, if `i` is equal to 4 at any point in the loop, then the value of `sn` is set to -10, which should be considered a valid value for `sn`. This is why we have the disjunction `sn == 2*n || sn == 0`.\n\nFinal Loop Invariants:\n```\n/*@ \n    loop invariant sn == 0 ==> i == 1;\n    loop invariant sn == 2*(i-1) || sn == -10;\n    loop invariant sn == 2*n || sn == 0;\n*/\n```",
            "Pre-conditions:\n- The macro `assume(e)` returns 0 if the condition `e` is false.\n- The function `unknown_uint()` returns an unsigned integer of unknown value.\n\nVariable assignments:\n- `n` is assigned the value returned by `unknown_uint()`.\n- `sn` is assigned the value 0.\n\nLoop condition:\n- The loop continues as long as `i` is less than or equal to `n`.\n\nLoop body:\n- `sn` is incremented by 2.\n- If `i` is equal to 4, `sn` is assigned the value -10.\n\nPost-condition:\n- `sn` is equal to `n*2` or `0`.\n\nLoop invariants:\n- Before the loop execution: `sn == 0` and `n >= 0`.\n- In every iteration of the loop: `sn` is equal to `2` times the number of completed iterations or `0`. Also, `i >= 1` and `i <= n`.\n- After the loop termination: `sn == n*2` or `sn == 0`.\n\nExplanation:\n- Before the loop execution, the value of `sn` is 0.\n- In every iteration of the loop, the value of `sn` is incremented by 2. So, after `k` iterations, the value of `sn` is `2*k`.\n- If `i` is equal to 4, `sn` is assigned the value -10. However, this only affects the value of `sn` for the current iteration and does not affect the loop invariant.\n- After the loop termination, the value of `sn` is equal to `n*2` or `0`, as given in the post-condition.\n- The bounds on `i` are `i >= 1` and `i <= n`, as `i` is initialized to 1 and incremented by 1 in each iteration until it becomes greater than `n`.\n- The lower bound on `n` is 0, as it is an unsigned integer. Therefore, `n >= 0`.\n- As `unknown_uint()` returns an unsigned integer of unknown value, we cannot make any assumptions about the initial value of `n`. Hence, we use an implication to make the loop invariant true at the beginning: `n >= 0 ==> sn == 0`.\n- Similarly, we use an implication to make the loop invariant true at the end, as we do not know the final value of `i`: `i <= n ==> sn == n*2 || sn == 0`."
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant 1 <= i <= n+1;\n    loop invariant sn == 2*(i-1) || sn == -10;\n    loop invariant sn == 2*n || sn == 0 ==> i == n+1;\n*/",
            "/*@ \n  loop invariant sn%2 == 0;\n  loop invariant sn <= i*2;\n  loop invariant i >= 1;\n  loop invariant sn == 0;\n  loop invariant n >= 0;\n  loop invariant i <= n+1;\n  loop invariant (i <= 4 ==> sn == i*2) && (i > 4 ==> sn == (n-4)*2);\n  loop assigns i, sn;\n*/",
            "/*@ \n    loop invariant 1: sn%2==0;\n    loop invariant 2: (i<=4 ==> sn==2*(i-1)) && (i>4 ==> sn==2*(i-1)-12);\n    loop invariant 3: (i>n ==> sn==2*n || sn==0);\n*/",
            "/*@ \n    loop invariant sn == 0 ==> i == 1;\n    loop invariant sn == 2*(i-1) || sn == -10;\n    loop invariant sn == 2*n || sn == 0;\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The macro `assume(e)` returns 0 if the condition `e` is false.\n- The function `unknown_uint()` returns an unsigned integer of unknown value.\n\nVariable assignments:\n- `n` is assigned the value returned by `unknown_uint()`.\n- `sn` is assigned the value 0.\n\nLoop condition:\n- The loop continues as long as `i` is less than or equal to `n`.\n\nLoop body:\n- `sn` is incremented by 2.\n- If `i` is equal to 4, `sn` is assigned the value -10.\n\nPost-condition:\n- `sn` is equal to `n*2` or `0`.\n\nLoop invariants:\n- Before the loop execution: `sn == 0` and `n >= 0`.\n- In every iteration of the loop: `sn` is equal to `2` times the number of completed iterations or `0`. Also, `i >= 1` and `i <= n`.\n- After the loop termination: `sn == n*2` or `sn == 0`.\n\nExplanation:\n- Before the loop execution, the value of `sn` is 0.\n- In every iteration of the loop, the value of `sn` is incremented by 2. So, after `k` iterations, the value of `sn` is `2*k`.\n- If `i` is equal to 4, `sn` is assigned the value -10. However, this only affects the value of `sn` for the current iteration and does not affect the loop invariant.\n- After the loop termination, the value of `sn` is equal to `n*2` or `0`, as given in the post-condition.\n- The bounds on `i` are `i >= 1` and `i <= n`, as `i` is initialized to 1 and incremented by 1 in each iteration until it becomes greater than `n`.\n- The lower bound on `n` is 0, as it is an unsigned integer. Therefore, `n >= 0`.\n- As `unknown_uint()` returns an unsigned integer of unknown value, we cannot make any assumptions about the initial value of `n`. Hence, we use an implication to make the loop invariant true at the beginning: `n >= 0 ==> sn == 0`.\n- Similarly, we use an implication to make the loop invariant true at the end, as we do not know the final value of `i`: `i <= n ==> sn == n*2 || sn == 0`."
            ]
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 1 <= i <= n+1;\n    loop invariant sn == 2*(i-1) || sn == -10;\n    loop invariant sn == 2*n || sn == 0 ==> i == n+1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= n+1 is preserved but not established.\nloop invariant sn == 2*(i-1) || sn == -10 is established but not preserved.\nloop invariant sn == 2*n || sn == 0 ==> i == n+1 is preserved but not established.\nAssertion sn == n * 2 || sn == 0: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  i,  n=unknown_uint(),  sn=0;\n  /*@\n\n\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n    if(i==4)sn=-10;\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n  loop invariant sn%2 == 0;\n  loop invariant sn <= i*2;\n  loop invariant i >= 1;\n  loop invariant sn == 0;\n  loop invariant n >= 0;\n  loop invariant i <= n+1;\n  loop invariant (i <= 4 ==> sn == i*2) && (i > 4 ==> sn == (n-4)*2);\n  loop assigns i, sn;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant sn%2 == 0 is partially proven to be inductive.\nloop invariant sn <= i*2 is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant sn == 0 is partially proven to be inductive.\nloop invariant n >= 0 is preserved but not established.\nloop invariant i <= n+1 is partially proven to be inductive.\nloop invariant (i <= 4 ==> sn == i*2) && (i > 4 ==> sn == (n-4)*2) is preserved but not established.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  i,  n=unknown_uint(),  sn=0;\n  /*@\nloop invariant i1: sn%2 == 0;\nloop invariant i2: sn <= i*2;\nloop invariant i3: i >= 1;\n\n\n\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n    if(i==4)sn=-10;\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant 1: sn%2==0;\n    loop invariant 2: (i<=4 ==> sn==2*(i-1)) && (i>4 ==> sn==2*(i-1)-12);\n    loop invariant 3: (i>n ==> sn==2*n || sn==0);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 7: unexpected token ':'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  i,  n=unknown_uint(),  sn=0;\n  /*@\n\n\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n    if(i==4)sn=-10;\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant sn == 0 ==> i == 1;\n    loop invariant sn == 2*(i-1) || sn == -10;\n    loop invariant sn == 2*n || sn == 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant sn == 0 ==> i == 1 is partially proven to be inductive.\nloop invariant sn == 2*(i-1) || sn == -10 is established but not preserved.\nloop invariant sn == 2*n || sn == 0 is established but not preserved.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  i,  n=unknown_uint(),  sn=0;\n  /*@\n\n\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n    if(i==4)sn=-10;\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The macro `assume(e)` returns 0 if the condition `e` is false.\n- The function `unknown_uint()` returns an unsigned integer of unknown value.\n\nVariable assignments:\n- `n` is assigned the value returned by `unknown_uint()`.\n- `sn` is assigned the value 0.\n\nLoop condition:\n- The loop continues as long as `i` is less than or equal to `n`.\n\nLoop body:\n- `sn` is incremented by 2.\n- If `i` is equal to 4, `sn` is assigned the value -10.\n\nPost-condition:\n- `sn` is equal to `n*2` or `0`.\n\nLoop invariants:\n- Before the loop execution: `sn == 0` and `n >= 0`.\n- In every iteration of the loop: `sn` is equal to `2` times the number of completed iterations or `0`. Also, `i >= 1` and `i <= n`.\n- After the loop termination: `sn == n*2` or `sn == 0`.\n\nExplanation:\n- Before the loop execution, the value of `sn` is 0.\n- In every iteration of the loop, the value of `sn` is incremented by 2. So, after `k` iterations, the value of `sn` is `2*k`.\n- If `i` is equal to 4, `sn` is assigned the value -10. However, this only affects the value of `sn` for the current iteration and does not affect the loop invariant.\n- After the loop termination, the value of `sn` is equal to `n*2` or `0`, as given in the post-condition.\n- The bounds on `i` are `i >= 1` and `i <= n`, as `i` is initialized to 1 and incremented by 1 in each iteration until it becomes greater than `n`.\n- The lower bound on `n` is 0, as it is an unsigned integer. Therefore, `n >= 0`.\n- As `unknown_uint()` returns an unsigned integer of unknown value, we cannot make any assumptions about the initial value of `n`. Hence, we use an implication to make the loop invariant true at the beginning: `n >= 0 ==> sn == 0`.\n- Similarly, we use an implication to make the loop invariant true at the end, as we do not know the final value of `i`: `i <= n ==> sn == n*2 || sn == 0`.",
                "error": "Output does not contain at least 1 code block"
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 17: unexpected token ':'",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  i,  n=unknown_uint(),  sn=0;\n  /*@\nloop invariant i1: 1 <= i <= n+1;\nloop invariant i2: sn == 2*(i-1) || sn == -10;\nloop invariant i3: sn == 2*n || sn == 0 ==> i == n+1;\nloop invariant i4: sn%2 == 0;\nloop invariant i5: sn <= i*2;\nloop invariant i6: i >= 1;\nloop invariant i7: sn == 0;\nloop invariant i8: n >= 0;\nloop invariant i9: i <= n+1;\nloop invariant i10: (i <= 4 ==> sn == i*2) && (i > 4 ==> sn == (n-4)*2);\nloop invariant i11: 1: sn%2==0;\nloop invariant i12: 2: (i<=4 ==> sn==2*(i-1)) && (i>4 ==> sn==2*(i-1)-12);\nloop invariant i13: 3: (i>n ==> sn==2*n || sn==0);\nloop invariant i14: sn == 0 ==> i == 1;\nloop invariant i15: sn == 2*n || sn == 0;\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n    if(i==4)sn=-10;\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
        "combined_annotation_num_solver_calls": 10,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  i,  n=unknown_uint(),  sn=0;\n  /*@\n\n\n\nloop invariant i4: sn%2 == 0;\nloop invariant i5: sn <= i*2;\nloop invariant i6: i >= 1;\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n    if(i==4)sn=-10;\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c"
        ],
        "skipped": [],
        "total": 141,
        "success_count": 58,
        "failure_count": 83,
        "success_rate": 0.41134751773049644
    }
}