{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
        "benchmark_code": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n  int x,N;\n  int a;\n\n  a=0;\n  N =10;\n  x = 0;\n  do {\n    x=x+1;\n  } while (x != N);\n\n  {;\n//@ assert(!( a > 1 ));\n}\n\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n  int x,N;\n  int a;\n\n  a=0;\n  N =10;\n  x = 0;\n  do {\n    x=x+1;\n  } while (x != N);\n\n  {;\n//@ assert(!( a > 1 ));\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- None\n\nVariable Assignments:\n- `a` is assigned the value 0\n- `N` is assigned the value 10\n- `x` is assigned the value 0\n\nLoop Condition:\n- The loop continues as long as `x` is not equal to `N`\n\nLoop Body:\n- `x` is incremented by 1 in each iteration\n\nPost-condition:\n- `a` is not greater than 1\n\nLoop Invariants:\n- Before the loop execution, `x` is greater than or equal to 0 and less than or equal to 10.\n```\n/*@ loop invariant 0 <= x <= 10; */\n```\n- In every iteration of the loop, `x` is greater than or equal to 1 and less than or equal to 10. \n```\n/*@ loop invariant 1 <= x <= 10; */\n```\n- After the loop termination, `x` is equal to `N`, which is 10. \n```\n/*@ loop invariant x == 10; */\n```\n- Since `a` is not assigned a value or used within the loop, it remains equal to 0 throughout the execution of the program. Therefore, before, during, and after the loop execution, `a` is greater than or equal to 0 and less than or equal to 1.\n```\n/*@ loop invariant 0 <= a <= 1; */\n```\n- Since `x` is initialized to 0 before the loop, we can add an implication to make the first loop invariant true at the beginning of the loop.\n```\n/*@ loop invariant x == 0 ==> (0 <= x <= 10); */\n```\n- Since the assertion is not guarded by any condition, we can simply use an implication to make it true after the loop termination.\n```\n/*@ loop invariant x == 10 ==> (!( a > 1 )); */\n``` \n\nPutting everything together, the loop invariants are:\n```\n/*@ \n    loop invariant x == 0 ==> (0 <= x <= 10);\n    loop invariant 0 <= x <= 10;\n    loop invariant 1 <= x <= 10;\n    loop invariant x == 10;\n    loop invariant 0 <= a <= 1;\n    loop invariant x == 10 ==> (!( a > 1 ));\n*/\n```",
            "Pre-conditions:\n- None\n\nVariable Assignments:\n- `a` is assigned the value 0\n- `N` is assigned the value 10\n- `x` is assigned the value 0\n\nLoop Condition:\n- The loop continues as long as `x` is not equal to `N`\n\nLoop Invariants:\n- Before loop execution: `x >= 0 && x <= N`\n    - `x` is initialized to 0 and `N` is assigned the value 10, so `x` is greater than or equal to 0 and less than or equal to `N`.\n- In every iteration: `x >= 0 && x <= N`\n    - The loop only increments `x` by 1, so it will always be greater than or equal to 0 and less than or equal to `N`.\n- After loop termination: `x == N && a <= 1`\n    - The loop terminates when `x` is equal to `N`, so `x` is equal to `N` at the end of the loop.\n    - The assertion is guarded by no condition, so we can use it as is.\n    - Since `a` is never modified in the loop, it will still have the value 0 at the end of the loop.\n    - The assertion `!(a > 1)` is equivalent to `a <= 1` by De Morgan's law.\n    - Therefore, we can add the conjunct `a <= 1` to the loop invariant.\n\nPutting it all together, the loop invariants are:\n```\n/*@ \n    loop invariant x >= 0 && x <= N;\n    loop invariant a <= 1;\n*/\n```",
            "The program initializes `a` and `N` to 0 and 10 respectively and then executes a `do-while` loop that increments `x` until `x` is equal to `N`. Finally, it checks that `a` is not greater than 1.\n\n**Step 1: Pre-conditions and variable assignments:**\n\nThe program initializes `a` to 0 and `N` to 10. We can add the following loop invariants to bound their values:\n```\n/*@ loop invariant 0 <= a <= 0;\n    loop invariant 10 <= N <= 10;\n*/\n```\n\n**Step 2: Loop condition:**\n\nThe loop condition is `x != N`. We can add the following loop invariant:\n```\n/*@ loop invariant 0 <= x <= 10;\n    loop invariant x != N ==> x < N;\n    loop invariant x != N ==> x - N < 0;\n    loop invariant x != N ==> N - x > 0;\n*/\n```\nHere, we have used the implication to take care of the conditional nature of the code. If `x` is not equal to `N`, then `x` must be less than `N`, and `N - x` must be greater than 0.\n\n**Step 3: Loop invariants in every iteration:**\n\nThe loop body simply increments `x` by 1. Therefore, we can add the following loop invariant:\n```\n/*@ loop invariant 0 <= x <= 10;\n    loop invariant x != N ==> x < N;\n    loop invariant x != N ==> x - N < 0;\n    loop invariant x != N ==> N - x > 0;\n    loop invariant x == \\at(x, Pre) + 1;\n*/\n```\n\n**Step 4: Loop invariants after the loop termination:**\n\nAfter the loop terminates, we know that `x` is equal to `N`. Therefore, we can add the following loop invariants:\n```\n/*@ loop invariant x == N;\n    loop invariant 0 <= x <= 10;\n    loop invariant 0 <= N <= 10;\n    loop invariant x == N ==> x - N == 0;\n    loop invariant x == N ==> N - x == 0;\n*/\n```\n\n**Step 5: Assertion:**\n\nThe assertion checks that `a` is not greater than 1. Since `a` is not used in the loop, we can simply add the following loop invariant:\n```\n/*@ loop invariant 0 <= x <= 10;\n    loop invariant x != N ==> x < N;\n    loop invariant x != N ==> x - N < 0;\n    loop invariant x != N ==> N - x > 0;\n    loop invariant x == \\at(x, Pre) + 1;\n    loop invariant 0 <= a <= 0;\n    loop invariant 10 <= N <= 10;\n    loop invariant x == N;\n    loop invariant 0 <= x <= 10;\n    loop invariant 0 <= N <= 10;\n    loop invariant x == N ==> x - N == 0;\n    loop invariant x == N ==> N - x == 0;\n    loop invariant !(a > 1);\n*/\n```\n\nPutting all the loop invariants together, we have:\n```\n/*@ \n    loop invariant 0 <= a <= 0;\n    loop invariant 10 <= N <= 10;\n    loop invariant 0 <= x <= 10;\n    loop invariant x != N ==> x < N;\n    loop invariant x != N ==> x - N < 0;\n    loop invariant x != N ==> N - x > 0;\n    loop invariant x == \\at(x, Pre) + 1;\n    loop invariant x == N;\n    loop invariant x == N ==> x - N == 0;\n    loop invariant x == N ==> N - x == 0;\n    loop invariant !(a > 1);\n*/\n```",
            "Pre-conditions:\n- None.\n\nVariable assignments:\n- `a` is assigned the value `0`.\n- `N` is assigned the value `10`.\n- `x` is assigned the value `0`.\n\nLoop condition:\n- The loop continues as long as `x` is not equal to `N`.\n\nLoop invariants:\n- Before the loop: None.\n- In every iteration:\n    - `0 <= x <= N`\n- After the loop:\n    - `x == N`\n    - `a == 0 ==> !(a > 1)` (using implication to take care of conditional nature of code)\n    - `a > 1 ==> 0 <= a <= INT_MAX` (if there are no bounds on `a`, we can still use the conjunction `0 <= a <= INT_MAX` to bound it)\n    - `0 <= N <= INT_MAX`\n    - `0 <= x <= INT_MAX`\n    - `0 <= a <= INT_MAX`\n    - `x == N ==> (a > 1 ==> 0 <= a <= INT_MAX)` (using implication to take care of conditional nature of code)\n    - `x == N ==> (a == 0 ==> !(a > 1))` (using implication to take care of conditional nature of code)\n    - `x == N ==> (0 <= N <= INT_MAX)`\n    - `x == N ==> (0 <= x <= INT_MAX)`\n    - `x == N ==> (0 <= a <= INT_MAX)`\n    - `x == N ==> (a == 0 ==> !(a > 1)) ==> (!(a > 1))` (using implication to take care of guarded assertion)\n    \nPutting all the loop invariants together, we get:\n```\n/*@ \n    loop invariant 0 <= x <= N;\n    loop invariant 0 <= N <= INT_MAX;\n    loop invariant 0 <= x <= INT_MAX;\n    loop invariant x == N ==> (0 <= N <= INT_MAX);\n    loop invariant x == N ==> (0 <= x <= INT_MAX);\n    loop invariant a == 0 ==> !(a > 1);\n    loop invariant a > 1 ==> 0 <= a <= INT_MAX;\n    loop invariant x == N ==> (a == 0 ==> !(a > 1));\n    loop invariant x == N ==> (0 <= a <= INT_MAX);\n    loop invariant x == N ==> (a == 0 ==> !(a > 1)) ==> (!(a > 1));\n*/\n```",
            "Pre-conditions:\n- None\n\nVariable Assignments:\n- `a` is assigned the value 0\n- `N` is assigned the value 10\n- `x` is assigned the value 0\n\nLoop Condition:\n- The loop continues as long as `x` is not equal to `N`\n\nLoop Invariants:\n- Before the loop execution, `x` is greater than or equal to 0 and less than or equal to `N`.\n```\n/*@ \n    loop invariant 0 <= x <= N;\n*/\n```\n- In every iteration of the loop, `x` is greater than or equal to 1 and less than or equal to `N`.\n```\n/*@ \n    loop invariant 1 <= x <= N;\n*/\n```\n- After the loop termination, `x` is equal to `N`.\n```\n/*@ \n    loop invariant x == N;\n*/\n```\n- Since `a` is never modified inside the loop, we can use an implication to make the invariant trivially true at the end of the loop.\n```\n/*@ \n    loop invariant a <= 1 ==> !( a > 1 );\n*/\n```\n- Since there are no non-deterministic variables, there is no need to add any further implications.\n\nPutting it all together:\n```\n#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n  int x,N;\n  int a;\n\n  a=0;\n  N =10;\n  x = 0;\n\n  /*@ \n    loop invariant 0 <= x <= N;\n    loop invariant 1 <= x <= N;\n    loop invariant x == N;\n    loop invariant a <= 1 ==> !( a > 1 );\n  */\n  do {\n    x=x+1;\n  } while (x != N);\n\n  {;\n    //@ assert(!( a > 1 ));\n  }\n}\n```\n\nNote: We have used the implication `a <= 1 ==> !( a > 1 )` instead of `!(a > 1)` to handle the case where `a` is non-deterministic or has a garbage value."
        ],
        "annotation_blocks": [
            "/*@ loop invariant 0 <= x <= 10; */",
            "/*@ \n    loop invariant x >= 0 && x <= N;\n    loop invariant a <= 1;\n*/",
            "/*@ loop invariant 0 <= a <= 0;\n    loop invariant 10 <= N <= 10;\n*/",
            "/*@ \n    loop invariant 0 <= x <= N;\n    loop invariant 0 <= N <= INT_MAX;\n    loop invariant 0 <= x <= INT_MAX;\n    loop invariant x == N ==> (0 <= N <= INT_MAX);\n    loop invariant x == N ==> (0 <= x <= INT_MAX);\n    loop invariant a == 0 ==> !(a > 1);\n    loop invariant a > 1 ==> 0 <= a <= INT_MAX;\n    loop invariant x == N ==> (a == 0 ==> !(a > 1));\n    loop invariant x == N ==> (0 <= a <= INT_MAX);\n    loop invariant x == N ==> (a == 0 ==> !(a > 1)) ==> (!(a > 1));\n*/",
            "/*@ \n    loop invariant 0 <= x <= N;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "/*@ loop invariant 0 <= x <= 10; */",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 10 is established but not preserved.\nAssertion !(a > 1): Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n  int x,N;\n  int a;\n\n  a=0;\n  N =10;\n  x = 0;\n  /*@\n\n*/\ndo {\n    x=x+1;\n  } while (x != N);\n\n  {;\n//@ assert(!( a > 1 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x >= 0 && x <= N;\n    loop invariant a <= 1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 && x <= N is established but not preserved.\nloop invariant a <= 1 is partially proven to be inductive.\nAssertion !(a > 1): Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n  int x,N;\n  int a;\n\n  a=0;\n  N =10;\n  x = 0;\n  /*@\n\nloop invariant i2: a <= 1;\n*/\ndo {\n    x=x+1;\n  } while (x != N);\n\n  {;\n//@ assert(!( a > 1 ));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ loop invariant 0 <= a <= 0;\n    loop invariant 10 <= N <= 10;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant 0 <= a <= 0 is inductive.\nloop invariant 10 <= N <= 10 is inductive.\nAssertion !(a > 1): Valid"
            },
            {
                "num_solver_calls": 9,
                "annotations": "/*@ \n    loop invariant 0 <= x <= N;\n    loop invariant 0 <= N <= INT_MAX;\n    loop invariant 0 <= x <= INT_MAX;\n    loop invariant x == N ==> (0 <= N <= INT_MAX);\n    loop invariant x == N ==> (0 <= x <= INT_MAX);\n    loop invariant a == 0 ==> !(a > 1);\n    loop invariant a > 1 ==> 0 <= a <= INT_MAX;\n    loop invariant x == N ==> (a == 0 ==> !(a > 1));\n    loop invariant x == N ==> (0 <= a <= INT_MAX);\n    loop invariant x == N ==> (a == 0 ==> !(a > 1)) ==> (!(a > 1));\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 13: unbound logic variable INT_MAX. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n  int x,N;\n  int a;\n\n  a=0;\n  N =10;\n  x = 0;\n  /*@\n\n\n\n\n\nloop invariant i6: a == 0 ==> !(a > 1);\n\nloop invariant i8: x == N ==> (a == 0 ==> !(a > 1));\n\nloop invariant i10: x == N ==> (a == 0 ==> !(a > 1)) ==> (!(a > 1));\n*/\ndo {\n    x=x+1;\n  } while (x != N);\n\n  {;\n//@ assert(!( a > 1 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= x <= N;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= N is established but not preserved.\nAssertion !(a > 1): Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n  int x,N;\n  int a;\n\n  a=0;\n  N =10;\n  x = 0;\n  /*@\n\n*/\ndo {\n    x=x+1;\n  } while (x != N);\n\n  {;\n//@ assert(!( a > 1 ));\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 18: unbound logic variable INT_MAX. Ignoring loop annotation",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n  int x,N;\n  int a;\n\n  a=0;\n  N =10;\n  x = 0;\n  /*@\nloop invariant i1: 0 <= x <= 10;\nloop invariant i2: x >= 0 && x <= N;\nloop invariant i3: a <= 1;\nloop invariant i4: 0 <= a <= 0;\nloop invariant i5: 10 <= N <= 10;\nloop invariant i6: 0 <= x <= N;\nloop invariant i7: 0 <= N <= INT_MAX;\nloop invariant i8: 0 <= x <= INT_MAX;\nloop invariant i9: x == N ==> (0 <= N <= INT_MAX);\nloop invariant i10: x == N ==> (0 <= x <= INT_MAX);\nloop invariant i11: a == 0 ==> !(a > 1);\nloop invariant i12: a > 1 ==> 0 <= a <= INT_MAX;\nloop invariant i13: x == N ==> (a == 0 ==> !(a > 1));\nloop invariant i14: x == N ==> (0 <= a <= INT_MAX);\nloop invariant i15: x == N ==> (a == 0 ==> !(a > 1)) ==> (!(a > 1));\n*/\ndo {\n    x=x+1;\n  } while (x != N);\n\n  {;\n//@ assert(!( a > 1 ));\n}\n\n}",
        "combined_annotation_num_solver_calls": 10,
        "code_after_prune": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n  int x,N;\n  int a;\n\n  a=0;\n  N =10;\n  x = 0;\n  /*@\n\n\nloop invariant i3: a <= 1;\nloop invariant i4: 0 <= a <= 0;\nloop invariant i5: 10 <= N <= 10;\n\n\n\n\n\nloop invariant i11: a == 0 ==> !(a > 1);\n\nloop invariant i13: x == N ==> (a == 0 ==> !(a > 1));\n\nloop invariant i15: x == N ==> (a == 0 ==> !(a > 1)) ==> (!(a > 1));\n*/\ndo {\n    x=x+1;\n  } while (x != N);\n\n  {;\n//@ assert(!( a > 1 ));\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c"
        ],
        "skipped": [],
        "total": 245,
        "success_count": 118,
        "failure_count": 127,
        "success_rate": 0.4816326530612245
    }
}