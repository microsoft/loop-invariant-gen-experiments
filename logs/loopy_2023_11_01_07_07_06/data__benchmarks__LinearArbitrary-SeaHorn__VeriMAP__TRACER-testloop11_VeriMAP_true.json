{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
        "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int e, s;\n\n  e=0;\n  s=2;\n  while (unknown()) {\n    if (s == 2){\n      if (e ==0) e=1;\n      s = 3;\n    }\n    else if (s == 3){\n      if (e ==1) e=2;\n      s=4;\n    }\n    else if (s == 4){\n      {;\n//@ assert(!( e == 3 ));\n}\n\n      s=5;\n    }\n  }\n  \nreturn;\n\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int e, s;\n\n  e=0;\n  s=2;\n  while (unknown()) {\n    if (s == 2){\n      if (e ==0) e=1;\n      s = 3;\n    }\n    else if (s == 3){\n      if (e ==1) e=2;\n      s=4;\n    }\n    else if (s == 4){\n      {;\n//@ assert(!( e == 3 ));\n}\n\n      s=5;\n    }\n  }\n  \nreturn;\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- The program has no pre-conditions.\n\nVariable assignments:\n- The variables `e` and `s` are initialized to 0 and 2 respectively.\n\nLoop condition:\n- The loop condition is `unknown()`.\n\nLoop invariants:\n- Before the loop execution, the value of `e` is in the range [0,2] and the value of `s` is in the range [2,5].\n- In every iteration of the loop, the value of `e` is in the range [0,3] and the value of `s` is in the range [2,5].\n- After the loop termination, `e` is either 2 or 3.\n\nExplanation:\n- Before the loop execution, `e` is initialized to 0 and can take values in the range [0,2]. `s` is initialized to 2 and can take values in the range [2,5].\n- In every iteration of the loop, the values of `e` and `s` can change based on the conditionals. `e` can take values in the range [0,3] because it can be incremented by 1 in the first conditional and by 1 again in the second conditional. `s` can take values in the range [2,5] because it can be incremented to 3, 4, or 5 based on the conditionals.\n- After the loop termination, the final value of `e` can only be 2 or 3 because it can be incremented by 1 in the last conditional. Therefore, the assertion that `!(e == 3)` holds if `e` is equal to 2.\n\nLoop invariants:\n```\n/*@ \n    loop invariant 0 <= e <= 3;\n    loop invariant 2 <= s <= 5;\n*/\n```",
            "First, let's analyze the program and make note of the pre-conditions and variable assignments:\n\nPre-conditions: None\n\nVariable assignments:\n- e is initialized to 0\n- s is initialized to 2\n\nNow, let's analyze the loop body and make note of the loop condition:\n\nLoop condition:\n- unknown() != 0\n\nNext, we need to find loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition.\n\nBefore the loop execution, we know that:\n- e is initialized to 0, so 0 <= e\n- s is initialized to 2, so 2 <= s\n\nIn every iteration of the loop, we know that:\n- if s == 2 and e == 0, then e will be updated to 1 and s will be updated to 3, so 0 <= e <= 1 and 3 <= s\n- if s == 3 and e == 1, then e will be updated to 2 and s will be updated to 4, so 1 <= e <= 2 and 4 <= s\n- if s == 4, then the assertion !(e == 3) should hold, so 0 <= e <= 2 and 4 <= s\n\nAfter the loop termination, we know that:\n- unknown() == 0, which means the loop condition is false, so !(unknown() != 0)\n- if the loop terminates normally, then the loop must have gone through the s == 2, s == 3, and s == 4 cases at least once, so 0 <= e <= 2 and s >= 5\n- if the loop terminates due to an error (i.e., the errorFn function is called), then the assertion !(e == 3) should hold, so 0 <= e <= 2 and s >= 4\n\nPutting it all together, we get the following loop invariants:\n```\n/*@ \n    loop invariant 0 <= e <= 2;\n    loop invariant 2 <= s;\n    loop invariant (s == 2 && e == 0) ==> (e == \\old(e) + 1 && s == 3);\n    loop invariant (s == 3 && e == 1) ==> (e == \\old(e) + 1 && s == 4);\n    loop invariant s == 4 ==> !(e == 3);\n    loop invariant \\false ==> !(unknown() != 0);\n    loop invariant !(unknown() != 0) ==> (0 <= e <= 2 && s >= 5);\n    loop invariant \\false ==> !(e == 3);\n    loop invariant !(e == 3) ==> (0 <= e <= 2 && s >= 4);\n*/\n```\nNote that we used implication to take care of the conditional nature of the code, and we used the \\old(x) notation to refer to the value of a variable x before the loop iteration. We also used \\false in some of the loop invariants to make them hold trivially at certain locations.",
            "**Step 1: Pre-conditions**\n\nThere are no explicit pre-conditions in the program.\n\n**Step 2: Loop Condition**\n\nThe loop condition is `unknown()`, which means that the loop will continue to execute as long as the value returned by the `unknown()` function is non-zero.\n\n**Step 3: Post-condition**\n\nThe post-condition is:\n```\n!(e == 3)\n```\n\n**Step 4: Loop Invariants**\n\nLet's start with the innermost block of the loop:\n\n```\nif (s == 4){\n  {;\n    //@ assert(!( e == 3 ));\n  }\n  s=5;\n}\n```\n\nHere, we can add the loop invariant:\n```\n/*@\nloop invariant s == 4 ==> !(e == 3);\n*/\n```\n\nNow, let's consider the entire loop body. We can split the loop body into three cases based on the value of `s`.\n\nCase 1: `s == 2`\n```\nif (s == 2){\n  if (e ==0) e=1;\n  s = 3;\n}\n```\n\nHere, we can add the loop invariant:\n```\n/*@\nloop invariant s == 2 ==> (e == 0 ==> e <= 1) && (e == 1 ==> e >= 1);\n*/\n```\n\nCase 2: `s == 3`\n```\nelse if (s == 3){\n  if (e ==1) e=2;\n  s=4;\n}\n```\n\nHere, we can add the loop invariant:\n```\n/*@\nloop invariant s == 3 ==> (e == 1 ==> e <= 2) && (e == 2 ==> e >= 1);\n*/\n```\n\nCase 3: `s == 4`\n```\nelse if (s == 4){\n  {;\n    //@ assert(!( e == 3 ));\n  }\n  s=5;\n}\n```\n\nHere, we already have the loop invariant:\n```\n/*@\nloop invariant s == 4 ==> !(e == 3);\n*/\n```\n\nFinally, we can add the following loop invariants to cover all cases:\n```\n/*@\nloop invariant (s == 2 ==> (e == 0 ==> e <= 1) && (e == 1 ==> e >= 1))\n            && (s == 3 ==> (e == 1 ==> e <= 2) && (e == 2 ==> e >= 1))\n            && (s == 4 ==> !(e == 3));\nloop invariant e <= 3;\nloop invariant e >= 0;\nloop invariant s >= 2;\n*/\n```\n\nNote that we have also added loop invariants to bound the values of `e` and `s`. We have assumed that `e` can take values between 0 and 3, and `s` can take values greater than or equal to 2. These assumptions are based on the code and may not be tight bounds. If tighter bounds can be determined, they should be used instead.",
            "Pre-conditions:\n- The program does not take any input.\n- The function `unknown()` returns an integer value.\n\nVariable assignments:\n- `e` is initialized to 0.\n- `s` is initialized to 2.\n\nLoop condition:\n- The loop executes as long as the function `unknown()` returns a non-zero value.\n\nLoop invariants:\n- `e` is always non-negative: `e >= 0`.\n- `s` is always greater than or equal to 2: `s >= 2`.\n- If `s` is 2, then `e` is either 0 or 1: `(s == 2) ==> (e >= 0 && e <= 1)`.\n- If `s` is 3, then `e` is either 1 or 2: `(s == 3) ==> (e >= 1 && e <= 2)`.\n- If `s` is 4, then `e` is not equal to 3: `(s == 4) ==> (e != 3)`.\n\nThe loop invariant implies the post-condition because the loop terminates when the condition `unknown()` evaluates to 0. At that point, the loop invariant guarantees that `e` is non-negative and `s` is greater than or equal to 2. In addition, if `s` is 4, then `e` is not equal to 3. Therefore, the assertion `!(e == 3)` is guaranteed to hold after the loop terminates. \n\nPutting it all together:\n```\n/*@ \n    loop invariant e >= 0;\n    loop invariant s >= 2;\n    loop invariant (s == 2) ==> (e >= 0 && e <= 1);\n    loop invariant (s == 3) ==> (e >= 1 && e <= 2);\n    loop invariant (s == 4) ==> (e != 3);\n*/\n```",
            "First, let's look at the pre-conditions and variable assignments in the program:\n\n- There are no pre-conditions.\n- `e` and `s` are initialized to 0 and 2 respectively.\n\nNext, let's analyze the loop body:\n\n- The loop condition is `unknown()`, which means that the loop will continue to execute as long as `unknown()` returns a non-zero value.\n- Inside the loop, there are three branches based on the value of `s`. Depending on the value of `s`, either `e` is updated, `s` is updated, or an assertion is checked.\n\nNow, let's list the necessary loop invariants:\n\n- `e` is always greater than or equal to 0.\n- `e` is always less than or equal to 2.\n- `s` is always greater than or equal to 2.\n- `s` is always less than or equal to 5.\n- If `s` is 2, then `e` is either 0 or 1.\n- If `s` is 3, then `e` is either 1 or 2.\n- If `s` is 4, then `!(e == 3)`.\n\nWe can combine all the loop invariants into a single code block:\n\n```\n/*@ \n    loop invariant e >= 0;\n    loop invariant e <= 2;\n    loop invariant s >= 2;\n    loop invariant s <= 5;\n    loop invariant s == 2 ==> (e == 0 || e == 1);\n    loop invariant s == 3 ==> (e == 1 || e == 2);\n    loop invariant s == 4 ==> !(e == 3);\n*/\n```\n\nNote that since there are no non-deterministic variables in the loop, we don't need to use any implications to make the loop invariants hold. Also, we have used implication to take care of the conditional nature of the code. The loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination, and they imply the post-condition, which is absent in this program."
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant 0 <= e <= 3;\n    loop invariant 2 <= s <= 5;\n*/",
            "/*@ \n    loop invariant 0 <= e <= 2;\n    loop invariant 2 <= s;\n    loop invariant (s == 2 && e == 0) ==> (e == \\old(e) + 1 && s == 3);\n    loop invariant (s == 3 && e == 1) ==> (e == \\old(e) + 1 && s == 4);\n    loop invariant s == 4 ==> !(e == 3);\n    loop invariant \\false ==> !(unknown() != 0);\n    loop invariant !(unknown() != 0) ==> (0 <= e <= 2 && s >= 5);\n    loop invariant \\false ==> !(e == 3);\n    loop invariant !(e == 3) ==> (0 <= e <= 2 && s >= 4);\n*/",
            "/*@\nloop invariant s == 4 ==> !(e == 3);\n*/",
            "/*@ \n    loop invariant e >= 0;\n    loop invariant s >= 2;\n    loop invariant (s == 2) ==> (e >= 0 && e <= 1);\n    loop invariant (s == 3) ==> (e >= 1 && e <= 2);\n    loop invariant (s == 4) ==> (e != 3);\n*/",
            "/*@ \n    loop invariant e >= 0;\n    loop invariant e <= 2;\n    loop invariant s >= 2;\n    loop invariant s <= 5;\n    loop invariant s == 2 ==> (e == 0 || e == 1);\n    loop invariant s == 3 ==> (e == 1 || e == 2);\n    loop invariant s == 4 ==> !(e == 3);\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= e <= 3;\n    loop invariant 2 <= s <= 5;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= e <= 3 is partially proven to be inductive.\nloop invariant 2 <= s <= 5 is partially proven to be inductive.\nAssertion !(e == 3): Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int e, s;\n\n  e=0;\n  s=2;\n  /*@\nloop invariant i1: 0 <= e <= 3;\nloop invariant i2: 2 <= s <= 5;\n*/\nwhile (unknown()) {\n    if (s == 2){\n      if (e ==0) e=1;\n      s = 3;\n    }\n    else if (s == 3){\n      if (e ==1) e=2;\n      s=4;\n    }\n    else if (s == 4){\n      {;\n//@ assert(!( e == 3 ));\n}\n\n      s=5;\n    }\n  }\n  \nreturn;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "/*@ \n    loop invariant 0 <= e <= 2;\n    loop invariant 2 <= s;\n    loop invariant (s == 2 && e == 0) ==> (e == \\old(e) + 1 && s == 3);\n    loop invariant (s == 3 && e == 1) ==> (e == \\old(e) + 1 && s == 4);\n    loop invariant s == 4 ==> !(e == 3);\n    loop invariant \\false ==> !(unknown() != 0);\n    loop invariant !(unknown() != 0) ==> (0 <= e <= 2 && s >= 5);\n    loop invariant \\false ==> !(e == 3);\n    loop invariant !(e == 3) ==> (0 <= e <= 2 && s >= 4);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 20: unexpected token ')'",
                "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int e, s;\n\n  e=0;\n  s=2;\n  /*@\nloop invariant i1: 0 <= e <= 2;\nloop invariant i2: 2 <= s;\n\n\nloop invariant i5: s == 4 ==> !(e == 3);\n\n\nloop invariant i8: \\false ==> !(e == 3);\n\n*/\nwhile (unknown()) {\n    if (s == 2){\n      if (e ==0) e=1;\n      s = 3;\n    }\n    else if (s == 3){\n      if (e ==1) e=2;\n      s=4;\n    }\n    else if (s == 4){\n      {;\n//@ assert(!( e == 3 ));\n}\n\n      s=5;\n    }\n  }\n  \nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@\nloop invariant s == 4 ==> !(e == 3);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant s == 4 ==> !(e == 3) is established but not preserved.\nAssertion !(e == 3): Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int e, s;\n\n  e=0;\n  s=2;\n  /*@\n\n*/\nwhile (unknown()) {\n    if (s == 2){\n      if (e ==0) e=1;\n      s = 3;\n    }\n    else if (s == 3){\n      if (e ==1) e=2;\n      s=4;\n    }\n    else if (s == 4){\n      {;\n//@ assert(!( e == 3 ));\n}\n\n      s=5;\n    }\n  }\n  \nreturn;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant e >= 0;\n    loop invariant s >= 2;\n    loop invariant (s == 2) ==> (e >= 0 && e <= 1);\n    loop invariant (s == 3) ==> (e >= 1 && e <= 2);\n    loop invariant (s == 4) ==> (e != 3);\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant e >= 0 is inductive.\nloop invariant s >= 2 is inductive.\nloop invariant (s == 2) ==> (e >= 0 && e <= 1) is inductive.\nloop invariant (s == 3) ==> (e >= 1 && e <= 2) is inductive.\nloop invariant (s == 4) ==> (e != 3) is inductive.\nAssertion !(e == 3): Valid"
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant e >= 0;\n    loop invariant e <= 2;\n    loop invariant s >= 2;\n    loop invariant s <= 5;\n    loop invariant s == 2 ==> (e == 0 || e == 1);\n    loop invariant s == 3 ==> (e == 1 || e == 2);\n    loop invariant s == 4 ==> !(e == 3);\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant e >= 0 is inductive.\nloop invariant e <= 2 is inductive.\nloop invariant s >= 2 is inductive.\nloop invariant s <= 5 is inductive.\nloop invariant s == 2 ==> (e == 0 || e == 1) is inductive.\nloop invariant s == 3 ==> (e == 1 || e == 2) is inductive.\nloop invariant s == 4 ==> !(e == 3) is inductive.\nAssertion !(e == 3): Valid"
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 22: unexpected token ')'",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int e, s;\n\n  e=0;\n  s=2;\n  /*@\nloop invariant i1: 0 <= e <= 3;\nloop invariant i2: 2 <= s <= 5;\nloop invariant i3: 0 <= e <= 2;\nloop invariant i4: 2 <= s;\nloop invariant i5: (s == 2 && e == 0) ==> (e == \\old(e) + 1 && s == 3);\nloop invariant i6: (s == 3 && e == 1) ==> (e == \\old(e) + 1 && s == 4);\nloop invariant i7: s == 4 ==> !(e == 3);\nloop invariant i8: \\false ==> !(unknown() != 0);\nloop invariant i9: !(unknown() != 0) ==> (0 <= e <= 2 && s >= 5);\nloop invariant i10: \\false ==> !(e == 3);\nloop invariant i11: !(e == 3) ==> (0 <= e <= 2 && s >= 4);\nloop invariant i12: e >= 0;\nloop invariant i13: s >= 2;\nloop invariant i14: (s == 2) ==> (e >= 0 && e <= 1);\nloop invariant i15: (s == 3) ==> (e >= 1 && e <= 2);\nloop invariant i16: (s == 4) ==> (e != 3);\nloop invariant i17: e <= 2;\nloop invariant i18: s <= 5;\nloop invariant i19: s == 2 ==> (e == 0 || e == 1);\nloop invariant i20: s == 3 ==> (e == 1 || e == 2);\n*/\nwhile (unknown()) {\n    if (s == 2){\n      if (e ==0) e=1;\n      s = 3;\n    }\n    else if (s == 3){\n      if (e ==1) e=2;\n      s=4;\n    }\n    else if (s == 4){\n      {;\n//@ assert(!( e == 3 ));\n}\n\n      s=5;\n    }\n  }\n  \nreturn;\n\n}",
        "combined_annotation_num_solver_calls": 6,
        "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int e, s;\n\n  e=0;\n  s=2;\n  /*@\nloop invariant i1: 0 <= e <= 3;\nloop invariant i2: 2 <= s <= 5;\nloop invariant i3: 0 <= e <= 2;\nloop invariant i4: 2 <= s;\n\n\nloop invariant i7: s == 4 ==> !(e == 3);\n\n\nloop invariant i10: \\false ==> !(e == 3);\n\nloop invariant i12: e >= 0;\nloop invariant i13: s >= 2;\nloop invariant i14: (s == 2) ==> (e >= 0 && e <= 1);\nloop invariant i15: (s == 3) ==> (e >= 1 && e <= 2);\nloop invariant i16: (s == 4) ==> (e != 3);\nloop invariant i17: e <= 2;\nloop invariant i18: s <= 5;\nloop invariant i19: s == 2 ==> (e == 0 || e == 1);\nloop invariant i20: s == 3 ==> (e == 1 || e == 2);\n*/\nwhile (unknown()) {\n    if (s == 2){\n      if (e ==0) e=1;\n      s = 3;\n    }\n    else if (s == 3){\n      if (e ==1) e=2;\n      s=4;\n    }\n    else if (s == 4){\n      {;\n//@ assert(!( e == 3 ));\n}\n\n      s=5;\n    }\n  }\n  \nreturn;\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c"
        ],
        "skipped": [],
        "total": 233,
        "success_count": 111,
        "failure_count": 122,
        "success_rate": 0.47639484978540775
    }
}