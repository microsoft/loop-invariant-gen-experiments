{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loops/trex03-1.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  while(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 && x2==0 && x3==0);\n}\n\n  return 0;\n}\n",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  while(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 && x2==0 && x3==0);\n}\n\n  return 0;\n}\n\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- The function `unknown_uint()` returns an unsigned integer value.\n- The function `unknown_bool()` returns a boolean value.\n- Variables `x1`, `x2`, and `x3` are initialized with the return values of `unknown_uint()`.\n- Variables `d1`, `d2`, and `d3` are initialized with 1.\n- Variables `c1` and `c2` are initialized with the return values of `unknown_bool()`.\n\nLoop condition:\n- The loop continues while `x1`, `x2`, and `x3` are greater than 0.\n\nLoop invariants:\n- `x1 >= 0 && x2 >= 0 && x3 >= 0` (true before the loop execution)\n- `x1 + d1 <= \\at(x1, Pre) && (c1 ==> x1 == \\at(x1, Pre) - d1) || (!c1 ==> x1 < \\at(x1, Pre))` (true in every iteration of the loop)\n- `x2 + d2 <= \\at(x2, Pre) && (c2 ==> x2 == \\at(x2, Pre) - d2) || (!c2 ==> x2 < \\at(x2, Pre))` (true in every iteration of the loop)\n- `x3 + d3 <= \\at(x3, Pre) && (!c1 && !c2 ==> x3 == \\at(x3, Pre) - d3) || (c1 || c2 ==> x3 < \\at(x3, Pre))` (true in every iteration of the loop)\n- `x1 > 0 && x2 > 0 && x3 > 0 ==> c1 || c2` (true in every iteration of the loop)\n- `x1 == 0 && x2 == 0 && x3 == 0 ==> true` (true after the loop termination, implied by the post-condition)\n\nExplanation of the loop invariants:\n- The first invariant states that `x1`, `x2`, and `x3` are non-negative before the loop execution.\n- The second invariant states that if `c1` is true, then `x1` is decremented by `d1`, otherwise `x1` remains the same or is decremented by less than `d1`. Since `d1` is 1, this means that `x1` is either decremented by 1 or remains the same. The relation `x1 + d1 <= \\at(x1, Pre)` ensures that `x1` does not overflow. \n- The third invariant is similar to the second invariant, but for `x2`.\n- The fourth invariant handles the case where `c1` and `c2` are both false, which means that `x3` is decremented by `d3`. If either `c1` or `c2` is true, then `x3` remains the same or is decremented by less than `d3`. The relation `x3 + d3 <= \\at(x3, Pre)` ensures that `x3` does not overflow.\n- The fifth invariant states that if `x1`, `x2`, and `x3` are all positive, then either `c1` or `c2` must be true. This is because if both `c1` and `c2` are false, then `x3` is decremented by `d3`, and one of the variables becomes 0, contradicting the loop condition.\n- The last invariant states that if `x1`, `x2`, and `x3` are all 0, then the assertion is trivially true. \n\nNote: Since the values of `c1` and `c2` are non-deterministic, we cannot make any assumptions about their values at the end of the loop. Therefore, we use implications to make the invariants trivially true at the end of the loop.",
            "Pre-conditions:\n- The function main takes no input arguments.\n- The function main returns an integer.\n- There are 3 unsigned integer variables x1, x2 and x3 that are initialized with unknown values.\n- There are 3 unsigned integer variables d1, d2 and d3 that are initialized with 1.\n- There are 2 Boolean variables c1 and c2 that are initialized with unknown values.\n\nLoop condition:\n- The loop continues as long as x1, x2 and x3 are positive (greater than 0).\n\nLoop invariants:\n- Before the loop execution, all variables have non-negative values:\n```\n/*@ loop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\n    loop invariant d1 >= 1 && d2 >= 1 && d3 >= 1;\n    loop invariant \\valid(&x1) && \\valid(&x2) && \\valid(&x3);\n    loop invariant \\valid(&d1) && \\valid(&d2) && \\valid(&d3);\n    loop invariant \\valid(&c1) && \\valid(&c2);\n    loop invariant c1 == \\false || c1 == \\true;\n    loop invariant c2 == \\false || c2 == \\true;\n*/\n```\n- In every iteration of the loop, the values of d1, d2 and d3 remain constant:\n```\n/*@ loop invariant d1 >= 1 && d2 >= 1 && d3 >= 1;\n    loop invariant \\valid(&d1) && \\valid(&d2) && \\valid(&d3);\n*/\n```\n- In every iteration of the loop, the values of c1 and c2 change and become either true or false:\n```\n/*@ loop invariant c1 == \\false || c1 == \\true;\n    loop invariant c2 == \\false || c2 == \\true;\n    loop invariant \\valid(&c1) && \\valid(&c2);\n*/\n```\n- In every iteration of the loop, at least one of the variables x1, x2 and x3 becomes smaller:\n```\n/*@ loop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\n    loop invariant (x1+d1>x1 ==> x2+d2<=x2 || x3+d3<=x3) &&\n                   (x2+d2>x2 ==> x1+d1<=x1 || x3+d3<=x3) &&\n                   (x3+d3>x3 ==> x1+d1<=x1 || x2+d2<=x2);\n*/\n```\n- After the loop termination, x1, x2 and x3 are all equal to 0, assuming that the assertion is not guarded:\n```\n/*@ loop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\n    loop invariant (x1+d1>x1 ==> x2+d2<=x2 || x3+d3<=x3) &&\n                   (x2+d2>x2 ==> x1+d1<=x1 || x3+d3<=x3) &&\n                   (x3+d3>x3 ==> x1+d1<=x1 || x2+d2<=x2);\n    loop invariant !(x1==0 && x2==0 && x3==0) ==> c1 || c2;\n    loop invariant (x1==0 && x2==0 && x3==0) ==> \\true;\n*/\n```",
            "Let's start by noting the preconditions and variable assignments in the program:\n\nPreconditions:\n- None\n\nVariable assignments:\n- x1, x2, x3 are assigned non-deterministic unsigned integer values using the function `unknown_uint()`.\n- d1, d2, d3 are assigned the value 1.\n- c1, c2 are assigned non-deterministic boolean values using the function `unknown_bool()`.\n\nNow, let's analyze the loop body. The loop condition is `x1>0 && x2>0 && x3>0`. In each iteration of the loop, one of the three variables `x1`, `x2`, `x3` is decremented by the value of the corresponding variable `d1`, `d2`, `d3` based on the values of `c1` and `c2`, which are non-deterministic boolean values assigned in each iteration using the function `unknown_bool()`.\n\nNow, let's find the necessary loop invariants to help Frama-C verify the post-condition:\n\nLoop invariants:\n- `x1 >= 0 && x2 >= 0 && x3 >= 0`: This is true before the loop execution since the variables `x1`, `x2`, `x3` are assigned non-negative values. This is also true in every iteration of the loop since the decrement operation cannot make the variables negative.\n- `x1 + x2 + x3 = \\at(x1, Pre) + \\at(x2, Pre) + \\at(x3, Pre) - i * (c1 * d1 + c2 * d2 + (!c1 && !c2) * d3)`, where `i` is the number of iterations of the loop: This is true before the loop execution since the loop has not executed yet. This is also true in every iteration of the loop since in each iteration, either `x1`, `x2`, or `x3` is decremented by the corresponding value of `d1`, `d2`, or `d3`. Finally, this is true after the loop termination since the loop terminates when `x1`, `x2`, and `x3` are all equal to 0, and therefore the sum of their initial values is equal to the sum of their decremented values.\n- `(c1 ==> x1 < \\at(x1, Pre)) && (!c1 && c2 ==> x2 < \\at(x2, Pre)) && (!c1 && !c2 ==> x3 < \\at(x3, Pre))`: This is true before the loop execution since the values of `c1` and `c2` are non-deterministic boolean values. This is also true in every iteration of the loop since `c1` and `c2` are assigned non-deterministic boolean values in each iteration. Finally, this is true after the loop termination since the loop terminates when `x1`, `x2`, and `x3` are all equal to 0, and therefore their values are less than their initial values.\n- `(\\at(x1, Pre) + \\at(x2, Pre) + \\at(x3, Pre)) / 3 >= x1 && (\\at(x1, Pre) + \\at(x2, Pre) + \\at(x3, Pre)) / 3 >= x2 && (\\at(x1, Pre) + \\at(x2, Pre) + \\at(x3, Pre)) / 3 >= x3`: This is true before the loop execution since the variables `x1`, `x2`, `x3` are assigned non-negative values. This is also true in every iteration of the loop since in each iteration, either `x1`, `x2`, or `x3` is decremented by the corresponding value of `d1`, `d2`, or `d3`. Finally, this is true after the loop termination since the loop terminates when `x1`, `x2`, and `x3` are all equal to 0, and therefore their final values are less than or equal to their initial values.\n\nPutting it all together, the loop invariants are:\n```\n/*@ \n    loop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\n    loop invariant x1 + x2 + x3 == \\at(x1, Pre) + \\at(x2, Pre) + \\at(x3, Pre) - i * (c1 * d1 + c2 * d2 + (!c1 && !c2) * d3);\n    loop invariant (c1 ==> x1 < \\at(x1, Pre)) && (!c1 && c2 ==> x2 < \\at(x2, Pre)) && (!c1 && !",
            "Pre-conditions:\n- All variables are uninitialized except for `x1`, `x2`, `x3`, `d1`, `d2`, `d3`, `c1`, and `c2`.\n\nLoop condition: `x1>0 && x2>0 && x3>0`\n\nPost-condition: `x1==0 && x2==0 && x3==0`\n\nLoop Invariants:\n- `x1 >= 0 && x2 >= 0 && x3 >= 0`: `x1`, `x2`, and `x3` are unsigned integers, so they cannot be negative.\n- `x1+d1 <= x1_old || x2+d2 <= x2_old || x3+d3 <= x3_old`: At least one of the three variables must decrease in each iteration of the loop. This invariant ensures that the loop will terminate.\n- `x1 <= x1_old`: If `c1` is true, `x1` decreases by `d1`. Otherwise, `x1` does not change. Thus, `x1` can only decrease or remain the same.\n- `x2 <= x2_old`: If `c2` is true, `x2` decreases by `d2`. Otherwise, `x2` does not change. Thus, `x2` can only decrease or remain the same.\n- `x3 <= x3_old`: If `c1` and `c2` are false, `x3` decreases by `d3`. Otherwise, `x3` does not change. Thus, `x3` can only decrease or remain the same.\n- `(x1==0 && x2==0 && x3==0) ==> (c1==0 && c2==0)`: If `x1`, `x2`, and `x3` are all zero, then `c1` and `c2` must also be zero. This invariant ensures that the loop terminates when the post-condition is satisfied.\n- `(x1>0 && x2>0 && x3>0) ==> (c1 || c2)`: If `x1`, `x2`, and `x3` are all positive, then either `c1` or `c2` must be true in each iteration. This invariant ensures that at least one of the three variables decreases in each iteration.\n\nPutting it all together:\n```\n/*@ \n    loop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\n    loop invariant x1+d1 <= x1_old || x2+d2 <= x2_old || x3+d3 <= x3_old;\n    loop invariant x1 <= x1_old;\n    loop invariant x2 <= x2_old;\n    loop invariant x3 <= x3_old;\n    loop invariant (x1==0 && x2==0 && x3==0) ==> (c1==0 && c2==0);\n    loop invariant (x1>0 && x2>0 && x3>0) ==> (c1 || c2);\n*/\n```",
            "Pre-conditions:\n- Three unsigned integer variables `x1`, `x2`, and `x3` are initialized with non-deterministic values.\n- Three unsigned integer variables `d1`, `d2`, and `d3` are initialized with 1.\n- Two Boolean variables `c1` and `c2` are initialized with non-deterministic values.\n\nLoop condition:\n- The loop continues as long as `x1`, `x2`, and `x3` are greater than 0.\n\nLoop invariants:\n- `x1 >= 0 && x2 >= 0 && x3 >= 0`: `x1`, `x2`, and `x3` are always non-negative.\n- `x1 + d1 > 0 && x2 + d2 > 0 && x3 + d3 > 0`: `x1+d1`, `x2+d2`, and `x3+d3` are always positive, since `d1`, `d2`, and `d3` are initialized with 1.\n- `(c1 || !c1) && (c2 || !c2)`: `c1` and `c2` can only be true or false.\n- `x1 + x2 + x3 = \\at(x1, Pre) + \\at(x2, Pre) + \\at(x3, Pre) - i*(\\at(d1, Pre) + \\at(d2, Pre) + \\at(d3, Pre))`: the sum of `x1`, `x2`, and `x3` remains constant during the loop, where `i` is the number of iterations.\n- `x1 <= \\at(x1, Pre) && x2 <= \\at(x2, Pre) && x3 <= \\at(x3, Pre)`: `x1`, `x2`, and `x3` are non-increasing during each iteration of the loop.\n- `x1 < \\at(x1, Pre) ==> !c1`: if `x1` decreases during an iteration, `c1` must be false for the next iteration, since `d1` is initialized with 1.\n- `x2 < \\at(x2, Pre) ==> !c2`: if `x2` decreases during an iteration, `c2` must be false for the next iteration, since `d2` is initialized with 1.\n- `x3 < \\at(x3, Pre) ==> (!c1 && !c2)`: if `x3` decreases during an iteration, both `c1` and `c2` must be false for the next iteration, since `d3` is initialized with 1.\n- `x1==0 && x2==0 && x3==0 ==> true`: the post-condition is true when `x1`, `x2`, and `x3` are all 0.\n\nPutting it all together:\n```\n/*@ \nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 + d1 > 0 && x2 + d2 > 0 && x3 + d3 > 0;\nloop invariant (c1 || !c1) && (c2 || !c2);\nloop invariant x1 + x2 + x3 = \\at(x1, Pre) + \\at(x2, Pre) + \\at(x3, Pre) - i*(\\at(d1, Pre) + \\at(d2, Pre) + \\at(d3, Pre));\nloop invariant x1 <= \\at(x1, Pre) && x2 <= \\at(x2, Pre) && x3 <= \\at(x3, Pre);\nloop invariant x1 < \\at(x1, Pre) ==> !c1;\nloop invariant x2 < \\at(x2, Pre) ==> !c2;\nloop invariant x3 < \\at(x3, Pre) ==> (!c1 && !c2);\nloop invariant x1==0 && x2==0 && x3==0 ==> true;\n*/\n```"
        ],
        "annotation_blocks": [
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The function `unknown_uint()` returns an unsigned integer value.\n- The function `unknown_bool()` returns a boolean value.\n- Variables `x1`, `x2`, and `x3` are initialized with the return values of `unknown_uint()`.\n- Variables `d1`, `d2`, and `d3` are initialized with 1.\n- Variables `c1` and `c2` are initialized with the return values of `unknown_bool()`.\n\nLoop condition:\n- The loop continues while `x1`, `x2`, and `x3` are greater than 0.\n\nLoop invariants:\n- `x1 >= 0 && x2 >= 0 && x3 >= 0` (true before the loop execution)\n- `x1 + d1 <= \\at(x1, Pre) && (c1 ==> x1 == \\at(x1, Pre) - d1) || (!c1 ==> x1 < \\at(x1, Pre))` (true in every iteration of the loop)\n- `x2 + d2 <= \\at(x2, Pre) && (c2 ==> x2 == \\at(x2, Pre) - d2) || (!c2 ==> x2 < \\at(x2, Pre))` (true in every iteration of the loop)\n- `x3 + d3 <= \\at(x3, Pre) && (!c1 && !c2 ==> x3 == \\at(x3, Pre) - d3) || (c1 || c2 ==> x3 < \\at(x3, Pre))` (true in every iteration of the loop)\n- `x1 > 0 && x2 > 0 && x3 > 0 ==> c1 || c2` (true in every iteration of the loop)\n- `x1 == 0 && x2 == 0 && x3 == 0 ==> true` (true after the loop termination, implied by the post-condition)\n\nExplanation of the loop invariants:\n- The first invariant states that `x1`, `x2`, and `x3` are non-negative before the loop execution.\n- The second invariant states that if `c1` is true, then `x1` is decremented by `d1`, otherwise `x1` remains the same or is decremented by less than `d1`. Since `d1` is 1, this means that `x1` is either decremented by 1 or remains the same. The relation `x1 + d1 <= \\at(x1, Pre)` ensures that `x1` does not overflow. \n- The third invariant is similar to the second invariant, but for `x2`.\n- The fourth invariant handles the case where `c1` and `c2` are both false, which means that `x3` is decremented by `d3`. If either `c1` or `c2` is true, then `x3` remains the same or is decremented by less than `d3`. The relation `x3 + d3 <= \\at(x3, Pre)` ensures that `x3` does not overflow.\n- The fifth invariant states that if `x1`, `x2`, and `x3` are all positive, then either `c1` or `c2` must be true. This is because if both `c1` and `c2` are false, then `x3` is decremented by `d3`, and one of the variables becomes 0, contradicting the loop condition.\n- The last invariant states that if `x1`, `x2`, and `x3` are all 0, then the assertion is trivially true. \n\nNote: Since the values of `c1` and `c2` are non-deterministic, we cannot make any assumptions about their values at the end of the loop. Therefore, we use implications to make the invariants trivially true at the end of the loop."
            ],
            "/*@ loop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\n    loop invariant d1 >= 1 && d2 >= 1 && d3 >= 1;\n    loop invariant \\valid(&x1) && \\valid(&x2) && \\valid(&x3);\n    loop invariant \\valid(&d1) && \\valid(&d2) && \\valid(&d3);\n    loop invariant \\valid(&c1) && \\valid(&c2);\n    loop invariant c1 == \\false || c1 == \\true;\n    loop invariant c2 == \\false || c2 == \\true;\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Let's start by noting the preconditions and variable assignments in the program:\n\nPreconditions:\n- None\n\nVariable assignments:\n- x1, x2, x3 are assigned non-deterministic unsigned integer values using the function `unknown_uint()`.\n- d1, d2, d3 are assigned the value 1.\n- c1, c2 are assigned non-deterministic boolean values using the function `unknown_bool()`.\n\nNow, let's analyze the loop body. The loop condition is `x1>0 && x2>0 && x3>0`. In each iteration of the loop, one of the three variables `x1`, `x2`, `x3` is decremented by the value of the corresponding variable `d1`, `d2`, `d3` based on the values of `c1` and `c2`, which are non-deterministic boolean values assigned in each iteration using the function `unknown_bool()`.\n\nNow, let's find the necessary loop invariants to help Frama-C verify the post-condition:\n\nLoop invariants:\n- `x1 >= 0 && x2 >= 0 && x3 >= 0`: This is true before the loop execution since the variables `x1`, `x2`, `x3` are assigned non-negative values. This is also true in every iteration of the loop since the decrement operation cannot make the variables negative.\n- `x1 + x2 + x3 = \\at(x1, Pre) + \\at(x2, Pre) + \\at(x3, Pre) - i * (c1 * d1 + c2 * d2 + (!c1 && !c2) * d3)`, where `i` is the number of iterations of the loop: This is true before the loop execution since the loop has not executed yet. This is also true in every iteration of the loop since in each iteration, either `x1`, `x2`, or `x3` is decremented by the corresponding value of `d1`, `d2`, or `d3`. Finally, this is true after the loop termination since the loop terminates when `x1`, `x2`, and `x3` are all equal to 0, and therefore the sum of their initial values is equal to the sum of their decremented values.\n- `(c1 ==> x1 < \\at(x1, Pre)) && (!c1 && c2 ==> x2 < \\at(x2, Pre)) && (!c1 && !c2 ==> x3 < \\at(x3, Pre))`: This is true before the loop execution since the values of `c1` and `c2` are non-deterministic boolean values. This is also true in every iteration of the loop since `c1` and `c2` are assigned non-deterministic boolean values in each iteration. Finally, this is true after the loop termination since the loop terminates when `x1`, `x2`, and `x3` are all equal to 0, and therefore their values are less than their initial values.\n- `(\\at(x1, Pre) + \\at(x2, Pre) + \\at(x3, Pre)) / 3 >= x1 && (\\at(x1, Pre) + \\at(x2, Pre) + \\at(x3, Pre)) / 3 >= x2 && (\\at(x1, Pre) + \\at(x2, Pre) + \\at(x3, Pre)) / 3 >= x3`: This is true before the loop execution since the variables `x1`, `x2`, `x3` are assigned non-negative values. This is also true in every iteration of the loop since in each iteration, either `x1`, `x2`, or `x3` is decremented by the corresponding value of `d1`, `d2`, or `d3`. Finally, this is true after the loop termination since the loop terminates when `x1`, `x2`, and `x3` are all equal to 0, and therefore their final values are less than or equal to their initial values.\n\nPutting it all together, the loop invariants are:\n```\n/*@ \n    loop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\n    loop invariant x1 + x2 + x3 == \\at(x1, Pre) + \\at(x2, Pre) + \\at(x3, Pre) - i * (c1 * d1 + c2 * d2 + (!c1 && !c2) * d3);\n    loop invariant (c1 ==> x1 < \\at(x1, Pre)) && (!c1 && c2 ==> x2 < \\at(x2, Pre)) && (!c1 && !"
            ],
            "/*@ \n    loop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\n    loop invariant x1+d1 <= x1_old || x2+d2 <= x2_old || x3+d3 <= x3_old;\n    loop invariant x1 <= x1_old;\n    loop invariant x2 <= x2_old;\n    loop invariant x3 <= x3_old;\n    loop invariant (x1==0 && x2==0 && x3==0) ==> (c1==0 && c2==0);\n    loop invariant (x1>0 && x2>0 && x3>0) ==> (c1 || c2);\n*/",
            "/*@ \nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 + d1 > 0 && x2 + d2 > 0 && x3 + d3 > 0;\nloop invariant (c1 || !c1) && (c2 || !c2);\nloop invariant x1 + x2 + x3 = \\at(x1, Pre) + \\at(x2, Pre) + \\at(x3, Pre) - i*(\\at(d1, Pre) + \\at(d2, Pre) + \\at(d3, Pre));\nloop invariant x1 <= \\at(x1, Pre) && x2 <= \\at(x2, Pre) && x3 <= \\at(x3, Pre);\nloop invariant x1 < \\at(x1, Pre) ==> !c1;\nloop invariant x2 < \\at(x2, Pre) ==> !c2;\nloop invariant x3 < \\at(x3, Pre) ==> (!c1 && !c2);\nloop invariant x1==0 && x2==0 && x3==0 ==> true;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The function `unknown_uint()` returns an unsigned integer value.\n- The function `unknown_bool()` returns a boolean value.\n- Variables `x1`, `x2`, and `x3` are initialized with the return values of `unknown_uint()`.\n- Variables `d1`, `d2`, and `d3` are initialized with 1.\n- Variables `c1` and `c2` are initialized with the return values of `unknown_bool()`.\n\nLoop condition:\n- The loop continues while `x1`, `x2`, and `x3` are greater than 0.\n\nLoop invariants:\n- `x1 >= 0 && x2 >= 0 && x3 >= 0` (true before the loop execution)\n- `x1 + d1 <= \\at(x1, Pre) && (c1 ==> x1 == \\at(x1, Pre) - d1) || (!c1 ==> x1 < \\at(x1, Pre))` (true in every iteration of the loop)\n- `x2 + d2 <= \\at(x2, Pre) && (c2 ==> x2 == \\at(x2, Pre) - d2) || (!c2 ==> x2 < \\at(x2, Pre))` (true in every iteration of the loop)\n- `x3 + d3 <= \\at(x3, Pre) && (!c1 && !c2 ==> x3 == \\at(x3, Pre) - d3) || (c1 || c2 ==> x3 < \\at(x3, Pre))` (true in every iteration of the loop)\n- `x1 > 0 && x2 > 0 && x3 > 0 ==> c1 || c2` (true in every iteration of the loop)\n- `x1 == 0 && x2 == 0 && x3 == 0 ==> true` (true after the loop termination, implied by the post-condition)\n\nExplanation of the loop invariants:\n- The first invariant states that `x1`, `x2`, and `x3` are non-negative before the loop execution.\n- The second invariant states that if `c1` is true, then `x1` is decremented by `d1`, otherwise `x1` remains the same or is decremented by less than `d1`. Since `d1` is 1, this means that `x1` is either decremented by 1 or remains the same. The relation `x1 + d1 <= \\at(x1, Pre)` ensures that `x1` does not overflow. \n- The third invariant is similar to the second invariant, but for `x2`.\n- The fourth invariant handles the case where `c1` and `c2` are both false, which means that `x3` is decremented by `d3`. If either `c1` or `c2` is true, then `x3` remains the same or is decremented by less than `d3`. The relation `x3 + d3 <= \\at(x3, Pre)` ensures that `x3` does not overflow.\n- The fifth invariant states that if `x1`, `x2`, and `x3` are all positive, then either `c1` or `c2` must be true. This is because if both `c1` and `c2` are false, then `x3` is decremented by `d3`, and one of the variables becomes 0, contradicting the loop condition.\n- The last invariant states that if `x1`, `x2`, and `x3` are all 0, then the assertion is trivially true. \n\nNote: Since the values of `c1` and `c2` are non-deterministic, we cannot make any assumptions about their values at the end of the loop. Therefore, we use implications to make the invariants trivially true at the end of the loop.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ loop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\n    loop invariant d1 >= 1 && d2 >= 1 && d3 >= 1;\n    loop invariant \\valid(&x1) && \\valid(&x2) && \\valid(&x3);\n    loop invariant \\valid(&d1) && \\valid(&d2) && \\valid(&d3);\n    loop invariant \\valid(&c1) && \\valid(&c2);\n    loop invariant c1 == \\false || c1 == \\true;\n    loop invariant c2 == \\false || c2 == \\true;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 is inductive.\nloop invariant d1 >= 1 && d2 >= 1 && d3 >= 1 is inductive.\nloop invariant \\valid(&x1) && \\valid(&x2) && \\valid(&x3) is inductive.\nloop invariant \\valid(&d1) && \\valid(&d2) && \\valid(&d3) is inductive.\nloop invariant \\valid(&c1) && \\valid(&c2) is inductive.\nloop invariant c1 == \\false || c1 == \\true is inductive.\nloop invariant c2 == \\false || c2 == \\true is inductive.\nAssertion x1 == 0 && x2 == 0 && x3 == 0: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\nloop invariant i1: x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant i2: d1 >= 1 && d2 >= 1 && d3 >= 1;\nloop invariant i3: \\valid(&x1) && \\valid(&x2) && \\valid(&x3);\nloop invariant i4: \\valid(&d1) && \\valid(&d2) && \\valid(&d3);\nloop invariant i5: \\valid(&c1) && \\valid(&c2);\nloop invariant i6: c1 == \\false || c1 == \\true;\nloop invariant i7: c2 == \\false || c2 == \\true;\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 && x2==0 && x3==0);\n}\n\n  return 0;\n}\n",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Let's start by noting the preconditions and variable assignments in the program:\n\nPreconditions:\n- None\n\nVariable assignments:\n- x1, x2, x3 are assigned non-deterministic unsigned integer values using the function `unknown_uint()`.\n- d1, d2, d3 are assigned the value 1.\n- c1, c2 are assigned non-deterministic boolean values using the function `unknown_bool()`.\n\nNow, let's analyze the loop body. The loop condition is `x1>0 && x2>0 && x3>0`. In each iteration of the loop, one of the three variables `x1`, `x2`, `x3` is decremented by the value of the corresponding variable `d1`, `d2`, `d3` based on the values of `c1` and `c2`, which are non-deterministic boolean values assigned in each iteration using the function `unknown_bool()`.\n\nNow, let's find the necessary loop invariants to help Frama-C verify the post-condition:\n\nLoop invariants:\n- `x1 >= 0 && x2 >= 0 && x3 >= 0`: This is true before the loop execution since the variables `x1`, `x2`, `x3` are assigned non-negative values. This is also true in every iteration of the loop since the decrement operation cannot make the variables negative.\n- `x1 + x2 + x3 = \\at(x1, Pre) + \\at(x2, Pre) + \\at(x3, Pre) - i * (c1 * d1 + c2 * d2 + (!c1 && !c2) * d3)`, where `i` is the number of iterations of the loop: This is true before the loop execution since the loop has not executed yet. This is also true in every iteration of the loop since in each iteration, either `x1`, `x2`, or `x3` is decremented by the corresponding value of `d1`, `d2`, or `d3`. Finally, this is true after the loop termination since the loop terminates when `x1`, `x2`, and `x3` are all equal to 0, and therefore the sum of their initial values is equal to the sum of their decremented values.\n- `(c1 ==> x1 < \\at(x1, Pre)) && (!c1 && c2 ==> x2 < \\at(x2, Pre)) && (!c1 && !c2 ==> x3 < \\at(x3, Pre))`: This is true before the loop execution since the values of `c1` and `c2` are non-deterministic boolean values. This is also true in every iteration of the loop since `c1` and `c2` are assigned non-deterministic boolean values in each iteration. Finally, this is true after the loop termination since the loop terminates when `x1`, `x2`, and `x3` are all equal to 0, and therefore their values are less than their initial values.\n- `(\\at(x1, Pre) + \\at(x2, Pre) + \\at(x3, Pre)) / 3 >= x1 && (\\at(x1, Pre) + \\at(x2, Pre) + \\at(x3, Pre)) / 3 >= x2 && (\\at(x1, Pre) + \\at(x2, Pre) + \\at(x3, Pre)) / 3 >= x3`: This is true before the loop execution since the variables `x1`, `x2`, `x3` are assigned non-negative values. This is also true in every iteration of the loop since in each iteration, either `x1`, `x2`, or `x3` is decremented by the corresponding value of `d1`, `d2`, or `d3`. Finally, this is true after the loop termination since the loop terminates when `x1`, `x2`, and `x3` are all equal to 0, and therefore their final values are less than or equal to their initial values.\n\nPutting it all together, the loop invariants are:\n```\n/*@ \n    loop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\n    loop invariant x1 + x2 + x3 == \\at(x1, Pre) + \\at(x2, Pre) + \\at(x3, Pre) - i * (c1 * d1 + c2 * d2 + (!c1 && !c2) * d3);\n    loop invariant (c1 ==> x1 < \\at(x1, Pre)) && (!c1 && c2 ==> x2 < \\at(x2, Pre)) && (!c1 && !",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 7,
                "annotations": "/*@ \n    loop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\n    loop invariant x1+d1 <= x1_old || x2+d2 <= x2_old || x3+d3 <= x3_old;\n    loop invariant x1 <= x1_old;\n    loop invariant x2 <= x2_old;\n    loop invariant x3 <= x3_old;\n    loop invariant (x1==0 && x2==0 && x3==0) ==> (c1==0 && c2==0);\n    loop invariant (x1>0 && x2>0 && x3>0) ==> (c1 || c2);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 13: unbound logic variable x3_old. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\nloop invariant i1: x1 >= 0 && x2 >= 0 && x3 >= 0;\n\n\n\n\n\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 && x2==0 && x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "/*@ \nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 + d1 > 0 && x2 + d2 > 0 && x3 + d3 > 0;\nloop invariant (c1 || !c1) && (c2 || !c2);\nloop invariant x1 + x2 + x3 = \\at(x1, Pre) + \\at(x2, Pre) + \\at(x3, Pre) - i*(\\at(d1, Pre) + \\at(d2, Pre) + \\at(d3, Pre));\nloop invariant x1 <= \\at(x1, Pre) && x2 <= \\at(x2, Pre) && x3 <= \\at(x3, Pre);\nloop invariant x1 < \\at(x1, Pre) ==> !c1;\nloop invariant x2 < \\at(x2, Pre) ==> !c2;\nloop invariant x3 < \\at(x3, Pre) ==> (!c1 && !c2);\nloop invariant x1==0 && x2==0 && x3==0 ==> true;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: Assignment operators not allowed in annotations.",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\nloop invariant i1: x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant i2: x1 + d1 > 0 && x2 + d2 > 0 && x3 + d3 > 0;\nloop invariant i3: (c1 || !c1) && (c2 || !c2);\n\n\n\n\n\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 && x2==0 && x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 27: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\nloop invariant i1: x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant i2: d1 >= 1 && d2 >= 1 && d3 >= 1;\nloop invariant i3: \\valid(&x1) && \\valid(&x2) && \\valid(&x3);\nloop invariant i4: \\valid(&d1) && \\valid(&d2) && \\valid(&d3);\nloop invariant i5: \\valid(&c1) && \\valid(&c2);\nloop invariant i6: c1 == \\false || c1 == \\true;\nloop invariant i7: c2 == \\false || c2 == \\true;\nloop invariant i8: x1+d1 <= x1_old || x2+d2 <= x2_old || x3+d3 <= x3_old;\nloop invariant i9: x1 <= x1_old;\nloop invariant i10: x2 <= x2_old;\nloop invariant i11: x3 <= x3_old;\nloop invariant i12: (x1==0 && x2==0 && x3==0) ==> (c1==0 && c2==0);\nloop invariant i13: (x1>0 && x2>0 && x3>0) ==> (c1 || c2);\nloop invariant i14: x1 + d1 > 0 && x2 + d2 > 0 && x3 + d3 > 0;\nloop invariant i15: (c1 || !c1) && (c2 || !c2);\nloop invariant i16: x1 + x2 + x3 = \\at(x1, Pre) + \\at(x2, Pre) + \\at(x3, Pre) - i*(\\at(d1, Pre) + \\at(d2, Pre) + \\at(d3, Pre));\nloop invariant i17: x1 <= \\at(x1, Pre) && x2 <= \\at(x2, Pre) && x3 <= \\at(x3, Pre);\nloop invariant i18: x1 < \\at(x1, Pre) ==> !c1;\nloop invariant i19: x2 < \\at(x2, Pre) ==> !c2;\nloop invariant i20: x3 < \\at(x3, Pre) ==> (!c1 && !c2);\nloop invariant i21: x1==0 && x2==0 && x3==0 ==> true;\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 && x2==0 && x3==0);\n}\n\n  return 0;\n}\n",
        "combined_annotation_num_solver_calls": 13,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\nloop invariant i1: x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant i2: d1 >= 1 && d2 >= 1 && d3 >= 1;\nloop invariant i3: \\valid(&x1) && \\valid(&x2) && \\valid(&x3);\nloop invariant i4: \\valid(&d1) && \\valid(&d2) && \\valid(&d3);\nloop invariant i5: \\valid(&c1) && \\valid(&c2);\nloop invariant i6: c1 == \\false || c1 == \\true;\nloop invariant i7: c2 == \\false || c2 == \\true;\n\n\n\n\n\n\nloop invariant i14: x1 + d1 > 0 && x2 + d2 > 0 && x3 + d3 > 0;\nloop invariant i15: (c1 || !c1) && (c2 || !c2);\n\n\n\n\n\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 && x2==0 && x3==0);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/const.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq1.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq2.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/afnp2014.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/css2003.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007b.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gsv2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/hhk2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_2.c",
            "../data/benchmarks/sv-benchmarks/loop-new/gauss_sum.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark10_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark11_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark13_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark14_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark15_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark16_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark17_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark18_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark20_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark21_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark22_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark23_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark25_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark26_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark27_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark29_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark30_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark31_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark32_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark33_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark34_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark35_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark36_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark37_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark38_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark39_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark40_polynomial.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark41_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark42_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark43_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark45_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark48_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark49_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark50_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark51_polynomial.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark52_polynomial.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark53_polynomial.c",
            "../data/benchmarks/sv-benchmarks/loops/count_up_down-1.c",
            "../data/benchmarks/sv-benchmarks/loops/for_infinite_loop_1.c",
            "../data/benchmarks/sv-benchmarks/loops/for_infinite_loop_2.c",
            "../data/benchmarks/sv-benchmarks/loops/sum04-2.c",
            "../data/benchmarks/sv-benchmarks/loops/terminator_02-2.c",
            "../data/benchmarks/sv-benchmarks/loops/terminator_03-2.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../data/benchmarks/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/even.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/mod4.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/odd.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/id_trans.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/bhmr2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/ddlm2013.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gcnr2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gr2006.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_k.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_nondet.c",
            "../data/benchmarks/sv-benchmarks/loop-new/half.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark07_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark12_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark19_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark24_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark28_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark44_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark46_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark47_linear.c",
            "../data/benchmarks/sv-benchmarks/loops/count_up_down-2.c",
            "../data/benchmarks/sv-benchmarks/loops/for_bounded_loop1.c",
            "../data/benchmarks/sv-benchmarks/loops/sum01-1.c",
            "../data/benchmarks/sv-benchmarks/loops/sum01-2.c",
            "../data/benchmarks/sv-benchmarks/loops/sum01_bug02.c",
            "../data/benchmarks/sv-benchmarks/loops/sum01_bug02_sum01_bug02_base.case.c",
            "../data/benchmarks/sv-benchmarks/loops/sum03-1.c",
            "../data/benchmarks/sv-benchmarks/loops/sum03-2.c",
            "../data/benchmarks/sv-benchmarks/loops/sum04-1.c",
            "../data/benchmarks/sv-benchmarks/loops/terminator_02-1.c",
            "../data/benchmarks/sv-benchmarks/loops/terminator_03-1.c",
            "../data/benchmarks/sv-benchmarks/loops/trex03-1.c"
        ],
        "skipped": [],
        "total": 378,
        "success_count": 195,
        "failure_count": 183,
        "success_rate": 0.5158730158730159
    }
}