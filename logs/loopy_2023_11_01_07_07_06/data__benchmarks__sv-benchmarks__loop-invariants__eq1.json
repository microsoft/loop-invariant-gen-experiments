{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loop-invariants/eq1.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  while (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;\n//@ assert(w == x && y == z);\n}\n\n  return 0;\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  while (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;\n//@ assert(w == x && y == z);\n}\n\n  return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions or variable assignments:\n- The program defines a macro `assume(e)` which returns 0 if the expression `!(e)` evaluates to true.\n- The program declares an external function `unknown_uint()` which returns an unsigned integer value.\n- The program declares four unsigned integer variables `w`, `x`, `y`, and `z`.\n- The program initializes `w` and `x` to the same value returned by `unknown_uint()`.\n- The program initializes `y` and `z` to the same value returned by `unknown_uint()`.\n\nLoop condition:\n- The loop continues as long as the value returned by `unknown_uint()` is non-zero.\n\nLoop invariants:\n- The values of `w` and `x` are always equal.\n- The values of `y` and `z` are always equal.\n- The value of `w` is always greater than or equal to its initial value.\n- The value of `x` is always greater than or equal to its initial value.\n- The value of `y` is always less than or equal to its initial value.\n- The value of `z` is always less than or equal to its initial value.\n\nCombined loop invariants:\n```\n//@ loop invariant w == x;\n//@ loop invariant y == z;\n//@ loop invariant w >= \\at(w, Pre);\n//@ loop invariant x >= \\at(x, Pre);\n//@ loop invariant y <= \\at(y, Pre);\n//@ loop invariant z <= \\at(z, Pre);\n//@ loop invariant !unknown_uint() ==> (w == x && y == z);\n``` \nNote:\n- The loop invariant `!unknown_uint() ==> (w == x && y == z)` is used to handle the assertion that is guarded by the condition `!unknown_uint()`. This invariant ensures that the assertion is trivially true when the loop has terminated.",
            "Pre-conditions:\n- None\n\nVariable assignments:\n- `unsigned int w = unknown_uint();`\n- `unsigned int x = w;`\n- `unsigned int y = unknown_uint();`\n- `unsigned int z = y;`\n\nLoop condition:\n- `unknown_uint()`\n\nLoop invariants:\n- `w >= x`\n- `y >= z`\n- `(w == x && y == z) ==> unknown_uint()`\n- `(w == x && y == z) ==> ((w <= x + 1) && (x <= w + 1) && (y <= z + 1) && (z <= y + 1))`\n\nExplanation:\n- The first two loop invariants are true before the loop execution because `x` is initialized to the same value as `w`, so `w >= x` is true. Similarly, `z` is initialized to the same value as `y`, so `y >= z` is true.\n- In every iteration of the loop, one of the two conditions inside the loop is executed. If the first condition is executed, then `w` and `x` are incremented by 1, so `w >= x` remains true. If the second condition is executed, then `y` and `z` are decremented by 1, so `y >= z` remains true.\n- After the loop termination, `(w == x && y == z)` is true because of the post-condition assertion. Therefore, the third loop invariant is true after the loop termination.\n- The fourth loop invariant takes care of bounding the maximum and minimum values that the variables can take. Since the loop condition is `unknown_uint()`, the loop can execute any number of times. Therefore, we cannot bound the maximum and minimum values of `w`, `x`, `y`, and `z`. However, we can say that after the loop terminates, `w` is either equal to `x` or `x + 1` (depending on whether the first or second condition was executed more), and `y` is either equal to `z` or `z + 1` (again, depending on which condition was executed more). Therefore, the fourth loop invariant is true after the loop termination.",
            "Pre-conditions and variable assignments:\n- `w` is assigned the value of `unknown_uint()`.\n- `x` is assigned the value of `w`.\n- `y` is assigned the value of `unknown_uint()`.\n- `z` is assigned the value of `y`.\n\nLoop condition:\n- The loop executes as long as `unknown_uint()` returns a non-zero value.\n\nLoop invariants:\n- `w >= x`\n- `y >= z`\n- `(w - x) + (z - y) == y - x` (to ensure `w == x` and `y == z` when the loop terminates)\n- If `unknown_uint()` returns zero at the beginning of the loop, then `w == x` and `y == z` at the end of the loop.\n\nCombining all the loop invariants:\n```\n/*@ \n    loop invariant w >= x;\n    loop invariant y >= z;\n    loop invariant (w - x) + (z - y) == y - x;\n    loop invariant unknown_uint() == 0 ==> (w == x && y == z);\n*/\n```",
            "Pre-conditions: None\n\nVariable assignments:\n- `unsigned int w = unknown_uint();`\n- `unsigned int x = w;`\n- `unsigned int y = unknown_uint();`\n- `unsigned int z = y;`\n\nLoop condition: `unknown_uint()`\n\nLoop invariants:\n- Before the loop: None\n- In every iteration:\n    - `w >= x`\n    - `y <= z`\n- After the loop:\n    - `(w == x && y == z) ==> (w >= x && y <= z)`\n\nExplanation:\n- Before the loop: There are no loop invariants that hold before the loop execution.\n- In every iteration:\n    - `w >= x`: Since `w` is incremented whenever the first `unknown_uint()` condition is true, and `x` is always equal to or greater than `w`, this invariant holds true in every iteration of the loop.\n    - `y <= z`: Similarly, since `y` is decremented whenever the second `unknown_uint()` condition is true, and `z` is always equal to or less than `y`, this invariant holds true in every iteration of the loop.\n- After the loop:\n    - `(w == x && y == z) ==> (w >= x && y <= z)`: The post-condition `w == x && y == z` can be rewritten as `(w == x) && (y == z)`. Since `w >= x` and `y <= z` hold true in every iteration of the loop, it follows that they also hold true after the loop termination. Therefore, the post-condition implies `(w >= x) && (y <= z)`.",
            "Pre-conditions:\n- The program has no pre-conditions.\n- The program declares and initializes four unsigned integer variables: w, x, y, and z.\n\nLoop condition:\n- The loop will execute as long as the value returned by the function unknown_uint() is non-zero.\n\nLoop Invariants:\n- Before the loop execution:\n    - w == x\n    - y == z\n- In every iteration of the loop:\n    - (w == x) && (y == z)\n    - w >= x\n    - y >= z\n    - (w == x + (number of times the if condition evaluated to true in the loop)) && (y == z - (number of times the if condition evaluated to false in the loop))\n- After the loop termination:\n    - (w == x + (number of times the if condition evaluated to true in the loop)) && (y == z - (number of times the if condition evaluated to false in the loop))\n    - (w == x) && (y == z) ==> (w == x + (number of times the if condition evaluated to true in the loop)) && (y == z - (number of times the if condition evaluated to false in the loop))\n    - (w == x) && (y == z) ==> (w == x + (number of times the if condition evaluated to true in the loop)) && (y == z - (number of times the if condition evaluated to false in the loop)) ==> (w == x && y == z)\n\nLet's explain the loop invariants:\n- Before the loop execution: \n    - The variables w and x are initialized with the same value. The variables y and z are initialized with the same value. This invariant ensures that the assertion at the end of the program holds true before the loop.\n- In every iteration of the loop:\n    - The invariant (w == x) && (y == z) ensures that the values of w and x remain equal and the values of y and z remain equal throughout the loop.\n    - The invariants w >= x and y >= z ensure that the values of w and y are always greater than or equal to the values of x and z, respectively.\n    - The invariant (w == x + (number of times the if condition evaluated to true in the loop)) && (y == z - (number of times the if condition evaluated to false in the loop)) ensures that the values of w and y are updated correctly based on the number of times the if condition evaluated to true or false in the loop.\n- After the loop termination:\n    - The invariant (w == x + (number of times the if condition evaluated to true in the loop)) && (y == z - (number of times the if condition evaluated to false in the loop)) ensures that the values of w and y are updated correctly based on the number of times the if condition evaluated to true or false in the loop.\n    - The implication (w == x) && (y == z) ==> (w == x + (number of times the if condition evaluated to true in the loop)) && (y == z - (number of times the if condition evaluated to false in the loop)) ensures that if the values of w and y are equal before the loop, then they will still be equal after the loop terminates.\n    - The implication (w == x) && (y == z) ==> (w == x + (number of times the if condition evaluated to true in the loop)) && (y == z - (number of times the if condition evaluated to false in the loop)) ==> (w == x && y == z) ensures that if the values of w and y are equal before the loop and the loop invariants hold true, then the assertion at the end of the program holds true."
        ],
        "annotation_blocks": [
            "//@ loop invariant w == x;\n//@ loop invariant y == z;\n//@ loop invariant w >= \\at(w, Pre);\n//@ loop invariant x >= \\at(x, Pre);\n//@ loop invariant y <= \\at(y, Pre);\n//@ loop invariant z <= \\at(z, Pre);\n//@ loop invariant !unknown_uint() ==> (w == x && y == z);",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- None\n\nVariable assignments:\n- `unsigned int w = unknown_uint();`\n- `unsigned int x = w;`\n- `unsigned int y = unknown_uint();`\n- `unsigned int z = y;`\n\nLoop condition:\n- `unknown_uint()`\n\nLoop invariants:\n- `w >= x`\n- `y >= z`\n- `(w == x && y == z) ==> unknown_uint()`\n- `(w == x && y == z) ==> ((w <= x + 1) && (x <= w + 1) && (y <= z + 1) && (z <= y + 1))`\n\nExplanation:\n- The first two loop invariants are true before the loop execution because `x` is initialized to the same value as `w`, so `w >= x` is true. Similarly, `z` is initialized to the same value as `y`, so `y >= z` is true.\n- In every iteration of the loop, one of the two conditions inside the loop is executed. If the first condition is executed, then `w` and `x` are incremented by 1, so `w >= x` remains true. If the second condition is executed, then `y` and `z` are decremented by 1, so `y >= z` remains true.\n- After the loop termination, `(w == x && y == z)` is true because of the post-condition assertion. Therefore, the third loop invariant is true after the loop termination.\n- The fourth loop invariant takes care of bounding the maximum and minimum values that the variables can take. Since the loop condition is `unknown_uint()`, the loop can execute any number of times. Therefore, we cannot bound the maximum and minimum values of `w`, `x`, `y`, and `z`. However, we can say that after the loop terminates, `w` is either equal to `x` or `x + 1` (depending on whether the first or second condition was executed more), and `y` is either equal to `z` or `z + 1` (again, depending on which condition was executed more). Therefore, the fourth loop invariant is true after the loop termination."
            ],
            "/*@ \n    loop invariant w >= x;\n    loop invariant y >= z;\n    loop invariant (w - x) + (z - y) == y - x;\n    loop invariant unknown_uint() == 0 ==> (w == x && y == z);\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions: None\n\nVariable assignments:\n- `unsigned int w = unknown_uint();`\n- `unsigned int x = w;`\n- `unsigned int y = unknown_uint();`\n- `unsigned int z = y;`\n\nLoop condition: `unknown_uint()`\n\nLoop invariants:\n- Before the loop: None\n- In every iteration:\n    - `w >= x`\n    - `y <= z`\n- After the loop:\n    - `(w == x && y == z) ==> (w >= x && y <= z)`\n\nExplanation:\n- Before the loop: There are no loop invariants that hold before the loop execution.\n- In every iteration:\n    - `w >= x`: Since `w` is incremented whenever the first `unknown_uint()` condition is true, and `x` is always equal to or greater than `w`, this invariant holds true in every iteration of the loop.\n    - `y <= z`: Similarly, since `y` is decremented whenever the second `unknown_uint()` condition is true, and `z` is always equal to or less than `y`, this invariant holds true in every iteration of the loop.\n- After the loop:\n    - `(w == x && y == z) ==> (w >= x && y <= z)`: The post-condition `w == x && y == z` can be rewritten as `(w == x) && (y == z)`. Since `w >= x` and `y <= z` hold true in every iteration of the loop, it follows that they also hold true after the loop termination. Therefore, the post-condition implies `(w >= x) && (y <= z)`."
            ],
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The program has no pre-conditions.\n- The program declares and initializes four unsigned integer variables: w, x, y, and z.\n\nLoop condition:\n- The loop will execute as long as the value returned by the function unknown_uint() is non-zero.\n\nLoop Invariants:\n- Before the loop execution:\n    - w == x\n    - y == z\n- In every iteration of the loop:\n    - (w == x) && (y == z)\n    - w >= x\n    - y >= z\n    - (w == x + (number of times the if condition evaluated to true in the loop)) && (y == z - (number of times the if condition evaluated to false in the loop))\n- After the loop termination:\n    - (w == x + (number of times the if condition evaluated to true in the loop)) && (y == z - (number of times the if condition evaluated to false in the loop))\n    - (w == x) && (y == z) ==> (w == x + (number of times the if condition evaluated to true in the loop)) && (y == z - (number of times the if condition evaluated to false in the loop))\n    - (w == x) && (y == z) ==> (w == x + (number of times the if condition evaluated to true in the loop)) && (y == z - (number of times the if condition evaluated to false in the loop)) ==> (w == x && y == z)\n\nLet's explain the loop invariants:\n- Before the loop execution: \n    - The variables w and x are initialized with the same value. The variables y and z are initialized with the same value. This invariant ensures that the assertion at the end of the program holds true before the loop.\n- In every iteration of the loop:\n    - The invariant (w == x) && (y == z) ensures that the values of w and x remain equal and the values of y and z remain equal throughout the loop.\n    - The invariants w >= x and y >= z ensure that the values of w and y are always greater than or equal to the values of x and z, respectively.\n    - The invariant (w == x + (number of times the if condition evaluated to true in the loop)) && (y == z - (number of times the if condition evaluated to false in the loop)) ensures that the values of w and y are updated correctly based on the number of times the if condition evaluated to true or false in the loop.\n- After the loop termination:\n    - The invariant (w == x + (number of times the if condition evaluated to true in the loop)) && (y == z - (number of times the if condition evaluated to false in the loop)) ensures that the values of w and y are updated correctly based on the number of times the if condition evaluated to true or false in the loop.\n    - The implication (w == x) && (y == z) ==> (w == x + (number of times the if condition evaluated to true in the loop)) && (y == z - (number of times the if condition evaluated to false in the loop)) ensures that if the values of w and y are equal before the loop, then they will still be equal after the loop terminates.\n    - The implication (w == x) && (y == z) ==> (w == x + (number of times the if condition evaluated to true in the loop)) && (y == z - (number of times the if condition evaluated to false in the loop)) ==> (w == x && y == z) ensures that if the values of w and y are equal before the loop and the loop invariants hold true, then the assertion at the end of the program holds true."
            ]
        ],
        "completions": [
            {
                "num_solver_calls": 6,
                "annotations": "//@ loop invariant w == x;\n//@ loop invariant y == z;\n//@ loop invariant w >= \\at(w, Pre);\n//@ loop invariant x >= \\at(x, Pre);\n//@ loop invariant y <= \\at(y, Pre);\n//@ loop invariant z <= \\at(z, Pre);\n//@ loop invariant !unknown_uint() ==> (w == x && y == z);",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 16: unexpected token ')'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  /*@\nloop invariant i1: w == x;\nloop invariant i2: y == z;\n\n\n\n\n\n*/\nwhile (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;\n//@ assert(w == x && y == z);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- None\n\nVariable assignments:\n- `unsigned int w = unknown_uint();`\n- `unsigned int x = w;`\n- `unsigned int y = unknown_uint();`\n- `unsigned int z = y;`\n\nLoop condition:\n- `unknown_uint()`\n\nLoop invariants:\n- `w >= x`\n- `y >= z`\n- `(w == x && y == z) ==> unknown_uint()`\n- `(w == x && y == z) ==> ((w <= x + 1) && (x <= w + 1) && (y <= z + 1) && (z <= y + 1))`\n\nExplanation:\n- The first two loop invariants are true before the loop execution because `x` is initialized to the same value as `w`, so `w >= x` is true. Similarly, `z` is initialized to the same value as `y`, so `y >= z` is true.\n- In every iteration of the loop, one of the two conditions inside the loop is executed. If the first condition is executed, then `w` and `x` are incremented by 1, so `w >= x` remains true. If the second condition is executed, then `y` and `z` are decremented by 1, so `y >= z` remains true.\n- After the loop termination, `(w == x && y == z)` is true because of the post-condition assertion. Therefore, the third loop invariant is true after the loop termination.\n- The fourth loop invariant takes care of bounding the maximum and minimum values that the variables can take. Since the loop condition is `unknown_uint()`, the loop can execute any number of times. Therefore, we cannot bound the maximum and minimum values of `w`, `x`, `y`, and `z`. However, we can say that after the loop terminates, `w` is either equal to `x` or `x + 1` (depending on whether the first or second condition was executed more), and `y` is either equal to `z` or `z + 1` (again, depending on which condition was executed more). Therefore, the fourth loop invariant is true after the loop termination.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant w >= x;\n    loop invariant y >= z;\n    loop invariant (w - x) + (z - y) == y - x;\n    loop invariant unknown_uint() == 0 ==> (w == x && y == z);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 13: unexpected token ')'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  /*@\n\n\n\n\n*/\nwhile (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;\n//@ assert(w == x && y == z);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions: None\n\nVariable assignments:\n- `unsigned int w = unknown_uint();`\n- `unsigned int x = w;`\n- `unsigned int y = unknown_uint();`\n- `unsigned int z = y;`\n\nLoop condition: `unknown_uint()`\n\nLoop invariants:\n- Before the loop: None\n- In every iteration:\n    - `w >= x`\n    - `y <= z`\n- After the loop:\n    - `(w == x && y == z) ==> (w >= x && y <= z)`\n\nExplanation:\n- Before the loop: There are no loop invariants that hold before the loop execution.\n- In every iteration:\n    - `w >= x`: Since `w` is incremented whenever the first `unknown_uint()` condition is true, and `x` is always equal to or greater than `w`, this invariant holds true in every iteration of the loop.\n    - `y <= z`: Similarly, since `y` is decremented whenever the second `unknown_uint()` condition is true, and `z` is always equal to or less than `y`, this invariant holds true in every iteration of the loop.\n- After the loop:\n    - `(w == x && y == z) ==> (w >= x && y <= z)`: The post-condition `w == x && y == z` can be rewritten as `(w == x) && (y == z)`. Since `w >= x` and `y <= z` hold true in every iteration of the loop, it follows that they also hold true after the loop termination. Therefore, the post-condition implies `(w >= x) && (y <= z)`.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The program has no pre-conditions.\n- The program declares and initializes four unsigned integer variables: w, x, y, and z.\n\nLoop condition:\n- The loop will execute as long as the value returned by the function unknown_uint() is non-zero.\n\nLoop Invariants:\n- Before the loop execution:\n    - w == x\n    - y == z\n- In every iteration of the loop:\n    - (w == x) && (y == z)\n    - w >= x\n    - y >= z\n    - (w == x + (number of times the if condition evaluated to true in the loop)) && (y == z - (number of times the if condition evaluated to false in the loop))\n- After the loop termination:\n    - (w == x + (number of times the if condition evaluated to true in the loop)) && (y == z - (number of times the if condition evaluated to false in the loop))\n    - (w == x) && (y == z) ==> (w == x + (number of times the if condition evaluated to true in the loop)) && (y == z - (number of times the if condition evaluated to false in the loop))\n    - (w == x) && (y == z) ==> (w == x + (number of times the if condition evaluated to true in the loop)) && (y == z - (number of times the if condition evaluated to false in the loop)) ==> (w == x && y == z)\n\nLet's explain the loop invariants:\n- Before the loop execution: \n    - The variables w and x are initialized with the same value. The variables y and z are initialized with the same value. This invariant ensures that the assertion at the end of the program holds true before the loop.\n- In every iteration of the loop:\n    - The invariant (w == x) && (y == z) ensures that the values of w and x remain equal and the values of y and z remain equal throughout the loop.\n    - The invariants w >= x and y >= z ensure that the values of w and y are always greater than or equal to the values of x and z, respectively.\n    - The invariant (w == x + (number of times the if condition evaluated to true in the loop)) && (y == z - (number of times the if condition evaluated to false in the loop)) ensures that the values of w and y are updated correctly based on the number of times the if condition evaluated to true or false in the loop.\n- After the loop termination:\n    - The invariant (w == x + (number of times the if condition evaluated to true in the loop)) && (y == z - (number of times the if condition evaluated to false in the loop)) ensures that the values of w and y are updated correctly based on the number of times the if condition evaluated to true or false in the loop.\n    - The implication (w == x) && (y == z) ==> (w == x + (number of times the if condition evaluated to true in the loop)) && (y == z - (number of times the if condition evaluated to false in the loop)) ensures that if the values of w and y are equal before the loop, then they will still be equal after the loop terminates.\n    - The implication (w == x) && (y == z) ==> (w == x + (number of times the if condition evaluated to true in the loop)) && (y == z - (number of times the if condition evaluated to false in the loop)) ==> (w == x && y == z) ensures that if the values of w and y are equal before the loop and the loop invariants hold true, then the assertion at the end of the program holds true.",
                "error": "Output does not contain at least 1 code block"
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 16: unexpected token ')'",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  /*@\nloop invariant i1: w == x;\nloop invariant i2: y == z;\nloop invariant i3: w >= \\at(w, Pre);\nloop invariant i4: x >= \\at(x, Pre);\nloop invariant i5: y <= \\at(y, Pre);\nloop invariant i6: z <= \\at(z, Pre);\nloop invariant i7: !unknown_uint() ==> (w == x && y == z);\nloop invariant i8: w >= x;\nloop invariant i9: y >= z;\nloop invariant i10: (w - x) + (z - y) == y - x;\nloop invariant i11: unknown_uint() == 0 ==> (w == x && y == z);\n*/\nwhile (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;\n//@ assert(w == x && y == z);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 8,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  /*@\nloop invariant i1: w == x;\nloop invariant i2: y == z;\n\n\n\n\n\nloop invariant i8: w >= x;\nloop invariant i9: y >= z;\n\n\n*/\nwhile (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;\n//@ assert(w == x && y == z);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/const.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq1.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../data/benchmarks/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/bin-suffix-5.c"
        ],
        "skipped": [],
        "total": 278,
        "success_count": 133,
        "failure_count": 145,
        "success_rate": 0.4784172661870504
    }
}