{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loop-lit/hhk2008.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(a <= 1000000)) return 0;\n    if (!(0 <= b && b <= 1000000)) return 0;\n    res = a;\n    cnt = b;\n    while (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(a <= 1000000)) return 0;\n    if (!(0 <= b && b <= 1000000)) return 0;\n    res = a;\n    cnt = b;\n    while (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- `a` is an integer variable that could have any value returned by `unknown_int()`.\n- `b` is an integer variable that could have any value returned by `unknown_int()`.\n- `res` and `cnt` are integer variables that are initialized with the values of `a` and `b`, respectively.\n- `a` should be less than or equal to 1000000.\n- `b` should be between 0 and 1000000.\n\nLoop condition:\n- The loop will execute as long as the value of `cnt` is greater than 0.\n\nPost-condition:\n- The value of `res` should be equal to the sum of `a` and `b`.\n\nLoop invariants:\n- Before loop execution: `res == a + (b - cnt)`.\n    - Explanation: Before the loop starts, `cnt` is equal to `b` and `res` is equal to `a`. Therefore, `b - cnt` is equal to 0 and `res` is equal to `a + (b - cnt)`.\n- In every iteration of the loop: `(cnt >= 0) && (res == a + (b - cnt))`.\n    - Explanation: In every iteration, `cnt` is decremented by 1 and `res` is incremented by 1. Therefore, `b - cnt` decreases by 1, and `res` increases by 1. This implies that `res` is always equal to `a + (b - cnt)`. Also, `cnt` is always greater than or equal to 0.\n- After loop termination: `res == a + b`.\n    - Explanation: After the loop terminates, the value of `cnt` becomes 0. Therefore, `b - cnt` becomes equal to `b`. Thus, `res` becomes equal to `a + b`.\n\nPutting all the loop invariants together:\n```\n/*@ \n    loop invariant res == a + (b - cnt);\n    loop invariant (cnt >= 0) && (res == a + (b - cnt));\n    loop invariant res == a + b;\n*/\n```",
            "Pre-conditions:\n- `a` is an integer variable initialized with an unknown value.\n- `b` is an integer variable initialized with an unknown value.\n- `a` is less than or equal to 1000000.\n- `b` is greater than or equal to 0 and less than or equal to 1000000.\n\nVariable assignments:\n- `res` is an integer variable initialized with the value of `a`.\n- `cnt` is an integer variable initialized with the value of `b`.\n\nLoop condition:\n- `cnt > 0`\n\nPost-condition:\n- `res` is equal to the sum of `a` and `b`.\n\nLoop Invariants:\n- Before the loop execution: `res == a + b && cnt >= 0`\n- In every iteration of the loop: `(cnt >= 0) && (res == a + b - cnt)`\n- After the loop termination: `res == a + b`\n\nExplanation:\n- Before the loop execution, `res` is initialized with the value of `a` and `cnt` is initialized with the value of `b`. Hence, `res` is equal to the sum of `a` and `b` before the loop starts. Also, `cnt` is greater than or equal to 0 since it is initialized with `b`, which is greater than or equal to 0.\n- In every iteration of the loop, `cnt` is decreased by 1 and `res` is increased by 1. Hence, `res` is always equal to the sum of `a` and `b` minus `cnt`.\n- After the loop termination, `cnt` is equal to 0 and `res` is equal to the sum of `a` and `b`. Therefore, `res` is equal to the sum of `a` and `b` after the loop ends.\n- The loop invariants imply the post-condition since `res` is always equal to the sum of `a` and `b` during the loop execution, and it is equal to the sum of `a` and `b` after the loop terminates.",
            "We can start by analyzing the program and identifying any pre-conditions or variable assignments:\n\n- The program declares and initializes three integer variables `a`, `b`, `res`, and `cnt`.\n- `a` and `b` are assigned non-deterministic integer values using the function `unknown_int()`.\n- The program checks whether `a` is less than or equal to 1000000 and whether `b` is between 0 and 1000000 (inclusive).\n- The program initializes `res` with the value of `a` and `cnt` with the value of `b`.\n\nNow, let's analyze the loop body:\n\n- The loop condition is `cnt > 0`.\n- In each iteration of the loop, `cnt` is decremented by 1 and `res` is incremented by 1.\n\nFinally, let's analyze the post-condition:\n\n- The program asserts that `res` is equal to the sum of `a` and `b`. This assertion is guarded by a semicolon, meaning that it is unconditional.\n\nBased on this analysis, we can come up with the following loop invariants:\n\n```\n/*@\n    loop invariant 0 <= cnt <= b;\n    loop invariant res == a + (b - cnt);\n    loop invariant cnt >= 0;\n*/\n```\nExplanation:\n\n- The first loop invariant ensures that `cnt` remains between 0 and `b` (inclusive) throughout the loop execution.\n- The second loop invariant ensures that `res` is always equal to `a` plus the difference between `b` and `cnt`. This is because in each iteration of the loop, `cnt` is decremented by 1 and `res` is incremented by 1, so the difference between `b` and `cnt` decreases by 1 and `res` increases by 1. This loop invariant implies the post-condition because when the loop terminates, `cnt` is 0 and `res` is equal to `a` plus `b`.\n- The third loop invariant ensures that `cnt` remains non-negative throughout the loop execution.\n\nSince the loop body does not modify `a`, `b`, or `res`, we do not need to add any additional loop invariants for these variables. However, we have already added an invariant for `res` that helps us ensure the post-condition. \n\nNote: Since `a` and `b` are non-deterministic, we cannot add any loop invariants that bound their values. However, we can use the pre-conditions to ensure that `a` is less than or equal to 1000000 and `b` is between 0 and 1000000 (inclusive).",
            "Pre-conditions and variable assignments:\n- `a` and `b` are assigned non-deterministic integer values using the function `unknown_int()`.\n- `res` and `cnt` are initialized with the values of `a` and `b`, respectively.\n- `a` must be less than or equal to 1000000, and `b` must be between 0 and 1000000 (inclusive).\n\nLoop condition:\n- The loop continues as long as `cnt` is greater than 0.\n\nLoop invariants:\n- Before the loop execution: \n    - `a` must be less than or equal to 1000000, and `b` must be between 0 and 1000000 (inclusive).\n- In every iteration of the loop:\n    - `res` must be equal to `a` plus the original value of `cnt` minus the current value of `cnt`.\n    - `cnt` must be greater than or equal to 0.\n- After the loop termination:\n    - `res` must be equal to `a + b`.\n\nPutting it all together, the loop invariants are:\n```\n/*@ \n    loop invariant a <= 1000000;\n    loop invariant 0 <= b <= 1000000;\n    loop invariant res == a + (\\at(cnt, Pre) - cnt);\n    loop invariant 0 <= cnt;\n    loop invariant res == a + b ==> cnt == 0;\n*/\n```",
            "Pre-conditions or variable assignments:\n- Variables `a` and `b` are assigned the return value of the function `unknown_int()`.\n- `res` is assigned the value of `a`.\n- `cnt` is assigned the value of `b`.\n- Pre-conditions: `a` must be less than or equal to `1000000`. `b` must be greater than or equal to `0` and less than or equal to `1000000`.\n\nLoop condition:\n- The loop continues as long as `cnt` is greater than `0`.\n\nLoop invariants:\n- Before the loop execution:\n    - `a <= 1000000`\n    - `0 <= b <= 1000000`\n    - `res == a`\n    - `cnt == b`\n- In every iteration of the loop:\n    - `cnt >= 0`\n    - `res == a + (b - cnt)`\n- After the loop termination:\n    - `res == a + b`\n\nExplanation:\n- Before the loop, we need to ensure that the pre-conditions are met. Also, `res` is initialized to `a` and `cnt` is initialized to `b`.\n- In every iteration of the loop, `cnt` is decremented by `1` and `res` is incremented by `1`. So, we need to ensure that `cnt` is non-negative and that `res` is equal to `a` plus the difference between `b` and `cnt`. \n- After the loop, `res` should be equal to `a + b`.\n\nPutting everything together, we get the following loop invariants:\n\n```\n/*@ \n    loop invariant a <= 1000000;\n    loop invariant 0 <= b <= 1000000;\n    loop invariant res == a;\n    loop invariant cnt == b || (cnt < b ==> res == a + (b - cnt));\n    loop invariant cnt >= 0;\n    loop invariant res == a + (b - cnt);\n    loop invariant res == a + b ==> cnt == 0;\n*/\n``` \n\nNote that the last invariant uses an implication to take care of the conditional nature of the assertion. It states that if `res` is equal to `a + b`, then `cnt` must be equal to `0`."
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant res == a + (b - cnt);\n    loop invariant (cnt >= 0) && (res == a + (b - cnt));\n    loop invariant res == a + b;\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- `a` is an integer variable initialized with an unknown value.\n- `b` is an integer variable initialized with an unknown value.\n- `a` is less than or equal to 1000000.\n- `b` is greater than or equal to 0 and less than or equal to 1000000.\n\nVariable assignments:\n- `res` is an integer variable initialized with the value of `a`.\n- `cnt` is an integer variable initialized with the value of `b`.\n\nLoop condition:\n- `cnt > 0`\n\nPost-condition:\n- `res` is equal to the sum of `a` and `b`.\n\nLoop Invariants:\n- Before the loop execution: `res == a + b && cnt >= 0`\n- In every iteration of the loop: `(cnt >= 0) && (res == a + b - cnt)`\n- After the loop termination: `res == a + b`\n\nExplanation:\n- Before the loop execution, `res` is initialized with the value of `a` and `cnt` is initialized with the value of `b`. Hence, `res` is equal to the sum of `a` and `b` before the loop starts. Also, `cnt` is greater than or equal to 0 since it is initialized with `b`, which is greater than or equal to 0.\n- In every iteration of the loop, `cnt` is decreased by 1 and `res` is increased by 1. Hence, `res` is always equal to the sum of `a` and `b` minus `cnt`.\n- After the loop termination, `cnt` is equal to 0 and `res` is equal to the sum of `a` and `b`. Therefore, `res` is equal to the sum of `a` and `b` after the loop ends.\n- The loop invariants imply the post-condition since `res` is always equal to the sum of `a` and `b` during the loop execution, and it is equal to the sum of `a` and `b` after the loop terminates."
            ],
            "/*@\n    loop invariant 0 <= cnt <= b;\n    loop invariant res == a + (b - cnt);\n    loop invariant cnt >= 0;\n*/",
            "/*@ \n    loop invariant a <= 1000000;\n    loop invariant 0 <= b <= 1000000;\n    loop invariant res == a + (\\at(cnt, Pre) - cnt);\n    loop invariant 0 <= cnt;\n    loop invariant res == a + b ==> cnt == 0;\n*/",
            "/*@ \n    loop invariant a <= 1000000;\n    loop invariant 0 <= b <= 1000000;\n    loop invariant res == a;\n    loop invariant cnt == b || (cnt < b ==> res == a + (b - cnt));\n    loop invariant cnt >= 0;\n    loop invariant res == a + (b - cnt);\n    loop invariant res == a + b ==> cnt == 0;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant res == a + (b - cnt);\n    loop invariant (cnt >= 0) && (res == a + (b - cnt));\n    loop invariant res == a + b;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant res == a + (b - cnt) is partially proven to be inductive.\nloop invariant (cnt >= 0) && (res == a + (b - cnt)) is partially proven to be inductive.\nloop invariant res == a + b is preserved but not established.\nAssertion res == a + b: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(a <= 1000000)) return 0;\n    if (!(0 <= b && b <= 1000000)) return 0;\n    res = a;\n    cnt = b;\n    /*@\nloop invariant i1: res == a + (b - cnt);\nloop invariant i2: (cnt >= 0) && (res == a + (b - cnt));\n\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- `a` is an integer variable initialized with an unknown value.\n- `b` is an integer variable initialized with an unknown value.\n- `a` is less than or equal to 1000000.\n- `b` is greater than or equal to 0 and less than or equal to 1000000.\n\nVariable assignments:\n- `res` is an integer variable initialized with the value of `a`.\n- `cnt` is an integer variable initialized with the value of `b`.\n\nLoop condition:\n- `cnt > 0`\n\nPost-condition:\n- `res` is equal to the sum of `a` and `b`.\n\nLoop Invariants:\n- Before the loop execution: `res == a + b && cnt >= 0`\n- In every iteration of the loop: `(cnt >= 0) && (res == a + b - cnt)`\n- After the loop termination: `res == a + b`\n\nExplanation:\n- Before the loop execution, `res` is initialized with the value of `a` and `cnt` is initialized with the value of `b`. Hence, `res` is equal to the sum of `a` and `b` before the loop starts. Also, `cnt` is greater than or equal to 0 since it is initialized with `b`, which is greater than or equal to 0.\n- In every iteration of the loop, `cnt` is decreased by 1 and `res` is increased by 1. Hence, `res` is always equal to the sum of `a` and `b` minus `cnt`.\n- After the loop termination, `cnt` is equal to 0 and `res` is equal to the sum of `a` and `b`. Therefore, `res` is equal to the sum of `a` and `b` after the loop ends.\n- The loop invariants imply the post-condition since `res` is always equal to the sum of `a` and `b` during the loop execution, and it is equal to the sum of `a` and `b` after the loop terminates.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@\n    loop invariant 0 <= cnt <= b;\n    loop invariant res == a + (b - cnt);\n    loop invariant cnt >= 0;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant 0 <= cnt <= b is inductive.\nloop invariant res == a + (b - cnt) is inductive.\nloop invariant cnt >= 0 is inductive.\nAssertion res == a + b: Valid"
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant a <= 1000000;\n    loop invariant 0 <= b <= 1000000;\n    loop invariant res == a + (\\at(cnt, Pre) - cnt);\n    loop invariant 0 <= cnt;\n    loop invariant res == a + b ==> cnt == 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: unbound logic variable cnt. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(a <= 1000000)) return 0;\n    if (!(0 <= b && b <= 1000000)) return 0;\n    res = a;\n    cnt = b;\n    /*@\nloop invariant i1: a <= 1000000;\nloop invariant i2: 0 <= b <= 1000000;\n\nloop invariant i4: 0 <= cnt;\n\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant a <= 1000000;\n    loop invariant 0 <= b <= 1000000;\n    loop invariant res == a;\n    loop invariant cnt == b || (cnt < b ==> res == a + (b - cnt));\n    loop invariant cnt >= 0;\n    loop invariant res == a + (b - cnt);\n    loop invariant res == a + b ==> cnt == 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant a <= 1000000 is partially proven to be inductive.\nloop invariant 0 <= b <= 1000000 is partially proven to be inductive.\nloop invariant res == a is established but not preserved.\nloop invariant cnt == b || (cnt < b ==> res == a + (b - cnt)) is partially proven to be inductive.\nloop invariant cnt >= 0 is partially proven to be inductive.\nloop invariant res == a + (b - cnt) is partially proven to be inductive.\nloop invariant res == a + b ==> cnt == 0 is partially proven to be inductive.\nAssertion res == a + b: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(a <= 1000000)) return 0;\n    if (!(0 <= b && b <= 1000000)) return 0;\n    res = a;\n    cnt = b;\n    /*@\nloop invariant i1: a <= 1000000;\nloop invariant i2: 0 <= b <= 1000000;\n\nloop invariant i4: cnt == b || (cnt < b ==> res == a + (b - cnt));\nloop invariant i5: cnt >= 0;\nloop invariant i6: res == a + (b - cnt);\nloop invariant i7: res == a + b ==> cnt == 0;\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 20: unbound logic variable cnt. Ignoring loop annotation",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(a <= 1000000)) return 0;\n    if (!(0 <= b && b <= 1000000)) return 0;\n    res = a;\n    cnt = b;\n    /*@\nloop invariant i1: res == a + (b - cnt);\nloop invariant i2: (cnt >= 0) && (res == a + (b - cnt));\nloop invariant i3: res == a + b;\nloop invariant i4: 0 <= cnt <= b;\nloop invariant i5: cnt >= 0;\nloop invariant i6: a <= 1000000;\nloop invariant i7: 0 <= b <= 1000000;\nloop invariant i8: res == a + (\\at(cnt, Pre) - cnt);\nloop invariant i9: 0 <= cnt;\nloop invariant i10: res == a + b ==> cnt == 0;\nloop invariant i11: res == a;\nloop invariant i12: cnt == b || (cnt < b ==> res == a + (b - cnt));\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 4,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(a <= 1000000)) return 0;\n    if (!(0 <= b && b <= 1000000)) return 0;\n    res = a;\n    cnt = b;\n    /*@\nloop invariant i1: res == a + (b - cnt);\nloop invariant i2: (cnt >= 0) && (res == a + (b - cnt));\n\nloop invariant i4: 0 <= cnt <= b;\nloop invariant i5: cnt >= 0;\nloop invariant i6: a <= 1000000;\nloop invariant i7: 0 <= b <= 1000000;\n\nloop invariant i9: 0 <= cnt;\nloop invariant i10: res == a + b ==> cnt == 0;\n\nloop invariant i12: cnt == b || (cnt < b ==> res == a + (b - cnt));\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/const.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq1.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq2.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/afnp2014.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/css2003.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007b.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gsv2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/hhk2008.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../data/benchmarks/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/even.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/mod4.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/odd.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/id_trans.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/bhmr2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/ddlm2013.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gcnr2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gr2006.c"
        ],
        "skipped": [],
        "total": 298,
        "success_count": 141,
        "failure_count": 157,
        "success_rate": 0.47315436241610737
    }
}