{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-1.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  while (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x != y);\n}\n\n}",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  while (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x != y);\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- x is initialized to 1.\n- y is a non-negative integer value obtained from an external function unknown_uint().\n- The assertion at the end checks that x is not equal to y.\n\nLoop condition:\n- The loop executes as long as x is less than y.\n\nLoop invariants:\n- i1: x is always a power of 2.\n- i2: y is always greater than or equal to x.\n- i3: If x is not a power of 2, then x is always incremented by 1 in each iteration of the loop.\n- i4: If x is a power of 2, then x is always squared in each iteration of the loop.\n- i5: The value of x is always less than or equal to y.\n- i6: If x is not a power of 2 and x is incremented by 1 in an iteration, then x squared is greater than y in that iteration.\n\nExplanation of loop invariants:\n- i1: The loop body has two branches, one in which x is squared and the other in which x is incremented by 1. If x is initially a power of 2, then it will always remain a power of 2 after being squared repeatedly in each iteration. If x is not initially a power of 2, then it will never become a power of 2 since the only way it can increase is by incrementing by 1.\n- i2: This invariant is true before the loop execution since y is non-negative and x is initialized to 1. In each iteration of the loop, either x is squared or incremented by 1, but it always remains less than y. Therefore, this invariant is maintained throughout the loop execution.\n- i3: If x is not a power of 2, then it must be incremented by 1 in each iteration. This is because the condition x < y / x is equivalent to x*x < y, and if x is not a power of 2, then x*x is less than y and x must be incremented. Since x is incremented by 1 in each iteration, this invariant is maintained.\n- i4: If x is a power of 2, then it will always remain a power of 2 after being squared repeatedly in each iteration. Therefore, this invariant is maintained.\n- i5: This invariant is true before the loop execution since x is initialized to 1 and y is non-negative. In each iteration of the loop, either x is squared or incremented by 1, but it always remains less than y. Therefore, this invariant is maintained throughout the loop execution.\n- i6: If x is not a power of 2 and x is incremented by 1 in an iteration, then x squared in that iteration is equal to (x+1)*(x+1), which is equal to x*x + 2*x + 1. Since x*x < y, we know that x*x + 2*x < y, and therefore x*x + 2*x + 1 < y. Therefore, x squared is greater than y in that iteration. This invariant is only applicable when x is not a power of 2 and is incremented by 1, so it is not always true in every iteration.\n\nLoop invariants:\n```\n/*@ \n    loop invariant x >= 1;\n    loop invariant y >= 0;\n    loop invariant x <= y;\n    loop invariant (x & (x - 1)) == 0 ==> x * x <= y;\n    loop invariant (x & (x - 1)) != 0 ==> x + 1 <= y || (x + 1) * (x + 1) > y;\n*/\n```",
            "Pre-conditions:\n- `x` is initialized to 1.\n- `y` is an unsigned integer obtained from an external function `unknown_uint()`.\n- `y` is greater than 0.\n\nLoop condition:\n- `x < y`\n\nLoop invariants:\n- `x >= 1`\n- `y > 0`\n- `x <= y`\n- `x > 1 ==> x*x <= y`\n- `x <= 1 ==> x < y`\n- `(x == 1 && y > 1) ==> \\forall unsigned int i; 1 <= i <= y-1 ==> i < y || i == y`\n- `x < y ==> x+1 <= y`\n- `x > 1 ==> (x-1)*(x-1) >= x`\n- `y == unknown_uint() ==> y > 0`\n- `!(x < y) ==> x != y`\n\nExplanation:\n- The first three invariants follow from the pre-conditions and the loop condition. \n- The fourth invariant is true because if x is greater than 1, then the condition `x < y/x` is equivalent to `x*x < y`, since `y` is greater than 0. \n- The fifth invariant is true because if x is less than or equal to 1, then the condition `x < y/x` is always true, since `y` is greater than 0. \n- The sixth invariant is true because if `x` is 1 and `y` is greater than 1, then for all `i` between 1 and `y-1`, inclusive, either `i` is less than `y` or `i` is `y`. \n- The seventh invariant is true because if `x` is less than `y`, then `x+1` is less than or equal to `y`. \n- The eighth invariant is true because if `x` is greater than 1, then the condition `x < y/x` is equivalent to `(x-1)*(x-1) >= x`.\n- The ninth invariant is true because `y` is assigned a value from `unknown_uint()`, which we assume returns a positive integer. \n- The tenth invariant is true because if the loop condition is false, then `x` must be equal to `y` since `x` is incremented by 1 in every iteration of the loop.",
            "Pre-conditions: \n- The function `unknown_uint()` returns an unsigned integer.\n- Variable `x` is initialized to 1.\n- Variable `y` is assigned the return value of `unknown_uint()`.\n\nLoop condition:\n- The loop continues as long as `x` is less than `y`.\n\nLoop invariants:\n- Before the loop: \n    - `x >= 1`\n    - `y > 0`\n- In every iteration:\n    - `x >= 1`\n    - `y > 0`\n    - `x <= y`\n    - `x > 0`\n- After the loop:\n    - `x >= 1`\n    - `y > 0`\n    - `x >= y`\n    - `x != y`\n\nLet's break down these loop invariants:\n\nBefore the loop:\n- `x >= 1`: This is true since `x` is initialized to 1.\n- `y > 0`: This is a pre-condition.\n\nIn every iteration:\n- `x >= 1`: This is true since `x` cannot be smaller than 1.\n- `y > 0`: This is a pre-condition that is assumed to hold throughout the loop.\n- `x <= y`: This is the loop condition.\n- `x > 0`: This is true since `x` is incremented or squared in the loop.\n- `x < y / x ==> x * x < y`: This is an implication that is always true since `x * x` is less than `y` in the true branch of the conditional statement in the loop.\n- `!(x < y / x) ==> x >= y / x`: This is an implication that is always true since `x` is incremented in the false branch of the conditional statement in the loop.\n\nAfter the loop:\n- `x >= 1`: This is true since `x` cannot be smaller than 1.\n- `y > 0`: This is a pre-condition that is assumed to hold throughout the loop.\n- `x >= y`: This is the negation of the loop condition.\n- `x != y`: This is the assertion to be verified.\n\nPutting it all together, the loop invariants are:\n\n```\n/*@\nloop invariant x >= 1;\nloop invariant y > 0;\nloop invariant x <= y;\nloop invariant x > 0;\nloop invariant x < y / x ==> x * x < y;\nloop invariant !(x < y / x) ==> x >= y / x;\n*/\n\nwhile (x < y) {\n  if (x < y / x) {\n    x *= x;\n  } else {\n    x++;\n  }\n}\n\n/*@\nassert x != y;\n*/ \n```",
            "Pre-conditions:\n- The function main takes no arguments and returns an integer value.\n- The function assume(e) takes a boolean argument e and returns 0 if e is false.\n- The function unknown_uint() returns an unsigned integer value. \n\nVariable assignments:\n- Assign 1 to unsigned integer variable x.\n- Assign the value returned by unknown_uint() to unsigned integer variable y.\n\nLoop condition:\n- The while loop continues as long as x is less than y.\n\nLoop invariants:\n- Since x starts at 1 and is only increased within the loop, it is always greater than or equal to 1. Thus, we can add the invariant `/*@ loop invariant x >= 1; */`.\n- Similarly, since y is assigned the value returned by unknown_uint(), we do not know anything about its value, except that it is greater than 0. Thus, we can add the invariant `/*@ loop invariant y > 0; */`.\n- Within the loop, there are two cases: \n    - If `x < y / x`, then we multiply x by itself. This means that x is always less than or equal to the square root of y. Thus, we can add the invariant `/*@ loop invariant x <= \\sqrt{y}; */`.\n    - If `x >= y / x`, then we increment x by 1. This means that x is always greater than or equal to the square root of y. Thus, we can add the invariant `/*@ loop invariant x >= \\sqrt{y}; */`.\n- Since the loop continues as long as x is less than y, we can add the implication `/*@ loop invariant x < y ==> (x+1)*(x+1) > y; */`. This implication states that if x is less than y, then the square of the next value of x (i.e., (x+1)^2) is greater than y. This implication is necessary to ensure that the loop terminates. \n- Finally, since the assertion `x != y` is guarded by the condition `true` (i.e., it is always executed), we can add the implication `/*@ loop invariant x >= y ==> x != y; */`. This implication states that if x is greater than or equal to y, then x is not equal to y. This implication is necessary to ensure that the assertion is true after the loop terminates.\n\nPutting it all together, the loop invariants are:\n```\n/*@ \n    loop invariant x >= 1;\n    loop invariant y > 0;\n    loop invariant x <= \\sqrt{y} || x >= \\sqrt{y};\n    loop invariant x < y ==> (x+1)*(x+1) > y;\n    loop invariant x >= y ==> x != y;\n*/\n```",
            "Pre-conditions:\n- The program assumes the existence of an external function `unknown_uint()` that returns an unsigned integer value.\n- The program initializes `x` to 1 and assigns a non-deterministic value to `y`.\n- The program checks if `y` is greater than 0 before entering the loop.\n\nLoop condition:\n- The loop condition is `x < y`.\n\nLoop invariants:\n- Before the loop execution:\n    - `x >= 1` (from initialization)\n    - `y > 0` (from the pre-condition)\n- In every iteration of the loop:\n    - `x < y` (from the loop condition)\n    - `x >= 1` (from the previous iteration or initialization)\n    - `y > 0` (from the pre-condition)\n    - `(x-1)^2 < y` (if `x > 1`, then `x-1` was the previous value of `x` and `x-1 < x`, so `(x-1)^2 < x*y`)\n    - `(x-1)^2 >= y ==> x <= sqrt(y)+1` (if `(x-1)^2 >= y` then `x-1 >= sqrt(y)` and `x >= sqrt(y)+1`)\n- After the loop termination:\n    - `x >= y` (from the negation of the loop condition)\n    - `y > 0` (from the pre-condition)\n    - `(x-1)^2 < y` (if `x > 1` then `x-1` was the maximum value of `x` in the loop, so `(x-1)^2 < x*y` and `(x-1)^2 < y`)\n\nPutting it all together, the loop invariants are:\n```\n/*@ \n  loop invariant x >= 1;\n  loop invariant y > 0;\n  loop invariant x < y;\n  loop invariant x >= 1;\n  loop invariant y > 0;\n  loop invariant (x-1)*(x-1) < y || (x-1)*(x-1) >= y ==> x <= sqrt(y)+1;\n  loop invariant x >= y || (x-1)*(x-1) < y;\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant x >= 1;\n    loop invariant y >= 0;\n    loop invariant x <= y;\n    loop invariant (x & (x - 1)) == 0 ==> x * x <= y;\n    loop invariant (x & (x - 1)) != 0 ==> x + 1 <= y || (x + 1) * (x + 1) > y;\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- `x` is initialized to 1.\n- `y` is an unsigned integer obtained from an external function `unknown_uint()`.\n- `y` is greater than 0.\n\nLoop condition:\n- `x < y`\n\nLoop invariants:\n- `x >= 1`\n- `y > 0`\n- `x <= y`\n- `x > 1 ==> x*x <= y`\n- `x <= 1 ==> x < y`\n- `(x == 1 && y > 1) ==> \\forall unsigned int i; 1 <= i <= y-1 ==> i < y || i == y`\n- `x < y ==> x+1 <= y`\n- `x > 1 ==> (x-1)*(x-1) >= x`\n- `y == unknown_uint() ==> y > 0`\n- `!(x < y) ==> x != y`\n\nExplanation:\n- The first three invariants follow from the pre-conditions and the loop condition. \n- The fourth invariant is true because if x is greater than 1, then the condition `x < y/x` is equivalent to `x*x < y`, since `y` is greater than 0. \n- The fifth invariant is true because if x is less than or equal to 1, then the condition `x < y/x` is always true, since `y` is greater than 0. \n- The sixth invariant is true because if `x` is 1 and `y` is greater than 1, then for all `i` between 1 and `y-1`, inclusive, either `i` is less than `y` or `i` is `y`. \n- The seventh invariant is true because if `x` is less than `y`, then `x+1` is less than or equal to `y`. \n- The eighth invariant is true because if `x` is greater than 1, then the condition `x < y/x` is equivalent to `(x-1)*(x-1) >= x`.\n- The ninth invariant is true because `y` is assigned a value from `unknown_uint()`, which we assume returns a positive integer. \n- The tenth invariant is true because if the loop condition is false, then `x` must be equal to `y` since `x` is incremented by 1 in every iteration of the loop."
            ],
            "/*@\nloop invariant x >= 1;\nloop invariant y > 0;\nloop invariant x <= y;\nloop invariant x > 0;\nloop invariant x < y / x ==> x * x < y;\nloop invariant !(x < y / x) ==> x >= y / x;\n*/\n\nwhile (x < y) {\n  if (x < y / x) {\n    x *= x;\n  } else {\n    x++;\n  }\n}\n\n/*@\nassert x != y;\n*/ ",
            "/*@ \n    loop invariant x >= 1;\n    loop invariant y > 0;\n    loop invariant x <= \\sqrt{y} || x >= \\sqrt{y};\n    loop invariant x < y ==> (x+1)*(x+1) > y;\n    loop invariant x >= y ==> x != y;\n*/",
            "/*@ \n  loop invariant x >= 1;\n  loop invariant y > 0;\n  loop invariant x < y;\n  loop invariant x >= 1;\n  loop invariant y > 0;\n  loop invariant (x-1)*(x-1) < y || (x-1)*(x-1) >= y ==> x <= sqrt(y)+1;\n  loop invariant x >= y || (x-1)*(x-1) < y;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 1;\n    loop invariant y >= 0;\n    loop invariant x <= y;\n    loop invariant (x & (x - 1)) == 0 ==> x * x <= y;\n    loop invariant (x & (x - 1)) != 0 ==> x + 1 <= y || (x + 1) * (x + 1) > y;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 1 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant x <= y is partially proven to be inductive.\nloop invariant (x & (x - 1)) == 0 ==> x * x <= y is established but not preserved.\nloop invariant (x & (x - 1)) != 0 ==> x + 1 <= y || (x + 1) * (x + 1) > y is partially proven to be inductive.\nAssertion x != y: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  /*@\nloop invariant i1: x >= 1;\nloop invariant i2: y >= 0;\nloop invariant i3: x <= y;\n\nloop invariant i5: (x & (x - 1)) != 0 ==> x + 1 <= y || (x + 1) * (x + 1) > y;\n*/\nwhile (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x != y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- `x` is initialized to 1.\n- `y` is an unsigned integer obtained from an external function `unknown_uint()`.\n- `y` is greater than 0.\n\nLoop condition:\n- `x < y`\n\nLoop invariants:\n- `x >= 1`\n- `y > 0`\n- `x <= y`\n- `x > 1 ==> x*x <= y`\n- `x <= 1 ==> x < y`\n- `(x == 1 && y > 1) ==> \\forall unsigned int i; 1 <= i <= y-1 ==> i < y || i == y`\n- `x < y ==> x+1 <= y`\n- `x > 1 ==> (x-1)*(x-1) >= x`\n- `y == unknown_uint() ==> y > 0`\n- `!(x < y) ==> x != y`\n\nExplanation:\n- The first three invariants follow from the pre-conditions and the loop condition. \n- The fourth invariant is true because if x is greater than 1, then the condition `x < y/x` is equivalent to `x*x < y`, since `y` is greater than 0. \n- The fifth invariant is true because if x is less than or equal to 1, then the condition `x < y/x` is always true, since `y` is greater than 0. \n- The sixth invariant is true because if `x` is 1 and `y` is greater than 1, then for all `i` between 1 and `y-1`, inclusive, either `i` is less than `y` or `i` is `y`. \n- The seventh invariant is true because if `x` is less than `y`, then `x+1` is less than or equal to `y`. \n- The eighth invariant is true because if `x` is greater than 1, then the condition `x < y/x` is equivalent to `(x-1)*(x-1) >= x`.\n- The ninth invariant is true because `y` is assigned a value from `unknown_uint()`, which we assume returns a positive integer. \n- The tenth invariant is true because if the loop condition is false, then `x` must be equal to `y` since `x` is incremented by 1 in every iteration of the loop.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@\nloop invariant x >= 1;\nloop invariant y > 0;\nloop invariant x <= y;\nloop invariant x > 0;\nloop invariant x < y / x ==> x * x < y;\nloop invariant !(x < y / x) ==> x >= y / x;\n*/\n\nwhile (x < y) {\n  if (x < y / x) {\n    x *= x;\n  } else {\n    x++;\n  }\n}\n\n/*@\nassert x != y;\n*/ ",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 1 is inductive.\nloop invariant y > 0 is inductive.\nloop invariant x <= y is inductive.\nloop invariant x > 0 is inductive.\nloop invariant x < y / x ==> x * x < y is inductive.\nloop invariant !(x < y / x) ==> x >= y / x is inductive.\nAssertion x != y: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  /*@\nloop invariant i1: x >= 1;\nloop invariant i2: y > 0;\nloop invariant i3: x <= y;\nloop invariant i4: x > 0;\nloop invariant i5: x < y / x ==> x * x < y;\nloop invariant i6: !(x < y / x) ==> x >= y / x;\n*/\nwhile (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x != y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant x >= 1;\n    loop invariant y > 0;\n    loop invariant x <= \\sqrt{y} || x >= \\sqrt{y};\n    loop invariant x < y ==> (x+1)*(x+1) > y;\n    loop invariant x >= y ==> x != y;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 13: logic label `y' not found. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  /*@\nloop invariant i1: x >= 1;\nloop invariant i2: y > 0;\n\n\n\n*/\nwhile (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x != y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n  loop invariant x >= 1;\n  loop invariant y > 0;\n  loop invariant x < y;\n  loop invariant x >= 1;\n  loop invariant y > 0;\n  loop invariant (x-1)*(x-1) < y || (x-1)*(x-1) >= y ==> x <= sqrt(y)+1;\n  loop invariant x >= y || (x-1)*(x-1) < y;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: invalid implicit conversion from 'unsigned int' to 'double'. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  /*@\nloop invariant i1: x >= 1;\nloop invariant i2: y > 0;\n\n\n\n*/\nwhile (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x != y);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 20: logic label `y' not found. Ignoring loop annotation",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  /*@\nloop invariant i1: x >= 1;\nloop invariant i2: y >= 0;\nloop invariant i3: x <= y;\nloop invariant i4: (x & (x - 1)) == 0 ==> x * x <= y;\nloop invariant i5: (x & (x - 1)) != 0 ==> x + 1 <= y || (x + 1) * (x + 1) > y;\nloop invariant i6: y > 0;\nloop invariant i7: x > 0;\nloop invariant i8: x < y / x ==> x * x < y;\nloop invariant i9: !(x < y / x) ==> x >= y / x;\nloop invariant i10: x <= \\sqrt{y} || x >= \\sqrt{y};\nloop invariant i11: x < y ==> (x+1)*(x+1) > y;\nloop invariant i12: x >= y ==> x != y;\nloop invariant i13: x < y;\nloop invariant i14: (x-1)*(x-1) < y || (x-1)*(x-1) >= y ==> x <= sqrt(y)+1;\nloop invariant i15: x >= y || (x-1)*(x-1) < y;\n*/\nwhile (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x != y);\n}\n\n}",
        "combined_annotation_num_solver_calls": 6,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  /*@\nloop invariant i1: x >= 1;\nloop invariant i2: y >= 0;\nloop invariant i3: x <= y;\n\nloop invariant i5: (x & (x - 1)) != 0 ==> x + 1 <= y || (x + 1) * (x + 1) > y;\nloop invariant i6: y > 0;\nloop invariant i7: x > 0;\nloop invariant i8: x < y / x ==> x * x < y;\nloop invariant i9: !(x < y / x) ==> x >= y / x;\n\n\n\n\n\n\n*/\nwhile (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x != y);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-1.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-1.c"
        ],
        "skipped": [],
        "total": 259,
        "success_count": 123,
        "failure_count": 136,
        "success_rate": 0.4749034749034749
    }
}