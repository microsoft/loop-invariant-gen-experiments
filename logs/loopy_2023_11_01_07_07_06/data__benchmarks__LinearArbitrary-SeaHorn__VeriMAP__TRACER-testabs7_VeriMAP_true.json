{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i;\n\n  i=0;n=10;\n  while (i < n){ i++; }\n\n  {;\n//@ assert(!( i>10 ));\n}\n\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i;\n\n  i=0;n=10;\n  while (i < n){ i++; }\n\n  {;\n//@ assert(!( i>10 ));\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- The function `errorFn` does not affect the program behavior.\n- The variable `n` is passed as a parameter to the function `main`.\n- The variable `i` is initialized to 0.\n\nLoop condition:\n- The loop iterates while `i` is less than `n`.\n\nPost-condition:\n- The assertion `!(i > 10)` holds.\n\nLoop invariants:\n- Before the loop execution, `i` is greater than or equal to 0 and less than or equal to `n`.\n```\n/*@ loop invariant 0 <= i <= n; */\n```\n- In every iteration of the loop, `i` is greater than or equal to 1 and less than or equal to `n`.\n```\n/*@ loop invariant 1 <= i <= n; */\n```\n- After the loop termination, `i` is greater than or equal to `n` or `i` is less than or equal to 10.\n```\n/*@ loop invariant i >= n || i <= 10; */\n```\n- Since `n` is assigned a value of 10, we can add the following conjunction before the loop to bound the value of `n` to be 10:\n```\n/*@ loop invariant n == 10; */\n```\n- Since `i` is initialized to 0, we can add the following conjunction before the loop to bound the value of `i` to be 0:\n```\n/*@ loop invariant i == 0; */\n```\n- The assertion is guarded by the condition `!(i > 10)`, so we can use this condition in an implication to strengthen the assertion:\n```\n/*@ loop invariant i > 10 ==> \\false; */\n```\nPutting all the loop invariants together, we get:\n```\n/*@ \n  loop invariant n == 10;\n  loop invariant i == 0;\n  loop invariant 0 <= i <= n;\n  loop invariant 1 <= i <= n;\n  loop invariant i >= n || i <= 10;\n  loop invariant i > 10 ==> \\false;\n*/\n```",
            "Pre-conditions:\n- The program takes an integer input n.\n- The macro assume(e) takes a boolean expression e and returns 0 if the expression is false.\n\nVariable Assignments:\n- i is initialized to 0.\n- n is assigned the value of 10.\n\nLoop Condition:\n- The loop continues while i is less than n.\n\nPost-condition:\n- The value of i is not greater than 10.\n\nLoop Invariants:\n- Before the loop execution: i >= 0 && i <= n && n == 10\n- In every iteration of the loop: i >= 1 && i <= n && n == 10\n- After the loop termination: i >= n && i <= 10 && n == 10 ==> i <= 10\n\nExplanation:\n- Before the loop execution: Since i is initialized to 0 and n is assigned the value of 10, the first loop invariant is true before the loop execution. \n- In every iteration of the loop: Since i is incremented by 1 in each iteration and the loop continues while i is less than n, the value of i will always be between 1 and n (inclusive) during the loop execution. Therefore, the second loop invariant is true in every iteration of the loop. \n- After the loop termination: When the loop terminates, the value of i will be greater than or equal to n, since the loop continues while i is less than n. Also, since n is assigned the value of 10 and i is incremented by 1 in each iteration, the maximum value that i can take is 10. Therefore, the third loop invariant is true after the loop termination. \n\nNote: Since there are no non-deterministic variables or conditional guards in the assertion, we do not need to add any additional implications.",
            "Pre-conditions:\n\n- The program takes an integer argument `n` through command line. \n- The `assume` macro is defined to check for a condition and return 0 if it fails. \n\nVariable assignments:\n\n- `i` is assigned the value 0.\n- `n` is assigned the value 10.\n\nLoop condition: \n\n- `i < n`\n\nPost-condition:\n\n- `!(i > 10)`\n\nLoop Invariants:\n\n1. Before loop execution: \n\n- `i >= 0 && i <= n` (bounds `i`)\n\n2. In every iteration of the loop:\n\n- `i >= 0 && i <= n` (bounds `i`)\n- `i <= n` (since `i` is incremented at the end of the loop)\n- `n >= 0` (since `n` is a non-negative integer)\n- `n <= 10` (since `n` is assigned the value 10)\n\n3. After loop termination:\n\n- `i >= n` (since the loop condition fails at this point)\n- `!(i > 10)` (post-condition)\n\nUsing implication, we can write the loop invariants as:\n\n```\n/*@\nloop invariant 0 <= i <= n; // bounds i\nloop invariant i <= n;\nloop invariant 0 <= n <= 10; // bounds n\nloop invariant \\forall integer j; 0 <= j < i ==> j <= n; // j is always less than or equal to n in each iteration\nloop invariant i >= n ==> !(i > 10); // implies post-condition\n*/\n```\n\nNote that since `n` is assigned the value 10, we can add `0 <= n <= 10` as a loop invariant to bound `n`. Also, since `i` is incremented at the end of each iteration, we can add `i <= n` as a loop invariant. Finally, we add an implication to connect the loop invariant `i >= n` to the post-condition `!(i > 10)`.",
            "Pre-conditions:\n- The program takes an integer argument `n` as input.\n- The `assume` macro checks whether its argument is true or not. If the argument is false, it returns 0.\n\nVariable assignments:\n- `i` is initialized to 0.\n- `n` is assigned the value of 10.\n\nLoop condition:\n- The loop continues as long as `i` is less than `n`.\n\nLoop body:\n- `i` is incremented by 1 in every iteration.\n\nPost-condition:\n- The assertion checks whether `i` is greater than 10 or not.\n\nLoop invariants:\n- Before the loop execution, `i` is greater than or equal to 0 and less than or equal to 10. `(0 <= i <= 10)`\n- In every iteration of the loop, `i` is greater than or equal to 1 and less than or equal to 10. `(1 <= i <= 10)`\n- After the loop termination, `i` is greater than or equal to n and less than or equal to 10. `(n <= i <= 10)`\n- The loop invariant `0 <= i <= 10` implies the post-condition `!(i > 10)`, since `i` cannot be greater than 10 if it is less than or equal to 10.\n\nPutting it all together:\n```\n/*@ \n    loop invariant 0 <= i <= 10;\n    loop invariant 1 <= i <= 10;\n    loop invariant n <= i <= 10 ==> !(i > 10);\n*/\n```",
            "Pre-conditions:\n- The program takes an integer input `n`.\n- The macro `assume(e)` takes a boolean expression `e` and returns 0 if `e` is false.\n\nVariable assignments:\n- `i` is initialized to 0.\n- `n` is assigned the value of 10.\n\nLoop condition:\n- The loop continues as long as `i` is less than `n`.\n\nPost-condition:\n- The assertion `!(i>10)` holds true after the loop terminates.\n\nLoop invariants:\n- Before the loop execution: `i >= 0 && i <= n && n == 10`\n  - Explanation: `i` is initialized to 0 and `n` is assigned the value of 10. Therefore, `i` must be greater than or equal to 0 and less than or equal to `n`. Also, `n` must be equal to 10.\n- In every iteration of the loop: `i >= 1 && i <= n && n == 10`\n  - Explanation: The loop condition is `i < n`, so `i` must be incremented in every iteration. Therefore, `i` must be greater than or equal to 1 and less than or equal to `n`. Also, `n` must be equal to 10.\n- After the loop termination: `i >= n-1 ==> !(i>10)`\n  - Explanation: The loop terminates when `i` becomes equal to `n`. Therefore, after the loop termination, `i` must be greater than or equal to `n-1`. Also, the assertion `!(i>10)` holds true after the loop terminates. Therefore, we can use implication to say that if `i` is greater than or equal to `n-1`, then `!(i>10)` must hold true."
        ],
        "annotation_blocks": [
            "/*@ loop invariant 0 <= i <= n; */",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The program takes an integer input n.\n- The macro assume(e) takes a boolean expression e and returns 0 if the expression is false.\n\nVariable Assignments:\n- i is initialized to 0.\n- n is assigned the value of 10.\n\nLoop Condition:\n- The loop continues while i is less than n.\n\nPost-condition:\n- The value of i is not greater than 10.\n\nLoop Invariants:\n- Before the loop execution: i >= 0 && i <= n && n == 10\n- In every iteration of the loop: i >= 1 && i <= n && n == 10\n- After the loop termination: i >= n && i <= 10 && n == 10 ==> i <= 10\n\nExplanation:\n- Before the loop execution: Since i is initialized to 0 and n is assigned the value of 10, the first loop invariant is true before the loop execution. \n- In every iteration of the loop: Since i is incremented by 1 in each iteration and the loop continues while i is less than n, the value of i will always be between 1 and n (inclusive) during the loop execution. Therefore, the second loop invariant is true in every iteration of the loop. \n- After the loop termination: When the loop terminates, the value of i will be greater than or equal to n, since the loop continues while i is less than n. Also, since n is assigned the value of 10 and i is incremented by 1 in each iteration, the maximum value that i can take is 10. Therefore, the third loop invariant is true after the loop termination. \n\nNote: Since there are no non-deterministic variables or conditional guards in the assertion, we do not need to add any additional implications."
            ],
            "/*@\nloop invariant 0 <= i <= n; // bounds i\nloop invariant i <= n;\nloop invariant 0 <= n <= 10; // bounds n\nloop invariant \\forall integer j; 0 <= j < i ==> j <= n; // j is always less than or equal to n in each iteration\nloop invariant i >= n ==> !(i > 10); // implies post-condition\n*/",
            "/*@ \n    loop invariant 0 <= i <= 10;\n    loop invariant 1 <= i <= 10;\n    loop invariant n <= i <= 10 ==> !(i > 10);\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The program takes an integer input `n`.\n- The macro `assume(e)` takes a boolean expression `e` and returns 0 if `e` is false.\n\nVariable assignments:\n- `i` is initialized to 0.\n- `n` is assigned the value of 10.\n\nLoop condition:\n- The loop continues as long as `i` is less than `n`.\n\nPost-condition:\n- The assertion `!(i>10)` holds true after the loop terminates.\n\nLoop invariants:\n- Before the loop execution: `i >= 0 && i <= n && n == 10`\n  - Explanation: `i` is initialized to 0 and `n` is assigned the value of 10. Therefore, `i` must be greater than or equal to 0 and less than or equal to `n`. Also, `n` must be equal to 10.\n- In every iteration of the loop: `i >= 1 && i <= n && n == 10`\n  - Explanation: The loop condition is `i < n`, so `i` must be incremented in every iteration. Therefore, `i` must be greater than or equal to 1 and less than or equal to `n`. Also, `n` must be equal to 10.\n- After the loop termination: `i >= n-1 ==> !(i>10)`\n  - Explanation: The loop terminates when `i` becomes equal to `n`. Therefore, after the loop termination, `i` must be greater than or equal to `n-1`. Also, the assertion `!(i>10)` holds true after the loop terminates. Therefore, we can use implication to say that if `i` is greater than or equal to `n-1`, then `!(i>10)` must hold true."
            ]
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "/*@ loop invariant 0 <= i <= n; */",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nAssertion !(i > 10): Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i;\n\n  i=0;n=10;\n  /*@\nloop invariant i1: 0 <= i <= n;\n*/\nwhile (i < n){ i++; }\n\n  {;\n//@ assert(!( i>10 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The program takes an integer input n.\n- The macro assume(e) takes a boolean expression e and returns 0 if the expression is false.\n\nVariable Assignments:\n- i is initialized to 0.\n- n is assigned the value of 10.\n\nLoop Condition:\n- The loop continues while i is less than n.\n\nPost-condition:\n- The value of i is not greater than 10.\n\nLoop Invariants:\n- Before the loop execution: i >= 0 && i <= n && n == 10\n- In every iteration of the loop: i >= 1 && i <= n && n == 10\n- After the loop termination: i >= n && i <= 10 && n == 10 ==> i <= 10\n\nExplanation:\n- Before the loop execution: Since i is initialized to 0 and n is assigned the value of 10, the first loop invariant is true before the loop execution. \n- In every iteration of the loop: Since i is incremented by 1 in each iteration and the loop continues while i is less than n, the value of i will always be between 1 and n (inclusive) during the loop execution. Therefore, the second loop invariant is true in every iteration of the loop. \n- After the loop termination: When the loop terminates, the value of i will be greater than or equal to n, since the loop continues while i is less than n. Also, since n is assigned the value of 10 and i is incremented by 1 in each iteration, the maximum value that i can take is 10. Therefore, the third loop invariant is true after the loop termination. \n\nNote: Since there are no non-deterministic variables or conditional guards in the assertion, we do not need to add any additional implications.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@\nloop invariant 0 <= i <= n; // bounds i\nloop invariant i <= n;\nloop invariant 0 <= n <= 10; // bounds n\nloop invariant \\forall integer j; 0 <= j < i ==> j <= n; // j is always less than or equal to n in each iteration\nloop invariant i >= n ==> !(i > 10); // implies post-condition\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant i <= n is inductive.\nloop invariant 0 <= n <= 10 is inductive.\nloop invariant \\forall integer j; 0 <= j < i ==> j <= n is inductive.\nloop invariant i >= n ==> !(i > 10) is inductive.\nAssertion !(i > 10): Valid"
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant 0 <= i <= 10;\n    loop invariant 1 <= i <= 10;\n    loop invariant n <= i <= 10 ==> !(i > 10);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant 1 <= i <= 10 is preserved but not established.\nloop invariant n <= i <= 10 ==> !(i > 10) is partially proven to be inductive.\nAssertion !(i > 10): Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i;\n\n  i=0;n=10;\n  /*@\n\n\nloop invariant i3: n <= i <= 10 ==> !(i > 10);\n*/\nwhile (i < n){ i++; }\n\n  {;\n//@ assert(!( i>10 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The program takes an integer input `n`.\n- The macro `assume(e)` takes a boolean expression `e` and returns 0 if `e` is false.\n\nVariable assignments:\n- `i` is initialized to 0.\n- `n` is assigned the value of 10.\n\nLoop condition:\n- The loop continues as long as `i` is less than `n`.\n\nPost-condition:\n- The assertion `!(i>10)` holds true after the loop terminates.\n\nLoop invariants:\n- Before the loop execution: `i >= 0 && i <= n && n == 10`\n  - Explanation: `i` is initialized to 0 and `n` is assigned the value of 10. Therefore, `i` must be greater than or equal to 0 and less than or equal to `n`. Also, `n` must be equal to 10.\n- In every iteration of the loop: `i >= 1 && i <= n && n == 10`\n  - Explanation: The loop condition is `i < n`, so `i` must be incremented in every iteration. Therefore, `i` must be greater than or equal to 1 and less than or equal to `n`. Also, `n` must be equal to 10.\n- After the loop termination: `i >= n-1 ==> !(i>10)`\n  - Explanation: The loop terminates when `i` becomes equal to `n`. Therefore, after the loop termination, `i` must be greater than or equal to `n-1`. Also, the assertion `!(i>10)` holds true after the loop terminates. Therefore, we can use implication to say that if `i` is greater than or equal to `n-1`, then `!(i>10)` must hold true.",
                "error": "Output does not contain at least 1 code block"
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= i <= n is partially proven to be inductive.\nloop invariant i <= n is partially proven to be inductive.\nloop invariant 0 <= n <= 10 is partially proven to be inductive.\nloop invariant \\forall integer j; 0 <= j < i ==> j <= n is partially proven to be inductive.\nloop invariant i >= n ==> !(i > 10) is partially proven to be inductive.\nloop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant 1 <= i <= 10 is preserved but not established.\nloop invariant n <= i <= 10 ==> !(i > 10) is partially proven to be inductive.\nAssertion !(i > 10): Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i;\n\n  i=0;n=10;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: i <= n;\nloop invariant i3: 0 <= n <= 10;\nloop invariant i4: \\forall integer j; 0 <= j < i ==> j <= n;\nloop invariant i5: i >= n ==> !(i > 10);\nloop invariant i6: 0 <= i <= 10;\nloop invariant i7: 1 <= i <= 10;\nloop invariant i8: n <= i <= 10 ==> !(i > 10);\n*/\nwhile (i < n){ i++; }\n\n  {;\n//@ assert(!( i>10 ));\n}\n\n}",
        "combined_annotation_num_solver_calls": 2,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i;\n\n  i=0;n=10;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: i <= n;\nloop invariant i3: 0 <= n <= 10;\nloop invariant i4: \\forall integer j; 0 <= j < i ==> j <= n;\nloop invariant i5: i >= n ==> !(i > 10);\nloop invariant i6: 0 <= i <= 10;\n\nloop invariant i8: n <= i <= 10 ==> !(i > 10);\n*/\nwhile (i < n){ i++; }\n\n  {;\n//@ assert(!( i>10 ));\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c"
        ],
        "skipped": [],
        "total": 230,
        "success_count": 108,
        "failure_count": 122,
        "success_rate": 0.46956521739130436
    }
}