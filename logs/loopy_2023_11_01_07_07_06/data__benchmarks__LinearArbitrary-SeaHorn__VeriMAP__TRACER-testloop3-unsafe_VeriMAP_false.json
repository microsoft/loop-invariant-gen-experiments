{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c",
        "benchmark_code": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  while (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x > 1 ));\n}\n\nreturn;\n\n}",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  while (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x > 1 ));\n}\n\nreturn;\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- The `errorFn()` function does not affect the behavior of the program.\n- The `assume()` macro is used to check assumptions and return from the program if they are not satisfied.\n- The variable `NONDET` is non-deterministic and can have any value.\n- The variable `N` is not initialized and could have a garbage value.\n\nLoop condition:\n- The loop will iterate as long as `i` is less than `N`.\n\nLoop invariants:\n- Since `N` is not initialized, we cannot use it to bound the loop. However, we can add a lower bound for `i` since it is initialized to 0. \n- Before the loop: `i >= 0`.\n- In every iteration: `i >= 0 && i <= N`.\n- After the loop: `i >= N`.\n- Since `NONDET` is non-deterministic, we cannot make any assumptions about it. Therefore, we can use an implication to make the assertion trivially true at the end of the loop: `(!( x > 1 )) ==> (!( x > 1 ))`.\n\nPutting it all together:\n```\n#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@ \n    loop invariant i >= 0 && i <= N;\n    loop invariant (!( x > 1 )) ==> (!( x > 1 ));\n  */\n  while (i<N){\n    i=i+1;\n  }\n\n  /*@\n    assert (!( x > 1 ));\n  */\n\n  return;\n}\n```",
            "Pre-conditions:\n- The program does not assume any pre-conditions.\n- The variable `N` is not initialized, so it could contain a garbage value.\n\nVariable Assignments:\n- The variable `x` is assigned either 1 or 2 based on the value of `NONDET`.\n- All other variables are not initialized and could contain garbage values.\n\nLoop Condition:\n- The loop runs as long as `i` is less than `N`.\n\nLoop Invariants:\n- Before the loop execution, `i` is not greater than `N`.\n- In every iteration of the loop, `i` is incremented by 1.\n- After the loop termination, `i` is greater than or equal to `N`.\n- Since the value of `N` is not known, we can use implication to make the invariant trivially true when `N` is non-deterministic.\n- Since the assertion is not guarded by any condition, we can directly use it in the loop invariant.\n\nPutting it all together, the loop invariants are:\n```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant \\forall integer j; 0 <= j < i ==> j+1 == i;\nloop invariant i >= N ==> !(x > 1);\nloop invariant NONDET <= 0 ==> i == 0;\nloop invariant NONDET > 0 ==> i > 0;\n*/\n```\nNote:\n- The first invariant bounds the value of `i` between 0 and `N` inclusive.\n- The second invariant states that for all integers `j` between 0 and `i-1` inclusive, `j+1` is equal to `i`.\n- The third invariant uses implication to ensure that if `i` is greater than or equal to `N`, then `x` is not greater than 1.\n- The fourth invariant uses implication to ensure that if `NONDET` is less than or equal to 0, then `i` is equal to 0.\n- The fifth invariant uses implication to ensure that if `NONDET` is greater than 0, then `i` is greater than 0.",
            "Pre-conditions:\n- The program defines a macro `assume(e)` which takes a boolean expression `e` and returns if `e` is false.\n- The program defines a function `errorFn()` which has an infinite loop and can be used to trigger an error.\n- The program has a `main()` function which has some variables declared.\n- The variable `NONDET` is non-deterministic and can have any value. \n- The variable `i` is not initialized and can have a garbage value.\n- The variable `N` is not initialized and can have a garbage value.\n- The variable `a` is not used in the loop or the assertion.\n- The variable `x` is initialized based on the value of `NONDET`.\n\nLoop condition:\n- The loop will execute as long as `i<N`.\n\nPost-condition:\n- The assertion at the end of the program checks that `x` is not greater than 1.\n\nLoop invariants:\n- Before the loop execution, `i` is greater than or equal to 0.\n- Before the loop execution, `N` is greater than or equal to 0.\n- Before the loop execution, `i` is less than or equal to `N`.\n- Before the loop execution, `x` is either 1 or 2.\n- In every iteration of the loop, `i` is greater than or equal to 1.\n- In every iteration of the loop, `i` is less than or equal to `N`.\n- After the loop termination, `i` is greater than or equal to `N`.\n- If `x` is greater than 1, then `i` is greater than or equal to `N`.\n- If `i` is less than `N`, then `x` is less than or equal to 1.\n\nLoop invariants with conjunctions:\n```\n/*@\n  loop invariant i >= 0 && i <= N;\n  loop invariant N >= 0;\n  loop invariant x == 1 ==> NONDET > 0;\n  loop invariant x == 2 ==> NONDET <= 0;\n  loop invariant i >= 1 && i <= N ==> x <= 1;\n  loop invariant i >= 1;\n  loop invariant i <= N ==> x <= 1;\n  loop invariant i >= N ==> x <= 1;\n  loop invariant (x > 1 && i < N) ==> \\false;\n*/\n``` \n\nNote:\n- In the loop invariant `i >= 1 && i <= N ==> x <= 1;`, we are using an implication because `x` is non-deterministic and we cannot make any assumptions about its value. \n- In the loop invariant `(x > 1 && i < N) ==> \\false;`, we are using an implication to make the invariant trivially true if `x` is greater than 1 and `i` is less than `N`. This is necessary because the assertion at the end of the program only checks the value of `x` and not the loop condition.",
            "Pre-conditions:\n- The program assumes that the macro `assume` takes a boolean expression as input and returns if the expression is false.\n- The program assumes that there is a function `errorFn` which does not return and can be used to indicate an error.\n- The variable `NONDET` is non-deterministic, meaning it could have any garbage value.\n- The variables `i`, `N`, `a` are uninitialized and could have any garbage values.\n- The variable `x` is initialized to 1 if `NONDET` is positive and 2 otherwise.\n\nLoop condition:\n- The loop will execute as long as `i<N`.\n\nLoop invariants:\n- Before loop execution: Since `N` is uninitialized, we cannot make any assumptions about its value. However, we can assume that `i` is non-negative since it is an index variable. So, the loop invariant before execution could be:\n```\n/*@ loop invariant i >= 0; */\n```\n- In every iteration: In each iteration, `i` is incremented by 1. So, we can assume that `i` is always less than or equal to `N`. We can also assume that `x` remains the same throughout the loop since it is not modified inside the loop. Therefore, the loop invariant in every iteration could be:\n```\n/*@ loop invariant i <= N;\n    loop invariant x == 1 ==> !(x > 1);\n    loop invariant x == 2 ==> !(x > 1);\n*/\n```\n- After loop termination: Since the loop terminates when `i>=N`, we can assume that `i` is greater than or equal to `N`. Also, since `x` remains the same throughout the loop and the loop invariant in every iteration implies the post-condition, we can use the loop invariant in every iteration as the loop invariant after loop termination. So, the loop invariant after loop termination could be:\n```\n/*@ loop invariant i >= N;\n    loop invariant x == 1 ==> !(x > 1);\n    loop invariant x == 2 ==> !(x > 1);\n*/\n```\nFinally, since the assertion is guarded by the condition `x>1`, we can use implication to include the guard condition in the loop invariant after loop termination. So, the final loop invariant could be:\n```\n/*@ loop invariant i >= N;\n    loop invariant (x>1) ==> (!(x > 1));\n*/\n```",
            "Pre-conditions and variable assignments:\n- The program defines a macro called `assume` that takes a boolean expression as an argument and returns if the expression evaluates to false.\n- The program defines a function called `errorFn` that contains a label called `ERROR` and uses an infinite loop to jump back to the label.\n- The program defines a `main` function that has the following variables:\n  - `NONDET`: an integer variable that is not initialized and contains garbage value.\n  - `i`: an integer variable that is not initialized and contains garbage value.\n  - `N`: an integer variable that is not initialized and contains garbage value.\n  - `a`: an integer variable that is not used in the program.\n  - `x`: an integer variable that is initialized based on the value of `NONDET`. If `NONDET > 0` then `x=1`, else `x=2`.\n\nLoop condition:\n- The loop condition is `i<N`.\n\nLoop invariants:\n- Before the loop execution:\n  - `i <= N`\n  - `x <= 2`\n  - `x >= 1`\n- In every iteration of the loop:\n  - `i > i_old`\n  - `i <= N`\n  - `x <= 2`\n  - `x >= 1`\n- After the loop termination:\n  - `i >= N`\n  - `x <= 2`\n  - `x >= 1`\n  - `!(x > 1) ==> (i >= N)`\n\nExplanation:\n- Before the loop execution:\n  - `i <= N`: This is the loop invariant that ensures that `i` never exceeds `N`.\n  - `x <= 2` and `x >= 1`: These are the loop invariants that bound the value of `x` to either 1 or 2, as determined by the initialization of `x` based on the value of `NONDET`.\n- In every iteration of the loop:\n  - `i > i_old`: This is the loop invariant that ensures that `i` is strictly increasing in every iteration of the loop.\n  - `i <= N`, `x <= 2` and `x >= 1`: These are the same loop invariants as before that ensure that `i` never exceeds `N` and `x` remains between 1 and 2.\n- After the loop termination:\n  - `i >= N`: This is the loop invariant that ensures that `i` has reached or exceeded the value of `N`.\n  - `x <= 2` and `x >= 1`: These are the same loop invariants as before that ensure that `x` remains between 1 and 2.\n  - `!(x > 1) ==> (i >= N)`: This is the loop invariant that takes into account the conditional initialization of `x` and ensures that if `x` is not greater than 1, then `i` has reached or exceeded the value of `N`. This is achieved using implication, which means that if `x` is greater than 1, then the implication is trivially true and does not impose any additional constraint on the loop."
        ],
        "annotation_blocks": [
            "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@ \n    loop invariant i >= 0 && i <= N;\n    loop invariant (!( x > 1 )) ==> (!( x > 1 ));\n  */\n  while (i<N){\n    i=i+1;\n  }\n\n  /*@\n    assert (!( x > 1 ));\n  */\n\n  return;\n}",
            "/*@\nloop invariant 0 <= i <= N;\nloop invariant \\forall integer j; 0 <= j < i ==> j+1 == i;\nloop invariant i >= N ==> !(x > 1);\nloop invariant NONDET <= 0 ==> i == 0;\nloop invariant NONDET > 0 ==> i > 0;\n*/",
            "/*@\n  loop invariant i >= 0 && i <= N;\n  loop invariant N >= 0;\n  loop invariant x == 1 ==> NONDET > 0;\n  loop invariant x == 2 ==> NONDET <= 0;\n  loop invariant i >= 1 && i <= N ==> x <= 1;\n  loop invariant i >= 1;\n  loop invariant i <= N ==> x <= 1;\n  loop invariant i >= N ==> x <= 1;\n  loop invariant (x > 1 && i < N) ==> \\false;\n*/",
            "/*@ loop invariant i >= 0; */",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions and variable assignments:\n- The program defines a macro called `assume` that takes a boolean expression as an argument and returns if the expression evaluates to false.\n- The program defines a function called `errorFn` that contains a label called `ERROR` and uses an infinite loop to jump back to the label.\n- The program defines a `main` function that has the following variables:\n  - `NONDET`: an integer variable that is not initialized and contains garbage value.\n  - `i`: an integer variable that is not initialized and contains garbage value.\n  - `N`: an integer variable that is not initialized and contains garbage value.\n  - `a`: an integer variable that is not used in the program.\n  - `x`: an integer variable that is initialized based on the value of `NONDET`. If `NONDET > 0` then `x=1`, else `x=2`.\n\nLoop condition:\n- The loop condition is `i<N`.\n\nLoop invariants:\n- Before the loop execution:\n  - `i <= N`\n  - `x <= 2`\n  - `x >= 1`\n- In every iteration of the loop:\n  - `i > i_old`\n  - `i <= N`\n  - `x <= 2`\n  - `x >= 1`\n- After the loop termination:\n  - `i >= N`\n  - `x <= 2`\n  - `x >= 1`\n  - `!(x > 1) ==> (i >= N)`\n\nExplanation:\n- Before the loop execution:\n  - `i <= N`: This is the loop invariant that ensures that `i` never exceeds `N`.\n  - `x <= 2` and `x >= 1`: These are the loop invariants that bound the value of `x` to either 1 or 2, as determined by the initialization of `x` based on the value of `NONDET`.\n- In every iteration of the loop:\n  - `i > i_old`: This is the loop invariant that ensures that `i` is strictly increasing in every iteration of the loop.\n  - `i <= N`, `x <= 2` and `x >= 1`: These are the same loop invariants as before that ensure that `i` never exceeds `N` and `x` remains between 1 and 2.\n- After the loop termination:\n  - `i >= N`: This is the loop invariant that ensures that `i` has reached or exceeded the value of `N`.\n  - `x <= 2` and `x >= 1`: These are the same loop invariants as before that ensure that `x` remains between 1 and 2.\n  - `!(x > 1) ==> (i >= N)`: This is the loop invariant that takes into account the conditional initialization of `x` and ensures that if `x` is not greater than 1, then `i` has reached or exceeded the value of `N`. This is achieved using implication, which means that if `x` is greater than 1, then the implication is trivially true and does not impose any additional constraint on the loop."
            ]
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@ \n    loop invariant i >= 0 && i <= N;\n    loop invariant (!( x > 1 )) ==> (!( x > 1 ));\n  */\n  while (i<N){\n    i=i+1;\n  }\n\n  /*@\n    assert (!( x > 1 ));\n  */\n\n  return;\n}",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 0 && i <= N is preserved but not established.\nloop invariant (!( x > 1 )) ==> (!( x > 1 )) is partially proven to be inductive.\nAssertion !(x > 1): Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\n\nloop invariant i2: (!( x > 1 )) ==> (!( x > 1 ));\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x > 1 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@\nloop invariant 0 <= i <= N;\nloop invariant \\forall integer j; 0 <= j < i ==> j+1 == i;\nloop invariant i >= N ==> !(x > 1);\nloop invariant NONDET <= 0 ==> i == 0;\nloop invariant NONDET > 0 ==> i > 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= N is preserved but not established.\nloop invariant \\forall integer j; 0 <= j < i ==> j+1 == i is neither established nor preserved.\nloop invariant i >= N ==> !(x > 1) is neither established nor preserved.\nloop invariant NONDET <= 0 ==> i == 0 is neither established nor preserved.\nloop invariant NONDET > 0 ==> i > 0 is preserved but not established.\nAssertion !(x > 1): Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\n\n\n\n\n\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x > 1 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "/*@\n  loop invariant i >= 0 && i <= N;\n  loop invariant N >= 0;\n  loop invariant x == 1 ==> NONDET > 0;\n  loop invariant x == 2 ==> NONDET <= 0;\n  loop invariant i >= 1 && i <= N ==> x <= 1;\n  loop invariant i >= 1;\n  loop invariant i <= N ==> x <= 1;\n  loop invariant i >= N ==> x <= 1;\n  loop invariant (x > 1 && i < N) ==> \\false;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 0 && i <= N is preserved but not established.\nloop invariant N >= 0 is partially proven to be inductive.\nloop invariant x == 1 ==> NONDET > 0 is partially proven to be inductive.\nloop invariant x == 2 ==> NONDET <= 0 is partially proven to be inductive.\nloop invariant i >= 1 && i <= N ==> x <= 1 is preserved but not established.\nloop invariant i >= 1 is preserved but not established.\nloop invariant i <= N ==> x <= 1 is partially proven to be inductive.\nloop invariant i >= N ==> x <= 1 is partially proven to be inductive.\nloop invariant (x > 1 && i < N) ==> \\false is partially proven to be inductive.\nAssertion !(x > 1): Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\n\n\nloop invariant i3: x == 1 ==> NONDET > 0;\nloop invariant i4: x == 2 ==> NONDET <= 0;\n\n\n\n\n\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x > 1 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ loop invariant i >= 0; */",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 0 is preserved but not established.\nAssertion !(x > 1): Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\n\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x > 1 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions and variable assignments:\n- The program defines a macro called `assume` that takes a boolean expression as an argument and returns if the expression evaluates to false.\n- The program defines a function called `errorFn` that contains a label called `ERROR` and uses an infinite loop to jump back to the label.\n- The program defines a `main` function that has the following variables:\n  - `NONDET`: an integer variable that is not initialized and contains garbage value.\n  - `i`: an integer variable that is not initialized and contains garbage value.\n  - `N`: an integer variable that is not initialized and contains garbage value.\n  - `a`: an integer variable that is not used in the program.\n  - `x`: an integer variable that is initialized based on the value of `NONDET`. If `NONDET > 0` then `x=1`, else `x=2`.\n\nLoop condition:\n- The loop condition is `i<N`.\n\nLoop invariants:\n- Before the loop execution:\n  - `i <= N`\n  - `x <= 2`\n  - `x >= 1`\n- In every iteration of the loop:\n  - `i > i_old`\n  - `i <= N`\n  - `x <= 2`\n  - `x >= 1`\n- After the loop termination:\n  - `i >= N`\n  - `x <= 2`\n  - `x >= 1`\n  - `!(x > 1) ==> (i >= N)`\n\nExplanation:\n- Before the loop execution:\n  - `i <= N`: This is the loop invariant that ensures that `i` never exceeds `N`.\n  - `x <= 2` and `x >= 1`: These are the loop invariants that bound the value of `x` to either 1 or 2, as determined by the initialization of `x` based on the value of `NONDET`.\n- In every iteration of the loop:\n  - `i > i_old`: This is the loop invariant that ensures that `i` is strictly increasing in every iteration of the loop.\n  - `i <= N`, `x <= 2` and `x >= 1`: These are the same loop invariants as before that ensure that `i` never exceeds `N` and `x` remains between 1 and 2.\n- After the loop termination:\n  - `i >= N`: This is the loop invariant that ensures that `i` has reached or exceeded the value of `N`.\n  - `x <= 2` and `x >= 1`: These are the same loop invariants as before that ensure that `x` remains between 1 and 2.\n  - `!(x > 1) ==> (i >= N)`: This is the loop invariant that takes into account the conditional initialization of `x` and ensures that if `x` is not greater than 1, then `i` has reached or exceeded the value of `N`. This is achieved using implication, which means that if `x` is greater than 1, then the implication is trivially true and does not impose any additional constraint on the loop.",
                "error": "Output does not contain at least 1 code block"
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant i >= 0 && i <= N is preserved but not established.\nloop invariant (!( x > 1 )) ==> (!( x > 1 )) is partially proven to be inductive.\nloop invariant 0 <= i <= N is partially proven to be inductive.\nloop invariant \\forall integer j; 0 <= j < i ==> j+1 == i is neither established nor preserved.\nloop invariant i >= N ==> !(x > 1) is preserved but not established.\nloop invariant NONDET <= 0 ==> i == 0 is preserved but not established.\nloop invariant NONDET > 0 ==> i > 0 is preserved but not established.\nloop invariant N >= 0 is partially proven to be inductive.\nloop invariant x == 1 ==> NONDET > 0 is partially proven to be inductive.\nloop invariant x == 2 ==> NONDET <= 0 is partially proven to be inductive.\nloop invariant i >= 1 && i <= N ==> x <= 1 is partially proven to be inductive.\nloop invariant i >= 1 is preserved but not established.\nloop invariant i <= N ==> x <= 1 is partially proven to be inductive.\nloop invariant i >= N ==> x <= 1 is partially proven to be inductive.\nloop invariant (x > 1 && i < N) ==> \\false is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nAssertion !(x > 1): Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\nloop invariant i1: i >= 0 && i <= N;\nloop invariant i2: (!( x > 1 )) ==> (!( x > 1 ));\nloop invariant i3: 0 <= i <= N;\nloop invariant i4: \\forall integer j; 0 <= j < i ==> j+1 == i;\nloop invariant i5: i >= N ==> !(x > 1);\nloop invariant i6: NONDET <= 0 ==> i == 0;\nloop invariant i7: NONDET > 0 ==> i > 0;\nloop invariant i8: N >= 0;\nloop invariant i9: x == 1 ==> NONDET > 0;\nloop invariant i10: x == 2 ==> NONDET <= 0;\nloop invariant i11: i >= 1 && i <= N ==> x <= 1;\nloop invariant i12: i >= 1;\nloop invariant i13: i <= N ==> x <= 1;\nloop invariant i14: i >= N ==> x <= 1;\nloop invariant i15: (x > 1 && i < N) ==> \\false;\nloop invariant i16: i >= 0;\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x > 1 ));\n}\n\nreturn;\n\n}",
        "combined_annotation_num_solver_calls": 5,
        "code_after_prune": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\n\nloop invariant i2: (!( x > 1 )) ==> (!( x > 1 ));\n\n\n\n\n\n\nloop invariant i9: x == 1 ==> NONDET > 0;\nloop invariant i10: x == 2 ==> NONDET <= 0;\n\n\n\n\n\n\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x > 1 ));\n}\n\nreturn;\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c"
        ],
        "skipped": [],
        "total": 244,
        "success_count": 117,
        "failure_count": 127,
        "success_rate": 0.47950819672131145
    }
}