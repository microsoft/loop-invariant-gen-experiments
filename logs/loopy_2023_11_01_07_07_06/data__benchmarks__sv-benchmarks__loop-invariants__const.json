{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loop-invariants/const.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int s = 0;\n  while (unknown_uint()) {\n    if (s != 0) {\n      ++s;\n    }\n    if (unknown_uint()) {\n      {;\n//@ assert(s == 0);\n}\n\n    }\n  }\n  return 0;\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int s = 0;\n  while (unknown_uint()) {\n    if (s != 0) {\n      ++s;\n    }\n    if (unknown_uint()) {\n      {;\n//@ assert(s == 0);\n}\n\n    }\n  }\n  return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- None\n\nVariable assignments:\n- `unsigned int s = 0;`\n\nLoop condition:\n- `unknown_uint()`\n\nLoop invariants:\n- `s >= 0` (s is always non-negative)\n- `(\\forall unsigned int i; i >= 0 && i < s; unknown_uint())` (unknown_uint() is true s times)\n- `(s == 0) ==> (!unknown_uint())` (if s is zero, then unknown_uint() must be false)\n- `(s != 0) ==> (s' == s+1)` (if s is non-zero, then s' is incremented by 1 in the next iteration)\n- `(s != 0 && !unknown_uint()) ==> (s == 0)` (if s is non-zero and unknown_uint() is false, then s becomes zero)\n- `(s == 0 && !unknown_uint()) ==> ({; //@ assert(s == 0); })` (if s is zero and unknown_uint() is false, then the assertion is true)\n\nNote: s' represents the value of s in the next iteration. \n\nPutting it all together, the loop invariants are:\n```\n/*@\n    loop invariant s >= 0;\n    loop invariant (\\forall unsigned int i; i >= 0 && i < s; unknown_uint());\n    loop invariant (s == 0) ==> (!unknown_uint());\n    loop invariant (s != 0) ==> (s' == s+1);\n    loop invariant (s != 0 && !unknown_uint()) ==> (s == 0);\n    loop invariant (s == 0 && !unknown_uint()) ==> ({; //@ assert(s == 0); });\n*/\n```",
            "Pre-conditions:\n\nNone.\n\nVariable Assignments:\n\n- `unsigned int s = 0;`\n\nLoop Condition:\n\n- `unknown_uint()`\n\nLoop Invariants:\n\n- `s >= 0`\n\n- `s <= \\max_{i=0}^{k} \\{s_i\\}$ where k is the number of iterations completed before the loop termination.\n\n- `s <= 1` if `s` is non-deterministic at the beginning of the loop.\n\n- `(s == 0) ==> !unknown_uint()` if the assertion is guarded by a condition.\n\n- `s == 0` at the end of the loop if `unknown_uint()` returns false.\n\nPutting all the loop invariants together:\n\n```\n/*@\n  loop invariant s >= 0;\n  loop invariant s <= \\max_{i=0}^{k} \\{s_i\\};\n  loop invariant s <= 1;\n  loop invariant (s == 0) ==> !unknown_uint();\n  loop invariant (unknown_uint() == 0) ==> (s == 0);\n*/\n```",
            "Pre-conditions:\n- None.\n\nVariable Assignments:\n- `unsigned int s = 0;`\n\nLoop Condition:\n- `unknown_uint()`\n\nLoop Invariants:\n- `s >= 0` (s is always non-negative)\n- `(\\forall unsigned int i; i < s; i++; unknown_uint() == 0)` (s is the number of consecutive unknown_uint() calls returning true)\n- `(\\forall unsigned int i; i < s; i++; unknown_uint() == 1)` (s is the number of consecutive unknown_uint() calls returning true)\n- `(s == 0) ==> (!unknown_uint())` (if s is 0, then the next unknown_uint() call should return 0)\n- `(\\forall unsigned int i; i < s; i++; unknown_uint() == 1) ==> (s == i + 1)` (if all previous unknown_uint() calls returned 1, then s should be equal to the number of these calls plus 1)\n- `(s > 0) ==> (unknown_uint() == 0)` (if s is greater than 0, then the next unknown_uint() call should return 0)\n\nPost-conditions:\n- `s == 0` (assertion)",
            "Pre-conditions:\n- The program does not take any input.\n- The macro `assume(e)` takes a boolean expression `e` and if `e` evaluates to false, the function returns 0.\n- The function `unknown_uint()` returns an unsigned integer whose value is not known at compile-time.\n\nVariable Assignments:\n- `unsigned int s = 0;`\n\nLoop Condition:\n- `unknown_uint()`\n\nLoop Invariants:\n- `s >= 0`\n- `s <= \\max_unsigned_int`\n\nBefore the loop execution, `s` is initialized to 0, so the first invariant is true. `unknown_uint()` is called in the loop condition, so we cannot make any assumptions about the value of `s` before the loop starts.\n\nIn every iteration of the loop, `s` is either incremented by 1 or reset to 0. If `s` is incremented by 1, it becomes greater than or equal to 1. If it is reset to 0, the invariant still holds. Therefore, `s >= 0` is still true. `unknown_uint()` is called again, so we cannot make any assumptions about the value of `s`.\n\nAfter the loop termination, we know that `unknown_uint()` returns 0. Therefore, the loop terminates when `unknown_uint()` returns 0, which means that the last call to `unknown_uint()` returns 0. If `s` was incremented at least once, it is now greater than or equal to 1. However, the assertion is guarded by `unknown_uint()`, so we need to use implication to handle the case where the assertion is not checked. Therefore, the final loop invariant is:\n\n```\n/*@ \n    loop invariant s >= 0 && s <= \\max_unsigned_int;\n    loop invariant (unknown_uint() == 0) ==> (s == 0);\n*/\n```\n\nNote that we did not need to make any assumptions about the behavior of `unknown_uint()` or the relationship between `s` and the value returned by `unknown_uint()`. We only needed to reason about the possible values that `s` can take based on the code inside the loop.",
            "Pre-conditions:\n- None\n\nVariable Assignments:\n- `unsigned int s = 0;`\n\nLoop Condition:\n- `unknown_uint()`\n\nLoop Invariants:\n- Before loop execution: \n    - `s == 0`\n- In every iteration of the loop:\n    - If the loop condition is true, then `s` is either `0` or `1` in the current iteration. \n    - If `s` is `1` in the current iteration, then it was `0` in the previous iteration. \n    - If the `if` condition inside the loop is true, then `s` is `0` in the current iteration.\n- After loop termination:\n    - `s == 0`\n\nPutting it all together:\n```\n/*@ \n    loop invariant s == 0;\n    loop invariant unknown_uint() ==> (s == 0 || s == 1);\n    loop invariant (s == 1 && unknown_uint()) ==> \\old(s) == 0;\n    loop invariant unknown_uint() && (s == 0) ==> unknown_uint() && (s == 0);\n*/\n```\nNote: Since `unknown_uint()` is non-deterministic, we can use it in the loop invariant as long as we use it consistently. The last invariant is trivially true, but we need to include it to make the other invariants hold when `unknown_uint()` is false."
        ],
        "annotation_blocks": [
            "/*@\n    loop invariant s >= 0;\n    loop invariant (\\forall unsigned int i; i >= 0 && i < s; unknown_uint());\n    loop invariant (s == 0) ==> (!unknown_uint());\n    loop invariant (s != 0) ==> (s' == s+1);\n    loop invariant (s != 0 && !unknown_uint()) ==> (s == 0);\n    loop invariant (s == 0 && !unknown_uint()) ==> ({; //@ assert(s == 0); });\n*/",
            "/*@\n  loop invariant s >= 0;\n  loop invariant s <= \\max_{i=0}^{k} \\{s_i\\};\n  loop invariant s <= 1;\n  loop invariant (s == 0) ==> !unknown_uint();\n  loop invariant (unknown_uint() == 0) ==> (s == 0);\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- None.\n\nVariable Assignments:\n- `unsigned int s = 0;`\n\nLoop Condition:\n- `unknown_uint()`\n\nLoop Invariants:\n- `s >= 0` (s is always non-negative)\n- `(\\forall unsigned int i; i < s; i++; unknown_uint() == 0)` (s is the number of consecutive unknown_uint() calls returning true)\n- `(\\forall unsigned int i; i < s; i++; unknown_uint() == 1)` (s is the number of consecutive unknown_uint() calls returning true)\n- `(s == 0) ==> (!unknown_uint())` (if s is 0, then the next unknown_uint() call should return 0)\n- `(\\forall unsigned int i; i < s; i++; unknown_uint() == 1) ==> (s == i + 1)` (if all previous unknown_uint() calls returned 1, then s should be equal to the number of these calls plus 1)\n- `(s > 0) ==> (unknown_uint() == 0)` (if s is greater than 0, then the next unknown_uint() call should return 0)\n\nPost-conditions:\n- `s == 0` (assertion)"
            ],
            "/*@ \n    loop invariant s >= 0 && s <= \\max_unsigned_int;\n    loop invariant (unknown_uint() == 0) ==> (s == 0);\n*/",
            "/*@ \n    loop invariant s == 0;\n    loop invariant unknown_uint() ==> (s == 0 || s == 1);\n    loop invariant (s == 1 && unknown_uint()) ==> \\old(s) == 0;\n    loop invariant unknown_uint() && (s == 0) ==> unknown_uint() && (s == 0);\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "/*@\n    loop invariant s >= 0;\n    loop invariant (\\forall unsigned int i; i >= 0 && i < s; unknown_uint());\n    loop invariant (s == 0) ==> (!unknown_uint());\n    loop invariant (s != 0) ==> (s' == s+1);\n    loop invariant (s != 0 && !unknown_uint()) ==> (s == 0);\n    loop invariant (s == 0 && !unknown_uint()) ==> ({; //@ assert(s == 0); });\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "No JSON report found",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int s = 0;\n  /*@\nloop invariant i1: s >= 0;\nloop invariant i2: (\\forall unsigned int i; i >= 0 && i < s; unknown_uint());\nloop invariant i3: (s == 0) ==> (!unknown_uint());\nloop invariant i4: (s != 0) ==> (s' == s+1);\nloop invariant i5: (s != 0 && !unknown_uint()) ==> (s == 0);\nloop invariant i6: (s == 0 && !unknown_uint()) ==> ({; //@ assert(s == 0); });\n*/\nwhile (unknown_uint()) {\n    if (s != 0) {\n      ++s;\n    }\n    if (unknown_uint()) {\n      {;\n//@ assert(s == 0);\n}\n\n    }\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "/*@\n  loop invariant s >= 0;\n  loop invariant s <= \\max_{i=0}^{k} \\{s_i\\};\n  loop invariant s <= 1;\n  loop invariant (s == 0) ==> !unknown_uint();\n  loop invariant (unknown_uint() == 0) ==> (s == 0);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 8: unexpected token '='",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int s = 0;\n  /*@\nloop invariant i1: s >= 0;\n\n\n\n\n*/\nwhile (unknown_uint()) {\n    if (s != 0) {\n      ++s;\n    }\n    if (unknown_uint()) {\n      {;\n//@ assert(s == 0);\n}\n\n    }\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- None.\n\nVariable Assignments:\n- `unsigned int s = 0;`\n\nLoop Condition:\n- `unknown_uint()`\n\nLoop Invariants:\n- `s >= 0` (s is always non-negative)\n- `(\\forall unsigned int i; i < s; i++; unknown_uint() == 0)` (s is the number of consecutive unknown_uint() calls returning true)\n- `(\\forall unsigned int i; i < s; i++; unknown_uint() == 1)` (s is the number of consecutive unknown_uint() calls returning true)\n- `(s == 0) ==> (!unknown_uint())` (if s is 0, then the next unknown_uint() call should return 0)\n- `(\\forall unsigned int i; i < s; i++; unknown_uint() == 1) ==> (s == i + 1)` (if all previous unknown_uint() calls returned 1, then s should be equal to the number of these calls plus 1)\n- `(s > 0) ==> (unknown_uint() == 0)` (if s is greater than 0, then the next unknown_uint() call should return 0)\n\nPost-conditions:\n- `s == 0` (assertion)",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant s >= 0 && s <= \\max_unsigned_int;\n    loop invariant (unknown_uint() == 0) ==> (s == 0);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 8: unexpected token ')'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int s = 0;\n  /*@\n\n\n*/\nwhile (unknown_uint()) {\n    if (s != 0) {\n      ++s;\n    }\n    if (unknown_uint()) {\n      {;\n//@ assert(s == 0);\n}\n\n    }\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant s == 0;\n    loop invariant unknown_uint() ==> (s == 0 || s == 1);\n    loop invariant (s == 1 && unknown_uint()) ==> \\old(s) == 0;\n    loop invariant unknown_uint() && (s == 0) ==> unknown_uint() && (s == 0);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 8: unexpected token ')'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int s = 0;\n  /*@\nloop invariant i1: s == 0;\n\n\n\n*/\nwhile (unknown_uint()) {\n    if (s != 0) {\n      ++s;\n    }\n    if (unknown_uint()) {\n      {;\n//@ assert(s == 0);\n}\n\n    }\n  }\n  return 0;\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "No JSON report found",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int s = 0;\n  /*@\nloop invariant i1: s >= 0;\nloop invariant i2: (\\forall unsigned int i; i >= 0 && i < s; unknown_uint());\nloop invariant i3: (s == 0) ==> (!unknown_uint());\nloop invariant i4: (s != 0) ==> (s' == s+1);\nloop invariant i5: (s != 0 && !unknown_uint()) ==> (s == 0);\nloop invariant i6: (s == 0 && !unknown_uint()) ==> ({; //@ assert(s == 0); });\nloop invariant i7: s <= \\max_{i=0}^{k} \\{s_i\\};\nloop invariant i8: s <= 1;\nloop invariant i9: (s == 0) ==> !unknown_uint();\nloop invariant i10: (unknown_uint() == 0) ==> (s == 0);\nloop invariant i11: s >= 0 && s <= \\max_unsigned_int;\nloop invariant i12: s == 0;\nloop invariant i13: unknown_uint() ==> (s == 0 || s == 1);\nloop invariant i14: (s == 1 && unknown_uint()) ==> \\old(s) == 0;\nloop invariant i15: unknown_uint() && (s == 0) ==> unknown_uint() && (s == 0);\n*/\nwhile (unknown_uint()) {\n    if (s != 0) {\n      ++s;\n    }\n    if (unknown_uint()) {\n      {;\n//@ assert(s == 0);\n}\n\n    }\n  }\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 2,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int s = 0;\n  /*@\nloop invariant i1: s >= 0;\nloop invariant i2: (\\forall unsigned int i; i >= 0 && i < s; unknown_uint());\nloop invariant i3: (s == 0) ==> (!unknown_uint());\nloop invariant i4: (s != 0) ==> (s' == s+1);\nloop invariant i5: (s != 0 && !unknown_uint()) ==> (s == 0);\nloop invariant i6: (s == 0 && !unknown_uint()) ==> ({; //@ assert(s == 0); });\nloop invariant i7: s <= \\max_{i=0}^{k} \\{s_i\\};\nloop invariant i8: s <= 1;\nloop invariant i9: (s == 0) ==> !unknown_uint();\nloop invariant i10: (unknown_uint() == 0) ==> (s == 0);\nloop invariant i11: s >= 0 && s <= \\max_unsigned_int;\nloop invariant i12: s == 0;\nloop invariant i13: unknown_uint() ==> (s == 0 || s == 1);\nloop invariant i14: (s == 1 && unknown_uint()) ==> \\old(s) == 0;\nloop invariant i15: unknown_uint() && (s == 0) ==> unknown_uint() && (s == 0);\n*/\nwhile (unknown_uint()) {\n    if (s != 0) {\n      ++s;\n    }\n    if (unknown_uint()) {\n      {;\n//@ assert(s == 0);\n}\n\n    }\n  }\n  return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/const.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../data/benchmarks/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/bin-suffix-5.c"
        ],
        "skipped": [],
        "total": 277,
        "success_count": 132,
        "failure_count": 145,
        "success_rate": 0.47653429602888087
    }
}