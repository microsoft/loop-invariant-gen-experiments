{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loop-lit/gj2007b.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    while(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    while(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions: None.\n\nVariable Assignments: \n- x is assigned 0.\n- m is assigned 0.\n- n is assigned the value of a non-deterministic function unknown_int().\n\nLoop Condition: x < n.\n\nLoop Invariants:\n- Before the loop: None.\n- In every iteration: \n    - m is always less than or equal to x.\n    - n is always non-negative.\n    - x is always less than or equal to n.\n- After the loop:\n    - m is greater than or equal to 0 or n is less than or equal to 0. (Implication: if m < 0 and n > 0, then the if condition inside the loop should have been true, but it wasn't. This implies that m must be greater than or equal to 0 or n must be less than or equal to 0.)\n    - m is less than n or n is less than or equal to 0. (Implication: if m >= n and n > 0, then the if condition inside the loop should have been true, but it wasn't. This implies that m must be less than n or n must be less than or equal to 0.)\n\nVariable Bounds:\n- x is always non-negative.\n- m is always non-negative.\n- n is always non-negative.\n\nImplications:\n- At the beginning of the loop, m is trivially less than or equal to x.\n- At the end of the loop, m is non-negative and x is less than or equal to n.\n\nPutting it all together:\n```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= m;\n    loop invariant 0 <= n;\n    loop invariant m <= x;\n    loop invariant x <= n;\n    loop invariant (m >= 0 || n <= 0);\n    loop invariant (m < n || n <= 0);\n*/\n```",
            "Pre-conditions: None\n\nVariable assignments: \n- `int x = 0;`\n- `int m = 0;`\n- `int n = unknown_int();`\n\nLoop condition: `x < n`\n\nPost-condition: \n```\n//@ assert((m >= 0 || n <= 0));\n//@ assert((m < n || n <= 0));\n```\n\nLoop invariants:\n```\n/*@ \n    loop invariant 0 <= x <= n;\n    loop invariant 0 <= m <= x;\n    loop invariant m < x ==> unknown_int() == 0;\n    loop invariant (x >= n) ==> (m >= 0 || n <= 0);\n    loop invariant (x >= n) ==> (m < n || n <= 0);\n*/\n```\n- `0 <= x <= n` is true before the loop execution and in every iteration of the loop. It ensures that `x` is always less than or equal to `n`.\n- `0 <= m <= x` is true before the loop execution and in every iteration of the loop. It ensures that `m` is always less than or equal to `x`.\n- `m < x ==> unknown_int() == 0` is true before the loop execution and in every iteration of the loop. It ensures that if `m` is less than `x`, then `unknown_int()` must be 0. This is because the only way `m` can be updated inside the loop is when `unknown_int()` is true, and if `m` is not updated, it retains its value from the previous iteration. Therefore, if `m < x`, then `unknown_int()` must have been false in the previous iteration.\n- `(x >= n) ==> (m >= 0 || n <= 0)` is true after the loop termination. It ensures that if `x` is greater than or equal to `n`, then either `m` is greater than or equal to 0 or `n` is less than or equal to 0. This is equivalent to the first post-condition with an implication.\n- `(x >= n) ==> (m < n || n <= 0)` is true after the loop termination. It ensures that if `x` is greater than or equal to `n`, then either `m` is less than `n` or `n` is less than or equal to 0. This is equivalent to the second post-condition with an implication.",
            "Pre-conditions:\n- None.\n\nVariable assignments:\n- `x` is initialized to 0.\n- `m` is initialized to 0.\n- `n` is assigned a non-deterministic value returned by the function `unknown_int()`.\n\nLoop condition:\n- The loop executes while `x` is less than `n`.\n\nLoop Invariants:\n- Before the loop execution, `m >= 0` and `n >= 0`.\n- In every iteration of the loop, `0 <= x <= n`, `m <= x <= n`, and `m <= n`.\n- After the loop termination, `(m >= 0 && n <= 0) ==> (m >= 0 || n <= 0)` and `(m < n && n <= 0) ==> (m < n || n <= 0)`.\n\nExplanation:\n- Before the loop, `m` and `n` could have arbitrary values, so we can only assert that they are non-negative.\n- In every iteration of the loop, `x` starts from 0 and increments by 1, so it is always between 0 and `n`. If `unknown_int()` returns 1, then `m` is assigned the value of `x`, so `m` is always less than or equal to `x` and `n`. Also, since `m` is only assigned when `unknown_int()` returns 1, `m` is always less than or equal to `n`.\n- After the loop termination, we have two assertions guarded by two different conditions. The first assertion states that if `n` is negative and `m` is non-negative, then `m` must also be non-negative or in other words, `m` cannot be negative if `n` is negative. The second assertion states that if `n` is negative and `m` is less than `n`, then `m` must also be less than `n` or in other words, `m` cannot be greater than or equal to `n` if `n` is negative.\n\nPutting it all together:\n```\n/*@ \n    // Before loop execution\n    requires m >= 0 && n >= 0;\n\n    // Loop invariant\n    loop invariant 0 <= x <= n;\n    loop invariant m <= x <= n;\n    loop invariant m <= n;\n\n    // After loop termination\n    ensures (m >= 0 && n <= 0) ==> (m >= 0 || n <= 0);\n    ensures (m < n && n <= 0) ==> (m < n || n <= 0);\n*/\n```",
            "Pre-conditions or Variable Assignments:\n- The variable x is initialized to 0.\n- The variable m is initialized to 0.\n- The variable n is assigned a non-deterministic integer value.\n\nLoop Condition:\n- The loop condition is x < n.\n\nLoop Invariants:\n1. Before the loop execution, x >= 0 && m >= 0 && n is non-negative.\n2. In every iteration of the loop, the following conjunction of conditions hold:\n    - x >= 0 && m >= 0 && n >= 0\n    - x < n ==> m <= x\n    - m < x+1 ==> m <= x\n3. After the loop termination, the following conjunction of conditions hold:\n    - x >= 0 && m >= 0 && n >= 0\n    - x >= n ==> m <= n-1\n    - m < n ==> m < n\n\nExplanation:\n1. Before the loop, x is initialized to 0, so x >= 0. m is initialized to 0, so m >= 0. The variable n is assigned a non-deterministic value, so n is non-negative.\n2. In every iteration of the loop, the loop condition is x < n, so x >= 0 && n >= 0. If the condition inside the loop is true, then m is assigned the value of x, so m <= x. Otherwise, m retains its previous value, so m <= x+1. The conjunction of these two conditions is m < x+1 ==> m <= x. Also, if x < n, then m can be at most x, so m <= x. This gives the conjunction of conditions x < n ==> m <= x.\n3. After the loop termination, x >= n or x < n. If x >= n, then m must be at most n-1, so m <= n-1. This gives the condition m <= n-1 ==> x >= n. If x < n, then m can be at most x, so m < n. This gives the condition m < n ==> x >= n. Combining these two conditions, we get m < n ==> x >= n.",
            "Pre-conditions:\n- None\n\nVariable Assignments:\n- x is assigned the value 0\n- m is assigned the value 0\n- n is assigned the value returned by the function unknown_int()\n\nLoop condition:\n- x < n\n\nLoop Invariants:\n- Before loop execution: \n    - m >= 0 ==> (m >= x && x >= 0)\n    - n <= 0 ==> (x >= n)\n- In every iteration:\n    - m >= 0 ==> (m >= x && x >= 0)\n    - n <= 0 ==> (x >= n)\n    - (m < x) || (x == n) || (m == x) ==> (m == \\old(m))\n- After loop termination:\n    - m >= 0 ==> (m >= x && x >= 0)\n    - n <= 0 ==> (x >= n)\n    - (m < n) || (n <= 0) ==> (m < n)\n\nExplanation:\n- Before loop execution: m is assigned 0, so m >= 0. The variable x is assigned 0, so m >= x and x >= 0. If n <= 0, the loop condition is false and the loop will not execute, so x >= n.\n- In every iteration: m >= 0 and x >= 0, so m >= x. If n <= 0, the loop condition is false and the loop will not execute, so x >= n. If the condition inside the loop is true, m is assigned x, so (m < x) ==> (m == \\old(m)). If the loop condition is false, either x == n or x > n, so m == \\old(m).\n- After loop termination: m >= 0 and x >= 0, so m >= x. If n <= 0, the loop condition is false and the loop will not execute, so x >= n. If m < n, then m is assigned a value less than n in the loop, so m < n. If n <= 0, then the loop will not execute and m < n is trivially true."
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= m;\n    loop invariant 0 <= n;\n    loop invariant m <= x;\n    loop invariant x <= n;\n    loop invariant (m >= 0 || n <= 0);\n    loop invariant (m < n || n <= 0);\n*/",
            "/*@ \n    loop invariant 0 <= x <= n;\n    loop invariant 0 <= m <= x;\n    loop invariant m < x ==> unknown_int() == 0;\n    loop invariant (x >= n) ==> (m >= 0 || n <= 0);\n    loop invariant (x >= n) ==> (m < n || n <= 0);\n*/",
            "/*@ \n    // Before loop execution\n    requires m >= 0 && n >= 0;\n\n    // Loop invariant\n    loop invariant 0 <= x <= n;\n    loop invariant m <= x <= n;\n    loop invariant m <= n;\n\n    // After loop termination\n    ensures (m >= 0 && n <= 0) ==> (m >= 0 || n <= 0);\n    ensures (m < n && n <= 0) ==> (m < n || n <= 0);\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions or Variable Assignments:\n- The variable x is initialized to 0.\n- The variable m is initialized to 0.\n- The variable n is assigned a non-deterministic integer value.\n\nLoop Condition:\n- The loop condition is x < n.\n\nLoop Invariants:\n1. Before the loop execution, x >= 0 && m >= 0 && n is non-negative.\n2. In every iteration of the loop, the following conjunction of conditions hold:\n    - x >= 0 && m >= 0 && n >= 0\n    - x < n ==> m <= x\n    - m < x+1 ==> m <= x\n3. After the loop termination, the following conjunction of conditions hold:\n    - x >= 0 && m >= 0 && n >= 0\n    - x >= n ==> m <= n-1\n    - m < n ==> m < n\n\nExplanation:\n1. Before the loop, x is initialized to 0, so x >= 0. m is initialized to 0, so m >= 0. The variable n is assigned a non-deterministic value, so n is non-negative.\n2. In every iteration of the loop, the loop condition is x < n, so x >= 0 && n >= 0. If the condition inside the loop is true, then m is assigned the value of x, so m <= x. Otherwise, m retains its previous value, so m <= x+1. The conjunction of these two conditions is m < x+1 ==> m <= x. Also, if x < n, then m can be at most x, so m <= x. This gives the conjunction of conditions x < n ==> m <= x.\n3. After the loop termination, x >= n or x < n. If x >= n, then m must be at most n-1, so m <= n-1. This gives the condition m <= n-1 ==> x >= n. If x < n, then m can be at most x, so m < n. This gives the condition m < n ==> x >= n. Combining these two conditions, we get m < n ==> x >= n."
            ],
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- None\n\nVariable Assignments:\n- x is assigned the value 0\n- m is assigned the value 0\n- n is assigned the value returned by the function unknown_int()\n\nLoop condition:\n- x < n\n\nLoop Invariants:\n- Before loop execution: \n    - m >= 0 ==> (m >= x && x >= 0)\n    - n <= 0 ==> (x >= n)\n- In every iteration:\n    - m >= 0 ==> (m >= x && x >= 0)\n    - n <= 0 ==> (x >= n)\n    - (m < x) || (x == n) || (m == x) ==> (m == \\old(m))\n- After loop termination:\n    - m >= 0 ==> (m >= x && x >= 0)\n    - n <= 0 ==> (x >= n)\n    - (m < n) || (n <= 0) ==> (m < n)\n\nExplanation:\n- Before loop execution: m is assigned 0, so m >= 0. The variable x is assigned 0, so m >= x and x >= 0. If n <= 0, the loop condition is false and the loop will not execute, so x >= n.\n- In every iteration: m >= 0 and x >= 0, so m >= x. If n <= 0, the loop condition is false and the loop will not execute, so x >= n. If the condition inside the loop is true, m is assigned x, so (m < x) ==> (m == \\old(m)). If the loop condition is false, either x == n or x > n, so m == \\old(m).\n- After loop termination: m >= 0 and x >= 0, so m >= x. If n <= 0, the loop condition is false and the loop will not execute, so x >= n. If m < n, then m is assigned a value less than n in the loop, so m < n. If n <= 0, then the loop will not execute and m < n is trivially true."
            ]
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= m;\n    loop invariant 0 <= n;\n    loop invariant m <= x;\n    loop invariant x <= n;\n    loop invariant (m >= 0 || n <= 0);\n    loop invariant (m < n || n <= 0);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x is partially proven to be inductive.\nloop invariant 0 <= m is partially proven to be inductive.\nloop invariant 0 <= n is preserved but not established.\nloop invariant m <= x is partially proven to be inductive.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant (m >= 0 || n <= 0) is partially proven to be inductive.\nloop invariant (m < n || n <= 0) is partially proven to be inductive.\nAssertion m >= 0 || n <= 0: Partially proven\nAssertion m < n || n <= 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\nloop invariant i1: 0 <= x;\nloop invariant i2: 0 <= m;\n\nloop invariant i4: m <= x;\n\nloop invariant i6: (m >= 0 || n <= 0);\nloop invariant i7: (m < n || n <= 0);\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= x <= n;\n    loop invariant 0 <= m <= x;\n    loop invariant m < x ==> unknown_int() == 0;\n    loop invariant (x >= n) ==> (m >= 0 || n <= 0);\n    loop invariant (x >= n) ==> (m < n || n <= 0);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 11: unexpected token ')'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\nloop invariant i2: 0 <= m <= x;\n\nloop invariant i4: (x >= n) ==> (m >= 0 || n <= 0);\nloop invariant i5: (x >= n) ==> (m < n || n <= 0);\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    // Before loop execution\n    requires m >= 0 && n >= 0;\n\n    // Loop invariant\n    loop invariant 0 <= x <= n;\n    loop invariant m <= x <= n;\n    loop invariant m <= n;\n\n    // After loop termination\n    ensures (m >= 0 && n <= 0) ==> (m >= 0 || n <= 0);\n    ensures (m < n && n <= 0) ==> (m < n || n <= 0);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant m <= x <= n is partially proven to be inductive.\nloop invariant m <= n is partially proven to be inductive.\nAssertion m >= 0 || n <= 0: Unproven\nAssertion m < n || n <= 0: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\n\n\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions or Variable Assignments:\n- The variable x is initialized to 0.\n- The variable m is initialized to 0.\n- The variable n is assigned a non-deterministic integer value.\n\nLoop Condition:\n- The loop condition is x < n.\n\nLoop Invariants:\n1. Before the loop execution, x >= 0 && m >= 0 && n is non-negative.\n2. In every iteration of the loop, the following conjunction of conditions hold:\n    - x >= 0 && m >= 0 && n >= 0\n    - x < n ==> m <= x\n    - m < x+1 ==> m <= x\n3. After the loop termination, the following conjunction of conditions hold:\n    - x >= 0 && m >= 0 && n >= 0\n    - x >= n ==> m <= n-1\n    - m < n ==> m < n\n\nExplanation:\n1. Before the loop, x is initialized to 0, so x >= 0. m is initialized to 0, so m >= 0. The variable n is assigned a non-deterministic value, so n is non-negative.\n2. In every iteration of the loop, the loop condition is x < n, so x >= 0 && n >= 0. If the condition inside the loop is true, then m is assigned the value of x, so m <= x. Otherwise, m retains its previous value, so m <= x+1. The conjunction of these two conditions is m < x+1 ==> m <= x. Also, if x < n, then m can be at most x, so m <= x. This gives the conjunction of conditions x < n ==> m <= x.\n3. After the loop termination, x >= n or x < n. If x >= n, then m must be at most n-1, so m <= n-1. This gives the condition m <= n-1 ==> x >= n. If x < n, then m can be at most x, so m < n. This gives the condition m < n ==> x >= n. Combining these two conditions, we get m < n ==> x >= n.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- None\n\nVariable Assignments:\n- x is assigned the value 0\n- m is assigned the value 0\n- n is assigned the value returned by the function unknown_int()\n\nLoop condition:\n- x < n\n\nLoop Invariants:\n- Before loop execution: \n    - m >= 0 ==> (m >= x && x >= 0)\n    - n <= 0 ==> (x >= n)\n- In every iteration:\n    - m >= 0 ==> (m >= x && x >= 0)\n    - n <= 0 ==> (x >= n)\n    - (m < x) || (x == n) || (m == x) ==> (m == \\old(m))\n- After loop termination:\n    - m >= 0 ==> (m >= x && x >= 0)\n    - n <= 0 ==> (x >= n)\n    - (m < n) || (n <= 0) ==> (m < n)\n\nExplanation:\n- Before loop execution: m is assigned 0, so m >= 0. The variable x is assigned 0, so m >= x and x >= 0. If n <= 0, the loop condition is false and the loop will not execute, so x >= n.\n- In every iteration: m >= 0 and x >= 0, so m >= x. If n <= 0, the loop condition is false and the loop will not execute, so x >= n. If the condition inside the loop is true, m is assigned x, so (m < x) ==> (m == \\old(m)). If the loop condition is false, either x == n or x > n, so m == \\old(m).\n- After loop termination: m >= 0 and x >= 0, so m >= x. If n <= 0, the loop condition is false and the loop will not execute, so x >= n. If m < n, then m is assigned a value less than n in the loop, so m < n. If n <= 0, then the loop will not execute and m < n is trivially true.",
                "error": "Output does not contain at least 1 code block"
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 18: unexpected token ')'",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\nloop invariant i1: 0 <= x;\nloop invariant i2: 0 <= m;\nloop invariant i3: 0 <= n;\nloop invariant i4: m <= x;\nloop invariant i5: x <= n;\nloop invariant i6: (m >= 0 || n <= 0);\nloop invariant i7: (m < n || n <= 0);\nloop invariant i8: 0 <= x <= n;\nloop invariant i9: 0 <= m <= x;\nloop invariant i10: m < x ==> unknown_int() == 0;\nloop invariant i11: (x >= n) ==> (m >= 0 || n <= 0);\nloop invariant i12: (x >= n) ==> (m < n || n <= 0);\nloop invariant i13: m <= x <= n;\nloop invariant i14: m <= n;\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 7,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\nloop invariant i1: 0 <= x;\nloop invariant i2: 0 <= m;\n\nloop invariant i4: m <= x;\n\nloop invariant i6: (m >= 0 || n <= 0);\nloop invariant i7: (m < n || n <= 0);\n\nloop invariant i9: 0 <= m <= x;\n\nloop invariant i11: (x >= n) ==> (m >= 0 || n <= 0);\nloop invariant i12: (x >= n) ==> (m < n || n <= 0);\n\n\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/const.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq1.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq2.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/afnp2014.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/css2003.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007b.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../data/benchmarks/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/even.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/mod4.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/odd.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/id_trans.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/bhmr2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/ddlm2013.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gcnr2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007.c"
        ],
        "skipped": [],
        "total": 295,
        "success_count": 139,
        "failure_count": 156,
        "success_rate": 0.4711864406779661
    }
}