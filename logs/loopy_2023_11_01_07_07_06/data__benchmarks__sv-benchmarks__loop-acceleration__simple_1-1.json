{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-1.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 0x0fffffff) {\n    x += 2;\n  }\n\n  {;\n//@ assert(x % 2);\n}\n\n}",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 0x0fffffff) {\n    x += 2;\n  }\n\n  {;\n//@ assert(x % 2);\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- None\n\nVariable assignments:\n- `unsigned int x = 0;`\n\nLoop condition:\n- `x < 0x0fffffff`\n\nPost-condition:\n- `x % 2`\n\nTo find the loop invariants, we need to find conditions that are true before the loop starts, after every iteration of the loop, and after the loop terminates, that imply the post-condition.\n\nBefore the loop starts, the only condition we have is `x == 0`. This condition is true before the loop starts and implies the post-condition, because `0 % 2 == 0`.\n\nAfter every iteration of the loop, `x` is incremented by `2`. Therefore, we can add the loop invariant `x % 2 == 0` to the loop.\n\nAfter the loop terminates, we know that `x >= 0x0fffffff`. Therefore, we can add the loop invariant `x % 2 == 0 ==> x >= 0x0fffffff` to the loop.\n\nPutting it all together, we have:\n```\n/*@ \n    loop invariant x == 0;\n    loop invariant (x % 2 == 0);\n    loop invariant (x % 2 == 0 ==> x >= 0x0fffffff);\n*/\n```",
            "Pre-conditions/Variable assignments:\n- x is an unsigned integer initialized to 0.\n\nLoop condition:\n- The loop will continue as long as x is less than 0x0fffffff.\n\nLoop invariants:\n- Before the loop execution: \n    - x is non-negative.\n    - x is less than or equal to 0x0fffffff.\n- In every iteration of the loop:\n    - x is even.\n    - x is less than or equal to 0x0fffffff.\n- After the loop termination:\n    - x is even.\n    - x is greater than or equal to 0x0fffffff.\n    - x is less than or equal to 0x100000000.\n\nWe can prove the above loop invariants imply the post-condition. \n- The loop runs until x becomes 0x100000000 which is an even number.\n- Therefore, x must be even when the loop terminates.\n- Since x is incremented by 2 in every iteration of the loop, it is always even during the loop execution.\n- Finally, x starts at 0 and is incremented by 2 in each iteration until it reaches 0x100000000. Therefore, it is less than or equal to 0x100000000 after the loop terminates.\n\nPutting it all together, the loop invariants are:\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant x <= 0x0fffffff;\n    loop invariant x % 2 == 0;\n    loop invariant x <= 0x0fffffff;\n    loop invariant (x >= 0x100000000) ==> (x % 2 == 0);\n    loop invariant (x >= 0x100000000) ==> (x >= 0x100000000);\n    loop invariant (x >= 0x100000000) ==> (x <= 0x100000000);\n*/\n```",
            "Pre-conditions:\n- The program does not have any explicit pre-conditions.\n- The variable `x` is initialized to `0`.\n\nLoop condition:\n- The loop continues as long as `x` is less than `0x0fffffff`.\n\nLoop Invariants:\n- `x` is always even before the loop execution. (x % 2 == 0)\n- `x` is always even at the beginning of each iteration of the loop. (x % 2 == 0)\n- `x` is always even at the end of each iteration of the loop. (x % 2 == 0)\n- `x` is less than or equal to `0x0fffffff` at the beginning of each iteration of the loop. (x <= 0x0fffffff)\n- `x` is less than or equal to `0x0fffffff` after the loop termination. (x <= 0x0fffffff)\n- The value of `x` increases by 2 in each iteration of the loop. (x_old + 2 == x)\n\nUsing the above loop invariants, we can prove that the post-condition is true:\n- If `x % 2` is true, then `x` must have been odd at the end of the loop.\n- Since `x` increases by 2 in each iteration, and `x` is even at the beginning of each iteration, `x` can never be odd at the end of the loop.\n- Therefore, the post-condition cannot be true, and the program is incorrect.\n\nTo fix the program, we need to change the post-condition to `x % 2 == 0`. This can be proved using the loop invariants.",
            "Step 1: Pre-conditions and variable assignments\n\nThere are no pre-conditions in the program. The variable `x` is assigned the value 0.\n\nStep 2: Loop condition\n\nThe loop condition is `x < 0x0fffffff`.\n\nStep 3: Loop invariants\n\nWe want to find loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition.\n\nLet's start with the loop invariants that are true before the loop execution:\n\nBefore the loop execution:\n- `x >= 0`\n\nNow let's consider the loop invariants that are true in every iteration of the loop:\n\nIn every iteration:\n- `x % 2 == 0`\n- `x <= 0x0fffffff`\n\nThe first invariant is true because `x` is incremented by 2 in each iteration. The second invariant is true because the loop condition is `x < 0x0fffffff`, so `x` is less than or equal to `0x0fffffff` at the end of each iteration.\n\nFinally, let's consider the loop invariants that are true after the loop termination:\n\nAfter the loop termination:\n- `x >= 0x0fffffff`\n- `(x % 2) ==> (x == 0x100000000)`\n\nThe first invariant is true because the loop condition is `x < 0x0fffffff`, so `x` must be greater than or equal to `0x0fffffff` when the loop terminates. The second invariant is needed because the assertion is guarded by the condition `x % 2`. If `x` is odd, the assertion is not checked, so the invariant is trivially true. If `x` is even, the assertion must hold, which means `x` must be equal to `0x100000000`.\n\nPutting it all together, we have the following loop invariants:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant x % 2 == 0;\n    loop invariant x <= 0x0fffffff;\n    loop invariant x >= 0x0fffffff;\n    loop invariant (x % 2) ==> (x == 0x100000000);\n*/\n```",
            "First, let's analyze the pre-conditions and variable assignments in the program:\n- The program defines a macro \"assume(e)\" that returns 0 if the expression e is false.\n- The main function initializes an unsigned integer variable \"x\" to 0.\n\nNext, let's analyze the loop body:\n- The while loop increments \"x\" by 2 in each iteration as long as \"x\" is less than 0x0fffffff.\n\nNow, let's find the necessary loop invariants:\n- Before the loop execution, \"x\" is at least 0 and at most 0x0fffffff.\n```\n/*@ \n  loop invariant 0 <= x <= 0x0fffffff;\n*/\n```\n- In every iteration of the loop, \"x\" is even and is at least its value in the previous iteration and at most 0x0fffffff.\n```\n/*@ \n  loop invariant (x % 2 == 0) && (0 <= x <= 0x0fffffff);\n*/\n```\n- After the loop termination, \"x\" is greater than or equal to 0x0fffffff.\n```\n/*@ \n  loop invariant (x >= 0x0fffffff) ==> (x % 2);\n*/\n```\nNote that we used implication to take care of the conditional nature of the code. \n\nSince there are no non-deterministic variables in this program, we don't need to use implications to make the invariants trivially true at the beginning or end of the loop.\n\nTherefore, the final loop invariants are:\n```\n/*@ \n  loop invariant 0 <= x <= 0x0fffffff;\n  loop invariant (x % 2 == 0) && (0 <= x <= 0x0fffffff);\n  loop invariant (x >= 0x0fffffff) ==> (x % 2);\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant x == 0;\n    loop invariant (x % 2 == 0);\n    loop invariant (x % 2 == 0 ==> x >= 0x0fffffff);\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant x <= 0x0fffffff;\n    loop invariant x % 2 == 0;\n    loop invariant x <= 0x0fffffff;\n    loop invariant (x >= 0x100000000) ==> (x % 2 == 0);\n    loop invariant (x >= 0x100000000) ==> (x >= 0x100000000);\n    loop invariant (x >= 0x100000000) ==> (x <= 0x100000000);\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The program does not have any explicit pre-conditions.\n- The variable `x` is initialized to `0`.\n\nLoop condition:\n- The loop continues as long as `x` is less than `0x0fffffff`.\n\nLoop Invariants:\n- `x` is always even before the loop execution. (x % 2 == 0)\n- `x` is always even at the beginning of each iteration of the loop. (x % 2 == 0)\n- `x` is always even at the end of each iteration of the loop. (x % 2 == 0)\n- `x` is less than or equal to `0x0fffffff` at the beginning of each iteration of the loop. (x <= 0x0fffffff)\n- `x` is less than or equal to `0x0fffffff` after the loop termination. (x <= 0x0fffffff)\n- The value of `x` increases by 2 in each iteration of the loop. (x_old + 2 == x)\n\nUsing the above loop invariants, we can prove that the post-condition is true:\n- If `x % 2` is true, then `x` must have been odd at the end of the loop.\n- Since `x` increases by 2 in each iteration, and `x` is even at the beginning of each iteration, `x` can never be odd at the end of the loop.\n- Therefore, the post-condition cannot be true, and the program is incorrect.\n\nTo fix the program, we need to change the post-condition to `x % 2 == 0`. This can be proved using the loop invariants."
            ],
            "/*@ \n    loop invariant x >= 0;\n    loop invariant x % 2 == 0;\n    loop invariant x <= 0x0fffffff;\n    loop invariant x >= 0x0fffffff;\n    loop invariant (x % 2) ==> (x == 0x100000000);\n*/",
            "/*@ \n  loop invariant 0 <= x <= 0x0fffffff;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant x == 0;\n    loop invariant (x % 2 == 0);\n    loop invariant (x % 2 == 0 ==> x >= 0x0fffffff);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 0) is partially proven to be inductive.\nloop invariant (x % 2 == 0 ==> x >= 0x0fffffff) is preserved but not established.\nAssertion x % 2 != 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\nloop invariant i2: (x % 2 == 0);\n\n*/\nwhile (x < 0x0fffffff) {\n    x += 2;\n  }\n\n  {;\n//@ assert(x % 2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant x <= 0x0fffffff;\n    loop invariant x % 2 == 0;\n    loop invariant x <= 0x0fffffff;\n    loop invariant (x >= 0x100000000) ==> (x % 2 == 0);\n    loop invariant (x >= 0x100000000) ==> (x >= 0x100000000);\n    loop invariant (x >= 0x100000000) ==> (x <= 0x100000000);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= 0x0fffffff is established but not preserved.\nloop invariant x % 2 == 0 is partially proven to be inductive.\nloop invariant (x >= 0x100000000) ==> (x % 2 == 0) is partially proven to be inductive.\nloop invariant (x >= 0x100000000) ==> (x >= 0x100000000) is partially proven to be inductive.\nloop invariant (x >= 0x100000000) ==> (x <= 0x100000000) is partially proven to be inductive.\nAssertion x % 2 != 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\nloop invariant i1: x >= 0;\n\nloop invariant i3: x % 2 == 0;\nloop invariant i4: (x >= 0x100000000) ==> (x % 2 == 0);\nloop invariant i5: (x >= 0x100000000) ==> (x >= 0x100000000);\nloop invariant i6: (x >= 0x100000000) ==> (x <= 0x100000000);\n*/\nwhile (x < 0x0fffffff) {\n    x += 2;\n  }\n\n  {;\n//@ assert(x % 2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The program does not have any explicit pre-conditions.\n- The variable `x` is initialized to `0`.\n\nLoop condition:\n- The loop continues as long as `x` is less than `0x0fffffff`.\n\nLoop Invariants:\n- `x` is always even before the loop execution. (x % 2 == 0)\n- `x` is always even at the beginning of each iteration of the loop. (x % 2 == 0)\n- `x` is always even at the end of each iteration of the loop. (x % 2 == 0)\n- `x` is less than or equal to `0x0fffffff` at the beginning of each iteration of the loop. (x <= 0x0fffffff)\n- `x` is less than or equal to `0x0fffffff` after the loop termination. (x <= 0x0fffffff)\n- The value of `x` increases by 2 in each iteration of the loop. (x_old + 2 == x)\n\nUsing the above loop invariants, we can prove that the post-condition is true:\n- If `x % 2` is true, then `x` must have been odd at the end of the loop.\n- Since `x` increases by 2 in each iteration, and `x` is even at the beginning of each iteration, `x` can never be odd at the end of the loop.\n- Therefore, the post-condition cannot be true, and the program is incorrect.\n\nTo fix the program, we need to change the post-condition to `x % 2 == 0`. This can be proved using the loop invariants.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant x % 2 == 0;\n    loop invariant x <= 0x0fffffff;\n    loop invariant x >= 0x0fffffff;\n    loop invariant (x % 2) ==> (x == 0x100000000);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is partially proven to be inductive.\nloop invariant x % 2 == 0 is partially proven to be inductive.\nloop invariant x <= 0x0fffffff is partially proven to be inductive.\nloop invariant x >= 0x0fffffff is preserved but not established.\nloop invariant (x % 2) ==> (x == 0x100000000) is partially proven to be inductive.\nAssertion x % 2 != 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: x % 2 == 0;\n\n\nloop invariant i5: (x % 2) ==> (x == 0x100000000);\n*/\nwhile (x < 0x0fffffff) {\n    x += 2;\n  }\n\n  {;\n//@ assert(x % 2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n  loop invariant 0 <= x <= 0x0fffffff;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 0x0fffffff is established but not preserved.\nAssertion x % 2 != 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\n*/\nwhile (x < 0x0fffffff) {\n    x += 2;\n  }\n\n  {;\n//@ assert(x % 2);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant x == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 0) is partially proven to be inductive.\nloop invariant (x % 2 == 0 ==> x >= 0x0fffffff) is preserved but not established.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= 0x0fffffff is partially proven to be inductive.\nloop invariant x % 2 == 0 is partially proven to be inductive.\nloop invariant (x >= 0x100000000) ==> (x % 2 == 0) is partially proven to be inductive.\nloop invariant (x >= 0x100000000) ==> (x >= 0x100000000) is partially proven to be inductive.\nloop invariant (x >= 0x100000000) ==> (x <= 0x100000000) is partially proven to be inductive.\nloop invariant x >= 0x0fffffff is partially proven to be inductive.\nloop invariant (x % 2) ==> (x == 0x100000000) is partially proven to be inductive.\nloop invariant 0 <= x <= 0x0fffffff is partially proven to be inductive.\nAssertion x % 2 != 0: Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\nloop invariant i1: x == 0;\nloop invariant i2: (x % 2 == 0);\nloop invariant i3: (x % 2 == 0 ==> x >= 0x0fffffff);\nloop invariant i4: x >= 0;\nloop invariant i5: x <= 0x0fffffff;\nloop invariant i6: x % 2 == 0;\nloop invariant i7: (x >= 0x100000000) ==> (x % 2 == 0);\nloop invariant i8: (x >= 0x100000000) ==> (x >= 0x100000000);\nloop invariant i9: (x >= 0x100000000) ==> (x <= 0x100000000);\nloop invariant i10: x >= 0x0fffffff;\nloop invariant i11: (x % 2) ==> (x == 0x100000000);\nloop invariant i12: 0 <= x <= 0x0fffffff;\n*/\nwhile (x < 0x0fffffff) {\n    x += 2;\n  }\n\n  {;\n//@ assert(x % 2);\n}\n\n}",
        "combined_annotation_num_solver_calls": 7,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\nloop invariant i2: (x % 2 == 0);\n\nloop invariant i4: x >= 0;\n\nloop invariant i6: x % 2 == 0;\nloop invariant i7: (x >= 0x100000000) ==> (x % 2 == 0);\nloop invariant i8: (x >= 0x100000000) ==> (x >= 0x100000000);\nloop invariant i9: (x >= 0x100000000) ==> (x <= 0x100000000);\n\nloop invariant i11: (x % 2) ==> (x == 0x100000000);\n\n*/\nwhile (x < 0x0fffffff) {\n    x += 2;\n  }\n\n  {;\n//@ assert(x % 2);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-2.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-1.c"
        ],
        "skipped": [],
        "total": 261,
        "success_count": 124,
        "failure_count": 137,
        "success_rate": 0.47509578544061304
    }
}