{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark03_linear.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  x = 0; y = 0;\n  if (!(i==0 && j==0)) return 0;\n  while (unknown_bool()) {\n    x++;\n    y++;\n    i+=x;\n    j+=y;\n    if (flag) j+=1;\n  }\n  {;\n//@ assert(j>=i);\n}\n\n  return 0;\n}",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  x = 0; y = 0;\n  if (!(i==0 && j==0)) return 0;\n  while (unknown_bool()) {\n    x++;\n    y++;\n    i+=x;\n    j+=y;\n    if (flag) j+=1;\n  }\n  {;\n//@ assert(j>=i);\n}\n\n  return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- The values of variables `x`, `y`, `i` and `j` are unknown and can contain garbage values.\n- The value of `flag` is unknown and can contain a garbage value.\n- The values of `i` and `j` are 0.\n\nLoop condition:\n- The loop runs until the value returned by `unknown_bool()` becomes false.\n\nPost-condition:\n- `j` is greater than or equal to `i`.\n\nLoop invariants:\n- `i==x*(x+1)/2`\n    - This is true before the loop execution, as `i` is 0 and `x` is 0 at the beginning.\n    - This is true in every iteration of the loop, as the value of `i` is updated as `i+=x`.\n    - This is true after the loop termination, as the loop terminates when the loop condition becomes false, which means that `x` has reached a maximum value, say `M`. Therefore, `i` would have the value `M*(M+1)/2`.\n- `j==y*(y+1)/2+x`\n    - This is true before the loop execution, as `j` is 0, `y` is 0 and `x` is 0 at the beginning.\n    - This is true in every iteration of the loop, as the value of `j` is updated as `j+=y` and `j+=x` if `flag` is true.\n    - This is true after the loop termination, as the loop terminates when the loop condition becomes false, which means that `y` has reached a maximum value, say `N`. Therefore, `j` would have the value `N*(N+1)/2+N`.\n- `x>=0`\n    - This is true before the loop execution, as `x` can contain a non-negative garbage value.\n    - This is true in every iteration of the loop, as `x` is incremented by 1 in every iteration.\n    - This is true after the loop termination, as `x` would have a non-negative value.\n- `y>=0`\n    - This is true before the loop execution, as `y` can contain a non-negative garbage value.\n    - This is true in every iteration of the loop, as `y` is incremented by 1 in every iteration.\n    - This is true after the loop termination, as `y` would have a non-negative value.\n- `i<=j`\n    - This is true before the loop execution, as `i` and `j` are both 0 at the beginning.\n    - This is true in every iteration of the loop, as `i` is updated by adding `x` and `j` is updated by adding `y` and `x` (if `flag` is true).\n    - This is true after the loop termination, as the loop terminates when the loop condition becomes false, which means that `y` has reached a maximum value, say `N`. Therefore, `j` would have the value `N*(N+1)/2+N` and `i` would have the value `N*(N+1)*(2N+1)/6`. Since `N` is non-negative, it can be verified that `j>=i`.\n\nPutting it all together, the loop invariants are:\n```\n/*@ \n    loop invariant i==x*(x+1)/2;\n    loop invariant j==y*(y+1)/2+x;\n    loop invariant x>=0;\n    loop invariant y>=0;\n    loop invariant i<=j;\n*/\n```",
            "Pre-conditions or variable assignments:\n- x, y, i, j are integer variables that are assigned non-deterministic values.\n- flag is a Boolean variable that is assigned a non-deterministic value.\n- x and y are reset to zero before the loop.\n- i and j are both zero before the loop.\n\nLoop condition:\n- The loop executes as long as the Boolean value returned by `unknown_bool()` is true. \n\nLoop invariants:\n- Before the loop: \n    - x >= 0 \n    - y >= 0\n    - i == 0\n    - j == 0\n- In every iteration:\n    - x >= 1\n    - y >= 1\n    - i >= (x * (x+1))/2\n    - j >= (y * (y+1))/2\n    - if flag is true, then j > i\n- After the loop:\n    - j >= i\n\nExplanation:\n- Before the loop: Since x and y are reset to zero before the loop, their minimum value is 0. Since i and j are explicitly assigned 0 before the loop, their values are 0. \n- In every iteration: Since x and y are incremented by 1 in every iteration, their minimum value is 1. Since i is the sum of all previous values of x, its minimum value is (x * (x+1))/2. Similarly, since j is the sum of all previous values of y, its minimum value is (y * (y+1))/2. If flag is true, then j is incremented by 1 in addition to y in every iteration. Hence, j will be strictly greater than i.\n- After the loop: The loop stops when the Boolean value returned by `unknown_bool()` is false. Hence, the loop executes until j >= i. \n\nThus, the final loop invariants are:\n```\n/*@ \n  loop invariant x >= 0;\n  loop invariant y >= 0;\n  loop invariant i == 0;\n  loop invariant j == 0;\n  loop invariant x >= 1;\n  loop invariant y >= 1;\n  loop invariant i >= (x * (x+1))/2;\n  loop invariant j >= (y * (y+1))/2;\n  loop invariant flag ==> j > i;\n  loop invariant j >= i;\n*/\n```",
            "First, we can observe the pre-conditions and variable assignments in the program:\n```\nint x = unknown_int();\nint y = unknown_int();\nint i = unknown_int();\nint j = unknown_int();\n_Bool flag = unknown_bool();\nx = 0; y = 0;\nif (!(i==0 && j==0)) return 0;\n```\nHere, x, y, i and j are initialized with non-deterministic values. The variable flag is also non-deterministic. The values of i and j are checked to be 0.\n\nNext, we can analyze the loop body:\n```\nwhile (unknown_bool()) {\n  x++;\n  y++;\n  i+=x;\n  j+=y;\n  if (flag) j+=1;\n}\n```\nThe loop runs an unknown number of times, until the condition becomes false. Inside the loop, x and y are incremented by 1 in every iteration, and i and j are incremented by x and y respectively. If flag is true, j is also incremented by 1.\n\nTo prove the post-condition `j>=i`, we can use the following loop invariants:\n```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant j >= i;\n    loop invariant i >= 0;\n    loop invariant j >= 0;\n    loop invariant (flag ==> j >= y);\n*/\n```\nThe first two loop invariants ensure that x and y are always non-negative.\nThe third loop invariant is the most important one, which states that j is always greater than or equal to i.\nThe fourth and fifth loop invariants ensure that i and j are always non-negative.\nThe last loop invariant states that if flag is true, then j is greater than or equal to y. This is because if flag is true, then j is incremented by 1 in every iteration, and y is incremented by 1 in every iteration, so j should always be greater than or equal to y.\n\nWe can prove that these loop invariants hold:\n- Before the loop execution, x and y are both 0, so the first two loop invariants hold. i and j are non-negative integers, so the fourth and fifth loop invariants also hold. Since the values of i and j are checked to be 0 in the pre-condition, the third loop invariant also holds.\n- In every iteration of the loop, x and y are incremented by 1, so the first two loop invariants are maintained. i is incremented by x and j is incremented by y or y+1 (if flag is true), so the fourth and fifth loop invariants are also maintained. The third loop invariant is maintained because j is always greater than or equal to its previous value, and i is incremented by a positive value (x), so j is always greater than or equal to i.\n- After the loop termination, the loop condition becomes false, so the negation of the loop condition is true, which means that x and y have reached the maximum values that they can take. Since j is incremented by y or y+1 (if flag is true) in every iteration, j has also reached the maximum value that it can take. Therefore, the third loop invariant still holds. The other loop invariants are also maintained because i and j are non-negative integers.\n\nNote that we do not need to add any implication because all the variables are initialized with non-deterministic values and there is no guard condition for the assertion.",
            "Pre-conditions and variable assignments:\n- The program declares four integer variables `x`, `y`, `i`, and `j`.\n- The program declares a boolean variable `flag`.\n- The program initializes `x` and `y` to 0.\n- The program assigns `i` and `j` to unknown values.\n- The program assigns `flag` to an unknown boolean value.\n\nLoop condition:\n- The loop continues as long as `unknown_bool()` returns true.\n\nLoop invariants:\n- Since `i` and `j` are initialized to unknown values, we cannot make any assumptions about their values before the loop starts. Therefore, we will not include any loop invariants that involve `i` and `j` before the loop execution.\n- The loop body increments `x` and `y` by 1 in each iteration. Therefore, in every iteration of the loop, we have:\n```\nx >= 0 && y >= 0\n```\n- The loop body increments `i` by `x` and `j` by `y`, and if `flag` is true, it increments `j` by 1. Therefore, in every iteration of the loop, we have:\n```\ni <= i + x && j <= j + y + (flag ? 1 : 0)\n```\n- The loop terminates when `unknown_bool()` returns false. Therefore, after the loop termination, we have:\n```\n!unknown_bool()\n```\n- The assertion `j>=i` is guarded by the condition `!unknown_bool()`. Therefore, we can use this condition in an implication. After the loop termination, if `!unknown_bool()` holds, then `j>=i` must also hold. Therefore, we have:\n```\n!unknown_bool() ==> j>=i\n```\n- Since `x` and `y` are initialized to 0 before the loop execution, we have `x >= 0` and `y >= 0` before the loop execution. Therefore, we can include these conditions in the loop invariant as well:\n```\n/*@ \n    loop invariant x >= 0 && y >= 0;\n    loop invariant i <= i + x && j <= j + y + (flag ? 1 : 0);\n    loop invariant !unknown_bool() ==> j>=i;\n*/\n```\n- Note that we have not included any loop invariant for `i` and `j` before the loop execution, since we cannot make any assumptions about their values.",
            "First, let's analyze the pre-conditions and variable assignments in the program:\n\n- There are four integer variables x, y, i, and j, and a Boolean variable flag.\n- The values of x, y, i, and j are non-deterministic, i.e., they are assigned values by the external function `unknown_int()`.\n- The value of flag is also non-deterministic, i.e., it is assigned a value by the external function `unknown_bool()`.\n- The values of x and y are then explicitly set to 0.\n- i and j are checked to have 0 value, otherwise, the program returns 0.\n\nNow, let's analyze the loop body:\n\n- The loop condition is a non-deterministic Boolean value returned by the function `unknown_bool()`.\n- Inside the loop, x and y are incremented by 1.\n- i is incremented by the value of x, and j is incremented by the value of y.\n- If flag is true, then j is also incremented by 1.\n\nThe post-condition is `j>=i`.\n\nBased on the above analysis, we can come up with the following loop invariants:\n```\n/*@ \n    loop invariant i >= 0 && j >= 0 && x >= 0 && y >= 0;\n    loop invariant i >= j - y;\n    loop invariant j >= i - x - (flag ? 1 : 0);\n    loop invariant !flag ==> j == i + y - x;\n    loop invariant flag ==> j == i + y - x + 1;\n    loop invariant (i==0 && j==0) ==> (x==0 && y==0);\n*/\n```\n\nExplanation of loop invariants:\n- The first loop invariant is true before the loop execution, in every iteration of the loop, and after the loop termination, since all the variables x, y, i, and j are incremented by non-negative values.\n- The second loop invariant is true in every iteration of the loop, since i is incremented by x, which is non-negative, and j is incremented by y, which is also non-negative. This implies that the difference between j and i is at least equal to the initial value of j, which is 0.\n- The third loop invariant is true in every iteration of the loop, since j is incremented by y, which is non-negative, and i is incremented by x, which is also non-negative. If flag is true, then j is incremented by 1, which is non-negative. This implies that the difference between i and j is at least equal to the initial value of i, which is 0.\n- The fourth loop invariant is true in every iteration of the loop, since if flag is false, then j is incremented by y and decremented by x, which results in j being equal to i + y - x. \n- The fifth loop invariant is true in every iteration of the loop, since if flag is true, then j is incremented by y, decremented by x, and incremented by 1, which results in j being equal to i + y - x + 1.\n- The sixth loop invariant is true after the loop termination, since if the condition (i==0 && j==0) is true, then the values of x and y must also be 0, since they are incremented by 1 in every iteration of the loop."
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant i==x*(x+1)/2;\n    loop invariant j==y*(y+1)/2+x;\n    loop invariant x>=0;\n    loop invariant y>=0;\n    loop invariant i<=j;\n*/",
            "/*@ \n  loop invariant x >= 0;\n  loop invariant y >= 0;\n  loop invariant i == 0;\n  loop invariant j == 0;\n  loop invariant x >= 1;\n  loop invariant y >= 1;\n  loop invariant i >= (x * (x+1))/2;\n  loop invariant j >= (y * (y+1))/2;\n  loop invariant flag ==> j > i;\n  loop invariant j >= i;\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant j >= i;\n    loop invariant i >= 0;\n    loop invariant j >= 0;\n    loop invariant (flag ==> j >= y);\n*/",
            "/*@ \n    loop invariant x >= 0 && y >= 0;\n    loop invariant i <= i + x && j <= j + y + (flag ? 1 : 0);\n    loop invariant !unknown_bool() ==> j>=i;\n*/",
            "/*@ \n    loop invariant i >= 0 && j >= 0 && x >= 0 && y >= 0;\n    loop invariant i >= j - y;\n    loop invariant j >= i - x - (flag ? 1 : 0);\n    loop invariant !flag ==> j == i + y - x;\n    loop invariant flag ==> j == i + y - x + 1;\n    loop invariant (i==0 && j==0) ==> (x==0 && y==0);\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant i==x*(x+1)/2;\n    loop invariant j==y*(y+1)/2+x;\n    loop invariant x>=0;\n    loop invariant y>=0;\n    loop invariant i<=j;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i==x*(x+1)/2 is partially proven to be inductive.\nloop invariant j==y*(y+1)/2+x is established but not preserved.\nloop invariant x>=0 is partially proven to be inductive.\nloop invariant y>=0 is partially proven to be inductive.\nloop invariant i<=j is established but not preserved.\nAssertion j >= i: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  x = 0; y = 0;\n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: i==x*(x+1)/2;\n\nloop invariant i3: x>=0;\nloop invariant i4: y>=0;\n\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n    i+=x;\n    j+=y;\n    if (flag) j+=1;\n  }\n  {;\n//@ assert(j>=i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "/*@ \n  loop invariant x >= 0;\n  loop invariant y >= 0;\n  loop invariant i == 0;\n  loop invariant j == 0;\n  loop invariant x >= 1;\n  loop invariant y >= 1;\n  loop invariant i >= (x * (x+1))/2;\n  loop invariant j >= (y * (y+1))/2;\n  loop invariant flag ==> j > i;\n  loop invariant j >= i;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant i == 0 is partially proven to be inductive.\nloop invariant j == 0 is partially proven to be inductive.\nloop invariant x >= 1 is preserved but not established.\nloop invariant y >= 1 is partially proven to be inductive.\nloop invariant i >= (x * (x+1))/2 is partially proven to be inductive.\nloop invariant j >= (y * (y+1))/2 is partially proven to be inductive.\nloop invariant flag ==> j > i is partially proven to be inductive.\nloop invariant j >= i is partially proven to be inductive.\nAssertion j >= i: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  x = 0; y = 0;\n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\n\n\n\n\nloop invariant i7: i >= (x * (x+1))/2;\nloop invariant i8: j >= (y * (y+1))/2;\n\n\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n    i+=x;\n    j+=y;\n    if (flag) j+=1;\n  }\n  {;\n//@ assert(j>=i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant j >= i;\n    loop invariant i >= 0;\n    loop invariant j >= 0;\n    loop invariant (flag ==> j >= y);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x is partially proven to be inductive.\nloop invariant 0 <= y is partially proven to be inductive.\nloop invariant j >= i is established but not preserved.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant j >= 0 is partially proven to be inductive.\nloop invariant (flag ==> j >= y) is partially proven to be inductive.\nAssertion j >= i: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  x = 0; y = 0;\n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: 0 <= x;\nloop invariant i2: 0 <= y;\n\nloop invariant i4: i >= 0;\nloop invariant i5: j >= 0;\nloop invariant i6: (flag ==> j >= y);\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n    i+=x;\n    j+=y;\n    if (flag) j+=1;\n  }\n  {;\n//@ assert(j>=i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 0 && y >= 0;\n    loop invariant i <= i + x && j <= j + y + (flag ? 1 : 0);\n    loop invariant !unknown_bool() ==> j>=i;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 19: unexpected token ')'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  x = 0; y = 0;\n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: x >= 0 && y >= 0;\nloop invariant i2: i <= i + x && j <= j + y + (flag ? 1 : 0);\n\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n    i+=x;\n    j+=y;\n    if (flag) j+=1;\n  }\n  {;\n//@ assert(j>=i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant i >= 0 && j >= 0 && x >= 0 && y >= 0;\n    loop invariant i >= j - y;\n    loop invariant j >= i - x - (flag ? 1 : 0);\n    loop invariant !flag ==> j == i + y - x;\n    loop invariant flag ==> j == i + y - x + 1;\n    loop invariant (i==0 && j==0) ==> (x==0 && y==0);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 0 && j >= 0 && x >= 0 && y >= 0 is partially proven to be inductive.\nloop invariant i >= j - y is established but not preserved.\nloop invariant j >= i - x - (flag ? 1 : 0) is established but not preserved.\nloop invariant !flag ==> j == i + y - x is established but not preserved.\nloop invariant flag ==> j == i + y - x + 1 is neither established nor preserved.\nloop invariant (i==0 && j==0) ==> (x==0 && y==0) is partially proven to be inductive.\nAssertion j >= i: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  x = 0; y = 0;\n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: i >= 0 && j >= 0 && x >= 0 && y >= 0;\n\n\n\n\nloop invariant i6: (i==0 && j==0) ==> (x==0 && y==0);\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n    i+=x;\n    j+=y;\n    if (flag) j+=1;\n  }\n  {;\n//@ assert(j>=i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 39: unexpected token ')'",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  x = 0; y = 0;\n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: i==x*(x+1)/2;\nloop invariant i2: j==y*(y+1)/2+x;\nloop invariant i3: x>=0;\nloop invariant i4: y>=0;\nloop invariant i5: i<=j;\nloop invariant i6: x >= 0;\nloop invariant i7: y >= 0;\nloop invariant i8: i == 0;\nloop invariant i9: j == 0;\nloop invariant i10: x >= 1;\nloop invariant i11: y >= 1;\nloop invariant i12: i >= (x * (x+1))/2;\nloop invariant i13: j >= (y * (y+1))/2;\nloop invariant i14: flag ==> j > i;\nloop invariant i15: j >= i;\nloop invariant i16: 0 <= x;\nloop invariant i17: 0 <= y;\nloop invariant i18: i >= 0;\nloop invariant i19: j >= 0;\nloop invariant i20: (flag ==> j >= y);\nloop invariant i21: x >= 0 && y >= 0;\nloop invariant i22: i <= i + x && j <= j + y + (flag ? 1 : 0);\nloop invariant i23: !unknown_bool() ==> j>=i;\nloop invariant i24: i >= 0 && j >= 0 && x >= 0 && y >= 0;\nloop invariant i25: i >= j - y;\nloop invariant i26: j >= i - x - (flag ? 1 : 0);\nloop invariant i27: !flag ==> j == i + y - x;\nloop invariant i28: flag ==> j == i + y - x + 1;\nloop invariant i29: (i==0 && j==0) ==> (x==0 && y==0);\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n    i+=x;\n    j+=y;\n    if (flag) j+=1;\n  }\n  {;\n//@ assert(j>=i);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 11,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  x = 0; y = 0;\n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: i==x*(x+1)/2;\n\nloop invariant i3: x>=0;\nloop invariant i4: y>=0;\n\nloop invariant i6: x >= 0;\nloop invariant i7: y >= 0;\n\n\n\n\nloop invariant i12: i >= (x * (x+1))/2;\nloop invariant i13: j >= (y * (y+1))/2;\n\n\nloop invariant i16: 0 <= x;\nloop invariant i17: 0 <= y;\nloop invariant i18: i >= 0;\nloop invariant i19: j >= 0;\nloop invariant i20: (flag ==> j >= y);\nloop invariant i21: x >= 0 && y >= 0;\nloop invariant i22: i <= i + x && j <= j + y + (flag ? 1 : 0);\n\nloop invariant i24: i >= 0 && j >= 0 && x >= 0 && y >= 0;\n\n\n\n\nloop invariant i29: (i==0 && j==0) ==> (x==0 && y==0);\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n    i+=x;\n    j+=y;\n    if (flag) j+=1;\n  }\n  {;\n//@ assert(j>=i);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/const.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq1.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq2.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/afnp2014.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/css2003.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007b.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gsv2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/hhk2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_2.c",
            "../data/benchmarks/sv-benchmarks/loop-new/gauss_sum.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark02_linear.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../data/benchmarks/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/even.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/mod4.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/odd.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/id_trans.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/bhmr2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/ddlm2013.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gcnr2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gr2006.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_k.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_nondet.c",
            "../data/benchmarks/sv-benchmarks/loop-new/half.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark03_linear.c"
        ],
        "skipped": [],
        "total": 310,
        "success_count": 148,
        "failure_count": 162,
        "success_rate": 0.4774193548387097
    }
}