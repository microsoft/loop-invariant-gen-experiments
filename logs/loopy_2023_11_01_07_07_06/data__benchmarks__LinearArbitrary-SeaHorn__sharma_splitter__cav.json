{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       while (flag < 1) {\n               if (x<=50)\n                       y=y+1;\n               else\n                       y=y-1;\n               \n               if (y<0) {\n                       flag=1;\n               }\n               if (flag < 1) {\n                       x=x+1;\n               }\n       }\n\n\t{;\n//@ assert(x<=102);\n}\n\n\t{;\n//@ assert(y<=51);\n}\n\n\treturn 0;\n}",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       while (flag < 1) {\n               if (x<=50)\n                       y=y+1;\n               else\n                       y=y-1;\n               \n               if (y<0) {\n                       flag=1;\n               }\n               if (flag < 1) {\n                       x=x+1;\n               }\n       }\n\n\t{;\n//@ assert(x<=102);\n}\n\n\t{;\n//@ assert(y<=51);\n}\n\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions and variable assignments:\n- The program defines a macro assume that takes a boolean expression e and returns 0 if e is false.\n- The main function defines three integer variables x, y, and flag and initializes them to 0.\n\nLoop condition:\n- The loop continues until flag is greater than or equal to 1.\n\nLoop invariants:\n- Before the loop: x == 0 && y == 0 && flag == 0\n- In every iteration:\n    - x >= 0 && x <= 102\n    - y >= 0 && y <= 51\n    - flag >= 0 && flag <= 1\n    - If x <= 50, then y >= 1\n    - If x > 50, then y <= 51\n    - If y < 0, then flag == 1\n    - If flag == 0, then x' == x + 1, where x' is the new value of x after the iteration.\n- After the loop: y <= 51\n\nExplanation:\n- Before the loop: This invariant specifies the initial values of x, y, and flag.\n- In every iteration:\n    - x >= 0 && x <= 102: x is always non-negative and less than or equal to 102.\n    - y >= 0 && y <= 51: y is always non-negative and less than or equal to 51.\n    - flag >= 0 && flag <= 1: flag is always either 0 or 1.\n    - If x <= 50, then y >= 1: This specifies that if x is less than or equal to 50, then y is always greater than or equal to 1.\n    - If x > 50, then y <= 51: This specifies that if x is greater than 50, then y is always less than or equal to 51.\n    - If y < 0, then flag == 1: This specifies that if y becomes negative, then flag must be set to 1.\n    - If flag == 0, then x' == x + 1: This specifies that if flag is 0, then x is incremented by 1 in every iteration.\n- After the loop: This invariant specifies that after the loop, y is always less than or equal to 51.\n\nNote: As there are no non-deterministic variables in the program, we do not need to use any implications to make the invariants trivially true.",
            "Pre-conditions and variable assignments:\n- The program defines a macro `assume` which takes a boolean expression as input. If the boolean expression is false, the macro immediately returns 0.\n- The main function defines three integer variables `x`, `y`, and `flag`, and initializes them to 0.\n\nLoop condition:\n- The loop executes while `flag < 1`.\n\nLoop invariants:\n- Before the loop execution: \n    - `x >= 0` (since `x` is initialized to 0)\n    - `y >= 0` (since `y` is initialized to 0)\n    - `flag == 0` (since `flag` is initialized to 0)\n- In every iteration of the loop:\n    - `x >= 0` (since `x` is not modified inside the loop)\n    - `y >= 0` (since `y` is not modified inside the loop)\n    - `flag >= 0` (since `flag` is not modified inside the loop)\n    - `(x <= 50) ==> (y > 0)` (since `y` is incremented only when `x <= 50`)\n    - `(x > 50) ==> (y >= 0)` (since `y` is decremented only when `x > 50`)\n    - `(y < 0) ==> (flag == 1)` (since `flag` is set to 1 only when `y < 0`)\n- After the loop termination:\n    - `(flag == 1) ==> (y < 0)` (since the loop terminates only when `flag` becomes 1 and `y` is checked for being less than 0)\n    - `(flag == 0) ==> (x == 51)` (since `x` is incremented until `flag` becomes 1 and the loop terminates)\n    - `x <= 102` (since `x` is incremented by 1 in each iteration of the loop and its maximum value is 102 when `flag` becomes 1)\n    - `y <= 51` (since `y` is incremented or decremented by 1 in each iteration of the loop and its maximum value is 51 when `x` becomes 100 and `y` is decremented to -1)\n\nPutting it all together, the loop invariants are:\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant flag == 0;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant flag >= 0;\n    loop invariant (x <= 50) ==> (y > 0);\n    loop invariant (x > 50) ==> (y >= 0);\n    loop invariant (y < 0) ==> (flag == 1);\n    loop invariant (flag == 1) ==> (y < 0);\n    loop invariant (flag == 0) ==> (x == 51);\n    loop invariant x <= 102;\n    loop invariant y <= 51;\n*/\n```",
            "Pre-conditions:\n- None\n\nVariable Assignments:\n- x = 0\n- y = 0\n- flag = 0\n\nLoop Condition:\n- flag < 1\n\nLoop Invariants:\n- Before loop execution:\n    - x >= 0\n    - y >= 0\n    - flag == 0\n- In every iteration of the loop:\n    - flag < 1 ==> (x <= 51 && y <= 51)\n- After loop termination:\n    - x <= 102\n    - y <= 51\n\nExplanation:\n- Before loop execution:\n    - We know that x, y, and flag are initialized to 0. Therefore, x and y are greater than or equal to 0, and flag is equal to 0.\n- In every iteration of the loop:\n    - We need to ensure that x and y don't exceed their maximum limit. The maximum value of x is 102, which is reached when the flag is equal to 1 and x is incremented 52 times. The maximum value of y is 51, which is reached when x is less than or equal to 50, and y is incremented 51 times. Therefore, we can write the conjunction (x <= 51 && y <= 51) under the implication flag < 1.\n- After loop termination:\n    - We need to ensure that x is less than or equal to 102 and y is less than or equal to 51. Since the loop terminates when flag is equal to 1, we know that x is less than or equal to 102. We also know that y is less than or equal to 51 because y is decremented only when it is greater than or equal to 0. Therefore, we can write the conjunctions x <= 102 and y <= 51.",
            "Pre-conditions:\n- None\n\nVariable assignments:\n- x = 0\n- y = 0\n- flag = 0\n\nLoop condition:\n- flag < 1\n\nLoop invariants:\n- Before the loop execution:\n    - x >= 0\n    - y >= 0\n    - flag == 0\n- In every iteration of the loop:\n    - x >= 0\n    - y >= 0\n    - flag >= 0\n    - flag <= 1\n    - (x <= 50 ==> y >= 1) && (x > 50 ==> y >= -1)\n    - (x <= 50 ==> y <= x+1) && (x > 50 ==> y <= 101-x)\n- After the loop termination:\n    - x >= 0\n    - y >= -1\n    - flag == 1 ==> y < 0\n    - flag == 0 ==> x <= 102\n\nExplanation:\n- Before the loop execution, x, y, and flag are assigned values. We know that they are non-negative integers and flag is 0.\n- In every iteration of the loop, x, y, and flag are non-negative integers. flag can only be 0 or 1 since it is incremented by 1 in each iteration. We also know that if x is less than or equal to 50, then y is incremented by 1, otherwise, y is decremented by 1. So, we have two conjunctions for y based on the value of x. Additionally, we know that y is at most x+1 if x is less than or equal to 50, otherwise, y is at most 101-x.\n- After the loop termination, x and y are still non-negative integers. If flag is 1, then y must be less than 0. If flag is 0, then x must be less than or equal to 102. We do not need to add any constraints on flag since it is not used after the loop.",
            "Pre-conditions and variable assignments:\n- x, y, and flag are initialized to 0.\n\nLoop condition:\n- flag < 1\n\nLoop invariants:\n- x >= 0\n- y >= 0\n- x <= 102 ==> y <= 51\n- x <= 50 ==> y >= 1\n- x > 50 ==> y <= 1\n- y < 0 ==> flag == 1\n- flag == 0 ==> x <= 102\n\nExplanation of loop invariants:\n- x >= 0 and y >= 0 are trivially true because x and y are initialized to 0.\n- x <= 102 ==> y <= 51 is derived from the assertion at the end of the program, which states that x must be less than or equal to 102. Therefore, if x is less than or equal to 102, y must be less than or equal to 51.\n- x <= 50 ==> y >= 1 and x > 50 ==> y <= 1 are derived from the loop body. If x is less than or equal to 50, y is incremented by 1. If x is greater than 50, y is decremented by 1. Therefore, if x is less than or equal to 50, y must be greater than or equal to 1. If x is greater than 50, y must be less than or equal to 1.\n- y < 0 ==> flag == 1 is derived from the loop body. If y is less than 0, flag is set to 1, and the loop terminates. Therefore, if y is less than 0, flag must be equal to 1.\n- flag == 0 ==> x <= 102 is derived from the loop body. If flag is less than 1, x is incremented by 1. Therefore, if flag is equal to 0, x must be less than or equal to 102.\n\nPutting all the loop invariants together, we get:\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= 102 ==> y <= 51;\n    loop invariant x <= 50 ==> y >= 1;\n    loop invariant x > 50 ==> y <= 1;\n    loop invariant y < 0 ==> flag == 1;\n    loop invariant flag == 0 ==> x <= 102;\n*/\n```"
        ],
        "annotation_blocks": [
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions and variable assignments:\n- The program defines a macro assume that takes a boolean expression e and returns 0 if e is false.\n- The main function defines three integer variables x, y, and flag and initializes them to 0.\n\nLoop condition:\n- The loop continues until flag is greater than or equal to 1.\n\nLoop invariants:\n- Before the loop: x == 0 && y == 0 && flag == 0\n- In every iteration:\n    - x >= 0 && x <= 102\n    - y >= 0 && y <= 51\n    - flag >= 0 && flag <= 1\n    - If x <= 50, then y >= 1\n    - If x > 50, then y <= 51\n    - If y < 0, then flag == 1\n    - If flag == 0, then x' == x + 1, where x' is the new value of x after the iteration.\n- After the loop: y <= 51\n\nExplanation:\n- Before the loop: This invariant specifies the initial values of x, y, and flag.\n- In every iteration:\n    - x >= 0 && x <= 102: x is always non-negative and less than or equal to 102.\n    - y >= 0 && y <= 51: y is always non-negative and less than or equal to 51.\n    - flag >= 0 && flag <= 1: flag is always either 0 or 1.\n    - If x <= 50, then y >= 1: This specifies that if x is less than or equal to 50, then y is always greater than or equal to 1.\n    - If x > 50, then y <= 51: This specifies that if x is greater than 50, then y is always less than or equal to 51.\n    - If y < 0, then flag == 1: This specifies that if y becomes negative, then flag must be set to 1.\n    - If flag == 0, then x' == x + 1: This specifies that if flag is 0, then x is incremented by 1 in every iteration.\n- After the loop: This invariant specifies that after the loop, y is always less than or equal to 51.\n\nNote: As there are no non-deterministic variables in the program, we do not need to use any implications to make the invariants trivially true."
            ],
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant flag == 0;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant flag >= 0;\n    loop invariant (x <= 50) ==> (y > 0);\n    loop invariant (x > 50) ==> (y >= 0);\n    loop invariant (y < 0) ==> (flag == 1);\n    loop invariant (flag == 1) ==> (y < 0);\n    loop invariant (flag == 0) ==> (x == 51);\n    loop invariant x <= 102;\n    loop invariant y <= 51;\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- None\n\nVariable Assignments:\n- x = 0\n- y = 0\n- flag = 0\n\nLoop Condition:\n- flag < 1\n\nLoop Invariants:\n- Before loop execution:\n    - x >= 0\n    - y >= 0\n    - flag == 0\n- In every iteration of the loop:\n    - flag < 1 ==> (x <= 51 && y <= 51)\n- After loop termination:\n    - x <= 102\n    - y <= 51\n\nExplanation:\n- Before loop execution:\n    - We know that x, y, and flag are initialized to 0. Therefore, x and y are greater than or equal to 0, and flag is equal to 0.\n- In every iteration of the loop:\n    - We need to ensure that x and y don't exceed their maximum limit. The maximum value of x is 102, which is reached when the flag is equal to 1 and x is incremented 52 times. The maximum value of y is 51, which is reached when x is less than or equal to 50, and y is incremented 51 times. Therefore, we can write the conjunction (x <= 51 && y <= 51) under the implication flag < 1.\n- After loop termination:\n    - We need to ensure that x is less than or equal to 102 and y is less than or equal to 51. Since the loop terminates when flag is equal to 1, we know that x is less than or equal to 102. We also know that y is less than or equal to 51 because y is decremented only when it is greater than or equal to 0. Therefore, we can write the conjunctions x <= 102 and y <= 51."
            ],
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- None\n\nVariable assignments:\n- x = 0\n- y = 0\n- flag = 0\n\nLoop condition:\n- flag < 1\n\nLoop invariants:\n- Before the loop execution:\n    - x >= 0\n    - y >= 0\n    - flag == 0\n- In every iteration of the loop:\n    - x >= 0\n    - y >= 0\n    - flag >= 0\n    - flag <= 1\n    - (x <= 50 ==> y >= 1) && (x > 50 ==> y >= -1)\n    - (x <= 50 ==> y <= x+1) && (x > 50 ==> y <= 101-x)\n- After the loop termination:\n    - x >= 0\n    - y >= -1\n    - flag == 1 ==> y < 0\n    - flag == 0 ==> x <= 102\n\nExplanation:\n- Before the loop execution, x, y, and flag are assigned values. We know that they are non-negative integers and flag is 0.\n- In every iteration of the loop, x, y, and flag are non-negative integers. flag can only be 0 or 1 since it is incremented by 1 in each iteration. We also know that if x is less than or equal to 50, then y is incremented by 1, otherwise, y is decremented by 1. So, we have two conjunctions for y based on the value of x. Additionally, we know that y is at most x+1 if x is less than or equal to 50, otherwise, y is at most 101-x.\n- After the loop termination, x and y are still non-negative integers. If flag is 1, then y must be less than 0. If flag is 0, then x must be less than or equal to 102. We do not need to add any constraints on flag since it is not used after the loop."
            ],
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= 102 ==> y <= 51;\n    loop invariant x <= 50 ==> y >= 1;\n    loop invariant x > 50 ==> y <= 1;\n    loop invariant y < 0 ==> flag == 1;\n    loop invariant flag == 0 ==> x <= 102;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions and variable assignments:\n- The program defines a macro assume that takes a boolean expression e and returns 0 if e is false.\n- The main function defines three integer variables x, y, and flag and initializes them to 0.\n\nLoop condition:\n- The loop continues until flag is greater than or equal to 1.\n\nLoop invariants:\n- Before the loop: x == 0 && y == 0 && flag == 0\n- In every iteration:\n    - x >= 0 && x <= 102\n    - y >= 0 && y <= 51\n    - flag >= 0 && flag <= 1\n    - If x <= 50, then y >= 1\n    - If x > 50, then y <= 51\n    - If y < 0, then flag == 1\n    - If flag == 0, then x' == x + 1, where x' is the new value of x after the iteration.\n- After the loop: y <= 51\n\nExplanation:\n- Before the loop: This invariant specifies the initial values of x, y, and flag.\n- In every iteration:\n    - x >= 0 && x <= 102: x is always non-negative and less than or equal to 102.\n    - y >= 0 && y <= 51: y is always non-negative and less than or equal to 51.\n    - flag >= 0 && flag <= 1: flag is always either 0 or 1.\n    - If x <= 50, then y >= 1: This specifies that if x is less than or equal to 50, then y is always greater than or equal to 1.\n    - If x > 50, then y <= 51: This specifies that if x is greater than 50, then y is always less than or equal to 51.\n    - If y < 0, then flag == 1: This specifies that if y becomes negative, then flag must be set to 1.\n    - If flag == 0, then x' == x + 1: This specifies that if flag is 0, then x is incremented by 1 in every iteration.\n- After the loop: This invariant specifies that after the loop, y is always less than or equal to 51.\n\nNote: As there are no non-deterministic variables in the program, we do not need to use any implications to make the invariants trivially true.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 7,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant flag == 0;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant flag >= 0;\n    loop invariant (x <= 50) ==> (y > 0);\n    loop invariant (x > 50) ==> (y >= 0);\n    loop invariant (y < 0) ==> (flag == 1);\n    loop invariant (flag == 1) ==> (y < 0);\n    loop invariant (flag == 0) ==> (x == 51);\n    loop invariant x <= 102;\n    loop invariant y <= 51;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant flag == 0 is partially proven to be inductive.\nloop invariant flag >= 0 is partially proven to be inductive.\nloop invariant (x <= 50) ==> (y > 0) is preserved but not established.\nloop invariant (x > 50) ==> (y >= 0) is partially proven to be inductive.\nloop invariant (y < 0) ==> (flag == 1) is partially proven to be inductive.\nloop invariant (flag == 1) ==> (y < 0) is partially proven to be inductive.\nloop invariant (flag == 0) ==> (x == 51) is partially proven to be inductive.\nloop invariant x <= 102 is partially proven to be inductive.\nloop invariant y <= 51 is partially proven to be inductive.\nAssertion x <= 102: Partially proven\nAssertion y <= 51: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\nloop invariant i1: x >= 0;\n\n\nloop invariant i4: flag >= 0;\n\n\nloop invariant i7: (y < 0) ==> (flag == 1);\nloop invariant i8: (flag == 1) ==> (y < 0);\n\n\n\n*/\nwhile (flag < 1) {\n               if (x<=50)\n                       y=y+1;\n               else\n                       y=y-1;\n               \n               if (y<0) {\n                       flag=1;\n               }\n               if (flag < 1) {\n                       x=x+1;\n               }\n       }\n\n\t{;\n//@ assert(x<=102);\n}\n\n\t{;\n//@ assert(y<=51);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- None\n\nVariable Assignments:\n- x = 0\n- y = 0\n- flag = 0\n\nLoop Condition:\n- flag < 1\n\nLoop Invariants:\n- Before loop execution:\n    - x >= 0\n    - y >= 0\n    - flag == 0\n- In every iteration of the loop:\n    - flag < 1 ==> (x <= 51 && y <= 51)\n- After loop termination:\n    - x <= 102\n    - y <= 51\n\nExplanation:\n- Before loop execution:\n    - We know that x, y, and flag are initialized to 0. Therefore, x and y are greater than or equal to 0, and flag is equal to 0.\n- In every iteration of the loop:\n    - We need to ensure that x and y don't exceed their maximum limit. The maximum value of x is 102, which is reached when the flag is equal to 1 and x is incremented 52 times. The maximum value of y is 51, which is reached when x is less than or equal to 50, and y is incremented 51 times. Therefore, we can write the conjunction (x <= 51 && y <= 51) under the implication flag < 1.\n- After loop termination:\n    - We need to ensure that x is less than or equal to 102 and y is less than or equal to 51. Since the loop terminates when flag is equal to 1, we know that x is less than or equal to 102. We also know that y is less than or equal to 51 because y is decremented only when it is greater than or equal to 0. Therefore, we can write the conjunctions x <= 102 and y <= 51.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- None\n\nVariable assignments:\n- x = 0\n- y = 0\n- flag = 0\n\nLoop condition:\n- flag < 1\n\nLoop invariants:\n- Before the loop execution:\n    - x >= 0\n    - y >= 0\n    - flag == 0\n- In every iteration of the loop:\n    - x >= 0\n    - y >= 0\n    - flag >= 0\n    - flag <= 1\n    - (x <= 50 ==> y >= 1) && (x > 50 ==> y >= -1)\n    - (x <= 50 ==> y <= x+1) && (x > 50 ==> y <= 101-x)\n- After the loop termination:\n    - x >= 0\n    - y >= -1\n    - flag == 1 ==> y < 0\n    - flag == 0 ==> x <= 102\n\nExplanation:\n- Before the loop execution, x, y, and flag are assigned values. We know that they are non-negative integers and flag is 0.\n- In every iteration of the loop, x, y, and flag are non-negative integers. flag can only be 0 or 1 since it is incremented by 1 in each iteration. We also know that if x is less than or equal to 50, then y is incremented by 1, otherwise, y is decremented by 1. So, we have two conjunctions for y based on the value of x. Additionally, we know that y is at most x+1 if x is less than or equal to 50, otherwise, y is at most 101-x.\n- After the loop termination, x and y are still non-negative integers. If flag is 1, then y must be less than 0. If flag is 0, then x must be less than or equal to 102. We do not need to add any constraints on flag since it is not used after the loop.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= 102 ==> y <= 51;\n    loop invariant x <= 50 ==> y >= 1;\n    loop invariant x > 50 ==> y <= 1;\n    loop invariant y < 0 ==> flag == 1;\n    loop invariant flag == 0 ==> x <= 102;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant x <= 102 ==> y <= 51 is partially proven to be inductive.\nloop invariant x <= 50 ==> y >= 1 is preserved but not established.\nloop invariant x > 50 ==> y <= 1 is partially proven to be inductive.\nloop invariant y < 0 ==> flag == 1 is partially proven to be inductive.\nloop invariant flag == 0 ==> x <= 102 is partially proven to be inductive.\nAssertion x <= 102: Partially proven\nAssertion y <= 51: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\nloop invariant i1: x >= 0;\n\n\n\n\nloop invariant i6: y < 0 ==> flag == 1;\n\n*/\nwhile (flag < 1) {\n               if (x<=50)\n                       y=y+1;\n               else\n                       y=y-1;\n               \n               if (y<0) {\n                       flag=1;\n               }\n               if (flag < 1) {\n                       x=x+1;\n               }\n       }\n\n\t{;\n//@ assert(x<=102);\n}\n\n\t{;\n//@ assert(y<=51);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant x >= 0 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant flag == 0 is partially proven to be inductive.\nloop invariant flag >= 0 is partially proven to be inductive.\nloop invariant (x <= 50) ==> (y > 0) is preserved but not established.\nloop invariant (x > 50) ==> (y >= 0) is partially proven to be inductive.\nloop invariant (y < 0) ==> (flag == 1) is partially proven to be inductive.\nloop invariant (flag == 1) ==> (y < 0) is partially proven to be inductive.\nloop invariant (flag == 0) ==> (x == 51) is partially proven to be inductive.\nloop invariant x <= 102 is partially proven to be inductive.\nloop invariant y <= 51 is partially proven to be inductive.\nloop invariant x <= 102 ==> y <= 51 is partially proven to be inductive.\nloop invariant x <= 50 ==> y >= 1 is partially proven to be inductive.\nloop invariant x > 50 ==> y <= 1 is partially proven to be inductive.\nloop invariant y < 0 ==> flag == 1 is partially proven to be inductive.\nloop invariant flag == 0 ==> x <= 102 is partially proven to be inductive.\nAssertion x <= 102: Partially proven\nAssertion y <= 51: Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: flag == 0;\nloop invariant i4: flag >= 0;\nloop invariant i5: (x <= 50) ==> (y > 0);\nloop invariant i6: (x > 50) ==> (y >= 0);\nloop invariant i7: (y < 0) ==> (flag == 1);\nloop invariant i8: (flag == 1) ==> (y < 0);\nloop invariant i9: (flag == 0) ==> (x == 51);\nloop invariant i10: x <= 102;\nloop invariant i11: y <= 51;\nloop invariant i12: x <= 102 ==> y <= 51;\nloop invariant i13: x <= 50 ==> y >= 1;\nloop invariant i14: x > 50 ==> y <= 1;\nloop invariant i15: y < 0 ==> flag == 1;\nloop invariant i16: flag == 0 ==> x <= 102;\n*/\nwhile (flag < 1) {\n               if (x<=50)\n                       y=y+1;\n               else\n                       y=y-1;\n               \n               if (y<0) {\n                       flag=1;\n               }\n               if (flag < 1) {\n                       x=x+1;\n               }\n       }\n\n\t{;\n//@ assert(x<=102);\n}\n\n\t{;\n//@ assert(y<=51);\n}\n\n\treturn 0;\n}",
        "combined_annotation_num_solver_calls": 8,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\nloop invariant i1: x >= 0;\n\n\nloop invariant i4: flag >= 0;\n\n\nloop invariant i7: (y < 0) ==> (flag == 1);\nloop invariant i8: (flag == 1) ==> (y < 0);\n\n\n\n\n\n\nloop invariant i15: y < 0 ==> flag == 1;\n\n*/\nwhile (flag < 1) {\n               if (x<=50)\n                       y=y+1;\n               else\n                       y=y-1;\n               \n               if (y<0) {\n                       flag=1;\n               }\n               if (flag < 1) {\n                       x=x+1;\n               }\n       }\n\n\t{;\n//@ assert(x<=102);\n}\n\n\t{;\n//@ assert(y<=51);\n}\n\n\treturn 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c"
        ],
        "skipped": [],
        "total": 223,
        "success_count": 104,
        "failure_count": 119,
        "success_rate": 0.4663677130044843
    }
}