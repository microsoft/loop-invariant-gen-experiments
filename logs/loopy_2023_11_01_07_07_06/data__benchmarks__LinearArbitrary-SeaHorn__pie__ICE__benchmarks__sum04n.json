{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  for(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}\n",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  for(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}\n\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- The macro `assume(e)` is defined as a conditional return statement. It takes a boolean expression as its argument and returns 0 if the expression is false.\n- The external function `unknown_int()` returns an integer value.\n- The constant `a` is defined as 1.\n\nVariable assignments:\n- `i` is an integer variable initialized to 1.\n- `sn` is an integer variable initialized to 0.\n- `SIZE` is an integer variable initialized to the value returned by `unknown_int()`.\n\nLoop condition:\n- The loop iterates as long as `i` is less than or equal to `SIZE`.\n\nLoop body:\n- The loop adds the value of `a` to the variable `sn`.\n\nPost-condition:\n- The assertion at the end of the program checks if `sn` is equal to `SIZE*a` or if `sn` is equal to 0.\n\nLoop Invariants:\n- Before the loop execution, `sn` is equal to 0.\n```\n/*@ \n    loop invariant sn == 0;\n*/\n```\n- In every iteration of the loop, `sn` is equal to `a` multiplied by the number of iterations so far.\n```\n/*@ \n    loop invariant 1 <= i <= SIZE+1 ==> sn == (i-1)*a;\n*/\n```\n- After the loop termination, `sn` is equal to `SIZE*a` or `0`.\n```\n/*@ \n    loop invariant i == SIZE+1 ==> (sn == SIZE*a || sn == 0);\n*/\n```\nNote that we use implication to take care of the conditional nature of the loop invariants. \n\nAlso, since `a` is a constant and `i` is incremented by 1 in each iteration of the loop, we can use the relation between `i` and `sn` to derive the loop invariant in the second bullet point.",
            "Pre-conditions: None\n\nVariable assignments: \n- `i` is assigned the value 1\n- `sn` is assigned the value 0\n\nLoop condition: `i <= SIZE`\n\nPost-condition: `sn==SIZE*a || sn == 0`\n\nBefore loop execution:\n- `sn` is equal to 0\n\nIn every iteration of the loop:\n- `1 <= i <= SIZE+1`\n- `sn = (i-1)*a`\n\nAfter loop termination:\n- `sn == SIZE*a || sn == 0`\n\nLoop invariants:\n```\n/*@\nloop invariant 1 <= i <= SIZE+1;\nloop invariant sn == (i-1)*a;\nloop invariant sn <= SIZE*a;\nloop invariant sn >= 0;\n*/\n```",
            "Pre-conditions:\n- The macro `assume(e)` takes a boolean expression `e` and returns 0 if `e` is false. This is used to specify assumptions about the program inputs.\n- The external function `unknown_int()` returns an integer whose value is not known at compile-time.\n- The macro `a` is defined as 1.\n\nVariable assignments:\n- `i` is an integer initialized to 0.\n- `sn` is an integer initialized to 0.\n- `SIZE` is an integer initialized to the return value of the function `unknown_int()`.\n\nLoop condition:\n- The loop executes as long as `i` is less than or equal to `SIZE`.\n\nLoop body:\n- The loop body adds `a` to `sn` and increments `i`.\n\nPost-condition:\n- `sn` is either equal to `SIZE*a` or equal to 0.\n\nLoop invariants:\n- `i` is always greater than or equal to 1.\n- `i` is always less than or equal to `SIZE+1`.\n- `sn` is always greater than or equal to 0.\n- `sn` is always less than or equal to `i*a`.\n- If `i <= SIZE`, then `sn` is equal to `(i-1)*a`.\n- If `i > SIZE`, then `sn` is equal to `SIZE*a`.\n- If `SIZE <= 0`, then `sn` is equal to 0.\n\nAll these loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination. These loop invariants imply the post-condition. \n\nOutput the loop invariants for the loop in the program above:\n```\n/*@ \n    loop invariant 1 <= i <= SIZE+1;\n    loop invariant 0 <= sn <= i*a;\n    loop invariant (i <= SIZE ==> sn == (i-1)*a) && (i > SIZE ==> sn == SIZE*a);\n    loop invariant SIZE <= 0 ==> sn == 0;\n*/\n```",
            "Pre-conditions and variable assignments:\n- The macro `assume(e)` takes an expression `e` and returns 0 if `e` is false.\n- The macro `a` is defined as 1.\n- The variable `i` is an integer.\n- The variable `sn` is an integer initialized to 0.\n- The variable `SIZE` is an integer whose value is non-deterministic.\n\nLoop condition:\n- The loop iterates while `i` is less than or equal to `SIZE`.\n\nLoop invariants:\n- `1 <= i <= SIZE + 1` (before the loop execution): This holds because `i` is initialized to 1 and is incremented by 1 in each iteration of the loop, until it becomes equal to `SIZE + 1`, at which point the loop terminates.\n- `0 <= sn <= i - 1` (before the loop execution): This holds because `sn` is initialized to 0 and is incremented by `a` in each iteration of the loop, which means that its maximum value is `(SIZE + 1) * a - 1` and its minimum value is 0.\n- `sn == (i - 1) * a` (in every iteration of the loop): This holds because `sn` is incremented by `a` in each iteration of the loop, which means that its value is `(i - 1) * a` at the end of each iteration.\n- `i <= SIZE + 1 ==> sn == (i - 1) * a` (after the loop termination): This holds because the loop terminates when `i` becomes equal to `SIZE + 1`, and at that point, `sn` is equal to `(SIZE + 1 - 1) * a = SIZE * a`, which implies that `sn == SIZE * a` when `i <= SIZE + 1`. Therefore, `i <= SIZE + 1 ==> sn == (i - 1) * a` is a valid implication that holds after the loop termination.\n- `i > SIZE + 1 ==> sn == SIZE * a` (after the loop termination): This holds because if `i > SIZE + 1`, then the loop has not executed at all, which means that `sn` is still equal to its initial value of 0, which implies that `sn == SIZE * a` when `i > SIZE + 1`. Therefore, `i > SIZE + 1 ==> sn == SIZE * a` is a valid implication that holds after the loop termination.\n\nPutting all the loop invariants together:\n```\n/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant 0 <= sn <= i - 1;\n    loop invariant sn == (i - 1) * a;\n    loop invariant i <= SIZE + 1 ==> sn == (i - 1) * a;\n    loop invariant i > SIZE + 1 ==> sn == SIZE * a;\n*/\n```",
            "Pre-conditions or variable assignments:\n- `a` is defined as 1 using a macro definition.\n- `sn` is initialized to 0.\n- `SIZE` is a non-deterministic integer value obtained from the `unknown_int()` function.\n\nLoop condition:\n- The loop runs from `i=1` to `i<=SIZE`.\n\nPost-condition:\n- The sum `sn` is equal to either `SIZE*a` or `0`.\n\nLoop invariants:\n- Before the loop execution, `sn` is equal to 0. \n```\n/*@ \n    loop invariant sn == 0;\n*/\n```\n- In every iteration of the loop, `sn` is equal to the sum of `a` from `1` to `i-1`. \n```\n/*@ \n    loop invariant sn == (\\sum int j = 1; j <= i-1; j++) a;\n*/\n```\n- After the loop termination, `sn` is equal to the sum of `a` from `1` to `SIZE`. \n```\n/*@ \n    loop invariant i <= SIZE ==> sn == (\\sum int j = 1; j <= i-1; j++) a;\n    loop invariant i > SIZE ==> sn == (\\sum int j = 1; j <= SIZE; j++) a;\n*/\n```\n- Since `a` is always positive, the sum of `a` from `1` to `SIZE` is always greater than or equal to `SIZE*a`. Therefore, we can add this as an implication to the post-condition:\n```\n{;\n    //@ assert sn==SIZE*a || sn == 0;\n    //@ assert sn>=SIZE*a ==> sn==SIZE*a;\n}\n``` \nPutting it all together:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  for(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n    //@ assert sn==SIZE*a || sn == 0;\n    //@ assert sn>=SIZE*a ==> sn==SIZE*a;\n  }\n  return 0;\n}\n/*@ \n    loop invariant sn == 0;\n    loop invariant sn == (\\sum int j = 1; j <= i-1; j++) a;\n    loop invariant i <= SIZE ==> sn == (\\sum int j = 1; j <= i-1; j++) a;\n    loop invariant i > SIZE ==> sn == (\\sum int j = 1; j <= SIZE; j++) a;\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant sn == 0;\n*/",
            "/*@\nloop invariant 1 <= i <= SIZE+1;\nloop invariant sn == (i-1)*a;\nloop invariant sn <= SIZE*a;\nloop invariant sn >= 0;\n*/",
            "/*@ \n    loop invariant 1 <= i <= SIZE+1;\n    loop invariant 0 <= sn <= i*a;\n    loop invariant (i <= SIZE ==> sn == (i-1)*a) && (i > SIZE ==> sn == SIZE*a);\n    loop invariant SIZE <= 0 ==> sn == 0;\n*/",
            "/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant 0 <= sn <= i - 1;\n    loop invariant sn == (i - 1) * a;\n    loop invariant i <= SIZE + 1 ==> sn == (i - 1) * a;\n    loop invariant i > SIZE + 1 ==> sn == SIZE * a;\n*/",
            "/*@ \n    loop invariant sn == 0;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant sn == 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant sn == 0 is established but not preserved.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@\nloop invariant 1 <= i <= SIZE+1;\nloop invariant sn == (i-1)*a;\nloop invariant sn <= SIZE*a;\nloop invariant sn >= 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= SIZE+1 is preserved but not established.\nloop invariant sn == (i-1)*a is partially proven to be inductive.\nloop invariant sn <= SIZE*a is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\nloop invariant i2: sn == (i-1)*a;\n\nloop invariant i4: sn >= 0;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "/*@ \n    loop invariant 1 <= i <= SIZE+1;\n    loop invariant 0 <= sn <= i*a;\n    loop invariant (i <= SIZE ==> sn == (i-1)*a) && (i > SIZE ==> sn == SIZE*a);\n    loop invariant SIZE <= 0 ==> sn == 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= SIZE+1 is preserved but not established.\nloop invariant 0 <= sn <= i*a is partially proven to be inductive.\nloop invariant (i <= SIZE ==> sn == (i-1)*a) && (i > SIZE ==> sn == SIZE*a) is partially proven to be inductive.\nloop invariant SIZE <= 0 ==> sn == 0 is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\nloop invariant i2: 0 <= sn <= i*a;\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant 0 <= sn <= i - 1;\n    loop invariant sn == (i - 1) * a;\n    loop invariant i <= SIZE + 1 ==> sn == (i - 1) * a;\n    loop invariant i > SIZE + 1 ==> sn == SIZE * a;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= SIZE + 1 is preserved but not established.\nloop invariant 0 <= sn <= i - 1 is partially proven to be inductive.\nloop invariant sn == (i - 1) * a is partially proven to be inductive.\nloop invariant i <= SIZE + 1 ==> sn == (i - 1) * a is partially proven to be inductive.\nloop invariant i > SIZE + 1 ==> sn == SIZE * a is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\nloop invariant i2: 0 <= sn <= i - 1;\nloop invariant i3: sn == (i - 1) * a;\nloop invariant i4: i <= SIZE + 1 ==> sn == (i - 1) * a;\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant sn == 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant sn == 0 is established but not preserved.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant sn == 0 is established but not preserved.\nloop invariant 1 <= i <= SIZE+1 is preserved but not established.\nloop invariant sn == (i-1)*a is partially proven to be inductive.\nloop invariant sn <= SIZE*a is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant 0 <= sn <= i*a is partially proven to be inductive.\nloop invariant (i <= SIZE ==> sn == (i-1)*a) && (i > SIZE ==> sn == SIZE*a) is partially proven to be inductive.\nloop invariant SIZE <= 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant 1 <= i <= SIZE + 1 is partially proven to be inductive.\nloop invariant 0 <= sn <= i - 1 is partially proven to be inductive.\nloop invariant sn == (i - 1) * a is partially proven to be inductive.\nloop invariant i <= SIZE + 1 ==> sn == (i - 1) * a is partially proven to be inductive.\nloop invariant i > SIZE + 1 ==> sn == SIZE * a is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\nloop invariant i1: sn == 0;\nloop invariant i2: 1 <= i <= SIZE+1;\nloop invariant i3: sn == (i-1)*a;\nloop invariant i4: sn <= SIZE*a;\nloop invariant i5: sn >= 0;\nloop invariant i6: 0 <= sn <= i*a;\nloop invariant i7: (i <= SIZE ==> sn == (i-1)*a) && (i > SIZE ==> sn == SIZE*a);\nloop invariant i8: SIZE <= 0 ==> sn == 0;\nloop invariant i9: 1 <= i <= SIZE + 1;\nloop invariant i10: 0 <= sn <= i - 1;\nloop invariant i11: sn == (i - 1) * a;\nloop invariant i12: i <= SIZE + 1 ==> sn == (i - 1) * a;\nloop invariant i13: i > SIZE + 1 ==> sn == SIZE * a;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}\n",
        "combined_annotation_num_solver_calls": 7,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  /*@\n\n\nloop invariant i3: sn == (i-1)*a;\n\nloop invariant i5: sn >= 0;\nloop invariant i6: 0 <= sn <= i*a;\n\nloop invariant i8: SIZE <= 0 ==> sn == 0;\n\nloop invariant i10: 0 <= sn <= i - 1;\nloop invariant i11: sn == (i - 1) * a;\nloop invariant i12: i <= SIZE + 1 ==> sn == (i - 1) * a;\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c"
        ],
        "skipped": [],
        "total": 214,
        "success_count": 99,
        "failure_count": 115,
        "success_rate": 0.46261682242990654
    }
}