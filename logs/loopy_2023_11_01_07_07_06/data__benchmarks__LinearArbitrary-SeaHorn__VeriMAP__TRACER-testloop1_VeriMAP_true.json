{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
        "benchmark_code": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  x=0;\n  i=0;\n\n  if (NONDET > 0) a=1; else a=2;\n\n  while (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >0 ));\n}\n\nreturn;\n\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  x=0;\n  i=0;\n\n  if (NONDET > 0) a=1; else a=2;\n\n  while (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >0 ));\n}\n\nreturn;\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- None.\n\nVariable Assignments:\n- `int NONDET;`: A non-deterministic integer variable.\n- `int i, N;`: Integer variables initialized to 0 and garbage value respectively.\n- `int a;`: An integer variable whose value is assigned based on the value of `NONDET`.\n- `int x;`: An integer variable initialized to 0.\n\nLoop Condition:\n- `i < N`\n\nLoop Invariants:\n- `i >= 0`\n- `i <= N`\n- `(NONDET > 0 && a == 1) ==> x == 0`\n- `(NONDET <= 0 || a == 2) ==> x == 0`\n- `(i == N) ==> !(x > 0)`\n\nExplanation:\n- `i >= 0`: `i` should always be greater than or equal to 0.\n- `i <= N`: `i` should always be less than or equal to `N`.\n- `(NONDET > 0 && a == 1) ==> x == 0`: If `NONDET` is greater than 0 and `a` is assigned 1, then `x` should always be 0.\n- `(NONDET <= 0 || a == 2) ==> x == 0`: If `NONDET` is less than or equal to 0 or `a` is assigned 2, then `x` should always be 0.\n- `(i == N) ==> !(x > 0)`: When the loop terminates, if `i` is equal to `N`, then `x` should not be greater than 0.",
            "Pre-conditions:\n- None\n\nVariable Assignments:\n- `int NONDET;` - An integer variable that is non-deterministic and can have any value.\n- `int i,N;` - Two integer variables.\n- `int a;` - An integer variable.\n- `int x;` - An integer variable.\n\nLoop Condition:\n- `while (i<N)`\n\nLoop Invariants:\n- `i >= 0`\n- `i <= N`\n- `a == 1 || a == 2`\n- `x == 0`\n- `!(i < N) ==> !(x > 0)`\n\nExplanation:\n- Since `i` is being incremented by 1 in every iteration, it will always be greater than or equal to 0.\n- Since the loop condition is `i < N`, `i` will be less than `N` at the end of each iteration. Hence, `i` will always be less than or equal to `N`.\n- The value of `a` is assigned based on the value of `NONDET`. Since `NONDET` can be any value, `a` can be either 1 or 2.\n- The value of `x` is assigned to 0 before the loop starts and is not modified inside the loop. Hence, `x` will always be equal to 0.\n- The assertion is guarded by no condition. Hence, it should be true after the loop terminates. If `i` is not less than `N` at the end of the loop, it implies that the loop has executed `N` times. Hence, if `i` is not less than `N`, then `x` must not be greater than 0.",
            "Pre-conditions:\n- None\n\nVariable assignments:\n- `NONDET` is assigned a non-deterministic value\n- `i` is assigned 0\n- `x` is assigned 0\n- `a` is assigned either 1 or 2 based on the value of `NONDET`\n\nLoop condition:\n- `i<N`\n\nLoop Invariants:\n- `0 <= i <= N`: `i` is always greater than or equal to 0 and less than or equal to `N`.\n- `(NONDET > 0 ==> a == 1) && (NONDET <= 0 ==> a == 2)`: `a` is either 1 or 2 based on the value of `NONDET`.\n- `x == 0`: `x` is always equal to 0 before the loop execution.\n- `i <= N`: `i` is always less than or equal to `N` in every iteration of the loop.\n- `0 <= i`: `i` is always greater than or equal to 0 in every iteration of the loop.\n- `(!(x > 0)) ==> (i == N)`: if `x` is not greater than 0, then `i` is equal to `N` after the loop termination.\n\nPutting all the loop invariants together:\n\n```\n/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant (NONDET > 0 ==> a == 1) && (NONDET <= 0 ==> a == 2);\n    loop invariant x == 0;\n    loop invariant i <= N;\n    loop invariant 0 <= i;\n    loop invariant (!(x > 0)) ==> (i == N);\n*/\n```\n\nNote: We are assuming that `N` is a positive integer, but this assumption is not mentioned in the program. If `N` can be non-positive, then we need to add a loop invariant `N <= 0 ==> i == 0` to ensure that `i` is 0 when `N` is non-positive.",
            "We start by analyzing the program and making note of the pre-conditions and variable assignments:\n\n- `NONDET` is an integer variable that is non-deterministically assigned a value.\n- `i` and `N` are integer variables that are not initialized.\n- `a` is an integer variable that is assigned the value `1` if `NONDET > 0` and `2` otherwise.\n- `x` is an integer variable that is initialized to `0`.\n\nNext, we analyze the loop body and make note of the loop condition:\n\n- The loop condition is `i<N`, which means the loop will execute `N-i` times.\n\nNow, we need to find loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition `!(x>0)`. \n\nLet's start with the loop invariants that are true before the loop execution:\n\n- `x == 0`: This is true because `x` is initialized to `0` before the loop starts.\n- `i >= 0`: This is true because `i` is not initialized and could have a garbage value, which could be negative. We need to ensure that `i` is non-negative before the loop starts.\n\nNow, we move on to the loop invariants that are true in every iteration of the loop:\n\n- `i <= N`: This is true because the loop condition is `i<N`, which means that `i` is less than `N` at the start of each iteration.\n- `i >= 0`: This is true because `i` is incremented by `1` in each iteration and it starts at a non-negative value.\n- `x == 0`: This is true because `x` is not modified inside the loop.\n\nFinally, we need to find loop invariants that are true after the loop termination:\n\n- `i >= N`: This is true because the loop terminates when `i>=N`.\n- `x == 0`: This is true because `x` is not modified inside the loop.\n\nPutting it all together, we get the following loop invariants:\n\n```\n/*@\nloop invariant x == 0;\nloop invariant i >= 0 && i <= N;\nloop invariant i >= 0;\nloop invariant i >= N ==> !(x > 0);\nloop invariant x == 0;\n*/\n```\nNote that we used the implication `i >= N ==> !(x > 0)` to take care of the fact that the assertion is guarded by a condition (`i >= N`). We also used the implication `i >= N ==> !(x > 0)` to make the invariant trivially true at the end of the loop, since `i >= N` must hold at that point. Finally, we added the conjunction `i >= 0` to the loop invariant that is true in every iteration of the loop to ensure that `i` is non-negative at all times.",
            "Pre-conditions:\n- None.\n\nVariable assignments:\n- `int NONDET;`: A non-deterministic integer variable.\n- `int i, N;`: Integer variables initialized to 0.\n- `int a;`: An integer variable assigned to either 1 or 2 based on the value of `NONDET`.\n- `int x;`: An integer variable initialized to 0.\n\nLoop condition:\n- `i < N`\n\nLoop invariants:\n- `i >= 0`: `i` is always greater than or equal to 0.\n- `i <= N`: `i` is always less than or equal to `N`.\n- `a == 1 || a == 2`: `a` is always either 1 or 2.\n- `x >= 0`: `x` is always greater than or equal to 0.\n- `x <= 0`: `x` is always less than or equal to 0.\n- `i == N ==> x == 0`: If `i` equals `N`, then `x` equals 0.\n- `!(x > 0) ==> i >= N`: If `x` is not greater than 0, then `i` is greater than or equal to `N`.\n- `i < N ==> i+1 >= 0`: If `i` is less than `N`, then `i+1` is greater than or equal to 0.\n- `i < N ==> i+1 <= N`: If `i` is less than `N`, then `i+1` is less than or equal to `N`.\n- `a == 1 || a == 2 ==> a >= 1`: If `a` is either 1 or 2, then `a` is greater than or equal to 1.\n- `a == 1 || a == 2 ==> a <= 2`: If `a` is either 1 or 2, then `a` is less than or equal to 2.\n- `NONDET > 0 ==> a == 1`: If `NONDET` is greater than 0, then `a` is equal to 1.\n- `NONDET <= 0 ==> a == 2`: If `NONDET` is less than or equal to 0, then `a` is equal to 2.\n\nPost-condition:\n- `!(x > 0)`: `x` is not greater than 0. \n\nNote: Since `NONDET` is non-deterministic, we cannot make any assumptions about its value. Therefore, we cannot use it to derive any loop invariants. Instead, we can use implications to handle the conditional nature of the program."
        ],
        "annotation_blocks": [
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- None.\n\nVariable Assignments:\n- `int NONDET;`: A non-deterministic integer variable.\n- `int i, N;`: Integer variables initialized to 0 and garbage value respectively.\n- `int a;`: An integer variable whose value is assigned based on the value of `NONDET`.\n- `int x;`: An integer variable initialized to 0.\n\nLoop Condition:\n- `i < N`\n\nLoop Invariants:\n- `i >= 0`\n- `i <= N`\n- `(NONDET > 0 && a == 1) ==> x == 0`\n- `(NONDET <= 0 || a == 2) ==> x == 0`\n- `(i == N) ==> !(x > 0)`\n\nExplanation:\n- `i >= 0`: `i` should always be greater than or equal to 0.\n- `i <= N`: `i` should always be less than or equal to `N`.\n- `(NONDET > 0 && a == 1) ==> x == 0`: If `NONDET` is greater than 0 and `a` is assigned 1, then `x` should always be 0.\n- `(NONDET <= 0 || a == 2) ==> x == 0`: If `NONDET` is less than or equal to 0 or `a` is assigned 2, then `x` should always be 0.\n- `(i == N) ==> !(x > 0)`: When the loop terminates, if `i` is equal to `N`, then `x` should not be greater than 0."
            ],
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- None\n\nVariable Assignments:\n- `int NONDET;` - An integer variable that is non-deterministic and can have any value.\n- `int i,N;` - Two integer variables.\n- `int a;` - An integer variable.\n- `int x;` - An integer variable.\n\nLoop Condition:\n- `while (i<N)`\n\nLoop Invariants:\n- `i >= 0`\n- `i <= N`\n- `a == 1 || a == 2`\n- `x == 0`\n- `!(i < N) ==> !(x > 0)`\n\nExplanation:\n- Since `i` is being incremented by 1 in every iteration, it will always be greater than or equal to 0.\n- Since the loop condition is `i < N`, `i` will be less than `N` at the end of each iteration. Hence, `i` will always be less than or equal to `N`.\n- The value of `a` is assigned based on the value of `NONDET`. Since `NONDET` can be any value, `a` can be either 1 or 2.\n- The value of `x` is assigned to 0 before the loop starts and is not modified inside the loop. Hence, `x` will always be equal to 0.\n- The assertion is guarded by no condition. Hence, it should be true after the loop terminates. If `i` is not less than `N` at the end of the loop, it implies that the loop has executed `N` times. Hence, if `i` is not less than `N`, then `x` must not be greater than 0."
            ],
            "/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant (NONDET > 0 ==> a == 1) && (NONDET <= 0 ==> a == 2);\n    loop invariant x == 0;\n    loop invariant i <= N;\n    loop invariant 0 <= i;\n    loop invariant (!(x > 0)) ==> (i == N);\n*/",
            "/*@\nloop invariant x == 0;\nloop invariant i >= 0 && i <= N;\nloop invariant i >= 0;\nloop invariant i >= N ==> !(x > 0);\nloop invariant x == 0;\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- None.\n\nVariable assignments:\n- `int NONDET;`: A non-deterministic integer variable.\n- `int i, N;`: Integer variables initialized to 0.\n- `int a;`: An integer variable assigned to either 1 or 2 based on the value of `NONDET`.\n- `int x;`: An integer variable initialized to 0.\n\nLoop condition:\n- `i < N`\n\nLoop invariants:\n- `i >= 0`: `i` is always greater than or equal to 0.\n- `i <= N`: `i` is always less than or equal to `N`.\n- `a == 1 || a == 2`: `a` is always either 1 or 2.\n- `x >= 0`: `x` is always greater than or equal to 0.\n- `x <= 0`: `x` is always less than or equal to 0.\n- `i == N ==> x == 0`: If `i` equals `N`, then `x` equals 0.\n- `!(x > 0) ==> i >= N`: If `x` is not greater than 0, then `i` is greater than or equal to `N`.\n- `i < N ==> i+1 >= 0`: If `i` is less than `N`, then `i+1` is greater than or equal to 0.\n- `i < N ==> i+1 <= N`: If `i` is less than `N`, then `i+1` is less than or equal to `N`.\n- `a == 1 || a == 2 ==> a >= 1`: If `a` is either 1 or 2, then `a` is greater than or equal to 1.\n- `a == 1 || a == 2 ==> a <= 2`: If `a` is either 1 or 2, then `a` is less than or equal to 2.\n- `NONDET > 0 ==> a == 1`: If `NONDET` is greater than 0, then `a` is equal to 1.\n- `NONDET <= 0 ==> a == 2`: If `NONDET` is less than or equal to 0, then `a` is equal to 2.\n\nPost-condition:\n- `!(x > 0)`: `x` is not greater than 0. \n\nNote: Since `NONDET` is non-deterministic, we cannot make any assumptions about its value. Therefore, we cannot use it to derive any loop invariants. Instead, we can use implications to handle the conditional nature of the program."
            ]
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- None.\n\nVariable Assignments:\n- `int NONDET;`: A non-deterministic integer variable.\n- `int i, N;`: Integer variables initialized to 0 and garbage value respectively.\n- `int a;`: An integer variable whose value is assigned based on the value of `NONDET`.\n- `int x;`: An integer variable initialized to 0.\n\nLoop Condition:\n- `i < N`\n\nLoop Invariants:\n- `i >= 0`\n- `i <= N`\n- `(NONDET > 0 && a == 1) ==> x == 0`\n- `(NONDET <= 0 || a == 2) ==> x == 0`\n- `(i == N) ==> !(x > 0)`\n\nExplanation:\n- `i >= 0`: `i` should always be greater than or equal to 0.\n- `i <= N`: `i` should always be less than or equal to `N`.\n- `(NONDET > 0 && a == 1) ==> x == 0`: If `NONDET` is greater than 0 and `a` is assigned 1, then `x` should always be 0.\n- `(NONDET <= 0 || a == 2) ==> x == 0`: If `NONDET` is less than or equal to 0 or `a` is assigned 2, then `x` should always be 0.\n- `(i == N) ==> !(x > 0)`: When the loop terminates, if `i` is equal to `N`, then `x` should not be greater than 0.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- None\n\nVariable Assignments:\n- `int NONDET;` - An integer variable that is non-deterministic and can have any value.\n- `int i,N;` - Two integer variables.\n- `int a;` - An integer variable.\n- `int x;` - An integer variable.\n\nLoop Condition:\n- `while (i<N)`\n\nLoop Invariants:\n- `i >= 0`\n- `i <= N`\n- `a == 1 || a == 2`\n- `x == 0`\n- `!(i < N) ==> !(x > 0)`\n\nExplanation:\n- Since `i` is being incremented by 1 in every iteration, it will always be greater than or equal to 0.\n- Since the loop condition is `i < N`, `i` will be less than `N` at the end of each iteration. Hence, `i` will always be less than or equal to `N`.\n- The value of `a` is assigned based on the value of `NONDET`. Since `NONDET` can be any value, `a` can be either 1 or 2.\n- The value of `x` is assigned to 0 before the loop starts and is not modified inside the loop. Hence, `x` will always be equal to 0.\n- The assertion is guarded by no condition. Hence, it should be true after the loop terminates. If `i` is not less than `N` at the end of the loop, it implies that the loop has executed `N` times. Hence, if `i` is not less than `N`, then `x` must not be greater than 0.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant (NONDET > 0 ==> a == 1) && (NONDET <= 0 ==> a == 2);\n    loop invariant x == 0;\n    loop invariant i <= N;\n    loop invariant 0 <= i;\n    loop invariant (!(x > 0)) ==> (i == N);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= N is preserved but not established.\nloop invariant (NONDET > 0 ==> a == 1) && (NONDET <= 0 ==> a == 2) is partially proven to be inductive.\nloop invariant x == 0 is partially proven to be inductive.\nloop invariant i <= N is partially proven to be inductive.\nloop invariant 0 <= i is partially proven to be inductive.\nloop invariant (!(x > 0)) ==> (i == N) is preserved but not established.\nAssertion !(x > 0): Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  x=0;\n  i=0;\n\n  if (NONDET > 0) a=1; else a=2;\n\n  /*@\n\nloop invariant i2: (NONDET > 0 ==> a == 1) && (NONDET <= 0 ==> a == 2);\nloop invariant i3: x == 0;\n\nloop invariant i5: 0 <= i;\n\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@\nloop invariant x == 0;\nloop invariant i >= 0 && i <= N;\nloop invariant i >= 0;\nloop invariant i >= N ==> !(x > 0);\nloop invariant x == 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x == 0 is partially proven to be inductive.\nloop invariant i >= 0 && i <= N is preserved but not established.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant i >= N ==> !(x > 0) is partially proven to be inductive.\nAssertion !(x > 0): Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  x=0;\n  i=0;\n\n  if (NONDET > 0) a=1; else a=2;\n\n  /*@\nloop invariant i1: x == 0;\n\nloop invariant i3: i >= 0;\nloop invariant i4: i >= N ==> !(x > 0);\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- None.\n\nVariable assignments:\n- `int NONDET;`: A non-deterministic integer variable.\n- `int i, N;`: Integer variables initialized to 0.\n- `int a;`: An integer variable assigned to either 1 or 2 based on the value of `NONDET`.\n- `int x;`: An integer variable initialized to 0.\n\nLoop condition:\n- `i < N`\n\nLoop invariants:\n- `i >= 0`: `i` is always greater than or equal to 0.\n- `i <= N`: `i` is always less than or equal to `N`.\n- `a == 1 || a == 2`: `a` is always either 1 or 2.\n- `x >= 0`: `x` is always greater than or equal to 0.\n- `x <= 0`: `x` is always less than or equal to 0.\n- `i == N ==> x == 0`: If `i` equals `N`, then `x` equals 0.\n- `!(x > 0) ==> i >= N`: If `x` is not greater than 0, then `i` is greater than or equal to `N`.\n- `i < N ==> i+1 >= 0`: If `i` is less than `N`, then `i+1` is greater than or equal to 0.\n- `i < N ==> i+1 <= N`: If `i` is less than `N`, then `i+1` is less than or equal to `N`.\n- `a == 1 || a == 2 ==> a >= 1`: If `a` is either 1 or 2, then `a` is greater than or equal to 1.\n- `a == 1 || a == 2 ==> a <= 2`: If `a` is either 1 or 2, then `a` is less than or equal to 2.\n- `NONDET > 0 ==> a == 1`: If `NONDET` is greater than 0, then `a` is equal to 1.\n- `NONDET <= 0 ==> a == 2`: If `NONDET` is less than or equal to 0, then `a` is equal to 2.\n\nPost-condition:\n- `!(x > 0)`: `x` is not greater than 0. \n\nNote: Since `NONDET` is non-deterministic, we cannot make any assumptions about its value. Therefore, we cannot use it to derive any loop invariants. Instead, we can use implications to handle the conditional nature of the program.",
                "error": "Output does not contain at least 1 code block"
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= i <= N is preserved but not established.\nloop invariant (NONDET > 0 ==> a == 1) && (NONDET <= 0 ==> a == 2) is partially proven to be inductive.\nloop invariant x == 0 is partially proven to be inductive.\nloop invariant i <= N is partially proven to be inductive.\nloop invariant 0 <= i is partially proven to be inductive.\nloop invariant (!(x > 0)) ==> (i == N) is preserved but not established.\nloop invariant i >= 0 && i <= N is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant i >= N ==> !(x > 0) is partially proven to be inductive.\nAssertion !(x > 0): Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  x=0;\n  i=0;\n\n  if (NONDET > 0) a=1; else a=2;\n\n  /*@\nloop invariant i1: 0 <= i <= N;\nloop invariant i2: (NONDET > 0 ==> a == 1) && (NONDET <= 0 ==> a == 2);\nloop invariant i3: x == 0;\nloop invariant i4: i <= N;\nloop invariant i5: 0 <= i;\nloop invariant i6: (!(x > 0)) ==> (i == N);\nloop invariant i7: i >= 0 && i <= N;\nloop invariant i8: i >= 0;\nloop invariant i9: i >= N ==> !(x > 0);\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >0 ));\n}\n\nreturn;\n\n}",
        "combined_annotation_num_solver_calls": 4,
        "code_after_prune": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  x=0;\n  i=0;\n\n  if (NONDET > 0) a=1; else a=2;\n\n  /*@\n\nloop invariant i2: (NONDET > 0 ==> a == 1) && (NONDET <= 0 ==> a == 2);\nloop invariant i3: x == 0;\n\nloop invariant i5: 0 <= i;\n\n\nloop invariant i8: i >= 0;\nloop invariant i9: i >= N ==> !(x > 0);\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >0 ));\n}\n\nreturn;\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c"
        ],
        "skipped": [],
        "total": 239,
        "success_count": 116,
        "failure_count": 123,
        "success_rate": 0.48535564853556484
    }
}