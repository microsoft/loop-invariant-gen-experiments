{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n  int  i,  sn=0;\n  for(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main(){\n  int  i,  sn=0;\n  for(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- None\n\nVariable Assignments:\n- `i` is assigned the value `1`\n- `sn` is assigned the value `0`\n\nLoop Condition:\n- `i<=8`\n\nLoop Invariants:\n- Before the loop execution:\n    - `sn == 0`\n- In every iteration of the loop:\n    - `sn == 2*(i-1)`\n- After the loop termination:\n    - `(i==9) ==> (sn == 16)`\n    - `(i<9) ==> (sn == 2*(i-1))`\n\nExplanation:\n- Before the loop execution, `sn` is assigned the value `0`.\n- In every iteration of the loop, `sn` is incremented by `2`.\n- After the loop termination, if `i` is equal to `9`, then `sn` should be equal to `16`. If `i` is less than `9`, then `sn` should be equal to `2*(i-1)`. This is because if the loop terminates early, then the last value of `i` would be less than `9`, and `sn` would be equal to `2*(i-1)` in that case.\n- Since there are no non-deterministic variables or function calls in the program, all the loop invariants hold.",
            "Pre-conditions: None\n\nVariable assignments: \n- i is assigned the value 1\n- sn is assigned the value 0\n\nLoop condition: i<=8\n\nLoop body: \n- sn = sn + 2\n\nPost-condition: sn==8*(2)|| sn == 0\n\nWe need to find loop invariants that are true:\n- before the loop execution,\n- in every iteration of the loop, and\n- after the loop termination,\n\nsuch that the loop invariants imply the post-condition.\n\nBefore the loop execution:\n- sn == 0\n- i == 1\n\nIn every iteration of the loop:\n- i <= 8\n- sn == 2*(i-1)  ==>  sn <= 2*(8-1) = 14\n- sn == 2*(i-1)  ==>  sn >= 0\n\nAfter the loop termination:\n- sn == 2*i\n- i == 9\n\nPutting everything together:\n\n```\n/*@ \n    loop invariant i >= 1 && i <= 9;\n    loop invariant sn == 2*(i-1)  ==>  sn <= 14;\n    loop invariant sn == 2*(i-1)  ==>  sn >= 0;\n    loop invariant sn == 2*i  || i == 9;\n*/\n``` \n\nThe loop invariants above hold true before the loop execution, in every iteration of the loop, and after the loop termination. These invariants also imply the post-condition, sn==8*(2)|| sn == 0.",
            "Pre-conditions:\n- None.\n\nVariable assignments:\n- `int i, sn=0;` initializes variables `i` and `sn` to 0.\n\nLoop condition:\n- The loop runs while `i<=8`.\n\nLoop body:\n- `sn = sn +(2);` adds 2 to `sn` in each iteration.\n\nPost-condition:\n- `sn==8*(2)|| sn == 0`.\n\nLoop invariants:\n- `0 <= i <= 8` (i.e., `i` is always between 0 and 8, inclusive).\n- `sn == 2*i` (i.e., `sn` is always twice the current value of `i`).\n- `sn <= 16` (i.e., `sn` is always less than or equal to 16).\n- `0 <= sn <= 16` (i.e., `sn` is always between 0 and 16, inclusive).\n- `(i == 9) ==> (sn == 8*(2)|| sn == 0)` (i.e., if the loop terminates (`i` becomes 9), then the post-condition must hold).\n\nAll the loop invariants together:\n```\n/*@ \n    loop invariant 0 <= i <= 8;\n    loop invariant sn == 2*i;\n    loop invariant sn <= 16;\n    loop invariant 0 <= sn <= 16;\n    loop invariant (i == 9) ==> (sn == 8*(2) || sn == 0);\n*/\n```",
            "Pre-conditions:\n- None\n\nVariable assignments:\n- `i` is assigned the value 1\n- `sn` is assigned the value 0\n\nLoop condition:\n- `i<=8`\n\nLoop invariants:\n```\n/*@\n  loop invariant 1 <= i <= 9;\n  loop invariant sn == (i-1)*2;\n  loop invariant (i <= 8) ==> (sn <= 16);\n*/\n```\nExplanation:\n- Loop invariant 1: `i` starts at 1 and is incremented by 1 in each iteration, so it will always be between 1 and 9 (inclusive) in the loop.\n- Loop invariant 2: `sn` is initially 0 and is incremented by 2 in each iteration, so it will always be equal to `(i-1)*2` in the loop.\n- Loop invariant 3: If `i` is less than or equal to 8, then `sn` will be less than or equal to 16. This is because the maximum value of `sn` is reached when `i` is equal to 9, and in that case `sn` will be 16. \n- Since `sn` is always even, it can only be either 0 or a multiple of 2. Hence, the post-condition can be rewritten as `sn == 8*2` or `sn == 0`. This is implied by the second loop invariant. \n\nTherefore, the loop invariants imply the post-condition.",
            "Pre-conditions:\n- None\n\nVariable Assignments:\n- `i` is assigned the value 1.\n- `sn` is assigned the value 0.\n\nLoop Condition:\n- The loop continues as long as the value of `i` is less than or equal to 8.\n\nLoop Body:\n- The value of `sn` is incremented by 2 in each iteration of the loop.\n\nPost-condition:\n- The value of `sn` is either 16 (8*(2)) or 0.\n\nLoop Invariants:\n- Before the loop execution: \n    - `i` is greater than or equal to 1.\n    - `i` is less than or equal to 9.\n    - `sn` is greater than or equal to 0.\n    - `sn` is less than or equal to 16.\n- In every iteration of the loop:\n    - `i` is greater than or equal to 1.\n    - `i` is less than or equal to 9.\n    - `sn` is equal to (i-1)*2.\n- After the loop termination:\n    - `i` is greater than or equal to 9.\n    - `i` is less than or equal to 10.\n    - `sn` is equal to 16.\n- Since there are no non-deterministic variables and the assertion is not guarded by a condition, we don't need to add any implications.\n\nPutting everything together, the loop invariants are:\n```\n/*@ \n    loop invariant 1 <= i <= 9;\n    loop invariant 0 <= sn <= 16;\n    loop invariant sn == (i-1)*2;\n    loop invariant \\forall integer j; 1 <= j < i ==> sn >= (j-1)*2;\n    loop invariant i >= 9 ==> sn == 16;\n*/\n```"
        ],
        "annotation_blocks": [
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- None\n\nVariable Assignments:\n- `i` is assigned the value `1`\n- `sn` is assigned the value `0`\n\nLoop Condition:\n- `i<=8`\n\nLoop Invariants:\n- Before the loop execution:\n    - `sn == 0`\n- In every iteration of the loop:\n    - `sn == 2*(i-1)`\n- After the loop termination:\n    - `(i==9) ==> (sn == 16)`\n    - `(i<9) ==> (sn == 2*(i-1))`\n\nExplanation:\n- Before the loop execution, `sn` is assigned the value `0`.\n- In every iteration of the loop, `sn` is incremented by `2`.\n- After the loop termination, if `i` is equal to `9`, then `sn` should be equal to `16`. If `i` is less than `9`, then `sn` should be equal to `2*(i-1)`. This is because if the loop terminates early, then the last value of `i` would be less than `9`, and `sn` would be equal to `2*(i-1)` in that case.\n- Since there are no non-deterministic variables or function calls in the program, all the loop invariants hold."
            ],
            "/*@ \n    loop invariant i >= 1 && i <= 9;\n    loop invariant sn == 2*(i-1)  ==>  sn <= 14;\n    loop invariant sn == 2*(i-1)  ==>  sn >= 0;\n    loop invariant sn == 2*i  || i == 9;\n*/",
            "/*@ \n    loop invariant 0 <= i <= 8;\n    loop invariant sn == 2*i;\n    loop invariant sn <= 16;\n    loop invariant 0 <= sn <= 16;\n    loop invariant (i == 9) ==> (sn == 8*(2) || sn == 0);\n*/",
            "/*@\n  loop invariant 1 <= i <= 9;\n  loop invariant sn == (i-1)*2;\n  loop invariant (i <= 8) ==> (sn <= 16);\n*/",
            "/*@ \n    loop invariant 1 <= i <= 9;\n    loop invariant 0 <= sn <= 16;\n    loop invariant sn == (i-1)*2;\n    loop invariant \\forall integer j; 1 <= j < i ==> sn >= (j-1)*2;\n    loop invariant i >= 9 ==> sn == 16;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- None\n\nVariable Assignments:\n- `i` is assigned the value `1`\n- `sn` is assigned the value `0`\n\nLoop Condition:\n- `i<=8`\n\nLoop Invariants:\n- Before the loop execution:\n    - `sn == 0`\n- In every iteration of the loop:\n    - `sn == 2*(i-1)`\n- After the loop termination:\n    - `(i==9) ==> (sn == 16)`\n    - `(i<9) ==> (sn == 2*(i-1))`\n\nExplanation:\n- Before the loop execution, `sn` is assigned the value `0`.\n- In every iteration of the loop, `sn` is incremented by `2`.\n- After the loop termination, if `i` is equal to `9`, then `sn` should be equal to `16`. If `i` is less than `9`, then `sn` should be equal to `2*(i-1)`. This is because if the loop terminates early, then the last value of `i` would be less than `9`, and `sn` would be equal to `2*(i-1)` in that case.\n- Since there are no non-deterministic variables or function calls in the program, all the loop invariants hold.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant i >= 1 && i <= 9;\n    loop invariant sn == 2*(i-1)  ==>  sn <= 14;\n    loop invariant sn == 2*(i-1)  ==>  sn >= 0;\n    loop invariant sn == 2*i  || i == 9;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 1 && i <= 9 is partially proven to be inductive.\nloop invariant sn == 2*(i-1)  ==>  sn <= 14 is partially proven to be inductive.\nloop invariant sn == 2*(i-1)  ==>  sn >= 0 is partially proven to be inductive.\nloop invariant sn == 2*i  || i == 9 is preserved but not established.\nAssertion sn == 8 * 2 || sn == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n  int  i,  sn=0;\n  /*@\nloop invariant i1: i >= 1 && i <= 9;\n\nloop invariant i3: sn == 2*(i-1)  ==>  sn >= 0;\n\n*/\nfor(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant 0 <= i <= 8;\n    loop invariant sn == 2*i;\n    loop invariant sn <= 16;\n    loop invariant 0 <= sn <= 16;\n    loop invariant (i == 9) ==> (sn == 8*(2) || sn == 0);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 8 is partially proven to be inductive.\nloop invariant sn == 2*i is preserved but not established.\nloop invariant sn <= 16 is partially proven to be inductive.\nloop invariant 0 <= sn <= 16 is partially proven to be inductive.\nloop invariant (i == 9) ==> (sn == 8*(2) || sn == 0) is partially proven to be inductive.\nAssertion sn == 8 * 2 || sn == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n  int  i,  sn=0;\n  /*@\n\n\n\n\n\n*/\nfor(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@\n  loop invariant 1 <= i <= 9;\n  loop invariant sn == (i-1)*2;\n  loop invariant (i <= 8) ==> (sn <= 16);\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant 1 <= i <= 9 is inductive.\nloop invariant sn == (i-1)*2 is inductive.\nloop invariant (i <= 8) ==> (sn <= 16) is inductive.\nAssertion sn == 8 * 2 || sn == 0: Valid"
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant 1 <= i <= 9;\n    loop invariant 0 <= sn <= 16;\n    loop invariant sn == (i-1)*2;\n    loop invariant \\forall integer j; 1 <= j < i ==> sn >= (j-1)*2;\n    loop invariant i >= 9 ==> sn == 16;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant 1 <= i <= 9 is inductive.\nloop invariant 0 <= sn <= 16 is inductive.\nloop invariant sn == (i-1)*2 is inductive.\nloop invariant \\forall integer j; 1 <= j < i ==> sn >= (j-1)*2 is inductive.\nloop invariant i >= 9 ==> sn == 16 is inductive.\nAssertion sn == 8 * 2 || sn == 0: Valid"
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant i >= 1 && i <= 9 is partially proven to be inductive.\nloop invariant sn == 2*(i-1)  ==>  sn <= 14 is partially proven to be inductive.\nloop invariant sn == 2*(i-1)  ==>  sn >= 0 is partially proven to be inductive.\nloop invariant sn == 2*i  || i == 9 is preserved but not established.\nloop invariant 0 <= i <= 8 is partially proven to be inductive.\nloop invariant sn == 2*i is partially proven to be inductive.\nloop invariant sn <= 16 is partially proven to be inductive.\nloop invariant 0 <= sn <= 16 is partially proven to be inductive.\nloop invariant (i == 9) ==> (sn == 8*(2) || sn == 0) is partially proven to be inductive.\nloop invariant 1 <= i <= 9 is partially proven to be inductive.\nloop invariant sn == (i-1)*2 is partially proven to be inductive.\nloop invariant (i <= 8) ==> (sn <= 16) is partially proven to be inductive.\nloop invariant \\forall integer j; 1 <= j < i ==> sn >= (j-1)*2 is partially proven to be inductive.\nloop invariant i >= 9 ==> sn == 16 is partially proven to be inductive.\nAssertion sn == 8 * 2 || sn == 0: Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n  int  i,  sn=0;\n  /*@\nloop invariant i1: i >= 1 && i <= 9;\nloop invariant i2: sn == 2*(i-1)  ==>  sn <= 14;\nloop invariant i3: sn == 2*(i-1)  ==>  sn >= 0;\nloop invariant i4: sn == 2*i  || i == 9;\nloop invariant i5: 0 <= i <= 8;\nloop invariant i6: sn == 2*i;\nloop invariant i7: sn <= 16;\nloop invariant i8: 0 <= sn <= 16;\nloop invariant i9: (i == 9) ==> (sn == 8*(2) || sn == 0);\nloop invariant i10: 1 <= i <= 9;\nloop invariant i11: sn == (i-1)*2;\nloop invariant i12: (i <= 8) ==> (sn <= 16);\nloop invariant i13: \\forall integer j; 1 <= j < i ==> sn >= (j-1)*2;\nloop invariant i14: i >= 9 ==> sn == 16;\n*/\nfor(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n\n}",
        "combined_annotation_num_solver_calls": 5,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n  int  i,  sn=0;\n  /*@\nloop invariant i1: i >= 1 && i <= 9;\n\nloop invariant i3: sn == 2*(i-1)  ==>  sn >= 0;\n\n\n\nloop invariant i7: sn <= 16;\nloop invariant i8: 0 <= sn <= 16;\nloop invariant i9: (i == 9) ==> (sn == 8*(2) || sn == 0);\nloop invariant i10: 1 <= i <= 9;\nloop invariant i11: sn == (i-1)*2;\nloop invariant i12: (i <= 8) ==> (sn <= 16);\nloop invariant i13: \\forall integer j; 1 <= j < i ==> sn >= (j-1)*2;\nloop invariant i14: i >= 9 ==> sn == 16;\n*/\nfor(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c"
        ],
        "skipped": [],
        "total": 147,
        "success_count": 59,
        "failure_count": 88,
        "success_rate": 0.4013605442176871
    }
}