{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  while (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  while (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "First, let's note the pre-conditions and variable assignments in the program:\n- `N` is an integer variable initialized with a non-deterministic value obtained from `unknown_uint()` function.\n- `i`, `j`, `k` are integer variables initialized with 0.\n\nThe loop condition is `i < N`.\n\nNow, let's analyze the loop body and find the loop invariants:\n- Invariant 1: `0 <= i <= N`. This invariant holds before the loop execution as `i` is initialized with 0 and `N` is non-deterministic but greater than 1. This invariant also holds in every iteration of the loop because `i` is incremented by 1 in each iteration and the loop condition is `i < N`. This invariant also holds after the loop termination as `i` is equal to `N` and `0 <= N`.\n- Invariant 2: `1 <= j <= N`. This invariant holds before the loop execution as `j` is initialized with 0 and `N` is non-deterministic but greater than 1. This invariant also holds in every iteration of the loop because `j` is incremented by 1 in each iteration. This invariant also holds after the loop termination as `j` is equal to `N` and `1 <= N`.\n- Invariant 3: `0 <= k <= 1`. This invariant holds before the loop execution as `k` is initialized with 0. This invariant also holds in every iteration of the loop as `k` is assigned either 0 or 1. This invariant also holds after the loop termination as `k` is either 0 or 1.\n- Invariant 4: `(i==0 ==> k==1) && (i>0 ==> k==0)`. This invariant holds in every iteration of the loop as `k` is assigned either 0 or 1 based on the value of `i`. This invariant also holds after the loop termination as `i` is equal to `N`.\n\nNow, let's output all the loop invariants in one code block:\n```\n/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant 1 <= j <= N;\n    loop invariant 0 <= k <= 1;\n    loop invariant (i==0 ==> k==1) && (i>0 ==> k==0);\n*/\n```\n\nFinally, since the assertion is not guarded by any condition, we can directly use it in the loop invariants.",
            "Pre-conditions/variable assignments:\n- `N` is an integer variable initialized to a non-deterministic value returned by `unknown_uint()` function.\n- `i`, `j`, and `k` are integer variables initialized to 0.\n\nLoop condition:\n- The while loop executes as long as the value of `i` is less than `N`.\n\nLoop invariants:\n- `0 <= i <= N`\n- `0 <= j <= N`\n- `0 <= k <= 1`\n- At the beginning of the loop: `j == i`\n- At the end of the loop: `j == N`\n- For all `i` in the loop: `((i<1) ==> (k==1)) && ((i>=1) ==> (k==0))`\n\nExplanation of the loop invariants:\n- The first three invariants define the minimum and maximum values that the variables can take. They ensure that the variables are within a valid range throughout the loop execution.\n- The fourth invariant `j == i` holds true at the beginning of the loop because `i` is initially 0 and `j` is also initialized to 0. In each iteration, `j` is incremented by 1, so it will always be equal to `i`.\n- The fifth invariant `j == N` holds true at the end of the loop because `j` is incremented in each iteration until it reaches `N`.\n- The last invariant defines the relationship between `i` and `k`. If `i` is less than 1, then `k` is set to 1, otherwise `k` is set to 0. This invariant holds true for all `i` values in the loop because `i` takes on all values between 0 and `N-1`.",
            "Pre-conditions:\n- The program requires that the value of N must be greater than 1.\n\nVariable assignments:\n- N is assigned the value returned by unknown_uint(), which could be any non-negative integer.\n- i, j, and k are initialized to 0.\n\nLoop condition:\n- The loop continues as long as the value of i is less than N.\n\nLoop invariants:\n- Before the loop execution:\n```\n//@ assert(N > 1);\n//@ assert(i == 0);\n//@ assert(j == 0);\n//@ assert(k == 0);\n```\n- In every iteration of the loop:\n```\n//@ assert(i >= 0 && i <= N);\n//@ assert(j >= 1 && j <= N);\n//@ assert(k == 0 || k == 1);\n```\n- After the loop termination:\n```\n//@ assert(!(k > 0));\n```\nExplanation:\n- Before the loop execution, we assert that N must be greater than 1, and the values of i, j, and k must be initialized to 0.\n- In every iteration of the loop, we assert that i must be greater than or equal to 0 and less than or equal to N, j must be greater than or equal to 1 and less than or equal to N, and k must be either 0 or 1. \n- After the loop termination, we assert that k must not be greater than 0.\n- Since the value of N is non-deterministic, we do not add any constraints on its value in the loop invariants.\n- Since the value of k is non-deterministic in the first iteration of the loop, we use implication to make the invariant true: if i is less than 1, then k must be equal to 1.",
            "Pre-conditions: \n- The function `unknown_uint` returns a non-negative integer value.\n\nVariable assignments:\n- `N` is assigned the value returned by `unknown_uint()`.\n- `i`, `j` and `k` are assigned 0.\n\nLoop condition:\n- The loop executes while `i` is less than `N`.\n\nLoop Invariants:\n- Before the loop execution:\n  - `i >= 0`\n  - `j >= 0`\n  - `k >= 0`\n  - `N > 1`\n- In every iteration of the loop:\n  - `i >= 0`\n  - `j >= 1`\n  - `j <= N`\n  - `k >= 0`\n  - `k <= 1`\n- After the loop termination:\n  - `i == N`\n  - `j >= 1`\n  - `j <= N+1`\n  - `k >= 0`\n  - `k <= 1`\n  - `!(k > 0) ==> (N == 1)`\n\nExplanation of loop invariants:\n- Before the loop execution:\n  - `i >= 0` - `i` is assigned 0 before the loop, and can only increase in the loop.\n  - `j >= 0` - `j` is assigned 0 before the loop, and increases by 1 in each iteration of the loop.\n  - `k >= 0` - `k` is assigned 0 before the loop, and can only be assigned 0 or 1 in the loop.\n  - `N > 1` - This is a pre-condition, and we assume `N` is greater than 1 before the loop starts.\n- In every iteration of the loop:\n  - `i >= 0` - `i` can only increase in the loop, and starts at 0.\n  - `j >= 1` - `j` is assigned 0 before the loop, and increases by 1 in each iteration of the loop.\n  - `j <= N` - `j` can increase at most up to `N`, because the loop condition is `i < N`.\n  - `k >= 0` - `k` is assigned 0 before the loop, and can only be assigned 0 or 1 in the loop.\n  - `k <= 1` - `k` is assigned 1 if `i` is 0, and 0 otherwise. Therefore, `k` can only take the values 0 or 1 in the loop.\n- After the loop termination:\n  - `i == N` - The loop condition is `i < N`, so when the loop terminates, `i` is equal to `N`.\n  - `j >= 1` - `j` is assigned 0 before the loop, and increases by 1 in each iteration of the loop.\n  - `j <= N+1` - `j` can increase up to `N` in the loop, and then increase once more after the loop terminates.\n  - `k >= 0` - `k` is assigned 0 before the loop, and can only be assigned 0 or 1 in the loop.\n  - `k <= 1` - `k` is assigned 1 if `i` is 0, and 0 otherwise. Therefore, `k` can only take the values 0 or 1 in the loop.\n  - `!(k > 0) ==> (N == 1)` - The assertion checks that `k` is never greater than 0. If this is true, then `N` must be equal to 1, because the only way for `k` to be 0 is if `i` is greater than 0. Therefore, the assertion is only violated if `k` is greater than 0 and `N` is not equal to 1.\n\nNote that we do not need to add any implications for non-deterministic variables, because all variables are explicitly assigned values before the loop starts.",
            "Pre-conditions:\n- N is an integer variable initialized with the value returned by unknown_uint() function. \n\nVariable assignments:\n- i is an integer variable initialized to 0.\n- j is an integer variable initialized to 0.\n- k is an integer variable initialized to 0.\n\nLoop condition:\n- The loop continues while i is less than N.\n\nLoop body:\n- If i is less than 1, then k is assigned 1.\n- Otherwise, k is assigned 0.\n- j is incremented by 1.\n- i is incremented by 1.\n\nPost-condition:\n- k must be less than or equal to 0.\n\nLoop Invariants:\n- The variable i is always non-negative and less than or equal to N. (i >= 0 && i <= N)\n- The variable j is always non-negative. (j >= 0)\n- The variable k is always less than or equal to 1. (k <= 1)\n- If i is less than 1, then k is assigned 1. Otherwise, k is assigned 0. (i < 1 ==> k == 1) && (i >= 1 ==> k == 0)\n- The variable j is always greater than or equal to i. (j >= i)\n- If the loop has not yet started, then k can be any value. (i == 0 ==> \\true)\n- If the loop has completed, then k must be less than or equal to 0. (i == N ==> k <= 0)\n\nPutting everything together:\n```\n/*@ \n    loop invariant i >= 0 && i <= N;\n    loop invariant j >= 0;\n    loop invariant k <= 1;\n    loop invariant i < 1 ==> k == 1;\n    loop invariant i >= 1 ==> k == 0;\n    loop invariant j >= i;\n    loop invariant i == 0 ==> \\true;\n    loop invariant i == N ==> k <= 0;\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant 1 <= j <= N;\n    loop invariant 0 <= k <= 1;\n    loop invariant (i==0 ==> k==1) && (i>0 ==> k==0);\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions/variable assignments:\n- `N` is an integer variable initialized to a non-deterministic value returned by `unknown_uint()` function.\n- `i`, `j`, and `k` are integer variables initialized to 0.\n\nLoop condition:\n- The while loop executes as long as the value of `i` is less than `N`.\n\nLoop invariants:\n- `0 <= i <= N`\n- `0 <= j <= N`\n- `0 <= k <= 1`\n- At the beginning of the loop: `j == i`\n- At the end of the loop: `j == N`\n- For all `i` in the loop: `((i<1) ==> (k==1)) && ((i>=1) ==> (k==0))`\n\nExplanation of the loop invariants:\n- The first three invariants define the minimum and maximum values that the variables can take. They ensure that the variables are within a valid range throughout the loop execution.\n- The fourth invariant `j == i` holds true at the beginning of the loop because `i` is initially 0 and `j` is also initialized to 0. In each iteration, `j` is incremented by 1, so it will always be equal to `i`.\n- The fifth invariant `j == N` holds true at the end of the loop because `j` is incremented in each iteration until it reaches `N`.\n- The last invariant defines the relationship between `i` and `k`. If `i` is less than 1, then `k` is set to 1, otherwise `k` is set to 0. This invariant holds true for all `i` values in the loop because `i` takes on all values between 0 and `N-1`."
            ],
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The program requires that the value of N must be greater than 1.\n\nVariable assignments:\n- N is assigned the value returned by unknown_uint(), which could be any non-negative integer.\n- i, j, and k are initialized to 0.\n\nLoop condition:\n- The loop continues as long as the value of i is less than N.\n\nLoop invariants:\n- Before the loop execution:\n```\n//@ assert(N > 1);\n//@ assert(i == 0);\n//@ assert(j == 0);\n//@ assert(k == 0);\n```\n- In every iteration of the loop:\n```\n//@ assert(i >= 0 && i <= N);\n//@ assert(j >= 1 && j <= N);\n//@ assert(k == 0 || k == 1);\n```\n- After the loop termination:\n```\n//@ assert(!(k > 0));\n```\nExplanation:\n- Before the loop execution, we assert that N must be greater than 1, and the values of i, j, and k must be initialized to 0.\n- In every iteration of the loop, we assert that i must be greater than or equal to 0 and less than or equal to N, j must be greater than or equal to 1 and less than or equal to N, and k must be either 0 or 1. \n- After the loop termination, we assert that k must not be greater than 0.\n- Since the value of N is non-deterministic, we do not add any constraints on its value in the loop invariants.\n- Since the value of k is non-deterministic in the first iteration of the loop, we use implication to make the invariant true: if i is less than 1, then k must be equal to 1."
            ],
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions: \n- The function `unknown_uint` returns a non-negative integer value.\n\nVariable assignments:\n- `N` is assigned the value returned by `unknown_uint()`.\n- `i`, `j` and `k` are assigned 0.\n\nLoop condition:\n- The loop executes while `i` is less than `N`.\n\nLoop Invariants:\n- Before the loop execution:\n  - `i >= 0`\n  - `j >= 0`\n  - `k >= 0`\n  - `N > 1`\n- In every iteration of the loop:\n  - `i >= 0`\n  - `j >= 1`\n  - `j <= N`\n  - `k >= 0`\n  - `k <= 1`\n- After the loop termination:\n  - `i == N`\n  - `j >= 1`\n  - `j <= N+1`\n  - `k >= 0`\n  - `k <= 1`\n  - `!(k > 0) ==> (N == 1)`\n\nExplanation of loop invariants:\n- Before the loop execution:\n  - `i >= 0` - `i` is assigned 0 before the loop, and can only increase in the loop.\n  - `j >= 0` - `j` is assigned 0 before the loop, and increases by 1 in each iteration of the loop.\n  - `k >= 0` - `k` is assigned 0 before the loop, and can only be assigned 0 or 1 in the loop.\n  - `N > 1` - This is a pre-condition, and we assume `N` is greater than 1 before the loop starts.\n- In every iteration of the loop:\n  - `i >= 0` - `i` can only increase in the loop, and starts at 0.\n  - `j >= 1` - `j` is assigned 0 before the loop, and increases by 1 in each iteration of the loop.\n  - `j <= N` - `j` can increase at most up to `N`, because the loop condition is `i < N`.\n  - `k >= 0` - `k` is assigned 0 before the loop, and can only be assigned 0 or 1 in the loop.\n  - `k <= 1` - `k` is assigned 1 if `i` is 0, and 0 otherwise. Therefore, `k` can only take the values 0 or 1 in the loop.\n- After the loop termination:\n  - `i == N` - The loop condition is `i < N`, so when the loop terminates, `i` is equal to `N`.\n  - `j >= 1` - `j` is assigned 0 before the loop, and increases by 1 in each iteration of the loop.\n  - `j <= N+1` - `j` can increase up to `N` in the loop, and then increase once more after the loop terminates.\n  - `k >= 0` - `k` is assigned 0 before the loop, and can only be assigned 0 or 1 in the loop.\n  - `k <= 1` - `k` is assigned 1 if `i` is 0, and 0 otherwise. Therefore, `k` can only take the values 0 or 1 in the loop.\n  - `!(k > 0) ==> (N == 1)` - The assertion checks that `k` is never greater than 0. If this is true, then `N` must be equal to 1, because the only way for `k` to be 0 is if `i` is greater than 0. Therefore, the assertion is only violated if `k` is greater than 0 and `N` is not equal to 1.\n\nNote that we do not need to add any implications for non-deterministic variables, because all variables are explicitly assigned values before the loop starts."
            ],
            "/*@ \n    loop invariant i >= 0 && i <= N;\n    loop invariant j >= 0;\n    loop invariant k <= 1;\n    loop invariant i < 1 ==> k == 1;\n    loop invariant i >= 1 ==> k == 0;\n    loop invariant j >= i;\n    loop invariant i == 0 ==> \\true;\n    loop invariant i == N ==> k <= 0;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant 1 <= j <= N;\n    loop invariant 0 <= k <= 1;\n    loop invariant (i==0 ==> k==1) && (i>0 ==> k==0);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= N is partially proven to be inductive.\nloop invariant 1 <= j <= N is preserved but not established.\nloop invariant 0 <= k <= 1 is partially proven to be inductive.\nloop invariant (i==0 ==> k==1) && (i>0 ==> k==0) is partially proven to be inductive.\nAssertion !(k > 0): Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N;\n\nloop invariant i3: 0 <= k <= 1;\n\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions/variable assignments:\n- `N` is an integer variable initialized to a non-deterministic value returned by `unknown_uint()` function.\n- `i`, `j`, and `k` are integer variables initialized to 0.\n\nLoop condition:\n- The while loop executes as long as the value of `i` is less than `N`.\n\nLoop invariants:\n- `0 <= i <= N`\n- `0 <= j <= N`\n- `0 <= k <= 1`\n- At the beginning of the loop: `j == i`\n- At the end of the loop: `j == N`\n- For all `i` in the loop: `((i<1) ==> (k==1)) && ((i>=1) ==> (k==0))`\n\nExplanation of the loop invariants:\n- The first three invariants define the minimum and maximum values that the variables can take. They ensure that the variables are within a valid range throughout the loop execution.\n- The fourth invariant `j == i` holds true at the beginning of the loop because `i` is initially 0 and `j` is also initialized to 0. In each iteration, `j` is incremented by 1, so it will always be equal to `i`.\n- The fifth invariant `j == N` holds true at the end of the loop because `j` is incremented in each iteration until it reaches `N`.\n- The last invariant defines the relationship between `i` and `k`. If `i` is less than 1, then `k` is set to 1, otherwise `k` is set to 0. This invariant holds true for all `i` values in the loop because `i` takes on all values between 0 and `N-1`.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The program requires that the value of N must be greater than 1.\n\nVariable assignments:\n- N is assigned the value returned by unknown_uint(), which could be any non-negative integer.\n- i, j, and k are initialized to 0.\n\nLoop condition:\n- The loop continues as long as the value of i is less than N.\n\nLoop invariants:\n- Before the loop execution:\n```\n//@ assert(N > 1);\n//@ assert(i == 0);\n//@ assert(j == 0);\n//@ assert(k == 0);\n```\n- In every iteration of the loop:\n```\n//@ assert(i >= 0 && i <= N);\n//@ assert(j >= 1 && j <= N);\n//@ assert(k == 0 || k == 1);\n```\n- After the loop termination:\n```\n//@ assert(!(k > 0));\n```\nExplanation:\n- Before the loop execution, we assert that N must be greater than 1, and the values of i, j, and k must be initialized to 0.\n- In every iteration of the loop, we assert that i must be greater than or equal to 0 and less than or equal to N, j must be greater than or equal to 1 and less than or equal to N, and k must be either 0 or 1. \n- After the loop termination, we assert that k must not be greater than 0.\n- Since the value of N is non-deterministic, we do not add any constraints on its value in the loop invariants.\n- Since the value of k is non-deterministic in the first iteration of the loop, we use implication to make the invariant true: if i is less than 1, then k must be equal to 1.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions: \n- The function `unknown_uint` returns a non-negative integer value.\n\nVariable assignments:\n- `N` is assigned the value returned by `unknown_uint()`.\n- `i`, `j` and `k` are assigned 0.\n\nLoop condition:\n- The loop executes while `i` is less than `N`.\n\nLoop Invariants:\n- Before the loop execution:\n  - `i >= 0`\n  - `j >= 0`\n  - `k >= 0`\n  - `N > 1`\n- In every iteration of the loop:\n  - `i >= 0`\n  - `j >= 1`\n  - `j <= N`\n  - `k >= 0`\n  - `k <= 1`\n- After the loop termination:\n  - `i == N`\n  - `j >= 1`\n  - `j <= N+1`\n  - `k >= 0`\n  - `k <= 1`\n  - `!(k > 0) ==> (N == 1)`\n\nExplanation of loop invariants:\n- Before the loop execution:\n  - `i >= 0` - `i` is assigned 0 before the loop, and can only increase in the loop.\n  - `j >= 0` - `j` is assigned 0 before the loop, and increases by 1 in each iteration of the loop.\n  - `k >= 0` - `k` is assigned 0 before the loop, and can only be assigned 0 or 1 in the loop.\n  - `N > 1` - This is a pre-condition, and we assume `N` is greater than 1 before the loop starts.\n- In every iteration of the loop:\n  - `i >= 0` - `i` can only increase in the loop, and starts at 0.\n  - `j >= 1` - `j` is assigned 0 before the loop, and increases by 1 in each iteration of the loop.\n  - `j <= N` - `j` can increase at most up to `N`, because the loop condition is `i < N`.\n  - `k >= 0` - `k` is assigned 0 before the loop, and can only be assigned 0 or 1 in the loop.\n  - `k <= 1` - `k` is assigned 1 if `i` is 0, and 0 otherwise. Therefore, `k` can only take the values 0 or 1 in the loop.\n- After the loop termination:\n  - `i == N` - The loop condition is `i < N`, so when the loop terminates, `i` is equal to `N`.\n  - `j >= 1` - `j` is assigned 0 before the loop, and increases by 1 in each iteration of the loop.\n  - `j <= N+1` - `j` can increase up to `N` in the loop, and then increase once more after the loop terminates.\n  - `k >= 0` - `k` is assigned 0 before the loop, and can only be assigned 0 or 1 in the loop.\n  - `k <= 1` - `k` is assigned 1 if `i` is 0, and 0 otherwise. Therefore, `k` can only take the values 0 or 1 in the loop.\n  - `!(k > 0) ==> (N == 1)` - The assertion checks that `k` is never greater than 0. If this is true, then `N` must be equal to 1, because the only way for `k` to be 0 is if `i` is greater than 0. Therefore, the assertion is only violated if `k` is greater than 0 and `N` is not equal to 1.\n\nNote that we do not need to add any implications for non-deterministic variables, because all variables are explicitly assigned values before the loop starts.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 5,
                "annotations": "/*@ \n    loop invariant i >= 0 && i <= N;\n    loop invariant j >= 0;\n    loop invariant k <= 1;\n    loop invariant i < 1 ==> k == 1;\n    loop invariant i >= 1 ==> k == 0;\n    loop invariant j >= i;\n    loop invariant i == 0 ==> \\true;\n    loop invariant i == N ==> k <= 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 0 && i <= N is partially proven to be inductive.\nloop invariant j >= 0 is partially proven to be inductive.\nloop invariant k <= 1 is partially proven to be inductive.\nloop invariant i < 1 ==> k == 1 is preserved but not established.\nloop invariant i >= 1 ==> k == 0 is partially proven to be inductive.\nloop invariant j >= i is partially proven to be inductive.\nloop invariant i == 0 ==> \\true is partially proven to be inductive.\nloop invariant i == N ==> k <= 0 is partially proven to be inductive.\nAssertion !(k > 0): Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: i >= 0 && i <= N;\nloop invariant i2: j >= 0;\nloop invariant i3: k <= 1;\n\n\nloop invariant i6: j >= i;\nloop invariant i7: i == 0 ==> \\true;\n\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= i <= N is partially proven to be inductive.\nloop invariant 1 <= j <= N is preserved but not established.\nloop invariant 0 <= k <= 1 is partially proven to be inductive.\nloop invariant (i==0 ==> k==1) && (i>0 ==> k==0) is partially proven to be inductive.\nloop invariant i >= 0 && i <= N is partially proven to be inductive.\nloop invariant j >= 0 is partially proven to be inductive.\nloop invariant k <= 1 is partially proven to be inductive.\nloop invariant i < 1 ==> k == 1 is partially proven to be inductive.\nloop invariant i >= 1 ==> k == 0 is partially proven to be inductive.\nloop invariant j >= i is partially proven to be inductive.\nloop invariant i == 0 ==> \\true is partially proven to be inductive.\nloop invariant i == N ==> k <= 0 is partially proven to be inductive.\nAssertion !(k > 0): Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N;\nloop invariant i2: 1 <= j <= N;\nloop invariant i3: 0 <= k <= 1;\nloop invariant i4: (i==0 ==> k==1) && (i>0 ==> k==0);\nloop invariant i5: i >= 0 && i <= N;\nloop invariant i6: j >= 0;\nloop invariant i7: k <= 1;\nloop invariant i8: i < 1 ==> k == 1;\nloop invariant i9: i >= 1 ==> k == 0;\nloop invariant i10: j >= i;\nloop invariant i11: i == 0 ==> \\true;\nloop invariant i12: i == N ==> k <= 0;\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 7,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N;\n\nloop invariant i3: 0 <= k <= 1;\n\nloop invariant i5: i >= 0 && i <= N;\nloop invariant i6: j >= 0;\nloop invariant i7: k <= 1;\n\n\nloop invariant i10: j >= i;\nloop invariant i11: i == 0 ==> \\true;\n\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c"
        ],
        "skipped": [],
        "total": 238,
        "success_count": 115,
        "failure_count": 123,
        "success_rate": 0.4831932773109244
    }
}