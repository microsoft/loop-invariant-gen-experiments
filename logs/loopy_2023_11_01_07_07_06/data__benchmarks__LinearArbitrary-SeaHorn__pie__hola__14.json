{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern int unknown1();\n\nint main() {\n  int a = 0;\n  int j = unknown1();\n  int m = unknown1();\n  if(m<=0)\n    return 0;\n  for(j = 1; j <= m ; j++){\n    if(unknown1()) \n       a++;\n    else\n       a--; \n  }\n  {;\n//@ assert(a>=-m && a<=m);\n}\n\n}",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nextern int unknown1();\n\nint main() {\n  int a = 0;\n  int j = unknown1();\n  int m = unknown1();\n  if(m<=0)\n    return 0;\n  for(j = 1; j <= m ; j++){\n    if(unknown1()) \n       a++;\n    else\n       a--; \n  }\n  {;\n//@ assert(a>=-m && a<=m);\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- None.\n\nVariable assignments:\n- `a` is assigned the value `0`.\n- `j` is assigned the value returned by the function `unknown1()`.\n- `m` is assigned the value returned by the function `unknown1()`.\n\nLoop condition:\n- The loop executes while `j` is less than or equal to `m`.\n\nLoop invariants:\n- Before the loop execution:\n    - Since `j` is assigned the value returned by `unknown1()`, we do not know its value beforehand. However, we know that `j` is greater than or equal to `1`, since the loop starts with `j = 1`.\n    - Since `m` is assigned the value returned by `unknown1()`, we do not know its value beforehand. However, since there is a check that `m` is greater than `0` before the loop starts, we know that `m` is greater than or equal to `1`.\n    - Since `a` is assigned `0`, we know that `a` is equal to `0`.\n- In every iteration of the loop:\n    - Since the loop increments or decrements `a` depending on the result of `unknown1()`, we cannot make any assumptions about the value of `a` in the next iteration.\n    - Since `j` is incremented by `1` in each iteration, we know that `j` is always greater than or equal to `1` and less than or equal to `m`.\n    - Since `m` is a constant, we do not need to include any loop invariants for `m`.\n- After the loop termination:\n    - We know that the loop terminates when `j` is greater than `m`. Therefore, we know that `j` is greater than `m` at this point.\n    - Since `a` is incremented or decremented in each iteration, we know that `a` is greater than or equal to `-m` and less than or equal to `m`.\n\nPutting it all together:\n```\n/*@ \n  loop invariant 1 <= j <= m;\n  loop invariant a >= -m && a <= m;\n  loop invariant j > m ==> a >= -m && a <= m;\n*/\n``` \n\nNote that we include an implication in the third loop invariant to take into account the conditional assertion at the end of the program.",
            "Pre-conditions:\n- The function `unknown1()` returns an integer value.\n- The variable `m` is greater than zero.\n\nVariable assignments:\n- The variable `a` is initialized to zero.\n- The variables `j` and `m` are assigned the value returned by `unknown1()`.\n\nLoop condition:\n- The loop iterates while `j` is less than or equal to `m`.\n\nLoop invariants:\n- Before the loop execution, `a` is within the bounds of `-m` and `m`. \n```\n/*@ \n  loop invariant -m <= a <= m;\n*/\n```\n- In every iteration of the loop, either `a` is incremented or decremented by one. \n```\n/*@ \n  loop invariant \\forall integer k; 1<=k<=j ==> ((a+k-j)%2 == 0);\n*/\n```\n- After the loop termination, `a` is within the bounds of `-m` and `m`. \n```\n/*@ \n  loop invariant -m <= a <= m;\n*/\n```\nNote: The loop invariant for the behavior of `unknown1()` is not needed as we cannot make any assumptions about its behavior.",
            "Pre-conditions:\n- The function `unknown1()` returns an integer value whose range is unknown.\n\nLoop condition:\n- The loop executes while the value of `j` is less than or equal to `m`.\n\nLoop invariants:\n- Before the loop execution: `a == 0 && j == 1 && m > 0`\n- In every iteration of the loop: \n    - `a >= -j && a <= j`\n    - `j >= 1 && j <= m+1`\n- After the loop termination: `a >= -m && a <= m`\n\nExplanation of loop invariants:\n- Before the loop execution:\n    - `a == 0` because `a` is initialized to 0 before the loop starts.\n    - `j == 1` because `j` is initialized to 1 before the loop starts.\n    - `m > 0` because `m` is checked to be greater than 0 before the loop starts.\n- In every iteration of the loop:\n    - `a >= -j` because `a` is incremented or decremented by 1 in each iteration of the loop. When `unknown1()` returns true, `a` is incremented by 1, and when it returns false, `a` is decremented by 1. Therefore, the maximum value of `a` occurs when `unknown1()` returns true for all iterations of the loop, and the minimum value of `a` occurs when `unknown1()` returns false for all iterations of the loop. In both cases, the maximum and minimum values of `a` are equal to the number of times `unknown1()` returns true, which is equal to `j-1` since `j` starts from 1. Therefore, `a >= -j`.\n    - `a <= j` for the same reason as above, but in this case, the maximum and minimum values of `a` occur when `unknown1()` returns false for all iterations of the loop. Therefore, `a <= j`.\n    - `j >= 1` because `j` starts from 1 and is incremented by 1 in each iteration of the loop.\n    - `j <= m+1` because the loop condition is `j <= m`, so when the loop terminates, `j` is equal to `m+1`.\n- After the loop termination:\n    - `a >= -m` because the maximum value of `a` occurs when `unknown1()` returns true for all iterations of the loop, which happens `m` times. Therefore, `a >= -m`.\n    - `a <= m` because the maximum value of `a` occurs when `unknown1()` returns true for all iterations of the loop, which happens `m` times. Therefore, `a <= m`.\n\nPutting it all together, the loop invariants are:\n```\n/*@ \n    loop invariant a >= -j;\n    loop invariant a <= j;\n    loop invariant j >= 1;\n    loop invariant j <= m+1;\n*/\nassume(m > 0);\nassume(a == 0 && j == 1);\nfor(j = 1; j <= m ; j++){\n    if(unknown1()) \n       a++;\n    else\n       a--; \n}\n{;\n//@ assert(a>=-m && a<=m);\n}\n```",
            "Pre-conditions:\n- None\n\nVariable assignments:\n- `a` is initialized to 0\n- `j` is assigned the result of `unknown1()`\n- `m` is assigned the result of `unknown1()`\n\nLoop condition:\n- `j <= m`\n\nLoop invariants:\n- `a >= -m && a <= m` (to satisfy the post-condition)\n- `j >= 1 && j <= m+1` (to ensure the loop runs from 1 to m inclusive)\n\nIn each iteration of the loop, one of the following conditions hold:\n- `unknown1()` is true and `a` is incremented by 1\n- `unknown1()` is false and `a` is decremented by 1\n\nTherefore, we can add the following loop invariant:\n- `a >= -j && a <= j`\n\nSince `m` is non-deterministic, we can add an implication to make the invariant trivially true at the end of the loop:\n- `j == m+1 ==> a >= -m && a <= m`\n\nPutting everything together, the loop invariants are:\n```\n/*@ \n    loop invariant a >= -m && a <= m;\n    loop invariant j >= 1 && j <= m+1;\n    loop invariant a >= -j && a <= j;\n    loop invariant j == m+1 ==> a >= -m && a <= m;\n*/\n```",
            "Pre-conditions:\n- None\n\nVariable assignments:\n- `int a = 0;`\n- `int j = unknown1();`\n- `int m = unknown1();`\n\nLoop condition:\n- `j <= m`\n\nLoop invariants:\n- `a >= -m`\n- `a <= m`\n\nExplanation:\n- Before the loop execution, `a` is assigned to 0, so `a >= -m` and `a <= m` are true.\n- In every iteration of the loop, either `a` is incremented by 1 or decremented by 1. Therefore, `a` can never exceed `m` or go below `-m`. Hence, `a >= -m` and `a <= m` are true in every iteration of the loop.\n- After the loop termination, `j` is greater than `m`, so `a >= -m` and `a <= m` imply that `a` is between `-m` and `m`, inclusive. This satisfies the post-condition of the program. \n\nTherefore, the necessary loop invariants are:\n```\n/*@ \n    loop invariant a >= -m;\n    loop invariant a <= m;\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@ \n  loop invariant 1 <= j <= m;\n  loop invariant a >= -m && a <= m;\n  loop invariant j > m ==> a >= -m && a <= m;\n*/",
            "/*@ \n  loop invariant -m <= a <= m;\n*/",
            "/*@ \n    loop invariant a >= -j;\n    loop invariant a <= j;\n    loop invariant j >= 1;\n    loop invariant j <= m+1;\n*/\nassume(m > 0);\nassume(a == 0 && j == 1);\nfor(j = 1; j <= m ; j++){\n    if(unknown1()) \n       a++;\n    else\n       a--; \n}\n{;\n//@ assert(a>=-m && a<=m);\n}",
            "/*@ \n    loop invariant a >= -m && a <= m;\n    loop invariant j >= 1 && j <= m+1;\n    loop invariant a >= -j && a <= j;\n    loop invariant j == m+1 ==> a >= -m && a <= m;\n*/",
            "/*@ \n    loop invariant a >= -m;\n    loop invariant a <= m;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n  loop invariant 1 <= j <= m;\n  loop invariant a >= -m && a <= m;\n  loop invariant j > m ==> a >= -m && a <= m;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= j <= m is established but not preserved.\nloop invariant a >= -m && a <= m is established but not preserved.\nloop invariant j > m ==> a >= -m && a <= m is partially proven to be inductive.\nAssertion a >= -m && a <= m: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nextern int unknown1();\n\nint main() {\n  int a = 0;\n  int j = unknown1();\n  int m = unknown1();\n  if(m<=0)\n    return 0;\n  /*@\n\n\n\n*/\nfor(j = 1; j <= m ; j++){\n    if(unknown1()) \n       a++;\n    else\n       a--; \n  }\n  {;\n//@ assert(a>=-m && a<=m);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n  loop invariant -m <= a <= m;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant -m <= a <= m is established but not preserved.\nAssertion a >= -m && a <= m: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nextern int unknown1();\n\nint main() {\n  int a = 0;\n  int j = unknown1();\n  int m = unknown1();\n  if(m<=0)\n    return 0;\n  /*@\n\n*/\nfor(j = 1; j <= m ; j++){\n    if(unknown1()) \n       a++;\n    else\n       a--; \n  }\n  {;\n//@ assert(a>=-m && a<=m);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant a >= -j;\n    loop invariant a <= j;\n    loop invariant j >= 1;\n    loop invariant j <= m+1;\n*/\nassume(m > 0);\nassume(a == 0 && j == 1);\nfor(j = 1; j <= m ; j++){\n    if(unknown1()) \n       a++;\n    else\n       a--; \n}\n{;\n//@ assert(a>=-m && a<=m);\n}",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant a >= -j is inductive.\nloop invariant a <= j is inductive.\nloop invariant j >= 1 is inductive.\nloop invariant j <= m+1 is inductive.\nAssertion a >= -m && a <= m: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nextern int unknown1();\n\nint main() {\n  int a = 0;\n  int j = unknown1();\n  int m = unknown1();\n  if(m<=0)\n    return 0;\n  /*@\nloop invariant i1: a >= -j;\nloop invariant i2: a <= j;\nloop invariant i3: j >= 1;\nloop invariant i4: j <= m+1;\n*/\nfor(j = 1; j <= m ; j++){\n    if(unknown1()) \n       a++;\n    else\n       a--; \n  }\n  {;\n//@ assert(a>=-m && a<=m);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant a >= -m && a <= m;\n    loop invariant j >= 1 && j <= m+1;\n    loop invariant a >= -j && a <= j;\n    loop invariant j == m+1 ==> a >= -m && a <= m;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant a >= -m && a <= m is established but not preserved.\nloop invariant j >= 1 && j <= m+1 is partially proven to be inductive.\nloop invariant a >= -j && a <= j is partially proven to be inductive.\nloop invariant j == m+1 ==> a >= -m && a <= m is partially proven to be inductive.\nAssertion a >= -m && a <= m: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nextern int unknown1();\n\nint main() {\n  int a = 0;\n  int j = unknown1();\n  int m = unknown1();\n  if(m<=0)\n    return 0;\n  /*@\n\nloop invariant i2: j >= 1 && j <= m+1;\nloop invariant i3: a >= -j && a <= j;\n\n*/\nfor(j = 1; j <= m ; j++){\n    if(unknown1()) \n       a++;\n    else\n       a--; \n  }\n  {;\n//@ assert(a>=-m && a<=m);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant a >= -m;\n    loop invariant a <= m;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant a >= -m is established but not preserved.\nloop invariant a <= m is established but not preserved.\nAssertion a >= -m && a <= m: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nextern int unknown1();\n\nint main() {\n  int a = 0;\n  int j = unknown1();\n  int m = unknown1();\n  if(m<=0)\n    return 0;\n  /*@\n\n\n*/\nfor(j = 1; j <= m ; j++){\n    if(unknown1()) \n       a++;\n    else\n       a--; \n  }\n  {;\n//@ assert(a>=-m && a<=m);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 1 <= j <= m is established but not preserved.\nloop invariant a >= -m && a <= m is partially proven to be inductive.\nloop invariant j > m ==> a >= -m && a <= m is partially proven to be inductive.\nloop invariant -m <= a <= m is partially proven to be inductive.\nloop invariant a >= -j is partially proven to be inductive.\nloop invariant a <= j is partially proven to be inductive.\nloop invariant j >= 1 is partially proven to be inductive.\nloop invariant j <= m+1 is partially proven to be inductive.\nloop invariant j >= 1 && j <= m+1 is partially proven to be inductive.\nloop invariant a >= -j && a <= j is partially proven to be inductive.\nloop invariant j == m+1 ==> a >= -m && a <= m is partially proven to be inductive.\nloop invariant a >= -m is partially proven to be inductive.\nloop invariant a <= m is partially proven to be inductive.\nAssertion a >= -m && a <= m: Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n\nextern int unknown1();\n\nint main() {\n  int a = 0;\n  int j = unknown1();\n  int m = unknown1();\n  if(m<=0)\n    return 0;\n  /*@\nloop invariant i1: 1 <= j <= m;\nloop invariant i2: a >= -m && a <= m;\nloop invariant i3: j > m ==> a >= -m && a <= m;\nloop invariant i4: -m <= a <= m;\nloop invariant i5: a >= -j;\nloop invariant i6: a <= j;\nloop invariant i7: j >= 1;\nloop invariant i8: j <= m+1;\nloop invariant i9: j >= 1 && j <= m+1;\nloop invariant i10: a >= -j && a <= j;\nloop invariant i11: j == m+1 ==> a >= -m && a <= m;\nloop invariant i12: a >= -m;\nloop invariant i13: a <= m;\n*/\nfor(j = 1; j <= m ; j++){\n    if(unknown1()) \n       a++;\n    else\n       a--; \n  }\n  {;\n//@ assert(a>=-m && a<=m);\n}\n\n}",
        "combined_annotation_num_solver_calls": 8,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nextern int unknown1();\n\nint main() {\n  int a = 0;\n  int j = unknown1();\n  int m = unknown1();\n  if(m<=0)\n    return 0;\n  /*@\n\n\n\n\nloop invariant i5: a >= -j;\nloop invariant i6: a <= j;\nloop invariant i7: j >= 1;\nloop invariant i8: j <= m+1;\nloop invariant i9: j >= 1 && j <= m+1;\nloop invariant i10: a >= -j && a <= j;\n\n\n\n*/\nfor(j = 1; j <= m ; j++){\n    if(unknown1()) \n       a++;\n    else\n       a--; \n  }\n  {;\n//@ assert(a>=-m && a<=m);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c"
        ],
        "skipped": [],
        "total": 165,
        "success_count": 68,
        "failure_count": 97,
        "success_rate": 0.4121212121212121
    }
}