{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\n  int i, c;\n  i = 0;\n  c = 0;\n  while (i < 1000) {\n    c = c + i;\n    i = i + 1;\n  }\n\n  {;\n//@ assert(c>=0);\n}\n\n}\n",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main() {\n\n  int i, c;\n  i = 0;\n  c = 0;\n  while (i < 1000) {\n    c = c + i;\n    i = i + 1;\n  }\n\n  {;\n//@ assert(c>=0);\n}\n\n}\n\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions/Variable assignments:\n- The program defines a macro `assume(e)` which returns 0 if the expression `!(e)` evaluates to true.\n- The program initializes two integer variables `i` and `c` to 0.\n\nLoop condition:\n- The loop continues to execute as long as the value of `i` is less than 1000.\n\nLoop Invariants:\n- Before the loop execution, the value of `c` is 0. Therefore, `c >= 0`.\n- In every iteration of the loop, the value of `c` is the sum of all the integers from 0 to `i-1`. Therefore, `c == (i-1)*i/2`.\n- In every iteration of the loop, the value of `i` is less than or equal to 1000. Therefore, `i <= 1000`.\n- After the loop termination, the value of `i` is equal to 1000. Therefore, `i == 1000`.\n- After the loop termination, the value of `c` is the sum of all the integers from 0 to 999. Therefore, `c == 999*1000/2`.\n\nCombining the above loop invariants, we get:\n```\n/*@ \n    loop invariant i >= 0 && i <= 1000;\n    loop invariant c == (i-1)*i/2;\n    loop invariant i == 1000 ==> c == 999*1000/2;\n    loop invariant c >= 0;\n*/\n```\nHere, the first invariant is true before the loop execution, the second and third invariant are true in every iteration of the loop, and the fourth invariant is true after the loop termination. \n\nNote that we have used the implication `i == 1000 ==> c == 999*1000/2` to take into account the fact that `c` is only equal to the sum of integers from 0 to 999 after the loop termination when `i` is equal to 1000.",
            "Pre-conditions:\n- None\n\nVariable assignments:\n- i is assigned 0\n- c is assigned 0\n\nLoop condition:\n- i < 1000\n\nLoop body:\n- c = c + i\n- i = i + 1\n\nPost-condition:\n- c >= 0\n\nLoop Invariants:\n- Before the loop execution:\n    - i == 0\n    - c == 0\n- In every iteration of the loop:\n    - 0 <= i <= 999\n    - 0 <= c <= i*(i+1)/2\n- After the loop termination:\n    - c == 499500\n- The loop invariants imply the post-condition:\n    - c == i*(i+1)/2 and i >= 0\n    - Therefore, c >= 0 is always true\n\nPutting it all together, the loop invariants are:\n```\n/*@ \n    loop invariant i == 0;\n    loop invariant c == 0;\n    loop invariant 0 <= i <= 999;\n    loop invariant 0 <= c <= i*(i+1)/2;\n    loop invariant c == 499500 ==> i >= 1000;\n*/\n```",
            "Pre-conditions:\n- None.\n\nVariable assignments:\n- i is assigned the value 0.\n- c is assigned the value 0.\n\nLoop condition:\n- The loop will execute while i is less than 1000.\n\nLoop invariants:\n- Before the loop execution: none.\n- In every iteration of the loop: \n    - i is between 0 and 1000 (inclusive): `0 <= i <= 1000`.\n    - c is the sum of the first i natural numbers: `c == (i*(i+1))/2`.\n- After the loop termination: `c == 499500` (sum of first 1000 natural numbers) implies `c >= 0`.\n\nExplanation:\n- Before the loop execution, there are no loop invariants that need to be satisfied.\n- In every iteration of the loop, we need to ensure that i is between 0 and 1000 (inclusive) since the loop condition is that i is less than 1000. We also need to ensure that c is the sum of the first i natural numbers. This is because the loop adds i to c in each iteration, so c will be the sum of the first i natural numbers when the loop terminates. We can express this using the formula for the sum of the first n natural numbers: `1 + 2 + ... + n = n*(n+1)/2`. Therefore, we get the loop invariants: `0 <= i <= 1000` and `c == (i*(i+1))/2`.\n- After the loop termination, we know that c is the sum of the first 1000 natural numbers. We also need to ensure that c is non-negative since the assertion is `c >= 0`. Therefore, we get the loop invariant: `c == 499500` implies `c >= 0`.\n\nPutting it all together, the loop invariants are:\n```\n/*@ \n    loop invariant 0 <= i <= 1000;\n    loop invariant c == (i*(i+1))/2;\n    loop invariant c == 499500 ==> c >= 0;\n*/\n```",
            "Pre-conditions:\n- None\n\nVariable assignments:\n- i is assigned 0\n- c is assigned 0\n\nLoop condition:\n- i < 1000\n\nLoop body:\n- c = c + i;\n- i = i + 1;\n\nPost-condition:\n- c >= 0\n\nLoop Invariants:\n- Before the loop execution: \n    - c == 0\n    - i == 0\n- In every iteration of the loop:\n    - 0 <= i <= 999\n    - c == (i*(i-1))/2\n- After the loop termination:\n    - c == 499*999\n    - i == 1000\n    - c >= 0\n\nExplanation of loop invariants:\n\n- Before the loop execution:\n    - Since c and i are assigned 0 before the loop execution, their values are 0.\n- In every iteration of the loop:\n    - The lower bound of i is 0 since it is initialized to 0 and i increases by 1 in every iteration. The upper bound of i is 999 since the loop condition is i < 1000. \n    - The value of c is the sum of all values of i from 0 to i-1. This can be written as (i-1)*i/2. Therefore, c == (i*(i-1))/2 holds true in every iteration.\n- After the loop termination:\n    - The loop terminates when i becomes 1000. Therefore, after the loop, i is equal to 1000.\n    - The value of c after the loop termination is the sum of all values of i from 0 to 999. This can be written as 999*1000/2 = 499*999. Therefore, c == 499*999 holds true after the loop termination.\n    - Since c is always non-negative in every iteration of the loop, it must be non-negative after the loop termination as well. Therefore, c >= 0 holds true after the loop termination.\n\nNote that we do not need to add any special cases for non-deterministic variables or use implication for the assertion, as there are no non-deterministic variables and the assertion is not guarded by any condition.",
            "Pre-conditions:\n- None\n\nVariable assignments:\n- i is assigned the value 0.\n- c is assigned the value 0.\n\nLoop condition:\n- i < 1000\n\nLoop body:\n- c is assigned the value of the sum of i and c.\n- i is incremented by 1.\n\nLoop invariants:\n- Before the loop:\n    - i >= 0\n    - c == 0\n- In every iteration of the loop:\n    - 0 <= i <= 999\n    - c == (i * (i + 1)) / 2\n- After the loop:\n    - c == (i * (i + 1)) / 2\n    - i == 1000 ==> c >= 0\n\nExplanation:\n- Before the loop: \n    - i is initialized to 0, so i >= 0.\n    - c is initialized to 0, so c == 0.\n- In every iteration of the loop:\n    - i starts from 0 and is incremented by 1 in each iteration, so 0 <= i <= 999.\n    - The sum of the first n natural numbers is n(n+1)/2. Therefore, c should be equal to (i*(i+1))/2 after every iteration.\n- After the loop:\n    - The final value of i is 1000, so c should be (1000*1001)/2, which is a positive value.\n    - Therefore, i == 1000 ==> c >= 0.\n\nPutting it all together:\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant c == 0;\n    loop invariant 0 <= i <= 999;\n    loop invariant c == (i * (i + 1)) / 2;\n    loop invariant (i == 1000) ==> c >= 0;\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant i >= 0 && i <= 1000;\n    loop invariant c == (i-1)*i/2;\n    loop invariant i == 1000 ==> c == 999*1000/2;\n    loop invariant c >= 0;\n*/",
            "/*@ \n    loop invariant i == 0;\n    loop invariant c == 0;\n    loop invariant 0 <= i <= 999;\n    loop invariant 0 <= c <= i*(i+1)/2;\n    loop invariant c == 499500 ==> i >= 1000;\n*/",
            "/*@ \n    loop invariant 0 <= i <= 1000;\n    loop invariant c == (i*(i+1))/2;\n    loop invariant c == 499500 ==> c >= 0;\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- None\n\nVariable assignments:\n- i is assigned 0\n- c is assigned 0\n\nLoop condition:\n- i < 1000\n\nLoop body:\n- c = c + i;\n- i = i + 1;\n\nPost-condition:\n- c >= 0\n\nLoop Invariants:\n- Before the loop execution: \n    - c == 0\n    - i == 0\n- In every iteration of the loop:\n    - 0 <= i <= 999\n    - c == (i*(i-1))/2\n- After the loop termination:\n    - c == 499*999\n    - i == 1000\n    - c >= 0\n\nExplanation of loop invariants:\n\n- Before the loop execution:\n    - Since c and i are assigned 0 before the loop execution, their values are 0.\n- In every iteration of the loop:\n    - The lower bound of i is 0 since it is initialized to 0 and i increases by 1 in every iteration. The upper bound of i is 999 since the loop condition is i < 1000. \n    - The value of c is the sum of all values of i from 0 to i-1. This can be written as (i-1)*i/2. Therefore, c == (i*(i-1))/2 holds true in every iteration.\n- After the loop termination:\n    - The loop terminates when i becomes 1000. Therefore, after the loop, i is equal to 1000.\n    - The value of c after the loop termination is the sum of all values of i from 0 to 999. This can be written as 999*1000/2 = 499*999. Therefore, c == 499*999 holds true after the loop termination.\n    - Since c is always non-negative in every iteration of the loop, it must be non-negative after the loop termination as well. Therefore, c >= 0 holds true after the loop termination.\n\nNote that we do not need to add any special cases for non-deterministic variables or use implication for the assertion, as there are no non-deterministic variables and the assertion is not guarded by any condition."
            ],
            "/*@ \n    loop invariant i >= 0;\n    loop invariant c == 0;\n    loop invariant 0 <= i <= 999;\n    loop invariant c == (i * (i + 1)) / 2;\n    loop invariant (i == 1000) ==> c >= 0;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant i >= 0 && i <= 1000;\n    loop invariant c == (i-1)*i/2;\n    loop invariant i == 1000 ==> c == 999*1000/2;\n    loop invariant c >= 0;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant i >= 0 && i <= 1000 is inductive.\nloop invariant c == (i-1)*i/2 is inductive.\nloop invariant i == 1000 ==> c == 999*1000/2 is inductive.\nloop invariant c >= 0 is inductive.\nAssertion c >= 0: Valid"
            },
            {
                "num_solver_calls": 5,
                "annotations": "/*@ \n    loop invariant i == 0;\n    loop invariant c == 0;\n    loop invariant 0 <= i <= 999;\n    loop invariant 0 <= c <= i*(i+1)/2;\n    loop invariant c == 499500 ==> i >= 1000;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i == 0 is established but not preserved.\nloop invariant c == 0 is partially proven to be inductive.\nloop invariant 0 <= i <= 999 is partially proven to be inductive.\nloop invariant 0 <= c <= i*(i+1)/2 is partially proven to be inductive.\nloop invariant c == 499500 ==> i >= 1000 is partially proven to be inductive.\nAssertion c >= 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\n  int i, c;\n  i = 0;\n  c = 0;\n  /*@\n\n\n\n\n\n*/\nwhile (i < 1000) {\n    c = c + i;\n    i = i + 1;\n  }\n\n  {;\n//@ assert(c>=0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= i <= 1000;\n    loop invariant c == (i*(i+1))/2;\n    loop invariant c == 499500 ==> c >= 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 1000 is partially proven to be inductive.\nloop invariant c == (i*(i+1))/2 is established but not preserved.\nloop invariant c == 499500 ==> c >= 0 is partially proven to be inductive.\nAssertion c >= 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\n  int i, c;\n  i = 0;\n  c = 0;\n  /*@\nloop invariant i1: 0 <= i <= 1000;\n\nloop invariant i3: c == 499500 ==> c >= 0;\n*/\nwhile (i < 1000) {\n    c = c + i;\n    i = i + 1;\n  }\n\n  {;\n//@ assert(c>=0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- None\n\nVariable assignments:\n- i is assigned 0\n- c is assigned 0\n\nLoop condition:\n- i < 1000\n\nLoop body:\n- c = c + i;\n- i = i + 1;\n\nPost-condition:\n- c >= 0\n\nLoop Invariants:\n- Before the loop execution: \n    - c == 0\n    - i == 0\n- In every iteration of the loop:\n    - 0 <= i <= 999\n    - c == (i*(i-1))/2\n- After the loop termination:\n    - c == 499*999\n    - i == 1000\n    - c >= 0\n\nExplanation of loop invariants:\n\n- Before the loop execution:\n    - Since c and i are assigned 0 before the loop execution, their values are 0.\n- In every iteration of the loop:\n    - The lower bound of i is 0 since it is initialized to 0 and i increases by 1 in every iteration. The upper bound of i is 999 since the loop condition is i < 1000. \n    - The value of c is the sum of all values of i from 0 to i-1. This can be written as (i-1)*i/2. Therefore, c == (i*(i-1))/2 holds true in every iteration.\n- After the loop termination:\n    - The loop terminates when i becomes 1000. Therefore, after the loop, i is equal to 1000.\n    - The value of c after the loop termination is the sum of all values of i from 0 to 999. This can be written as 999*1000/2 = 499*999. Therefore, c == 499*999 holds true after the loop termination.\n    - Since c is always non-negative in every iteration of the loop, it must be non-negative after the loop termination as well. Therefore, c >= 0 holds true after the loop termination.\n\nNote that we do not need to add any special cases for non-deterministic variables or use implication for the assertion, as there are no non-deterministic variables and the assertion is not guarded by any condition.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 6,
                "annotations": "/*@ \n    loop invariant i >= 0;\n    loop invariant c == 0;\n    loop invariant 0 <= i <= 999;\n    loop invariant c == (i * (i + 1)) / 2;\n    loop invariant (i == 1000) ==> c >= 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 0 is partially proven to be inductive.\nloop invariant c == 0 is partially proven to be inductive.\nloop invariant 0 <= i <= 999 is partially proven to be inductive.\nloop invariant c == (i * (i + 1)) / 2 is established but not preserved.\nloop invariant (i == 1000) ==> c >= 0 is partially proven to be inductive.\nAssertion c >= 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\n  int i, c;\n  i = 0;\n  c = 0;\n  /*@\nloop invariant i1: i >= 0;\n\n\n\n\n*/\nwhile (i < 1000) {\n    c = c + i;\n    i = i + 1;\n  }\n\n  {;\n//@ assert(c>=0);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant i >= 0 && i <= 1000 is partially proven to be inductive.\nloop invariant c == (i-1)*i/2 is partially proven to be inductive.\nloop invariant i == 1000 ==> c == 999*1000/2 is partially proven to be inductive.\nloop invariant c >= 0 is partially proven to be inductive.\nloop invariant i == 0 is established but not preserved.\nloop invariant c == 0 is partially proven to be inductive.\nloop invariant 0 <= i <= 999 is partially proven to be inductive.\nloop invariant 0 <= c <= i*(i+1)/2 is partially proven to be inductive.\nloop invariant c == 499500 ==> i >= 1000 is partially proven to be inductive.\nloop invariant 0 <= i <= 1000 is partially proven to be inductive.\nloop invariant c == (i*(i+1))/2 is partially proven to be inductive.\nloop invariant c == 499500 ==> c >= 0 is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant c == (i * (i + 1)) / 2 is partially proven to be inductive.\nloop invariant (i == 1000) ==> c >= 0 is partially proven to be inductive.\nAssertion c >= 0: Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\n  int i, c;\n  i = 0;\n  c = 0;\n  /*@\nloop invariant i1: i >= 0 && i <= 1000;\nloop invariant i2: c == (i-1)*i/2;\nloop invariant i3: i == 1000 ==> c == 999*1000/2;\nloop invariant i4: c >= 0;\nloop invariant i5: i == 0;\nloop invariant i6: c == 0;\nloop invariant i7: 0 <= i <= 999;\nloop invariant i8: 0 <= c <= i*(i+1)/2;\nloop invariant i9: c == 499500 ==> i >= 1000;\nloop invariant i10: 0 <= i <= 1000;\nloop invariant i11: c == (i*(i+1))/2;\nloop invariant i12: c == 499500 ==> c >= 0;\nloop invariant i13: i >= 0;\nloop invariant i14: c == (i * (i + 1)) / 2;\nloop invariant i15: (i == 1000) ==> c >= 0;\n*/\nwhile (i < 1000) {\n    c = c + i;\n    i = i + 1;\n  }\n\n  {;\n//@ assert(c>=0);\n}\n\n}\n",
        "combined_annotation_num_solver_calls": 6,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\n  int i, c;\n  i = 0;\n  c = 0;\n  /*@\nloop invariant i1: i >= 0 && i <= 1000;\nloop invariant i2: c == (i-1)*i/2;\nloop invariant i3: i == 1000 ==> c == 999*1000/2;\nloop invariant i4: c >= 0;\n\n\n\nloop invariant i8: 0 <= c <= i*(i+1)/2;\nloop invariant i9: c == 499500 ==> i >= 1000;\nloop invariant i10: 0 <= i <= 1000;\n\nloop invariant i12: c == 499500 ==> c >= 0;\nloop invariant i13: i >= 0;\n\nloop invariant i15: (i == 1000) ==> c >= 0;\n*/\nwhile (i < 1000) {\n    c = c + i;\n    i = i + 1;\n  }\n\n  {;\n//@ assert(c>=0);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c"
        ],
        "skipped": [],
        "total": 174,
        "success_count": 73,
        "failure_count": 101,
        "success_rate": 0.41954022988505746
    }
}