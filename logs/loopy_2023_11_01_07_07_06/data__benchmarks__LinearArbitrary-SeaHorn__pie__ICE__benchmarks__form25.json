{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3,x4;\n  int x1p,x2p,x3p,x4p, input;\n\n  x1 = x2 = x3 = 0; x4 = -1;\n  input = unknown_int();\n  while(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n    x4p = unknown_int();\n\n    if (x1p <= 0 && x1p >= x4p + 1 && x2p == x3p && (x4p >= 0 || x4p <= x3p))\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n\tx4 = x4p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3));\n}\n\n}\n",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3,x4;\n  int x1p,x2p,x3p,x4p, input;\n\n  x1 = x2 = x3 = 0; x4 = -1;\n  input = unknown_int();\n  while(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n    x4p = unknown_int();\n\n    if (x1p <= 0 && x1p >= x4p + 1 && x2p == x3p && (x4p >= 0 || x4p <= x3p))\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n\tx4 = x4p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3));\n}\n\n}\n\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "First, let's note the preconditions and variable assignments in the program:\n- `assume(e)` is a macro defined to return 0 if the expression `e` is false.\n- `unknown_int()` is an external function that returns an unknown integer value.\n- `x1`, `x2`, `x3`, and `x4` are initialized to 0, 0, 0, and -1 respectively.\n- `input` is assigned the value of `unknown_int()` before the loop.\n\nNow, let's analyze the loop body:\n- Four integer variables `x1p`, `x2p`, `x3p`, and `x4p` are assigned unknown integer values.\n- If the conditions `(x1p <= 0 && x1p >= x4p + 1 && x2p == x3p && (x4p >= 0 || x4p <= x3p))` are satisfied, then `x1`, `x2`, `x3`, and `x4` are updated to `x1p`, `x2p`, `x3p`, and `x4p` respectively.\n\nNow, let's output the necessary loop invariants:\n```\n/*@\n    loop invariant -2147483648 <= x1 <= 0;\n    loop invariant -2147483648 <= x2 <= 2147483647;\n    loop invariant -2147483648 <= x3 <= 2147483647;\n    loop invariant -2147483648 <= x4 <= 2147483646;\n    loop invariant x1 >= x4 + 1 ==> x2 == x3;\n    loop invariant x1 <= 0 ==> x1 <= x4 + 1;\n    loop invariant x2 == x3 ==> x4 >= 0 || x4 <= x3;\n    loop invariant input == 0 || (x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3));\n*/\n```\nExplanation of the loop invariants:\n- The first four loop invariants bound the maximum and minimum values that the variables `x1`, `x2`, `x3`, and `x4` can take.\n- The fifth loop invariant is an implication that says if `x1` is greater than or equal to `x4+1`, then `x2` must be equal to `x3`. This is because of the condition `(x2p == x3p)` in the loop body.\n- The sixth loop invariant is an implication that says if `x1` is less than or equal to 0, then `x1` must be less than or equal to `x4+1`. This is because of the condition `(x1p <= 0 && x1p >= x4p + 1)` in the loop body.\n- The seventh loop invariant is an implication that says if `x2` is equal to `x3`, then `x4` must be greater than or equal to 0 or less than or equal to `x3`. This is because of the condition `(x4p >= 0 || x4p <= x3p)` in the loop body.\n- The eighth loop invariant is an implication that says if `input` is not equal to 0, then the condition `(x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3))` must be true. This is because the assertion is guarded by the condition `input != 0`.",
            "Pre-conditions:\n- The macro `assume(e)` checks if the expression `e` is true. If it is not true, the program returns 0 and terminates.\n- The external function `unknown_int()` returns an unknown integer value.\n\nVariable assignments:\n- `x1`, `x2`, `x3` are initialized to 0.\n- `x4` is initialized to -1.\n\nLoop condition:\n- The loop continues as long as `input` is non-zero.\n\nLoop invariants:\n```\n/*@ \n   loop invariant -1 <= x4 <= \\max_int;\n   loop invariant x1 <= 0;\n   loop invariant x1 >= x4 + 1;\n   loop invariant x2 == x3;\n   loop invariant x4 >= 0 ==> x4 <= x3;\n*/\n```\nExplanation:\n- Since `x4` is initialized to -1, it is always greater than or equal to -1. It cannot exceed the maximum integer value, hence the first loop invariant.\n- The second loop invariant follows directly from the conditional statement in the loop body: `x1p <= 0`. Since `x1` is assigned the value of `x1p`, it follows that `x1 <= 0`.\n- The third loop invariant follows directly from the conditional statement in the loop body: `x1p >= x4p + 1`. Since `x1` is assigned the value of `x1p` and `x4` is assigned the value of `x4p`, it follows that `x1 >= x4 + 1`.\n- The fourth loop invariant follows directly from the conditional statement in the loop body: `x2p == x3p`. Since `x2` is assigned the value of `x2p` and `x3` is assigned the value of `x3p`, it follows that `x2 == x3`.\n- The fifth loop invariant follows directly from the conditional statement in the loop body: `(x4p >= 0 || x4p <= x3p)`. Since `x4` is assigned the value of `x4p` and `x3` is assigned the value of `x3p`, it follows that `x4 >= 0 ==> x4 <= x3`.\n\nPost-condition:\n- The assertion is guarded by the end of the loop, hence we use an implication. The assertion is true if and only if the loop invariants are true at the end of the loop and `input` is equal to 0.\n```\n{;\n  //@ assert input == 0 ==> (x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3));\n}\n```",
            "Pre-conditions:\n- The program does not have any pre-conditions.\n- Variables x1, x2, and x3 are initialized to 0, and variable x4 is initialized to -1.\n\nLoop condition:\n- The while loop executes as long as the variable \"input\" is non-zero.\n\nLoop invariants:\n- x1 <= 0 && x4 + 1 <= x1\n- x2 == x3\n- x4 < 0 ==> x4p < 0\n- x4 >= 0 ==> x4p <= x4\n- If (x1p <= 0 && x1p >= x4p + 1 && x2p == x3p && (x4p >= 0 || x4p <= x3p)) holds, then:\n    - x1 <= 0 && x4 + 1 <= x1p\n    - x2 == x2p\n    - x3 == x3p\n    - x4 <= x3p\n\nPost-condition:\n- If the loop terminates, then the following assertion holds:\n    - x1 <= 0 && x4 + 1 <= x1 && x2 == x3 && (x4 >= 0 || x4 <= x3)\n\nPutting all the loop invariants together, we get:\n\n```\n/*@ \n    loop invariant x1 <= 0 && x4 + 1 <= x1;\n    loop invariant x2 == x3;\n    loop invariant x4 < 0 ==> x4p < 0;\n    loop invariant x4 >= 0 ==> x4p <= x4;\n    loop invariant (x1p <= 0 && x1p >= x4p + 1 && x2p == x3p && (x4p >= 0 || x4p <= x3p)) ==> (x1 <= 0 && x4 + 1 <= x1p && x2 == x2p && x3 == x3p && x4 <= x3p);\n    loop invariant input != 0 ==> (x1 <= 0 && x4 + 1 <= x1 && x2 == x3 && (x4 >= 0 || x4 <= x3));\n*/\n``` \n\nNote that the loop invariant for the conditional statement inside the loop is a conditional invariant, which uses implication to take care of the conditional nature of the code. The loop invariant for the guard condition of the loop is also a conditional invariant, which uses implication to make the invariant trivially true when the loop starts.",
            "Pre-conditions and variable assignments:\n- The program defines a macro `assume` that takes a boolean expression and returns 0 if the expression is false.\n- The program declares an external function `unknown_int()` that returns an integer.\n- The program declares four integer variables `x1`, `x2`, `x3`, and `x4`.\n- The program declares four integer variables `x1p`, `x2p`, `x3p`, and `x4p`.\n- The program initializes `x1`, `x2`, `x3` to 0 and `x4` to -1.\n- The program reads an integer value into `input`.\n\nLoop condition:\n- The program enters a while loop while `input` is non-zero.\n\nLoop invariants:\n- Before the loop, `x1 <= 0` and `x2 == 0` and `x3 == 0` and `x4 == -1`.\n- In every iteration of the loop, the following conditions hold:\n  - `x1 <= 0`\n  - `x2 == x3`\n  - `x4 >= -1`\n  - `x1 <= x4 + 1`\n  - `x4 <= x3 ==> x4 >= 0`\n  - `x1p <= 0 && x1p >= x4p + 1 && x2p == x3p && (x4p >= 0 || x4p <= x3p)` ==> `x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3)`\n- After the loop, the assertion holds under the condition that the loop is executed at least once:\n  - `input == 0` ==> `x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3)`\n\nCombining all the loop invariants, we get the following code block:\n```\n/*@ \n    loop invariant x1 <= 0;\n    loop invariant x2 == x3;\n    loop invariant x4 >= -1;\n    loop invariant x1 <= x4 + 1;\n    loop invariant x4 <= x3 ==> x4 >= 0;\n    loop invariant x1p <= 0 && x1p >= x4p + 1 && x2p == x3p && (x4p >= 0 || x4p <= x3p) ==> x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3);\n\n    loop variant input;\n*/\n```",
            "Pre-conditions:\n- The macro `assume(e)` checks if the expression `e` is true. If it is not true, the program returns 0. \n- The function `unknown_int()` returns an unknown integer value.\n\nVariable Assignments:\n- `x1`, `x2`, and `x3` are initialized to 0.\n- `x4` is initialized to -1.\n- `input` is assigned an unknown integer value.\n\nLoop condition:\n- The loop continues until `input` becomes 0.\n\nLoop Invariants:\n- `x1 <= 0` and `x1 >= x4 + 1` and `x2 == x3` and `(x4 >= 0 || x4 <= x3)` are true before the loop execution.\n- In each iteration of the loop, the following conditions are true:\n    - `x1 <= 0` and `x1 >= x4 + 1` and `x2 == x3` and `(x4 >= 0 || x4 <= x3)`\n    - `x1p <= 0` and `x1p >= x4p + 1` and `x2p == x3p` and `(x4p >= 0 || x4p <= x3p)`\n    - `(x1p <= 0 && x1p >= x4p + 1 && x2p == x3p && (x4p >= 0 || x4p <= x3p)) ==> (x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3))`\n- After the loop terminates, the following conditions are true:\n    - `x1 <= 0` and `x1 >= x4 + 1` and `x2 == x3` and `(x4 >= 0 || x4 <= x3)`\n    - The assertion `x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3)` is true (guarded by the condition `input == 0`).\n\nWe can combine all the loop invariants into one code block as follows:\n\n```\n/*@ \n    loop invariant x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3);\n    loop invariant x1p <= 0 && x1p >= x4p + 1 && x2p == x3p && (x4p >= 0 || x4p <= x3p);\n    loop invariant (x1p <= 0 && x1p >= x4p + 1 && x2p == x3p && (x4p >= 0 || x4p <= x3p)) ==> (x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3));\n    loop invariant input == 0 ==> (x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3));\n    loop assigns x1, x2, x3, x4;\n*/\n``` \n\nNote that the loop assigns clause specifies the variables modified in the loop. Here, `x1`, `x2`, `x3`, and `x4` are assigned new values in each iteration of the loop."
        ],
        "annotation_blocks": [
            "/*@\n    loop invariant -2147483648 <= x1 <= 0;\n    loop invariant -2147483648 <= x2 <= 2147483647;\n    loop invariant -2147483648 <= x3 <= 2147483647;\n    loop invariant -2147483648 <= x4 <= 2147483646;\n    loop invariant x1 >= x4 + 1 ==> x2 == x3;\n    loop invariant x1 <= 0 ==> x1 <= x4 + 1;\n    loop invariant x2 == x3 ==> x4 >= 0 || x4 <= x3;\n    loop invariant input == 0 || (x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3));\n*/",
            "/*@ \n   loop invariant -1 <= x4 <= \\max_int;\n   loop invariant x1 <= 0;\n   loop invariant x1 >= x4 + 1;\n   loop invariant x2 == x3;\n   loop invariant x4 >= 0 ==> x4 <= x3;\n*/",
            "/*@ \n    loop invariant x1 <= 0 && x4 + 1 <= x1;\n    loop invariant x2 == x3;\n    loop invariant x4 < 0 ==> x4p < 0;\n    loop invariant x4 >= 0 ==> x4p <= x4;\n    loop invariant (x1p <= 0 && x1p >= x4p + 1 && x2p == x3p && (x4p >= 0 || x4p <= x3p)) ==> (x1 <= 0 && x4 + 1 <= x1p && x2 == x2p && x3 == x3p && x4 <= x3p);\n    loop invariant input != 0 ==> (x1 <= 0 && x4 + 1 <= x1 && x2 == x3 && (x4 >= 0 || x4 <= x3));\n*/",
            "/*@ \n    loop invariant x1 <= 0;\n    loop invariant x2 == x3;\n    loop invariant x4 >= -1;\n    loop invariant x1 <= x4 + 1;\n    loop invariant x4 <= x3 ==> x4 >= 0;\n    loop invariant x1p <= 0 && x1p >= x4p + 1 && x2p == x3p && (x4p >= 0 || x4p <= x3p) ==> x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3);\n\n    loop variant input;\n*/",
            "/*@ \n    loop invariant x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3);\n    loop invariant x1p <= 0 && x1p >= x4p + 1 && x2p == x3p && (x4p >= 0 || x4p <= x3p);\n    loop invariant (x1p <= 0 && x1p >= x4p + 1 && x2p == x3p && (x4p >= 0 || x4p <= x3p)) ==> (x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3));\n    loop invariant input == 0 ==> (x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3));\n    loop assigns x1, x2, x3, x4;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "/*@\n    loop invariant -2147483648 <= x1 <= 0;\n    loop invariant -2147483648 <= x2 <= 2147483647;\n    loop invariant -2147483648 <= x3 <= 2147483647;\n    loop invariant -2147483648 <= x4 <= 2147483646;\n    loop invariant x1 >= x4 + 1 ==> x2 == x3;\n    loop invariant x1 <= 0 ==> x1 <= x4 + 1;\n    loop invariant x2 == x3 ==> x4 >= 0 || x4 <= x3;\n    loop invariant input == 0 || (x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3));\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant -2147483648 <= x1 <= 0 is partially proven to be inductive.\nloop invariant -2147483648 <= x2 <= 2147483647 is partially proven to be inductive.\nloop invariant -2147483648 <= x3 <= 2147483647 is partially proven to be inductive.\nloop invariant -2147483648 <= x4 <= 2147483646 is partially proven to be inductive.\nloop invariant x1 >= x4 + 1 ==> x2 == x3 is partially proven to be inductive.\nloop invariant x1 <= 0 ==> x1 <= x4 + 1 is established but not preserved.\nloop invariant x2 == x3 ==> x4 >= 0 || x4 <= x3 is partially proven to be inductive.\nloop invariant input == 0 || (x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3)) is partially proven to be inductive.\nAssertion x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3): Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3,x4;\n  int x1p,x2p,x3p,x4p, input;\n\n  x1 = x2 = x3 = 0; x4 = -1;\n  input = unknown_int();\n  /*@\nloop invariant i1: -2147483648 <= x1 <= 0;\nloop invariant i2: -2147483648 <= x2 <= 2147483647;\nloop invariant i3: -2147483648 <= x3 <= 2147483647;\nloop invariant i4: -2147483648 <= x4 <= 2147483646;\nloop invariant i5: x1 >= x4 + 1 ==> x2 == x3;\n\nloop invariant i7: x2 == x3 ==> x4 >= 0 || x4 <= x3;\nloop invariant i8: input == 0 || (x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3));\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n    x4p = unknown_int();\n\n    if (x1p <= 0 && x1p >= x4p + 1 && x2p == x3p && (x4p >= 0 || x4p <= x3p))\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n\tx4 = x4p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n   loop invariant -1 <= x4 <= \\max_int;\n   loop invariant x1 <= 0;\n   loop invariant x1 >= x4 + 1;\n   loop invariant x2 == x3;\n   loop invariant x4 >= 0 ==> x4 <= x3;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: unbound logic variable \\max_int. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3,x4;\n  int x1p,x2p,x3p,x4p, input;\n\n  x1 = x2 = x3 = 0; x4 = -1;\n  input = unknown_int();\n  /*@\n\nloop invariant i2: x1 <= 0;\nloop invariant i3: x1 >= x4 + 1;\nloop invariant i4: x2 == x3;\nloop invariant i5: x4 >= 0 ==> x4 <= x3;\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n    x4p = unknown_int();\n\n    if (x1p <= 0 && x1p >= x4p + 1 && x2p == x3p && (x4p >= 0 || x4p <= x3p))\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n\tx4 = x4p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x1 <= 0 && x4 + 1 <= x1;\n    loop invariant x2 == x3;\n    loop invariant x4 < 0 ==> x4p < 0;\n    loop invariant x4 >= 0 ==> x4p <= x4;\n    loop invariant (x1p <= 0 && x1p >= x4p + 1 && x2p == x3p && (x4p >= 0 || x4p <= x3p)) ==> (x1 <= 0 && x4 + 1 <= x1p && x2 == x2p && x3 == x3p && x4 <= x3p);\n    loop invariant input != 0 ==> (x1 <= 0 && x4 + 1 <= x1 && x2 == x3 && (x4 >= 0 || x4 <= x3));\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x1 <= 0 && x4 + 1 <= x1 is partially proven to be inductive.\nloop invariant x2 == x3 is partially proven to be inductive.\nloop invariant x4 < 0 ==> x4p < 0 is neither established nor preserved.\nloop invariant x4 >= 0 ==> x4p <= x4 is partially proven to be inductive.\nloop invariant (x1p <= 0 && x1p >= x4p + 1 && x2p == x3p && (x4p >= 0 || x4p <= x3p)) ==> (x1 <= 0 && x4 + 1 <= x1p && x2 == x2p && x3 == x3p && x4 <= x3p) is preserved but not established.\nloop invariant input != 0 ==> (x1 <= 0 && x4 + 1 <= x1 && x2 == x3 && (x4 >= 0 || x4 <= x3)) is partially proven to be inductive.\nAssertion x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3): Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3,x4;\n  int x1p,x2p,x3p,x4p, input;\n\n  x1 = x2 = x3 = 0; x4 = -1;\n  input = unknown_int();\n  /*@\nloop invariant i1: x1 <= 0 && x4 + 1 <= x1;\nloop invariant i2: x2 == x3;\n\nloop invariant i4: x4 >= 0 ==> x4p <= x4;\n\nloop invariant i6: input != 0 ==> (x1 <= 0 && x4 + 1 <= x1 && x2 == x3 && (x4 >= 0 || x4 <= x3));\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n    x4p = unknown_int();\n\n    if (x1p <= 0 && x1p >= x4p + 1 && x2p == x3p && (x4p >= 0 || x4p <= x3p))\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n\tx4 = x4p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "/*@ \n    loop invariant x1 <= 0;\n    loop invariant x2 == x3;\n    loop invariant x4 >= -1;\n    loop invariant x1 <= x4 + 1;\n    loop invariant x4 <= x3 ==> x4 >= 0;\n    loop invariant x1p <= 0 && x1p >= x4p + 1 && x2p == x3p && (x4p >= 0 || x4p <= x3p) ==> x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3);\n\n    loop variant input;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x1 <= 0 is partially proven to be inductive.\nloop invariant x2 == x3 is partially proven to be inductive.\nloop invariant x4 >= -1 is partially proven to be inductive.\nloop invariant x1 <= x4 + 1 is partially proven to be inductive.\nloop invariant x4 <= x3 ==> x4 >= 0 is preserved but not established.\nloop invariant x1p <= 0 && x1p >= x4p + 1 && x2p == x3p && (x4p >= 0 || x4p <= x3p) ==> x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3) is partially proven to be inductive.\nAssertion x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3): Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3,x4;\n  int x1p,x2p,x3p,x4p, input;\n\n  x1 = x2 = x3 = 0; x4 = -1;\n  input = unknown_int();\n  /*@\nloop invariant i1: x1 <= 0;\nloop invariant i2: x2 == x3;\n\n\n\nloop invariant i6: x1p <= 0 && x1p >= x4p + 1 && x2p == x3p && (x4p >= 0 || x4p <= x3p) ==> x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3);\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n    x4p = unknown_int();\n\n    if (x1p <= 0 && x1p >= x4p + 1 && x2p == x3p && (x4p >= 0 || x4p <= x3p))\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n\tx4 = x4p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3);\n    loop invariant x1p <= 0 && x1p >= x4p + 1 && x2p == x3p && (x4p >= 0 || x4p <= x3p);\n    loop invariant (x1p <= 0 && x1p >= x4p + 1 && x2p == x3p && (x4p >= 0 || x4p <= x3p)) ==> (x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3));\n    loop invariant input == 0 ==> (x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3));\n    loop assigns x1, x2, x3, x4;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3) is partially proven to be inductive.\nloop invariant x1p <= 0 && x1p >= x4p + 1 && x2p == x3p && (x4p >= 0 || x4p <= x3p) is neither established nor preserved.\nloop invariant (x1p <= 0 && x1p >= x4p + 1 && x2p == x3p && (x4p >= 0 || x4p <= x3p)) ==> (x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3)) is partially proven to be inductive.\nloop invariant input == 0 ==> (x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3)) is partially proven to be inductive.\nAssertion x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3): Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3,x4;\n  int x1p,x2p,x3p,x4p, input;\n\n  x1 = x2 = x3 = 0; x4 = -1;\n  input = unknown_int();\n  /*@\nloop invariant i1: x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3);\n\nloop invariant i3: (x1p <= 0 && x1p >= x4p + 1 && x2p == x3p && (x4p >= 0 || x4p <= x3p)) ==> (x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3));\nloop invariant i4: input == 0 ==> (x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3));\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n    x4p = unknown_int();\n\n    if (x1p <= 0 && x1p >= x4p + 1 && x2p == x3p && (x4p >= 0 || x4p <= x3p))\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n\tx4 = x4p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3));\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 20: unbound logic variable \\max_int. Ignoring loop annotation",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3,x4;\n  int x1p,x2p,x3p,x4p, input;\n\n  x1 = x2 = x3 = 0; x4 = -1;\n  input = unknown_int();\n  /*@\nloop invariant i1: -2147483648 <= x1 <= 0;\nloop invariant i2: -2147483648 <= x2 <= 2147483647;\nloop invariant i3: -2147483648 <= x3 <= 2147483647;\nloop invariant i4: -2147483648 <= x4 <= 2147483646;\nloop invariant i5: x1 >= x4 + 1 ==> x2 == x3;\nloop invariant i6: x1 <= 0 ==> x1 <= x4 + 1;\nloop invariant i7: x2 == x3 ==> x4 >= 0 || x4 <= x3;\nloop invariant i8: input == 0 || (x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3));\nloop invariant i9: -1 <= x4 <= \\max_int;\nloop invariant i10: x1 <= 0;\nloop invariant i11: x1 >= x4 + 1;\nloop invariant i12: x2 == x3;\nloop invariant i13: x4 >= 0 ==> x4 <= x3;\nloop invariant i14: x1 <= 0 && x4 + 1 <= x1;\nloop invariant i15: x4 < 0 ==> x4p < 0;\nloop invariant i16: x4 >= 0 ==> x4p <= x4;\nloop invariant i17: (x1p <= 0 && x1p >= x4p + 1 && x2p == x3p && (x4p >= 0 || x4p <= x3p)) ==> (x1 <= 0 && x4 + 1 <= x1p && x2 == x2p && x3 == x3p && x4 <= x3p);\nloop invariant i18: input != 0 ==> (x1 <= 0 && x4 + 1 <= x1 && x2 == x3 && (x4 >= 0 || x4 <= x3));\nloop invariant i19: x4 >= -1;\nloop invariant i20: x1 <= x4 + 1;\nloop invariant i21: x4 <= x3 ==> x4 >= 0;\nloop invariant i22: x1p <= 0 && x1p >= x4p + 1 && x2p == x3p && (x4p >= 0 || x4p <= x3p) ==> x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3);\nloop invariant i23: x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3);\nloop invariant i24: x1p <= 0 && x1p >= x4p + 1 && x2p == x3p && (x4p >= 0 || x4p <= x3p);\nloop invariant i25: (x1p <= 0 && x1p >= x4p + 1 && x2p == x3p && (x4p >= 0 || x4p <= x3p)) ==> (x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3));\nloop invariant i26: input == 0 ==> (x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3));\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n    x4p = unknown_int();\n\n    if (x1p <= 0 && x1p >= x4p + 1 && x2p == x3p && (x4p >= 0 || x4p <= x3p))\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n\tx4 = x4p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3));\n}\n\n}\n",
        "combined_annotation_num_solver_calls": 5,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3,x4;\n  int x1p,x2p,x3p,x4p, input;\n\n  x1 = x2 = x3 = 0; x4 = -1;\n  input = unknown_int();\n  /*@\nloop invariant i1: -2147483648 <= x1 <= 0;\nloop invariant i2: -2147483648 <= x2 <= 2147483647;\nloop invariant i3: -2147483648 <= x3 <= 2147483647;\nloop invariant i4: -2147483648 <= x4 <= 2147483646;\nloop invariant i5: x1 >= x4 + 1 ==> x2 == x3;\n\nloop invariant i7: x2 == x3 ==> x4 >= 0 || x4 <= x3;\nloop invariant i8: input == 0 || (x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3));\n\nloop invariant i10: x1 <= 0;\nloop invariant i11: x1 >= x4 + 1;\nloop invariant i12: x2 == x3;\nloop invariant i13: x4 >= 0 ==> x4 <= x3;\nloop invariant i14: x1 <= 0 && x4 + 1 <= x1;\n\nloop invariant i16: x4 >= 0 ==> x4p <= x4;\n\nloop invariant i18: input != 0 ==> (x1 <= 0 && x4 + 1 <= x1 && x2 == x3 && (x4 >= 0 || x4 <= x3));\n\n\n\nloop invariant i22: x1p <= 0 && x1p >= x4p + 1 && x2p == x3p && (x4p >= 0 || x4p <= x3p) ==> x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3);\nloop invariant i23: x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3);\n\nloop invariant i25: (x1p <= 0 && x1p >= x4p + 1 && x2p == x3p && (x4p >= 0 || x4p <= x3p)) ==> (x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3));\nloop invariant i26: input == 0 ==> (x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3));\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n    x4p = unknown_int();\n\n    if (x1p <= 0 && x1p >= x4p + 1 && x2p == x3p && (x4p >= 0 || x4p <= x3p))\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n\tx4 = x4p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3));\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c"
        ],
        "skipped": [],
        "total": 200,
        "success_count": 90,
        "failure_count": 110,
        "success_rate": 0.45
    }
}