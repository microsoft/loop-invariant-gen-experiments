{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-2.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = unknown_uint();\n\n  while (x < 0x0fffffff) {\n    x++;\n  }\n\n  {;\n//@ assert(x > 0x0fffffff);\n}\n\n}",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = unknown_uint();\n\n  while (x < 0x0fffffff) {\n    x++;\n  }\n\n  {;\n//@ assert(x > 0x0fffffff);\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions: None.\n\nVariable assignments: \n- `unsigned int x = unknown_uint();`: Initializes the variable `x` with an unknown unsigned integer value.\n\nLoop condition: `x < 0x0fffffff`.\n\nPost-condition: `x > 0x0fffffff`.\n\nLoop invariants:\n- `x <= 0x0fffffff`: `x` is always less than or equal to `0x0fffffff` at the start of each iteration.\n- `x >= unknown_uint()`: `x` is always greater than or equal to its initial value at the start of each iteration.\n- `x <= 0x100000000`: `x` is always less than or equal to `0x100000000` at the end of each iteration.\n- `x <= 0x0fffffff ==> x+1 <= 0x100000000`: If `x` is less than or equal to `0x0fffffff`, then `x+1` is less than or equal to `0x100000000`.\n- `x >= unknown_uint() ==> x+1 >= unknown_uint()`: If `x` is greater than or equal to its initial value, then `x+1` is also greater than or equal to its initial value.\n- `x > 0x0fffffff ==> x > unknown_uint()`: If `x` is greater than `0x0fffffff`, then `x` is greater than its initial value.\n- `(x >= 0x0fffffff && x < 0x100000000) ==> x > 0x0fffffff`: If `x` is between `0x0fffffff` and `0x100000000`, then `x` is greater than `0x0fffffff`.\n- `(x < 0x0fffffff) ==> (x+1 <= 0x0fffffff || x+1 > unknown_uint())`: If `x` is less than `0x0fffffff`, then either `x+1` is less than or equal to `0x0fffffff` or `x+1` is greater than its initial value. \n\nPutting it all together:\n```\n/*@ \n  loop invariant x <= 0x0fffffff;\n  loop invariant x >= unknown_uint();\n  loop invariant x <= 0x100000000;\n  loop invariant x <= 0x0fffffff ==> x+1 <= 0x100000000;\n  loop invariant x >= unknown_uint() ==> x+1 >= unknown_uint();\n  loop invariant x > 0x0fffffff ==> x > unknown_uint();\n  loop invariant (x >= 0x0fffffff && x < 0x100000000) ==> x > 0x0fffffff;\n  loop invariant (x < 0x0fffffff) ==> (x+1 <= 0x0fffffff || x+1 > unknown_uint());\n*/\n```",
            "First, let's note the pre-condition and variable assignment in the program:\n- Pre-condition: None.\n- Variable assignment: `x` is assigned the value returned by the function `unknown_uint()`.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- Loop condition: `x < 0x0fffffff`\n\nTo find the necessary loop invariants, we need to analyze the code and the post-condition. The post-condition is `x > 0x0fffffff`. We need to find invariants that imply this condition.\n\nLet's start by finding a loop invariant that is true before the loop execution:\n- Before the loop, we have no information about `x`, except that it is assigned a value returned by `unknown_uint()`. Since we don't know anything about this value, we cannot make any meaningful loop invariant for the initial condition.\n\nNow, let's find a loop invariant that is true in every iteration of the loop:\n- In every iteration, `x` is incremented by 1. Therefore, we can say that `x` is always greater than or equal to its initial value before the loop execution.\n- Also, the loop condition is `x < 0x0fffffff`. Therefore, we can say that `x` is always less than or equal to `0x0fffffff - 1` in every iteration of the loop.\n\nFinally, let's find a loop invariant that is true after the loop termination:\n- After the loop, `x` is greater than or equal to `0x0fffffff`, since the loop termination condition is `x >= 0x0fffffff`. Therefore, we can say that `x > 0x0fffffff - 1` after the loop termination.\n\nPutting all these together, we get the following loop invariants:\n```\n/*@ \n    loop invariant x >= \\old(x);\n    loop invariant x <= 0x0fffffff - 1;\n    loop invariant (x >= 0x0fffffff) ==> (x > 0x0fffffff - 1);\n*/\n``` \n\nNote that we used `\\old(x)` to refer to the initial value of `x` before the loop execution. We also used implication to take care of the conditional nature of the code.",
            "Pre-conditions:\n- The `assume` macro takes a boolean expression. If the expression is false, the function returns 0.\n- The `unknown_uint` function returns an unsigned integer whose value is not known at compile time.\n\nVariable assignments:\n- `unsigned int x` is assigned the value returned by `unknown_uint()`.\n\nLoop condition:\n- `x < 0x0fffffff`\n\nLoop invariants:\n- `x <= 0x0fffffff`\n- `x >= \\old(x)`\n- `x >= unknown_uint()`\n- `x <= UINT_MAX` (assuming UINT_MAX is the maximum value of an unsigned int)\n\nExplanation:\n- The first invariant ensures that `x` never exceeds `0x0fffffff` during the loop execution.\n- The second invariant ensures that `x` is monotonically increasing during the loop execution.\n- The third invariant ensures that `x` is at least as large as the value returned by `unknown_uint()` at the beginning of the loop execution.\n- The fourth invariant ensures that `x` never exceeds the maximum value of an unsigned int.\n\nPost-condition:\n- `x > 0x0fffffff`\n\nAssertion:\n- `{; //@ assert(x > 0x0fffffff);}` is equivalent to `assume(x <= 0x0fffffff) ==> x > 0x0fffffff`, since the assertion is guarded by the condition `x <= 0x0fffffff`. Therefore, the first loop invariant implies the post-condition.",
            "Pre-conditions:\n- The `assume` macro takes a boolean expression `e` and returns 0 if `e` is false. This means that the program assumes that the condition inside the `assume` macro is true.\n- The function `unknown_uint()` returns an unsigned integer with an unknown value.\n\nVariable assignment:\n- `unsigned int x` is assigned the value returned by `unknown_uint()`.\n\nLoop condition:\n- The loop continues as long as `x` is less than `0x0fffffff`.\n\nLoop Invariants:\n- Before the loop execution: `x <= 0x0fffffff`\n- In every iteration of the loop: `x >= \\old(x) && x <= 0x0fffffff`\n- After the loop termination: `x > 0x0fffffff`\n\nExplanation:\n- Before the loop execution, `x` is assigned an unknown value returned by the function `unknown_uint()`. Therefore, we can only assume that `x` is less than or equal to `0x0fffffff`.\n- In every iteration of the loop, `x` is incremented by 1. Therefore, `x` is always greater than or equal to its previous value `\\old(x)`. Additionally, since the loop condition is `x < 0x0fffffff`, `x` is always less than or equal to `0x0fffffff`.\n- After the loop termination, `x` is greater than `0x0fffffff` because the loop condition `x < 0x0fffffff` is false. Therefore, we can assert that `x > 0x0fffffff`.\n- Since the function `unknown_uint()` returns an unknown value, we cannot make any assumptions about the initial value of `x`. Therefore, we use an implication to make the first loop invariant trivially true. Similarly, since we know that `x` is incremented by 1 in every iteration of the loop, we can use an implication to make the second loop invariant trivially true at the end of the loop.",
            "Pre-conditions:\n- The function main() takes no input arguments.\n- The function unknown_uint() returns an unsigned integer whose value is unknown and non-deterministic.\n\nVariable assignments:\n- Variable x is assigned the value returned by unknown_uint().\n\nLoop condition:\n- The loop continues while x is less than 0x0fffffff.\n\nLoop invariants:\n- Before loop execution: x <= 0x0fffffff\n- In every iteration of the loop: x < 0x10000000\n- After loop termination: x >= 0x10000000 ==> x > 0x0fffffff\n\nExplanation:\n- Before loop execution, we need to ensure that x is less than or equal to the maximum value that it can take, which in this case is 0x0fffffff.\n- In every iteration of the loop, we need to ensure that x is less than 0x10000000, which is the value of the loop condition.\n- After loop termination, we need to ensure that if x is greater than or equal to 0x10000000, then it must be greater than 0x0fffffff, which is the assertion.\n- Since the value returned by unknown_uint() is non-deterministic, we cannot make any assumptions about its value. Therefore, we need to use an implication to make the loop invariants trivially true when x has its maximum or minimum value."
        ],
        "annotation_blocks": [
            "/*@ \n  loop invariant x <= 0x0fffffff;\n  loop invariant x >= unknown_uint();\n  loop invariant x <= 0x100000000;\n  loop invariant x <= 0x0fffffff ==> x+1 <= 0x100000000;\n  loop invariant x >= unknown_uint() ==> x+1 >= unknown_uint();\n  loop invariant x > 0x0fffffff ==> x > unknown_uint();\n  loop invariant (x >= 0x0fffffff && x < 0x100000000) ==> x > 0x0fffffff;\n  loop invariant (x < 0x0fffffff) ==> (x+1 <= 0x0fffffff || x+1 > unknown_uint());\n*/",
            "/*@ \n    loop invariant x >= \\old(x);\n    loop invariant x <= 0x0fffffff - 1;\n    loop invariant (x >= 0x0fffffff) ==> (x > 0x0fffffff - 1);\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The `assume` macro takes a boolean expression. If the expression is false, the function returns 0.\n- The `unknown_uint` function returns an unsigned integer whose value is not known at compile time.\n\nVariable assignments:\n- `unsigned int x` is assigned the value returned by `unknown_uint()`.\n\nLoop condition:\n- `x < 0x0fffffff`\n\nLoop invariants:\n- `x <= 0x0fffffff`\n- `x >= \\old(x)`\n- `x >= unknown_uint()`\n- `x <= UINT_MAX` (assuming UINT_MAX is the maximum value of an unsigned int)\n\nExplanation:\n- The first invariant ensures that `x` never exceeds `0x0fffffff` during the loop execution.\n- The second invariant ensures that `x` is monotonically increasing during the loop execution.\n- The third invariant ensures that `x` is at least as large as the value returned by `unknown_uint()` at the beginning of the loop execution.\n- The fourth invariant ensures that `x` never exceeds the maximum value of an unsigned int.\n\nPost-condition:\n- `x > 0x0fffffff`\n\nAssertion:\n- `{; //@ assert(x > 0x0fffffff);}` is equivalent to `assume(x <= 0x0fffffff) ==> x > 0x0fffffff`, since the assertion is guarded by the condition `x <= 0x0fffffff`. Therefore, the first loop invariant implies the post-condition."
            ],
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The `assume` macro takes a boolean expression `e` and returns 0 if `e` is false. This means that the program assumes that the condition inside the `assume` macro is true.\n- The function `unknown_uint()` returns an unsigned integer with an unknown value.\n\nVariable assignment:\n- `unsigned int x` is assigned the value returned by `unknown_uint()`.\n\nLoop condition:\n- The loop continues as long as `x` is less than `0x0fffffff`.\n\nLoop Invariants:\n- Before the loop execution: `x <= 0x0fffffff`\n- In every iteration of the loop: `x >= \\old(x) && x <= 0x0fffffff`\n- After the loop termination: `x > 0x0fffffff`\n\nExplanation:\n- Before the loop execution, `x` is assigned an unknown value returned by the function `unknown_uint()`. Therefore, we can only assume that `x` is less than or equal to `0x0fffffff`.\n- In every iteration of the loop, `x` is incremented by 1. Therefore, `x` is always greater than or equal to its previous value `\\old(x)`. Additionally, since the loop condition is `x < 0x0fffffff`, `x` is always less than or equal to `0x0fffffff`.\n- After the loop termination, `x` is greater than `0x0fffffff` because the loop condition `x < 0x0fffffff` is false. Therefore, we can assert that `x > 0x0fffffff`.\n- Since the function `unknown_uint()` returns an unknown value, we cannot make any assumptions about the initial value of `x`. Therefore, we use an implication to make the first loop invariant trivially true. Similarly, since we know that `x` is incremented by 1 in every iteration of the loop, we can use an implication to make the second loop invariant trivially true at the end of the loop."
            ],
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The function main() takes no input arguments.\n- The function unknown_uint() returns an unsigned integer whose value is unknown and non-deterministic.\n\nVariable assignments:\n- Variable x is assigned the value returned by unknown_uint().\n\nLoop condition:\n- The loop continues while x is less than 0x0fffffff.\n\nLoop invariants:\n- Before loop execution: x <= 0x0fffffff\n- In every iteration of the loop: x < 0x10000000\n- After loop termination: x >= 0x10000000 ==> x > 0x0fffffff\n\nExplanation:\n- Before loop execution, we need to ensure that x is less than or equal to the maximum value that it can take, which in this case is 0x0fffffff.\n- In every iteration of the loop, we need to ensure that x is less than 0x10000000, which is the value of the loop condition.\n- After loop termination, we need to ensure that if x is greater than or equal to 0x10000000, then it must be greater than 0x0fffffff, which is the assertion.\n- Since the value returned by unknown_uint() is non-deterministic, we cannot make any assumptions about its value. Therefore, we need to use an implication to make the loop invariants trivially true when x has its maximum or minimum value."
            ]
        ],
        "completions": [
            {
                "num_solver_calls": 7,
                "annotations": "/*@ \n  loop invariant x <= 0x0fffffff;\n  loop invariant x >= unknown_uint();\n  loop invariant x <= 0x100000000;\n  loop invariant x <= 0x0fffffff ==> x+1 <= 0x100000000;\n  loop invariant x >= unknown_uint() ==> x+1 >= unknown_uint();\n  loop invariant x > 0x0fffffff ==> x > unknown_uint();\n  loop invariant (x >= 0x0fffffff && x < 0x100000000) ==> x > 0x0fffffff;\n  loop invariant (x < 0x0fffffff) ==> (x+1 <= 0x0fffffff || x+1 > unknown_uint());\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 9: unexpected token ')'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = unknown_uint();\n\n  /*@\n\n\nloop invariant i3: x <= 0x100000000;\nloop invariant i4: x <= 0x0fffffff ==> x+1 <= 0x100000000;\n\n\n\n\n*/\nwhile (x < 0x0fffffff) {\n    x++;\n  }\n\n  {;\n//@ assert(x > 0x0fffffff);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant x >= \\old(x);\n    loop invariant x <= 0x0fffffff - 1;\n    loop invariant (x >= 0x0fffffff) ==> (x > 0x0fffffff - 1);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 8: \\old undefined in this context. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = unknown_uint();\n\n  /*@\n\n\nloop invariant i3: (x >= 0x0fffffff) ==> (x > 0x0fffffff - 1);\n*/\nwhile (x < 0x0fffffff) {\n    x++;\n  }\n\n  {;\n//@ assert(x > 0x0fffffff);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The `assume` macro takes a boolean expression. If the expression is false, the function returns 0.\n- The `unknown_uint` function returns an unsigned integer whose value is not known at compile time.\n\nVariable assignments:\n- `unsigned int x` is assigned the value returned by `unknown_uint()`.\n\nLoop condition:\n- `x < 0x0fffffff`\n\nLoop invariants:\n- `x <= 0x0fffffff`\n- `x >= \\old(x)`\n- `x >= unknown_uint()`\n- `x <= UINT_MAX` (assuming UINT_MAX is the maximum value of an unsigned int)\n\nExplanation:\n- The first invariant ensures that `x` never exceeds `0x0fffffff` during the loop execution.\n- The second invariant ensures that `x` is monotonically increasing during the loop execution.\n- The third invariant ensures that `x` is at least as large as the value returned by `unknown_uint()` at the beginning of the loop execution.\n- The fourth invariant ensures that `x` never exceeds the maximum value of an unsigned int.\n\nPost-condition:\n- `x > 0x0fffffff`\n\nAssertion:\n- `{; //@ assert(x > 0x0fffffff);}` is equivalent to `assume(x <= 0x0fffffff) ==> x > 0x0fffffff`, since the assertion is guarded by the condition `x <= 0x0fffffff`. Therefore, the first loop invariant implies the post-condition.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The `assume` macro takes a boolean expression `e` and returns 0 if `e` is false. This means that the program assumes that the condition inside the `assume` macro is true.\n- The function `unknown_uint()` returns an unsigned integer with an unknown value.\n\nVariable assignment:\n- `unsigned int x` is assigned the value returned by `unknown_uint()`.\n\nLoop condition:\n- The loop continues as long as `x` is less than `0x0fffffff`.\n\nLoop Invariants:\n- Before the loop execution: `x <= 0x0fffffff`\n- In every iteration of the loop: `x >= \\old(x) && x <= 0x0fffffff`\n- After the loop termination: `x > 0x0fffffff`\n\nExplanation:\n- Before the loop execution, `x` is assigned an unknown value returned by the function `unknown_uint()`. Therefore, we can only assume that `x` is less than or equal to `0x0fffffff`.\n- In every iteration of the loop, `x` is incremented by 1. Therefore, `x` is always greater than or equal to its previous value `\\old(x)`. Additionally, since the loop condition is `x < 0x0fffffff`, `x` is always less than or equal to `0x0fffffff`.\n- After the loop termination, `x` is greater than `0x0fffffff` because the loop condition `x < 0x0fffffff` is false. Therefore, we can assert that `x > 0x0fffffff`.\n- Since the function `unknown_uint()` returns an unknown value, we cannot make any assumptions about the initial value of `x`. Therefore, we use an implication to make the first loop invariant trivially true. Similarly, since we know that `x` is incremented by 1 in every iteration of the loop, we can use an implication to make the second loop invariant trivially true at the end of the loop.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The function main() takes no input arguments.\n- The function unknown_uint() returns an unsigned integer whose value is unknown and non-deterministic.\n\nVariable assignments:\n- Variable x is assigned the value returned by unknown_uint().\n\nLoop condition:\n- The loop continues while x is less than 0x0fffffff.\n\nLoop invariants:\n- Before loop execution: x <= 0x0fffffff\n- In every iteration of the loop: x < 0x10000000\n- After loop termination: x >= 0x10000000 ==> x > 0x0fffffff\n\nExplanation:\n- Before loop execution, we need to ensure that x is less than or equal to the maximum value that it can take, which in this case is 0x0fffffff.\n- In every iteration of the loop, we need to ensure that x is less than 0x10000000, which is the value of the loop condition.\n- After loop termination, we need to ensure that if x is greater than or equal to 0x10000000, then it must be greater than 0x0fffffff, which is the assertion.\n- Since the value returned by unknown_uint() is non-deterministic, we cannot make any assumptions about its value. Therefore, we need to use an implication to make the loop invariants trivially true when x has its maximum or minimum value.",
                "error": "Output does not contain at least 1 code block"
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 9: unexpected token ')'",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = unknown_uint();\n\n  /*@\nloop invariant i1: x <= 0x0fffffff;\nloop invariant i2: x >= unknown_uint();\nloop invariant i3: x <= 0x100000000;\nloop invariant i4: x <= 0x0fffffff ==> x+1 <= 0x100000000;\nloop invariant i5: x >= unknown_uint() ==> x+1 >= unknown_uint();\nloop invariant i6: x > 0x0fffffff ==> x > unknown_uint();\nloop invariant i7: (x >= 0x0fffffff && x < 0x100000000) ==> x > 0x0fffffff;\nloop invariant i8: (x < 0x0fffffff) ==> (x+1 <= 0x0fffffff || x+1 > unknown_uint());\nloop invariant i9: x >= \\old(x);\nloop invariant i10: x <= 0x0fffffff - 1;\nloop invariant i11: (x >= 0x0fffffff) ==> (x > 0x0fffffff - 1);\n*/\nwhile (x < 0x0fffffff) {\n    x++;\n  }\n\n  {;\n//@ assert(x > 0x0fffffff);\n}\n\n}",
        "combined_annotation_num_solver_calls": 9,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = unknown_uint();\n\n  /*@\n\n\nloop invariant i3: x <= 0x100000000;\nloop invariant i4: x <= 0x0fffffff ==> x+1 <= 0x100000000;\n\n\n\n\n\n\nloop invariant i11: (x >= 0x0fffffff) ==> (x > 0x0fffffff - 1);\n*/\nwhile (x < 0x0fffffff) {\n    x++;\n  }\n\n  {;\n//@ assert(x > 0x0fffffff);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-1.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-2.c"
        ],
        "skipped": [],
        "total": 264,
        "success_count": 126,
        "failure_count": 138,
        "success_rate": 0.4772727272727273
    }
}