{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main() {\n  int x = 0;\n  while(x < 100) {\n    x++;\n    if(x == 50)\n      break;\n  }\n  {;\n//@ assert(!( x != 50 ));\n}\n\n}",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main() {\n  int x = 0;\n  while(x < 100) {\n    x++;\n    if(x == 50)\n      break;\n  }\n  {;\n//@ assert(!( x != 50 ));\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions: None\n\nVariable assignments: `int x = 0;`\n\nLoop condition: `x < 100`\n\nPost-condition: `!(x != 50)`\n\nLoop invariants:\n```\n/*@ \nloop invariant 0 <= x <= 100;\nloop invariant x <= 50 ==> !(x != 50);\nloop invariant x > 50 ==> x != 50;\nloop invariant x <= 50 || x > 100 ==> !(x != 50);\nloop invariant x <= 50 || x > 50 ==> x <= 100;\n*/\n```\n\nExplanation:\n- The first loop invariant specifies that x is always between 0 and 100.\n- The second loop invariant specifies that if x is less than or equal to 50, then x is equal to 50.\n- The third loop invariant specifies that if x is greater than 50, then x is not equal to 50.\n- The fourth loop invariant specifies that if x is either less than or equal to 50 or greater than 100, then x is equal to 50.\n- The fifth loop invariant specifies that if x is either less than or equal to 50 or greater than 50, then x is less than or equal to 100.",
            "Pre-conditions: None.\n\nVariable Assignments: \n- x is assigned 0 in the beginning of the program.\n\nLoop Condition: The loop continues as long as x is less than 100.\n\nLoop Invariants:\n- Before the loop execution: x >= 0\n- In every iteration of the loop: \n    - x >= 0\n    - x <= 100\n    - !(x == 50) ==> x < 50\n- After the loop termination: \n    - x >= 0\n    - x <= 100\n    - x == 50\n\nExplanation:\n- Before the loop execution: Since x is assigned 0 at the beginning, it must be greater than or equal to 0.\n- In every iteration of the loop: \n    - x >= 0: This holds true because x cannot be negative.\n    - x <= 100: This holds true because the loop condition is x < 100 and the loop terminates when x becomes 100 or greater.\n    - !(x == 50) ==> x < 50: This holds true because when x is equal to 50, the condition in the if statement becomes true and the loop breaks. Therefore, if x is not equal to 50, it must be less than 50.\n- After the loop termination: \n    - x >= 0: This holds true because x cannot be negative.\n    - x <= 100: This holds true because the loop condition is x < 100 and the loop terminates when x becomes 100 or greater.\n    - x == 50: This is the post-condition that we need to verify.\n\nFinal Loop Invariants:\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant x <= 100;\n    loop invariant !(x == 50) ==> x < 50;\n    loop invariant x == 50 ==> !(x < 50);\n*/\n```",
            "Pre-conditions: None\n\nVariable assignments: int x = 0;\n\nLoop condition: x < 100\n\nPost-condition: !(x != 50)\n\nLoop Invariants:\n- Before loop execution: None\n- In every iteration of the loop: \n    - x >= 0 && x <= 100\n    - !(x != 50) ==> x >= 50\n- After loop termination: \n    - x >= 0 && x <= 100\n    - !(x != 50)\n\nExplanation:\n- The first loop invariant specifies that x is always between 0 and 100, which is the range of values that x can take in the loop.\n- The second loop invariant specifies that if x is not equal to 50, then it must be greater than or equal to 50. This is because the loop condition is x < 100, and the only way to exit the loop before x becomes 50 is by using the break statement inside the loop. Therefore, if x is not equal to 50, it must be greater than or equal to 50.\n- The third loop invariant is the same as the first invariant, and it ensures that x is still between 0 and 100 after the loop terminates.\n- The fourth loop invariant is the same as the post-condition, and it ensures that x is indeed equal to 50 after the loop terminates. \n\nNote: Since x is initialized to 0, we don't need to add a loop invariant for its initial value. Also, since there are no non-deterministic variables in the program, we don't need to add any implications to handle them.",
            "Pre-conditions/Variable assignments:\n- The program does not have any pre-conditions.\n- The variable `x` is initialized to `0` at the beginning of the program.\n\nLoop condition:\n- The loop condition is `x < 100`.\n\nLoop invariants:\n1. Before the loop execution: `x >= 0`.\n   - This is true since `x` is initialized to `0`.\n2. In every iteration of the loop: `0 <= x <= 100`.\n   - The lower bound is `0` since `x` is always non-negative.\n   - The upper bound is `100` since the loop condition is `x < 100`.\n3. After the loop termination: `x == 50`.\n   - This is implied by the post-condition `!(x != 50)`.\n\nCombining the loop invariants, we get:\n```\n/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant x >= 0;\n    loop invariant !(x != 50) ==> (x == 50);\n*/\n```",
            "Pre-conditions:\n- None\n\nVariable assignments:\n- int x = 0;\n\nLoop condition:\n- x < 100\n\nLoop body:\n- x++;\n\nPost-condition:\n- x == 50\n\nLoop Invariants:\n1. Before the loop execution: None\n2. In every iteration of the loop: \n    - 0 <= x <= 100\n    - If x < 50, then x + 1 <= 50\n    - If x >= 50, then x == 50\n3. After the loop termination:\n    - 0 <= x <= 100\n    - x == 50\n\nExplanation:\n1. Before the loop execution, there are no loop invariants to state as we do not have any information about the value of x.\n2. In every iteration of the loop, we can note the following:\n    - The value of x is between 0 and 100 (inclusive) since it is initialized to 0 and incremented by 1 at every iteration until it reaches 100 or greater.\n    - If x is less than 50, then after one iteration x will be at most 49.\n    - If x is greater than or equal to 50, then it will remain 50 until the loop terminates.\n3. After the loop terminates, we can note the following:\n    - The value of x is between 0 and 100 (inclusive) as it was before the loop.\n    - The value of x is 50 since it is either incremented up to 50 or it is already 50 before the loop starts.\n\nWe can combine the loop invariants and write the following code block:\n```\n/*@\n    loop invariant 0 <= x <= 100;\n    loop invariant (x < 50 ==> x + 1 <= 50);\n    loop invariant (x >= 50 ==> x == 50);\n    loop variant 100 - x;\n*/\n``` \nNote that the loop variant `100 - x` is used to prove that the loop will eventually terminate. Since the loop condition is `x < 100`, the loop variant `100 - x` decreases by 1 at each iteration, so it will eventually become 0 and the loop will terminate."
        ],
        "annotation_blocks": [
            "/*@ \nloop invariant 0 <= x <= 100;\nloop invariant x <= 50 ==> !(x != 50);\nloop invariant x > 50 ==> x != 50;\nloop invariant x <= 50 || x > 100 ==> !(x != 50);\nloop invariant x <= 50 || x > 50 ==> x <= 100;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant x <= 100;\n    loop invariant !(x == 50) ==> x < 50;\n    loop invariant x == 50 ==> !(x < 50);\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions: None\n\nVariable assignments: int x = 0;\n\nLoop condition: x < 100\n\nPost-condition: !(x != 50)\n\nLoop Invariants:\n- Before loop execution: None\n- In every iteration of the loop: \n    - x >= 0 && x <= 100\n    - !(x != 50) ==> x >= 50\n- After loop termination: \n    - x >= 0 && x <= 100\n    - !(x != 50)\n\nExplanation:\n- The first loop invariant specifies that x is always between 0 and 100, which is the range of values that x can take in the loop.\n- The second loop invariant specifies that if x is not equal to 50, then it must be greater than or equal to 50. This is because the loop condition is x < 100, and the only way to exit the loop before x becomes 50 is by using the break statement inside the loop. Therefore, if x is not equal to 50, it must be greater than or equal to 50.\n- The third loop invariant is the same as the first invariant, and it ensures that x is still between 0 and 100 after the loop terminates.\n- The fourth loop invariant is the same as the post-condition, and it ensures that x is indeed equal to 50 after the loop terminates. \n\nNote: Since x is initialized to 0, we don't need to add a loop invariant for its initial value. Also, since there are no non-deterministic variables in the program, we don't need to add any implications to handle them."
            ],
            "/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant x >= 0;\n    loop invariant !(x != 50) ==> (x == 50);\n*/",
            "/*@\n    loop invariant 0 <= x <= 100;\n    loop invariant (x < 50 ==> x + 1 <= 50);\n    loop invariant (x >= 50 ==> x == 50);\n    loop variant 100 - x;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \nloop invariant 0 <= x <= 100;\nloop invariant x <= 50 ==> !(x != 50);\nloop invariant x > 50 ==> x != 50;\nloop invariant x <= 50 || x > 100 ==> !(x != 50);\nloop invariant x <= 50 || x > 50 ==> x <= 100;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant x <= 50 ==> !(x != 50) is preserved but not established.\nloop invariant x > 50 ==> x != 50 is partially proven to be inductive.\nloop invariant x <= 50 || x > 100 ==> !(x != 50) is partially proven to be inductive.\nloop invariant x <= 50 || x > 50 ==> x <= 100 is partially proven to be inductive.\nAssertion !(x != 50): Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main() {\n  int x = 0;\n  /*@\nloop invariant i1: 0 <= x <= 100;\n\nloop invariant i3: x > 50 ==> x != 50;\n\nloop invariant i5: x <= 50 || x > 50 ==> x <= 100;\n*/\nwhile(x < 100) {\n    x++;\n    if(x == 50)\n      break;\n  }\n  {;\n//@ assert(!( x != 50 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant x <= 100;\n    loop invariant !(x == 50) ==> x < 50;\n    loop invariant x == 50 ==> !(x < 50);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= 100 is partially proven to be inductive.\nloop invariant !(x == 50) ==> x < 50 is established but not preserved.\nloop invariant x == 50 ==> !(x < 50) is partially proven to be inductive.\nAssertion !(x != 50): Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main() {\n  int x = 0;\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: x <= 100;\n\nloop invariant i4: x == 50 ==> !(x < 50);\n*/\nwhile(x < 100) {\n    x++;\n    if(x == 50)\n      break;\n  }\n  {;\n//@ assert(!( x != 50 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions: None\n\nVariable assignments: int x = 0;\n\nLoop condition: x < 100\n\nPost-condition: !(x != 50)\n\nLoop Invariants:\n- Before loop execution: None\n- In every iteration of the loop: \n    - x >= 0 && x <= 100\n    - !(x != 50) ==> x >= 50\n- After loop termination: \n    - x >= 0 && x <= 100\n    - !(x != 50)\n\nExplanation:\n- The first loop invariant specifies that x is always between 0 and 100, which is the range of values that x can take in the loop.\n- The second loop invariant specifies that if x is not equal to 50, then it must be greater than or equal to 50. This is because the loop condition is x < 100, and the only way to exit the loop before x becomes 50 is by using the break statement inside the loop. Therefore, if x is not equal to 50, it must be greater than or equal to 50.\n- The third loop invariant is the same as the first invariant, and it ensures that x is still between 0 and 100 after the loop terminates.\n- The fourth loop invariant is the same as the post-condition, and it ensures that x is indeed equal to 50 after the loop terminates. \n\nNote: Since x is initialized to 0, we don't need to add a loop invariant for its initial value. Also, since there are no non-deterministic variables in the program, we don't need to add any implications to handle them.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant x >= 0;\n    loop invariant !(x != 50) ==> (x == 50);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant !(x != 50) ==> (x == 50) is inductive.\nAssertion !(x != 50): Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main() {\n  int x = 0;\n  /*@\nloop invariant i1: 0 <= x <= 100;\nloop invariant i2: x >= 0;\nloop invariant i3: !(x != 50) ==> (x == 50);\n*/\nwhile(x < 100) {\n    x++;\n    if(x == 50)\n      break;\n  }\n  {;\n//@ assert(!( x != 50 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@\n    loop invariant 0 <= x <= 100;\n    loop invariant (x < 50 ==> x + 1 <= 50);\n    loop invariant (x >= 50 ==> x == 50);\n    loop variant 100 - x;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant (x < 50 ==> x + 1 <= 50) is partially proven to be inductive.\nloop invariant (x >= 50 ==> x == 50) is established but not preserved.\nAssertion !(x != 50): Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main() {\n  int x = 0;\n  /*@\nloop invariant i1: 0 <= x <= 100;\nloop invariant i2: (x < 50 ==> x + 1 <= 50);\n\n*/\nwhile(x < 100) {\n    x++;\n    if(x == 50)\n      break;\n  }\n  {;\n//@ assert(!( x != 50 ));\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant x <= 50 ==> !(x != 50) is preserved but not established.\nloop invariant x > 50 ==> x != 50 is partially proven to be inductive.\nloop invariant x <= 50 || x > 100 ==> !(x != 50) is partially proven to be inductive.\nloop invariant x <= 50 || x > 50 ==> x <= 100 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= 100 is partially proven to be inductive.\nloop invariant !(x == 50) ==> x < 50 is partially proven to be inductive.\nloop invariant x == 50 ==> !(x < 50) is partially proven to be inductive.\nloop invariant !(x != 50) ==> (x == 50) is partially proven to be inductive.\nloop invariant (x < 50 ==> x + 1 <= 50) is partially proven to be inductive.\nloop invariant (x >= 50 ==> x == 50) is partially proven to be inductive.\nAssertion !(x != 50): Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main() {\n  int x = 0;\n  /*@\nloop invariant i1: 0 <= x <= 100;\nloop invariant i2: x <= 50 ==> !(x != 50);\nloop invariant i3: x > 50 ==> x != 50;\nloop invariant i4: x <= 50 || x > 100 ==> !(x != 50);\nloop invariant i5: x <= 50 || x > 50 ==> x <= 100;\nloop invariant i6: x >= 0;\nloop invariant i7: x <= 100;\nloop invariant i8: !(x == 50) ==> x < 50;\nloop invariant i9: x == 50 ==> !(x < 50);\nloop invariant i10: !(x != 50) ==> (x == 50);\nloop invariant i11: (x < 50 ==> x + 1 <= 50);\nloop invariant i12: (x >= 50 ==> x == 50);\n*/\nwhile(x < 100) {\n    x++;\n    if(x == 50)\n      break;\n  }\n  {;\n//@ assert(!( x != 50 ));\n}\n\n}",
        "combined_annotation_num_solver_calls": 6,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main() {\n  int x = 0;\n  /*@\nloop invariant i1: 0 <= x <= 100;\n\nloop invariant i3: x > 50 ==> x != 50;\n\nloop invariant i5: x <= 50 || x > 50 ==> x <= 100;\nloop invariant i6: x >= 0;\nloop invariant i7: x <= 100;\n\nloop invariant i9: x == 50 ==> !(x < 50);\nloop invariant i10: !(x != 50) ==> (x == 50);\nloop invariant i11: (x < 50 ==> x + 1 <= 50);\n\n*/\nwhile(x < 100) {\n    x++;\n    if(x == 50)\n      break;\n  }\n  {;\n//@ assert(!( x != 50 ));\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c"
        ],
        "skipped": [],
        "total": 242,
        "success_count": 116,
        "failure_count": 126,
        "success_rate": 0.4793388429752066
    }
}