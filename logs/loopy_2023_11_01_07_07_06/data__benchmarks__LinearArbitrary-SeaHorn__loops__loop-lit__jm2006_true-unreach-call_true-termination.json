{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    while(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n\n    }\n    return 0;\n}",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    while(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n\n    }\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- `i` and `j` are integers with unknown values returned by `unknown_int()`.\n- `i` and `j` are non-negative (`i >= 0` and `j >= 0`).\n\nLoop condition:\n- `x != 0`\n\nPost-condition:\n- If `i == j`, then `y == 0`.\n\nLoop invariant:\n- Before the loop: `x >= 0 && y == j - x`\n- In every iteration: `x >= 0 && y == j - x`\n- After the loop: `i == j ==> y == 0`\n\nExplanation:\n- Before the loop: Since `x` is initialized to `i`, we know that `x >= 0` since `i >= 0`. Also, since `y` is initialized to `j`, we know that `y == j - i` before the loop.\n- In every iteration: Since `x` is decremented by 1 in every iteration, we know that `x >= 0` is still true. Also, since `y` is decremented by 1 in every iteration, we know that `y == j - x` is still true.\n- After the loop: If the loop terminates, then `x` must be equal to 0. Thus, `y` must be equal to `j`. If `i == j`, then `y` must also be equal to 0 by the post-condition. Thus, we have the implication `i == j ==> y == 0`. \n\nTherefore, we have the following loop invariants:\n```\n/*@ \n    loop invariant x >= 0 && y == j - x;\n    loop invariant x >= 0 && y == j - x;\n    loop invariant i == j ==> y == 0;\n*/\n```",
            "Pre-conditions or variable assignments:\n- The program declares and initializes two integer variables `i` and `j` with non-deterministic values.\n- The program checks if both `i` and `j` are non-negative. If not, the program returns 0 and terminates.\n- The program initializes two new integer variables `x` and `y` with the values of `i` and `j`, respectively.\n\nLoop condition:\n- The loop continues as long as `x` is not equal to 0.\n\nLoop invariants:\n- `0 <= x <= i` (x is initialized to i and decremented by 1 in each iteration, so it is always between 0 and i, inclusive)\n- `0 <= y <= j` (y is initialized to j and decremented by 1 in each iteration, so it is always between 0 and j, inclusive)\n- `x + y = i + j` (the sum of x and y is always equal to the sum of i and j, since x is decremented by 1 and y is decremented by 1 in each iteration)\n- If `x != 0`, then `x + y = i + j` (since the loop will continue, we can assume that x is positive, so the sum of x and y is still equal to the sum of i and j)\n- If `x == 0`, then `i == j ==> y == 0` (since the loop has terminated and we know that x has reached 0, we can use the implication `i == j ==> y == 0` to assert that y is also 0 if i and j are equal)\n\nPutting it all together, the loop invariants are:\n```\n/*@ \n    loop invariant 0 <= x <= i;\n    loop invariant 0 <= y <= j;\n    loop invariant x + y == i + j;\n    loop invariant x != 0 ==> x + y == i + j;\n    loop invariant (x == 0 && i == j) ==> y == 0;\n*/\n```",
            "Pre-conditions:\n- The variables i and j are initialized with non-negative integer values.\n- The variables x and y are initialized with the values of i and j respectively.\n\nLoop condition:\n- x != 0\n\nPost-condition:\n- If the initial values of i and j are equal, then y will eventually become 0.\n\nLoop invariants:\n- Before the loop: \n    - x >= 0\n    - y >= 0\n    - i >= 0\n    - j >= 0\n    - i == x + (i - x)\n    - j == y + (j - y)\n- In every iteration:\n    - x + y == i + j\n- After the loop:\n    - i == j ==> y == 0\n\nExplanation:\n- Before the loop:\n    - x and y are initialized with i and j respectively, which are non-negative.\n    - i and j are non-negative integers, which implies that their difference from x and y respectively is non-negative.\n    - i and j are equal to the sum of x and (i-x) and y and (j-y) respectively, which implies that x and (i-x) and y and (j-y) are non-negative integers.\n- In every iteration:\n    - x and y are decremented by the same amount, which implies that their sum remains constant.\n- After the loop:\n    - If i is equal to j, then the difference between x and y must be 0, since they are decremented by the same amount in every iteration.",
            "Pre-conditions:\n- The values of variables `i` and `j` are unknown but they are non-negative.\n\nLoop condition:\n- The loop continues until the value of `x` becomes zero.\n\nPost-condition:\n- If `i` is equal to `j` then `y` must be equal to zero.\n\nLoop invariants:\n- Before the loop:\n    - `x >= 0` (from pre-condition)\n    - `y = j-x`\n    - `i >= x` (to ensure `y` is non-negative)\n    - `j >= y` (to ensure `y` is not greater than `j`)\n- In every iteration of the loop:\n    - `x >= 0` (already established)\n    - `y = j-x` (already established)\n    - `i >= x+1` (since `x` is decremented in each iteration)\n    - `j >= y+1` (since `y` is decremented in each iteration)\n- After the loop:\n    - `x = 0` (loop termination condition)\n    - `y = j-i` (from the loop invariant)\n    - `i == j ==> y == 0` (post-condition)\n\nPutting all the loop invariants together:\n```\n/*@\n    loop invariant x >= 0;\n    loop invariant y == j-x;\n    loop invariant i >= x;\n    loop invariant j >= y;\n    loop invariant x >= 0;\n    loop invariant i >= x+1 ==> j >= y+1;\n    loop invariant x == 0 ==> y == j-i;\n    loop invariant i != j ==> \\true;\n    loop invariant i == j ==> (y == 0);\n*/\n```\nNote that the last loop invariant includes an implication to handle the conditional nature of the post-condition.",
            "Pre-conditions:\n- The program does not have any pre-conditions.\n- The variables `i` and `j` are assigned non-deterministic values using the function `unknown_int()`. \n\nLoop condition:\n- The loop continues as long as `x` is not equal to 0.\n\nPost-condition:\n- If `i` is equal to `j`, then `y` is equal to 0.\n\nLoop invariants:\n- `i >= 0 && j >= 0`\n- `i >= x && j >= y`\n- `i - x == j - y`\n- `(i == j) ==> (y == 0)`\n\nExplanation:\n- The first invariant holds true before the loop execution because of the pre-condition.\n- The second invariant holds true in every iteration of the loop because both `i` and `j` are decremented by 1 in each iteration, so their difference remains the same.\n- The third invariant also holds true in every iteration of the loop because `i` and `j` are decremented by the same value in each iteration.\n- The fourth invariant holds true after the loop termination because of the post-condition. If `i` is equal to `j`, then `x` would have been decremented `i` times and `y` would have been decremented `j` times. So, `y` would be equal to `0`. If `i` is not equal to `j`, then the assertion does not hold, and the program is incorrect.\n\nNote that since `i` and `j` are assigned non-deterministic values using the function `unknown_int()`, we cannot make any assumptions about their initial values. Therefore, we did not include any bounds on these variables."
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant x >= 0 && y == j - x;\n    loop invariant x >= 0 && y == j - x;\n    loop invariant i == j ==> y == 0;\n*/",
            "/*@ \n    loop invariant 0 <= x <= i;\n    loop invariant 0 <= y <= j;\n    loop invariant x + y == i + j;\n    loop invariant x != 0 ==> x + y == i + j;\n    loop invariant (x == 0 && i == j) ==> y == 0;\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The variables i and j are initialized with non-negative integer values.\n- The variables x and y are initialized with the values of i and j respectively.\n\nLoop condition:\n- x != 0\n\nPost-condition:\n- If the initial values of i and j are equal, then y will eventually become 0.\n\nLoop invariants:\n- Before the loop: \n    - x >= 0\n    - y >= 0\n    - i >= 0\n    - j >= 0\n    - i == x + (i - x)\n    - j == y + (j - y)\n- In every iteration:\n    - x + y == i + j\n- After the loop:\n    - i == j ==> y == 0\n\nExplanation:\n- Before the loop:\n    - x and y are initialized with i and j respectively, which are non-negative.\n    - i and j are non-negative integers, which implies that their difference from x and y respectively is non-negative.\n    - i and j are equal to the sum of x and (i-x) and y and (j-y) respectively, which implies that x and (i-x) and y and (j-y) are non-negative integers.\n- In every iteration:\n    - x and y are decremented by the same amount, which implies that their sum remains constant.\n- After the loop:\n    - If i is equal to j, then the difference between x and y must be 0, since they are decremented by the same amount in every iteration."
            ],
            "/*@\n    loop invariant x >= 0;\n    loop invariant y == j-x;\n    loop invariant i >= x;\n    loop invariant j >= y;\n    loop invariant x >= 0;\n    loop invariant i >= x+1 ==> j >= y+1;\n    loop invariant x == 0 ==> y == j-i;\n    loop invariant i != j ==> \\true;\n    loop invariant i == j ==> (y == 0);\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The program does not have any pre-conditions.\n- The variables `i` and `j` are assigned non-deterministic values using the function `unknown_int()`. \n\nLoop condition:\n- The loop continues as long as `x` is not equal to 0.\n\nPost-condition:\n- If `i` is equal to `j`, then `y` is equal to 0.\n\nLoop invariants:\n- `i >= 0 && j >= 0`\n- `i >= x && j >= y`\n- `i - x == j - y`\n- `(i == j) ==> (y == 0)`\n\nExplanation:\n- The first invariant holds true before the loop execution because of the pre-condition.\n- The second invariant holds true in every iteration of the loop because both `i` and `j` are decremented by 1 in each iteration, so their difference remains the same.\n- The third invariant also holds true in every iteration of the loop because `i` and `j` are decremented by the same value in each iteration.\n- The fourth invariant holds true after the loop termination because of the post-condition. If `i` is equal to `j`, then `x` would have been decremented `i` times and `y` would have been decremented `j` times. So, `y` would be equal to `0`. If `i` is not equal to `j`, then the assertion does not hold, and the program is incorrect.\n\nNote that since `i` and `j` are assigned non-deterministic values using the function `unknown_int()`, we cannot make any assumptions about their initial values. Therefore, we did not include any bounds on these variables."
            ]
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 0 && y == j - x;\n    loop invariant x >= 0 && y == j - x;\n    loop invariant i == j ==> y == 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 && y == j - x is neither established nor preserved.\nloop invariant i == j ==> y == 0 is partially proven to be inductive.\nAssertion y == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\n\n\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant 0 <= x <= i;\n    loop invariant 0 <= y <= j;\n    loop invariant x + y == i + j;\n    loop invariant x != 0 ==> x + y == i + j;\n    loop invariant (x == 0 && i == j) ==> y == 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= i is partially proven to be inductive.\nloop invariant 0 <= y <= j is established but not preserved.\nloop invariant x + y == i + j is established but not preserved.\nloop invariant x != 0 ==> x + y == i + j is partially proven to be inductive.\nloop invariant (x == 0 && i == j) ==> y == 0 is partially proven to be inductive.\nAssertion y == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\nloop invariant i1: 0 <= x <= i;\n\n\n\n\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The variables i and j are initialized with non-negative integer values.\n- The variables x and y are initialized with the values of i and j respectively.\n\nLoop condition:\n- x != 0\n\nPost-condition:\n- If the initial values of i and j are equal, then y will eventually become 0.\n\nLoop invariants:\n- Before the loop: \n    - x >= 0\n    - y >= 0\n    - i >= 0\n    - j >= 0\n    - i == x + (i - x)\n    - j == y + (j - y)\n- In every iteration:\n    - x + y == i + j\n- After the loop:\n    - i == j ==> y == 0\n\nExplanation:\n- Before the loop:\n    - x and y are initialized with i and j respectively, which are non-negative.\n    - i and j are non-negative integers, which implies that their difference from x and y respectively is non-negative.\n    - i and j are equal to the sum of x and (i-x) and y and (j-y) respectively, which implies that x and (i-x) and y and (j-y) are non-negative integers.\n- In every iteration:\n    - x and y are decremented by the same amount, which implies that their sum remains constant.\n- After the loop:\n    - If i is equal to j, then the difference between x and y must be 0, since they are decremented by the same amount in every iteration.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@\n    loop invariant x >= 0;\n    loop invariant y == j-x;\n    loop invariant i >= x;\n    loop invariant j >= y;\n    loop invariant x >= 0;\n    loop invariant i >= x+1 ==> j >= y+1;\n    loop invariant x == 0 ==> y == j-i;\n    loop invariant i != j ==> \\true;\n    loop invariant i == j ==> (y == 0);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is partially proven to be inductive.\nloop invariant y == j-x is neither established nor preserved.\nloop invariant i >= x is partially proven to be inductive.\nloop invariant j >= y is partially proven to be inductive.\nloop invariant i >= x+1 ==> j >= y+1 is partially proven to be inductive.\nloop invariant x == 0 ==> y == j-i is partially proven to be inductive.\nloop invariant i != j ==> \\true is partially proven to be inductive.\nloop invariant i == j ==> (y == 0) is partially proven to be inductive.\nAssertion y == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\nloop invariant i1: x >= 0;\n\nloop invariant i3: i >= x;\nloop invariant i4: j >= y;\nloop invariant i5: i >= x+1 ==> j >= y+1;\n\nloop invariant i7: i != j ==> \\true;\n\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The program does not have any pre-conditions.\n- The variables `i` and `j` are assigned non-deterministic values using the function `unknown_int()`. \n\nLoop condition:\n- The loop continues as long as `x` is not equal to 0.\n\nPost-condition:\n- If `i` is equal to `j`, then `y` is equal to 0.\n\nLoop invariants:\n- `i >= 0 && j >= 0`\n- `i >= x && j >= y`\n- `i - x == j - y`\n- `(i == j) ==> (y == 0)`\n\nExplanation:\n- The first invariant holds true before the loop execution because of the pre-condition.\n- The second invariant holds true in every iteration of the loop because both `i` and `j` are decremented by 1 in each iteration, so their difference remains the same.\n- The third invariant also holds true in every iteration of the loop because `i` and `j` are decremented by the same value in each iteration.\n- The fourth invariant holds true after the loop termination because of the post-condition. If `i` is equal to `j`, then `x` would have been decremented `i` times and `y` would have been decremented `j` times. So, `y` would be equal to `0`. If `i` is not equal to `j`, then the assertion does not hold, and the program is incorrect.\n\nNote that since `i` and `j` are assigned non-deterministic values using the function `unknown_int()`, we cannot make any assumptions about their initial values. Therefore, we did not include any bounds on these variables.",
                "error": "Output does not contain at least 1 code block"
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant x >= 0 && y == j - x is preserved but not established.\nloop invariant i == j ==> y == 0 is partially proven to be inductive.\nloop invariant 0 <= x <= i is partially proven to be inductive.\nloop invariant 0 <= y <= j is partially proven to be inductive.\nloop invariant x + y == i + j is partially proven to be inductive.\nloop invariant x != 0 ==> x + y == i + j is partially proven to be inductive.\nloop invariant (x == 0 && i == j) ==> y == 0 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant y == j-x is partially proven to be inductive.\nloop invariant i >= x is partially proven to be inductive.\nloop invariant j >= y is partially proven to be inductive.\nloop invariant i >= x+1 ==> j >= y+1 is partially proven to be inductive.\nloop invariant x == 0 ==> y == j-i is partially proven to be inductive.\nloop invariant i != j ==> \\true is partially proven to be inductive.\nloop invariant i == j ==> (y == 0) is partially proven to be inductive.\nAssertion y == 0: Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\nloop invariant i1: x >= 0 && y == j - x;\nloop invariant i2: i == j ==> y == 0;\nloop invariant i3: 0 <= x <= i;\nloop invariant i4: 0 <= y <= j;\nloop invariant i5: x + y == i + j;\nloop invariant i6: x != 0 ==> x + y == i + j;\nloop invariant i7: (x == 0 && i == j) ==> y == 0;\nloop invariant i8: x >= 0;\nloop invariant i9: y == j-x;\nloop invariant i10: i >= x;\nloop invariant i11: j >= y;\nloop invariant i12: i >= x+1 ==> j >= y+1;\nloop invariant i13: x == 0 ==> y == j-i;\nloop invariant i14: i != j ==> \\true;\nloop invariant i15: i == j ==> (y == 0);\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n\n    }\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 7,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\n\n\nloop invariant i3: 0 <= x <= i;\n\n\n\n\nloop invariant i8: x >= 0;\n\nloop invariant i10: i >= x;\nloop invariant i11: j >= y;\nloop invariant i12: i >= x+1 ==> j >= y+1;\n\nloop invariant i14: i != j ==> \\true;\n\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n\n    }\n    return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c"
        ],
        "skipped": [],
        "total": 127,
        "success_count": 51,
        "failure_count": 76,
        "success_rate": 0.4015748031496063
    }
}