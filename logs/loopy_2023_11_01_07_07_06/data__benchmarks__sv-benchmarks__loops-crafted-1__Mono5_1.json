{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono5_1.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\nunsigned int x = 0;\nunsigned int y = 10000000;\nunsigned int z=5000000;\n\twhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz--;\n\t\tx++;\n\t}\n  {;\n//@ assert(z!=0);\n}\n\n}\n",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main(void) {\nunsigned int x = 0;\nunsigned int y = 10000000;\nunsigned int z=5000000;\n\twhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz--;\n\t\tx++;\n\t}\n  {;\n//@ assert(z!=0);\n}\n\n}\n\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- The program takes no input.\n- The variables `x`, `y`, and `z` are declared and initialized with 0, 10000000, and 5000000 respectively.\n\nLoop condition:\n- `x<y`\n\nLoop Invariants:\n- `0 <= x <= 10000000`\n- `0 <= y <= 10000000`\n- `0 <= z <= 5000000`\n- `z <= 5000000 - (x - 5000000)`  // if x >= 5000000, then z is decremented by 1 in each iteration\n- `x <= 10000000`\n- `z != 0 ==> x >= 5000000`  // if z is not 0, then x must be greater than or equal to 5000000\n- `z == 0 ==> x < 5000000 ==> y - x <= 5000000`  // if z is 0, then x must be less than 5000000, and the difference between y and x must be less than or equal to 5000000\n\nPost-condition:\n- `z != 0`\n\nExplanation:\n- The first four invariants bound the possible values of `x`, `y`, and `z`.\n- The fifth invariant ensures that `x` does not exceed its maximum value during the loop execution.\n- The sixth invariant takes care of the condition `if(x>=5000000) z--;`, and ensures that `z` is decremented in each iteration when `x` is greater than or equal to 5000000.\n- The seventh invariant uses implication to make sure that if `z` is not 0, then `x` must be greater than or equal to 5000000.\n- The eighth invariant uses implication to make sure that if `z` is 0, then `x` must be less than 5000000, and the difference between `y` and `x` must be less than or equal to 5000000. This implies that `z` is not 0 at the end of the loop if the loop terminates.",
            "We can start by analyzing the pre-conditions and variable assignments:\n\nPre-conditions:\n- None\n\nVariable assignments:\n- x is assigned the value 0\n- y is assigned the value 10000000\n- z is assigned the value 5000000\n\nNow, let's analyze the loop condition and the loop body:\n\nLoop condition:\n- The loop runs while x is less than y\n\nLoop body:\n- If x is greater than or equal to 5000000, then z is decremented by 1\n- x is incremented by 1 in every iteration\n\nBased on the loop condition and the loop body, we can come up with the following loop invariants:\n\n```\n/*@ \n    loop invariant x >= 0 && x <= 10000000;\n    loop invariant y >= 0 && y <= 10000000;\n    loop invariant z >= 0 && z <= 5000000;\n    loop invariant x <= y;\n    loop invariant z >= 0 ==> x < 5000000 || z > 0;\n*/\n```\n\nThe first three invariants bound the maximum and minimum values that x, y, and z can take. The fourth invariant relates x and y, stating that x is always less than or equal to y. The fifth invariant takes care of the fact that z is decremented only when x is greater than or equal to 5000000. It states that if z is non-zero, then either x is less than 5000000 or z is greater than 0.\n\nFinally, since the assertion is not guarded by any condition, we can directly use it in the post-condition:\n\n```\n  {;\n    //@ assert z != 0;\n  }\n``` \n\nNote that we do not need any implications in this case.",
            "Pre-conditions:\n- The program does not have any pre-conditions.\n- The variables x, y, and z contain non-deterministic values.\n\nLoop condition:\n- x < y\n\nLoop invariants:\n- Before the loop execution:\n  - z > 0\n  - y > 0\n  - x >= 0\n  - x <= y\n- In every iteration of the loop:\n  - x <= y\n  - z >= 0\n  - (x >= 5000000 ==> z <= 5000000)\n- After the loop termination:\n  - x >= y\n  - z >= 0\n  - (x < 5000000 ==> z = 5000000)\n\nExplanation:\n- Before the loop execution, we want to ensure that z is positive, y is positive, and x is within the bounds of [0, y]. Since the values of x, y, and z are non-deterministic, we cannot make any assumptions about their values. Therefore, we need to add these bounds as loop invariants.\n- In every iteration of the loop, we want to ensure that x remains within the bounds of [0, y], z remains non-negative, and if x is greater than or equal to 5000000, then z should be less than or equal to 5000000. The last condition is derived from the fact that z is decremented by one in each iteration where x is greater than or equal to 5000000. Therefore, if x is greater than or equal to 5000000 for k iterations, then z should be less than or equal to 5000000 - k. Since we cannot determine the exact value of k, we use implication to bound the value of z.\n- After the loop termination, we want to ensure that x is greater than or equal to y, z remains non-negative, and if x is less than 5000000, then z should be equal to 5000000. The last condition is derived from the fact that z is decremented by one in each iteration where x is greater than or equal to 5000000. Therefore, if x is less than 5000000 for k iterations, then z should be equal to 5000000 - k. Since we cannot determine the exact value of k, we use implication to set the value of z.",
            "Step 1: Pre-conditions and variable assignments\nThere are no pre-conditions or variable assignments in the program.\n\nStep 2: Loop condition\nThe loop condition is `x < y`.\n\nStep 3: Loop invariants\nWe need to find loop invariants that are true before the loop execution, in every iteration of the loop and after the loop termination, such that the loop invariants imply the post-condition `z != 0`.\n\nBefore the loop execution:\n- `x == 0`\n- `y == 10000000`\n- `z == 5000000`\n\nIn every iteration of the loop:\n- `x <= 10000000`\n- `y == 10000000`\n- `z >= 0`\n- `(x < 5000000) ==> (z == 5000000)`\n- `(x >= 5000000) ==> (z <= 5000000)`\n\nAfter the loop termination:\n- `x == 10000000`\n- `z >= 0`\n- `(x < 5000000) ==> (z == 5000000)`\n- `(x >= 5000000) ==> (z <= 5000000)`\n- `z != 0` (implied by the post-condition)\n\nPutting all the loop invariants together, we get:\n```\n/*@ \n    loop invariant x >= 0 && x <= 10000000;\n    loop invariant y == 10000000;\n    loop invariant z >= 0 && z <= 5000000;\n    loop invariant x < 5000000 ==> z == 5000000;\n    loop invariant x >= 5000000 ==> z <= 5000000;\n*/\n```\nNote that we do not need to use any non-deterministic function calls, and all loop invariants are expressed using ACSL annotations for loops.",
            "Pre-conditions or variable assignments:\n- Variable `x` is assigned a value of 0.\n- Variable `y` is assigned a value of 10000000.\n- Variable `z` is assigned a value of 5000000.\n\nLoop condition:\n- The loop will execute while `x` is less than `y`.\n\nLoop invariants:\n- `0 <= x <= 10000000`\n- `z >= 0`\n- `(x < 5000000) ==> (z == 5000000)`\n- `(x >= 5000000) ==> (z <= 5000000)`\n- `x + z == 10000000`\n\nExplanation of loop invariants:\n- `0 <= x <= 10000000`: This is a bound for the loop variable `x`.\n- `z >= 0`: This is a bound for the variable `z`.\n- `(x < 5000000) ==> (z == 5000000)`: If `x` is less than `5000000`, then `z` is equal to `5000000`.\n- `(x >= 5000000) ==> (z <= 5000000)`: If `x` is greater than or equal to `5000000`, then `z` is less than or equal to `5000000`.\n- `x + z == 10000000`: The sum of `x` and `z` is constant throughout the loop, since `x` increments by 1 and `z` decrements by 1 in each iteration of the loop.\n\nThe loop invariants imply the post-condition: `z!=0`, since `z` is always greater than or equal to 0. Therefore, the loop invariants are:\n```\n/*@ \n    loop invariant 0 <= x <= 10000000;\n    loop invariant z >= 0;\n    loop invariant (x < 5000000) ==> (z == 5000000);\n    loop invariant (x >= 5000000) ==> (z <= 5000000);\n    loop invariant x + z == 10000000;\n*/\n```"
        ],
        "annotation_blocks": [
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The program takes no input.\n- The variables `x`, `y`, and `z` are declared and initialized with 0, 10000000, and 5000000 respectively.\n\nLoop condition:\n- `x<y`\n\nLoop Invariants:\n- `0 <= x <= 10000000`\n- `0 <= y <= 10000000`\n- `0 <= z <= 5000000`\n- `z <= 5000000 - (x - 5000000)`  // if x >= 5000000, then z is decremented by 1 in each iteration\n- `x <= 10000000`\n- `z != 0 ==> x >= 5000000`  // if z is not 0, then x must be greater than or equal to 5000000\n- `z == 0 ==> x < 5000000 ==> y - x <= 5000000`  // if z is 0, then x must be less than 5000000, and the difference between y and x must be less than or equal to 5000000\n\nPost-condition:\n- `z != 0`\n\nExplanation:\n- The first four invariants bound the possible values of `x`, `y`, and `z`.\n- The fifth invariant ensures that `x` does not exceed its maximum value during the loop execution.\n- The sixth invariant takes care of the condition `if(x>=5000000) z--;`, and ensures that `z` is decremented in each iteration when `x` is greater than or equal to 5000000.\n- The seventh invariant uses implication to make sure that if `z` is not 0, then `x` must be greater than or equal to 5000000.\n- The eighth invariant uses implication to make sure that if `z` is 0, then `x` must be less than 5000000, and the difference between `y` and `x` must be less than or equal to 5000000. This implies that `z` is not 0 at the end of the loop if the loop terminates."
            ],
            "/*@ \n    loop invariant x >= 0 && x <= 10000000;\n    loop invariant y >= 0 && y <= 10000000;\n    loop invariant z >= 0 && z <= 5000000;\n    loop invariant x <= y;\n    loop invariant z >= 0 ==> x < 5000000 || z > 0;\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The program does not have any pre-conditions.\n- The variables x, y, and z contain non-deterministic values.\n\nLoop condition:\n- x < y\n\nLoop invariants:\n- Before the loop execution:\n  - z > 0\n  - y > 0\n  - x >= 0\n  - x <= y\n- In every iteration of the loop:\n  - x <= y\n  - z >= 0\n  - (x >= 5000000 ==> z <= 5000000)\n- After the loop termination:\n  - x >= y\n  - z >= 0\n  - (x < 5000000 ==> z = 5000000)\n\nExplanation:\n- Before the loop execution, we want to ensure that z is positive, y is positive, and x is within the bounds of [0, y]. Since the values of x, y, and z are non-deterministic, we cannot make any assumptions about their values. Therefore, we need to add these bounds as loop invariants.\n- In every iteration of the loop, we want to ensure that x remains within the bounds of [0, y], z remains non-negative, and if x is greater than or equal to 5000000, then z should be less than or equal to 5000000. The last condition is derived from the fact that z is decremented by one in each iteration where x is greater than or equal to 5000000. Therefore, if x is greater than or equal to 5000000 for k iterations, then z should be less than or equal to 5000000 - k. Since we cannot determine the exact value of k, we use implication to bound the value of z.\n- After the loop termination, we want to ensure that x is greater than or equal to y, z remains non-negative, and if x is less than 5000000, then z should be equal to 5000000. The last condition is derived from the fact that z is decremented by one in each iteration where x is greater than or equal to 5000000. Therefore, if x is less than 5000000 for k iterations, then z should be equal to 5000000 - k. Since we cannot determine the exact value of k, we use implication to set the value of z."
            ],
            "/*@ \n    loop invariant x >= 0 && x <= 10000000;\n    loop invariant y == 10000000;\n    loop invariant z >= 0 && z <= 5000000;\n    loop invariant x < 5000000 ==> z == 5000000;\n    loop invariant x >= 5000000 ==> z <= 5000000;\n*/",
            "/*@ \n    loop invariant 0 <= x <= 10000000;\n    loop invariant z >= 0;\n    loop invariant (x < 5000000) ==> (z == 5000000);\n    loop invariant (x >= 5000000) ==> (z <= 5000000);\n    loop invariant x + z == 10000000;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The program takes no input.\n- The variables `x`, `y`, and `z` are declared and initialized with 0, 10000000, and 5000000 respectively.\n\nLoop condition:\n- `x<y`\n\nLoop Invariants:\n- `0 <= x <= 10000000`\n- `0 <= y <= 10000000`\n- `0 <= z <= 5000000`\n- `z <= 5000000 - (x - 5000000)`  // if x >= 5000000, then z is decremented by 1 in each iteration\n- `x <= 10000000`\n- `z != 0 ==> x >= 5000000`  // if z is not 0, then x must be greater than or equal to 5000000\n- `z == 0 ==> x < 5000000 ==> y - x <= 5000000`  // if z is 0, then x must be less than 5000000, and the difference between y and x must be less than or equal to 5000000\n\nPost-condition:\n- `z != 0`\n\nExplanation:\n- The first four invariants bound the possible values of `x`, `y`, and `z`.\n- The fifth invariant ensures that `x` does not exceed its maximum value during the loop execution.\n- The sixth invariant takes care of the condition `if(x>=5000000) z--;`, and ensures that `z` is decremented in each iteration when `x` is greater than or equal to 5000000.\n- The seventh invariant uses implication to make sure that if `z` is not 0, then `x` must be greater than or equal to 5000000.\n- The eighth invariant uses implication to make sure that if `z` is 0, then `x` must be less than 5000000, and the difference between `y` and `x` must be less than or equal to 5000000. This implies that `z` is not 0 at the end of the loop if the loop terminates.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant x >= 0 && x <= 10000000;\n    loop invariant y >= 0 && y <= 10000000;\n    loop invariant z >= 0 && z <= 5000000;\n    loop invariant x <= y;\n    loop invariant z >= 0 ==> x < 5000000 || z > 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 && x <= 10000000 is partially proven to be inductive.\nloop invariant y >= 0 && y <= 10000000 is partially proven to be inductive.\nloop invariant z >= 0 && z <= 5000000 is partially proven to be inductive.\nloop invariant x <= y is partially proven to be inductive.\nloop invariant z >= 0 ==> x < 5000000 || z > 0 is established but not preserved.\nAssertion z != 0: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\nunsigned int x = 0;\nunsigned int y = 10000000;\nunsigned int z=5000000;\n\t/*@\nloop invariant i1: x >= 0 && x <= 10000000;\nloop invariant i2: y >= 0 && y <= 10000000;\n\nloop invariant i4: x <= y;\n\n*/\nwhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz--;\n\t\tx++;\n\t}\n  {;\n//@ assert(z!=0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The program does not have any pre-conditions.\n- The variables x, y, and z contain non-deterministic values.\n\nLoop condition:\n- x < y\n\nLoop invariants:\n- Before the loop execution:\n  - z > 0\n  - y > 0\n  - x >= 0\n  - x <= y\n- In every iteration of the loop:\n  - x <= y\n  - z >= 0\n  - (x >= 5000000 ==> z <= 5000000)\n- After the loop termination:\n  - x >= y\n  - z >= 0\n  - (x < 5000000 ==> z = 5000000)\n\nExplanation:\n- Before the loop execution, we want to ensure that z is positive, y is positive, and x is within the bounds of [0, y]. Since the values of x, y, and z are non-deterministic, we cannot make any assumptions about their values. Therefore, we need to add these bounds as loop invariants.\n- In every iteration of the loop, we want to ensure that x remains within the bounds of [0, y], z remains non-negative, and if x is greater than or equal to 5000000, then z should be less than or equal to 5000000. The last condition is derived from the fact that z is decremented by one in each iteration where x is greater than or equal to 5000000. Therefore, if x is greater than or equal to 5000000 for k iterations, then z should be less than or equal to 5000000 - k. Since we cannot determine the exact value of k, we use implication to bound the value of z.\n- After the loop termination, we want to ensure that x is greater than or equal to y, z remains non-negative, and if x is less than 5000000, then z should be equal to 5000000. The last condition is derived from the fact that z is decremented by one in each iteration where x is greater than or equal to 5000000. Therefore, if x is less than 5000000 for k iterations, then z should be equal to 5000000 - k. Since we cannot determine the exact value of k, we use implication to set the value of z.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant x >= 0 && x <= 10000000;\n    loop invariant y == 10000000;\n    loop invariant z >= 0 && z <= 5000000;\n    loop invariant x < 5000000 ==> z == 5000000;\n    loop invariant x >= 5000000 ==> z <= 5000000;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 && x <= 10000000 is partially proven to be inductive.\nloop invariant y == 10000000 is partially proven to be inductive.\nloop invariant z >= 0 && z <= 5000000 is established but not preserved.\nloop invariant x < 5000000 ==> z == 5000000 is partially proven to be inductive.\nloop invariant x >= 5000000 ==> z <= 5000000 is partially proven to be inductive.\nAssertion z != 0: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\nunsigned int x = 0;\nunsigned int y = 10000000;\nunsigned int z=5000000;\n\t/*@\nloop invariant i1: x >= 0 && x <= 10000000;\nloop invariant i2: y == 10000000;\n\nloop invariant i4: x < 5000000 ==> z == 5000000;\n\n*/\nwhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz--;\n\t\tx++;\n\t}\n  {;\n//@ assert(z!=0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant 0 <= x <= 10000000;\n    loop invariant z >= 0;\n    loop invariant (x < 5000000) ==> (z == 5000000);\n    loop invariant (x >= 5000000) ==> (z <= 5000000);\n    loop invariant x + z == 10000000;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 10000000 is partially proven to be inductive.\nloop invariant z >= 0 is partially proven to be inductive.\nloop invariant (x < 5000000) ==> (z == 5000000) is partially proven to be inductive.\nloop invariant (x >= 5000000) ==> (z <= 5000000) is partially proven to be inductive.\nloop invariant x + z == 10000000 is preserved but not established.\nAssertion z != 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\nunsigned int x = 0;\nunsigned int y = 10000000;\nunsigned int z=5000000;\n\t/*@\n\nloop invariant i2: z >= 0;\nloop invariant i3: (x < 5000000) ==> (z == 5000000);\n\n\n*/\nwhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz--;\n\t\tx++;\n\t}\n  {;\n//@ assert(z!=0);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant x >= 0 && x <= 10000000 is partially proven to be inductive.\nloop invariant y >= 0 && y <= 10000000 is partially proven to be inductive.\nloop invariant z >= 0 && z <= 5000000 is partially proven to be inductive.\nloop invariant x <= y is partially proven to be inductive.\nloop invariant z >= 0 ==> x < 5000000 || z > 0 is partially proven to be inductive.\nloop invariant y == 10000000 is partially proven to be inductive.\nloop invariant x < 5000000 ==> z == 5000000 is partially proven to be inductive.\nloop invariant x >= 5000000 ==> z <= 5000000 is partially proven to be inductive.\nloop invariant 0 <= x <= 10000000 is partially proven to be inductive.\nloop invariant z >= 0 is partially proven to be inductive.\nloop invariant (x < 5000000) ==> (z == 5000000) is partially proven to be inductive.\nloop invariant (x >= 5000000) ==> (z <= 5000000) is partially proven to be inductive.\nloop invariant x + z == 10000000 is preserved but not established.\nAssertion z != 0: Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\nunsigned int x = 0;\nunsigned int y = 10000000;\nunsigned int z=5000000;\n\t/*@\nloop invariant i1: x >= 0 && x <= 10000000;\nloop invariant i2: y >= 0 && y <= 10000000;\nloop invariant i3: z >= 0 && z <= 5000000;\nloop invariant i4: x <= y;\nloop invariant i5: z >= 0 ==> x < 5000000 || z > 0;\nloop invariant i6: y == 10000000;\nloop invariant i7: x < 5000000 ==> z == 5000000;\nloop invariant i8: x >= 5000000 ==> z <= 5000000;\nloop invariant i9: 0 <= x <= 10000000;\nloop invariant i10: z >= 0;\nloop invariant i11: (x < 5000000) ==> (z == 5000000);\nloop invariant i12: (x >= 5000000) ==> (z <= 5000000);\nloop invariant i13: x + z == 10000000;\n*/\nwhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz--;\n\t\tx++;\n\t}\n  {;\n//@ assert(z!=0);\n}\n\n}\n",
        "combined_annotation_num_solver_calls": 7,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\nunsigned int x = 0;\nunsigned int y = 10000000;\nunsigned int z=5000000;\n\t/*@\nloop invariant i1: x >= 0 && x <= 10000000;\nloop invariant i2: y >= 0 && y <= 10000000;\n\nloop invariant i4: x <= y;\n\nloop invariant i6: y == 10000000;\nloop invariant i7: x < 5000000 ==> z == 5000000;\n\nloop invariant i9: 0 <= x <= 10000000;\nloop invariant i10: z >= 0;\nloop invariant i11: (x < 5000000) ==> (z == 5000000);\n\n\n*/\nwhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz--;\n\t\tx++;\n\t}\n  {;\n//@ assert(z!=0);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/const.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq1.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq2.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/afnp2014.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/css2003.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007b.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gsv2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/hhk2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_2.c",
            "../data/benchmarks/sv-benchmarks/loop-new/gauss_sum.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark10_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark11_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark13_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark14_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark15_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark16_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark17_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark18_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark20_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark21_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark22_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark23_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark25_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark26_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark27_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark29_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark30_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark31_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark32_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark33_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark34_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark35_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark36_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark37_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark38_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark39_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark40_polynomial.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark41_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark42_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark43_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark45_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark48_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark49_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark50_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark51_polynomial.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark52_polynomial.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark53_polynomial.c",
            "../data/benchmarks/sv-benchmarks/loops/count_up_down-1.c",
            "../data/benchmarks/sv-benchmarks/loops/for_infinite_loop_1.c",
            "../data/benchmarks/sv-benchmarks/loops/for_infinite_loop_2.c",
            "../data/benchmarks/sv-benchmarks/loops/sum04-2.c",
            "../data/benchmarks/sv-benchmarks/loops/terminator_02-2.c",
            "../data/benchmarks/sv-benchmarks/loops/terminator_03-2.c",
            "../data/benchmarks/sv-benchmarks/loops/trex03-2.c",
            "../data/benchmarks/sv-benchmarks/loops/while_infinite_loop_1.c",
            "../data/benchmarks/sv-benchmarks/loops/while_infinite_loop_2.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/loopv1.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/loopv3.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../data/benchmarks/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/even.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/mod4.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/odd.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/id_trans.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/bhmr2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/ddlm2013.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gcnr2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gr2006.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_k.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_nondet.c",
            "../data/benchmarks/sv-benchmarks/loop-new/half.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark07_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark12_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark19_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark24_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark28_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark44_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark46_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark47_linear.c",
            "../data/benchmarks/sv-benchmarks/loops/count_up_down-2.c",
            "../data/benchmarks/sv-benchmarks/loops/for_bounded_loop1.c",
            "../data/benchmarks/sv-benchmarks/loops/sum01-1.c",
            "../data/benchmarks/sv-benchmarks/loops/sum01-2.c",
            "../data/benchmarks/sv-benchmarks/loops/sum01_bug02.c",
            "../data/benchmarks/sv-benchmarks/loops/sum01_bug02_sum01_bug02_base.case.c",
            "../data/benchmarks/sv-benchmarks/loops/sum03-1.c",
            "../data/benchmarks/sv-benchmarks/loops/sum03-2.c",
            "../data/benchmarks/sv-benchmarks/loops/sum04-1.c",
            "../data/benchmarks/sv-benchmarks/loops/terminator_02-1.c",
            "../data/benchmarks/sv-benchmarks/loops/terminator_03-1.c",
            "../data/benchmarks/sv-benchmarks/loops/trex03-1.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/iftelse.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_10.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_12.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_6.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_8.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_9.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono4_1.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono5_1.c"
        ],
        "skipped": [],
        "total": 391,
        "success_count": 200,
        "failure_count": 191,
        "success_rate": 0.5115089514066496
    }
}