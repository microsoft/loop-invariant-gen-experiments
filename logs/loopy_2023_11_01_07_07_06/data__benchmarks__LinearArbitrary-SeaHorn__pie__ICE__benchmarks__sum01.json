{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  for(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  for(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions and variable assignments:\n- The program defines a macro `assume` which takes a boolean expression and returns 0 if the expression is false.\n- The program defines a macro `a` which is a constant integer equal to 1.\n- The program has an external function `unknown_int` which returns an integer with an unknown value.\n- The `main` function initializes two integers `i` and `n` with `i` being uninitialized and `n` being initialized with the unknown value returned by `unknown_int`.\n- The `main` function initializes an integer `sn` with 0.\n\nLoop condition:\n- The loop iterates as long as the value of `i` is less than or equal to `n`.\n\nLoop invariants:\n- Before the loop execution: None needed.\n- In every iteration of the loop:\n  - `1 <= i <= n + 1`\n  - `sn = (i - 1) * a`\n- After the loop termination:\n  - `(i > n) ==> (sn == n * a)`\n\nExplanation:\n- Before the loop execution: None needed.\n- In every iteration of the loop:\n  - `1 <= i <= n + 1` is true before the first iteration, and in every iteration, the value of `i` is incremented by 1, so it will be less than or equal to `n + 1`. This ensures that the loop terminates after `n` iterations.\n  - `sn = (i - 1) * a` is true before the first iteration since `i - 1` is 0 and `sn` is initialized to 0. In every iteration, the value of `a` is added to `sn`, making `sn` equal to `(i - 1) * a`.\n- After the loop termination:\n  - If the loop terminated normally, then `i` will be equal to `n + 1`, and therefore, `sn` will be equal to `n * a`. Hence, the assertion `sn == n * a` will be true.\n  - If the loop terminated due to an error, then the assertion may or may not hold. Therefore, we need to use an implication to make the assertion trivially true in that case. The implication `(i > n) ==> (sn == n * a)` ensures that the assertion is true if the loop terminated due to an error, since `i` will be greater than `n` in that case.",
            "Pre-conditions:\n\nThere are no explicit pre-conditions in the program. \n\nVariable assignments:\n\n- `n` is assigned the value returned by the `unknown_int()` function.\n- `sn` is assigned 0 initially.\n\nLoop condition:\n\nThe loop condition is `i<=n`.\n\nLoop invariants:\n\nWe need to find loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n\n(i) Before the loop execution:\n- `sn==0`\n- `n>=0`\n\n(ii) In every iteration of the loop:\n- `1<=i<=n+1`\n- `sn==(i-1)*a`\n\n(iii) After the loop termination:\n- `sn==n*a || sn==0`\n\nWe need to prove that these loop invariants hold true. \n\nProof:\n(i) Before the loop execution:\n- `sn` is assigned 0 initially, so `sn==0` holds true.\n- `n` is assigned the value returned by the `unknown_int()` function, so we cannot make any assumptions about its value. However, we can assume that `n>=0` because the variable `n` is used as the loop bound, which must be non-negative.\n\n(ii) In every iteration of the loop:\n- Initially, `i` is assigned the value 1. So, `1<=i` holds true.\n- In each iteration of the loop, `i` is incremented by 1 and `sn` is updated as `sn = sn + a`. So, `sn==(i-1)*a` holds true.\n\n(iii) After the loop termination:\n- The loop terminates when `i>n`. At this point, `sn` must be equal to `n*a` because `sn` is incremented by `a` in each iteration of the loop. Therefore, `sn==n*a` holds true.\n- If `n` is 0, then the loop does not execute and `sn` remains 0. Therefore, `sn==0` holds true.\n\nSince all the loop invariants are true, and they imply the post-condition, the program is correct. \n\nLoop invariants:\n```\n/*@ \n    loop invariant sn==0;\n    loop invariant n>=0;\n    loop invariant 1<=i<=n+1;\n    loop invariant sn==(i-1)*a;\n    loop invariant sn==n*a || sn==0;\n*/\n```",
            "We can start by analyzing the loop:\n\n```\nfor(i=1; i<=n; i++) {\n  sn = sn + a;\n}\n```\n\nThe loop iterates from 1 to n and adds a to sn in each iteration. Hence, after the loop terminates, the value of sn is n * a.\n\nNow, we can analyze the program and come up with the following loop invariants:\n\n```\n/*@ \n  loop invariant 1 <= i <= n+1; \n  loop invariant sn == (i-1) * a;\n*/\n```\n\nExplanation:\n\n- The first loop invariant states that i is always between 1 and n+1 (inclusive) before each iteration of the loop. This is true because the loop starts with i=1 and increments i by 1 in each iteration until i>n.\n- The second loop invariant states that sn is always equal to (i-1) * a before each iteration of the loop. This is true because before the first iteration, i is equal to 1, so (i-1) * a = 0 * a = 0, which is the initial value of sn. In each subsequent iteration, sn is incremented by a, so its value is (i-1) * a.\n\nNow, we need to show that these loop invariants imply the post-condition:\n\n```\n//@ assert(sn==n*a || sn == 0);\n```\n\nWe can use implication to prove that the loop invariants imply the post-condition:\n\n```\n/*@ \n  loop invariant 1 <= i <= n+1; \n  loop invariant sn == (i-1) * a;\n  \n  loop variant n+1-i;\n*/\nfor(i=1; i<=n; i++) {\n  sn = sn + a;\n}\nassume(sn != n*a);\nassume(sn != 0);\n//@ assert \\false; \n```\n\nExplanation:\n\n- We have added a loop variant `n+1-i` to show that the loop terminates.\n- We have used implication to show that if the loop invariants hold before and after the loop, then the post-condition must also hold. \n- If the loop invariants hold, then sn is either equal to n * a (when i=n+1) or it is not equal to n * a (when i<=n). If sn is not equal to n * a, then it must be equal to 0 (because sn is incremented by a in each iteration). Hence, the loop invariants imply the post-condition. \n- We have added assume statements to show that if the post-condition does not hold, then the loop invariants must not have held. If sn is neither equal to n * a nor equal to 0, then the post-condition does not hold, and we can assert false.",
            "Pre-conditions:\n- The macro `assume(e)` takes a boolean expression `e` and if `e` is false, it returns 0. \n\nVariable Assignments:\n- Macro `a` is assigned the value `1`.\n- Variable `n` is assigned the value of the function `unknown_int()`, which returns an unknown integer value.\n- Variable `i` is assigned the value `1`.\n- Variable `sn` is assigned the value `0`.\n\nLoop Body:\n- Inside the `for` loop, the value of `sn` is incremented by `a` in each iteration.\n\nLoop Condition:\n- The loop continues until `i` becomes greater than `n`.\n\nPost-condition:\n- The value of `sn` should be either equal to `n*a` or `0`.\n\nLoop Invariants:\n- Before the loop execution: `sn == 0 && i == 1 && n >= 0`\n    - The initial value of `sn` is `0`.\n    - The initial value of `i` is `1`.\n    - `n` is non-negative.\n- In every iteration of the loop: `(i >= 1 && i <= n+1) && (sn == (i-1)*a)`\n    - The value of `i` is always between `1` and `n+1`.\n    - The value of `sn` is equal to `(i-1)*a` in each iteration.\n- After the loop termination: `sn == n*a || sn == 0`\n    - The value of `sn` is either equal to `n*a` or `0`.\n- We don't need any non-deterministic variables or any bounds on the variables, as all the variables have been initialized or assigned in the program. \n\nPutting it all together:\n```\n/*@ \n    loop invariant sn == 0 && i == 1 && n >= 0;\n    loop invariant (i >= 1 && i <= n+1) && (sn == (i-1)*a);\n    loop invariant sn == n*a || sn == 0;\n*/\n```",
            "Pre-conditions:\n- The macro `assume(e)` takes a boolean expression `e` and returns 0 if `e` evaluates to false.\n- The function `unknown_int()` returns an integer value that is not known at compile-time.\n- The constant `a` is defined as 1.\n\nVariable assignments:\n- Integer variables `i` and `n` are declared and initialized to garbage values.\n- Integer variable `sn` is declared and initialized to 0.\n\nLoop condition:\n- The loop runs from `i=1` to `n` inclusive.\n\nLoop body:\n- In each iteration, `sn` is updated as `sn = sn + a = sn + 1`.\n\nPost-condition:\n- The value of `sn` is either `n*a` or 0.\n\nBased on the above analysis, we can come up with the following loop invariants:\n```\n/*@ \n    loop invariant 1 <= i <= n+1;\n    loop invariant sn == (i-1)*a;\n    loop invariant sn <= n*a;\n    loop invariant (i == n+1) ==> (sn == n*a || sn == 0);\n*/\n```\nExplanation:\n- The first invariant ensures that the loop variable `i` takes values between 1 and `n+1` inclusive, which covers all iterations of the loop.\n- The second invariant ensures that `sn` is always equal to `(i-1)*a`, which is the cumulative sum of `a` from the first iteration to the current iteration.\n- The third invariant ensures that `sn` is always less than or equal to `n*a`, which is the maximum value that `sn` can attain.\n- The fourth invariant ensures that the post-condition is satisfied at the end of the loop. If `i` has reached the upper bound (`n+1`), then `sn` must be either `n*a` or 0. If `i` is less than `n+1`, then the post-condition is not yet guaranteed to hold."
        ],
        "annotation_blocks": [
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions and variable assignments:\n- The program defines a macro `assume` which takes a boolean expression and returns 0 if the expression is false.\n- The program defines a macro `a` which is a constant integer equal to 1.\n- The program has an external function `unknown_int` which returns an integer with an unknown value.\n- The `main` function initializes two integers `i` and `n` with `i` being uninitialized and `n` being initialized with the unknown value returned by `unknown_int`.\n- The `main` function initializes an integer `sn` with 0.\n\nLoop condition:\n- The loop iterates as long as the value of `i` is less than or equal to `n`.\n\nLoop invariants:\n- Before the loop execution: None needed.\n- In every iteration of the loop:\n  - `1 <= i <= n + 1`\n  - `sn = (i - 1) * a`\n- After the loop termination:\n  - `(i > n) ==> (sn == n * a)`\n\nExplanation:\n- Before the loop execution: None needed.\n- In every iteration of the loop:\n  - `1 <= i <= n + 1` is true before the first iteration, and in every iteration, the value of `i` is incremented by 1, so it will be less than or equal to `n + 1`. This ensures that the loop terminates after `n` iterations.\n  - `sn = (i - 1) * a` is true before the first iteration since `i - 1` is 0 and `sn` is initialized to 0. In every iteration, the value of `a` is added to `sn`, making `sn` equal to `(i - 1) * a`.\n- After the loop termination:\n  - If the loop terminated normally, then `i` will be equal to `n + 1`, and therefore, `sn` will be equal to `n * a`. Hence, the assertion `sn == n * a` will be true.\n  - If the loop terminated due to an error, then the assertion may or may not hold. Therefore, we need to use an implication to make the assertion trivially true in that case. The implication `(i > n) ==> (sn == n * a)` ensures that the assertion is true if the loop terminated due to an error, since `i` will be greater than `n` in that case."
            ],
            "/*@ \n    loop invariant sn==0;\n    loop invariant n>=0;\n    loop invariant 1<=i<=n+1;\n    loop invariant sn==(i-1)*a;\n    loop invariant sn==n*a || sn==0;\n*/",
            "/*@ \n  loop invariant 1 <= i <= n+1; \n  loop invariant sn == (i-1) * a;\n*/",
            "/*@ \n    loop invariant sn == 0 && i == 1 && n >= 0;\n    loop invariant (i >= 1 && i <= n+1) && (sn == (i-1)*a);\n    loop invariant sn == n*a || sn == 0;\n*/",
            "/*@ \n    loop invariant 1 <= i <= n+1;\n    loop invariant sn == (i-1)*a;\n    loop invariant sn <= n*a;\n    loop invariant (i == n+1) ==> (sn == n*a || sn == 0);\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions and variable assignments:\n- The program defines a macro `assume` which takes a boolean expression and returns 0 if the expression is false.\n- The program defines a macro `a` which is a constant integer equal to 1.\n- The program has an external function `unknown_int` which returns an integer with an unknown value.\n- The `main` function initializes two integers `i` and `n` with `i` being uninitialized and `n` being initialized with the unknown value returned by `unknown_int`.\n- The `main` function initializes an integer `sn` with 0.\n\nLoop condition:\n- The loop iterates as long as the value of `i` is less than or equal to `n`.\n\nLoop invariants:\n- Before the loop execution: None needed.\n- In every iteration of the loop:\n  - `1 <= i <= n + 1`\n  - `sn = (i - 1) * a`\n- After the loop termination:\n  - `(i > n) ==> (sn == n * a)`\n\nExplanation:\n- Before the loop execution: None needed.\n- In every iteration of the loop:\n  - `1 <= i <= n + 1` is true before the first iteration, and in every iteration, the value of `i` is incremented by 1, so it will be less than or equal to `n + 1`. This ensures that the loop terminates after `n` iterations.\n  - `sn = (i - 1) * a` is true before the first iteration since `i - 1` is 0 and `sn` is initialized to 0. In every iteration, the value of `a` is added to `sn`, making `sn` equal to `(i - 1) * a`.\n- After the loop termination:\n  - If the loop terminated normally, then `i` will be equal to `n + 1`, and therefore, `sn` will be equal to `n * a`. Hence, the assertion `sn == n * a` will be true.\n  - If the loop terminated due to an error, then the assertion may or may not hold. Therefore, we need to use an implication to make the assertion trivially true in that case. The implication `(i > n) ==> (sn == n * a)` ensures that the assertion is true if the loop terminated due to an error, since `i` will be greater than `n` in that case.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant sn==0;\n    loop invariant n>=0;\n    loop invariant 1<=i<=n+1;\n    loop invariant sn==(i-1)*a;\n    loop invariant sn==n*a || sn==0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant sn==0 is established but not preserved.\nloop invariant n>=0 is preserved but not established.\nloop invariant 1<=i<=n+1 is partially proven to be inductive.\nloop invariant sn==(i-1)*a is partially proven to be inductive.\nloop invariant sn==n*a || sn==0 is partially proven to be inductive.\nAssertion sn == n * 1 || sn == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\n\n\nloop invariant i4: sn==(i-1)*a;\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n  loop invariant 1 <= i <= n+1; \n  loop invariant sn == (i-1) * a;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= n+1 is preserved but not established.\nloop invariant sn == (i-1) * a is partially proven to be inductive.\nAssertion sn == n * 1 || sn == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\nloop invariant i2: sn == (i-1) * a;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant sn == 0 && i == 1 && n >= 0;\n    loop invariant (i >= 1 && i <= n+1) && (sn == (i-1)*a);\n    loop invariant sn == n*a || sn == 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant sn == 0 && i == 1 && n >= 0 is neither established nor preserved.\nloop invariant (i >= 1 && i <= n+1) && (sn == (i-1)*a) is partially proven to be inductive.\nloop invariant sn == n*a || sn == 0 is partially proven to be inductive.\nAssertion sn == n * 1 || sn == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant 1 <= i <= n+1;\n    loop invariant sn == (i-1)*a;\n    loop invariant sn <= n*a;\n    loop invariant (i == n+1) ==> (sn == n*a || sn == 0);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= n+1 is preserved but not established.\nloop invariant sn == (i-1)*a is partially proven to be inductive.\nloop invariant sn <= n*a is partially proven to be inductive.\nloop invariant (i == n+1) ==> (sn == n*a || sn == 0) is partially proven to be inductive.\nAssertion sn == n * 1 || sn == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\nloop invariant i2: sn == (i-1)*a;\n\nloop invariant i4: (i == n+1) ==> (sn == n*a || sn == 0);\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant sn==0 is established but not preserved.\nloop invariant n>=0 is preserved but not established.\nloop invariant 1<=i<=n+1 is partially proven to be inductive.\nloop invariant sn==(i-1)*a is partially proven to be inductive.\nloop invariant sn==n*a || sn==0 is partially proven to be inductive.\nloop invariant 1 <= i <= n+1 is partially proven to be inductive.\nloop invariant sn == (i-1) * a is partially proven to be inductive.\nloop invariant sn == 0 && i == 1 && n >= 0 is partially proven to be inductive.\nloop invariant (i >= 1 && i <= n+1) && (sn == (i-1)*a) is partially proven to be inductive.\nloop invariant sn == n*a || sn == 0 is partially proven to be inductive.\nloop invariant sn == (i-1)*a is partially proven to be inductive.\nloop invariant sn <= n*a is partially proven to be inductive.\nloop invariant (i == n+1) ==> (sn == n*a || sn == 0) is partially proven to be inductive.\nAssertion sn == n * 1 || sn == 0: Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\nloop invariant i1: sn==0;\nloop invariant i2: n>=0;\nloop invariant i3: 1<=i<=n+1;\nloop invariant i4: sn==(i-1)*a;\nloop invariant i5: sn==n*a || sn==0;\nloop invariant i6: 1 <= i <= n+1;\nloop invariant i7: sn == (i-1) * a;\nloop invariant i8: sn == 0 && i == 1 && n >= 0;\nloop invariant i9: (i >= 1 && i <= n+1) && (sn == (i-1)*a);\nloop invariant i10: sn == n*a || sn == 0;\nloop invariant i11: sn == (i-1)*a;\nloop invariant i12: sn <= n*a;\nloop invariant i13: (i == n+1) ==> (sn == n*a || sn == 0);\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
        "combined_annotation_num_solver_calls": 7,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\n\n\nloop invariant i4: sn==(i-1)*a;\n\n\nloop invariant i7: sn == (i-1) * a;\n\n\n\nloop invariant i11: sn == (i-1)*a;\n\nloop invariant i13: (i == n+1) ==> (sn == n*a || sn == 0);\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c"
        ],
        "skipped": [],
        "total": 205,
        "success_count": 94,
        "failure_count": 111,
        "success_rate": 0.4585365853658537
    }
}