{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
        "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main()\n{\n  int x=0;\n  int y=0;\n  int i=0;\n  int n = unknown();\n  \n  while(i<n) {\n    i++;\n    x++;\n    if(i%2 == 0) y++;\n  }\n  \n  if(i%2 == 0) {;\n//@ assert(x==2*y);\n}\n\n}\n",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main()\n{\n  int x=0;\n  int y=0;\n  int i=0;\n  int n = unknown();\n  \n  while(i<n) {\n    i++;\n    x++;\n    if(i%2 == 0) y++;\n  }\n  \n  if(i%2 == 0) {;\n//@ assert(x==2*y);\n}\n\n}\n\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions: None\n\nVariable assignments: \n- x is initialized to 0\n- y is initialized to 0\n- i is initialized to 0\n- n is assigned the value returned by an external function `unknown()` which could be any integer value.\n\nLoop condition: i < n\n\nWe need to find loop invariants that are true:\n(i) before the loop execution,\n(ii) in every iteration of the loop and\n(iii) after the loop termination,\nsuch that the loop invariants imply the post condition.\n\nIn this case, the post-condition is `x == 2*y` if `i` is even after the loop terminates.\n\nLet's start by finding the loop invariants:\n\n(i) Before the loop execution:\n- x >= 0\n- y >= 0\n- i == 0\n- n >= 0 (since it is the result of `unknown()`)\n\n(ii) In every iteration of the loop:\n- i <= n\n- x >= i\n- y >= i/2\n\n(iii) After the loop termination:\n- i >= n\n- i%2 == 0 ==> x == 2*y\n\nExplanation:\n- Before the loop, `x` and `y` are both non-negative integers and `i` is initialized to 0. `n` is also non-negative since it is the result of `unknown()`.\n- In each iteration of the loop, `i` is increased by 1, so it is always less than or equal to `n`.\n- `x` is increased by 1 in each iteration, so it is always greater than or equal to `i`.\n- If `i` is even, then `y` is increased by 1 in that iteration, so it is always greater than or equal to `i/2`.\n- After the loop, `i` is greater than or equal to `n`. If `i` is even, then `x` is twice `y`.\n\nTherefore, the loop invariants that imply the post condition are:\n```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i == 0;\nloop invariant n >= 0;\nloop invariant i <= n;\nloop invariant x >= i;\nloop invariant y >= i/2;\nloop invariant i >= n;\nloop invariant (i%2 == 0) ==> (x == 2*y);\n*/\n```",
            "The pre-conditions and variable assignments in the program are:\n- The function `unknown()` returns the number of iterations `n`.\n- `x` is initialized to 0.\n- `y` is initialized to 0.\n- `i` is initialized to 0.\n\nThe loop condition is `i < n`.\n\nLoop invariants that are true before the loop execution:\n- `x == 0`\n- `y == 0`\n- `i == 0`\n- `n >= 0`\n\nLoop invariants that are true in every iteration of the loop:\n- `i >= 0`\n- `i <= n`\n- `x >= 0`\n- `y >= 0`\n- `(i % 2 == 0) ==> (y <= x/2)`\n- `(i % 2 == 1) ==> (y <= (x+1)/2)`\n\nLoop invariants that are true after the loop termination:\n- `i == n`\n- `(i % 2 == 0) ==> (x == 2*y)`\n- `(i % 2 == 1) ==> (x == 2*y+1)`\n\nPutting all the loop invariants together, we have:\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant i >= 0;\n    loop invariant i <= n;\n    loop invariant x == 2*y ==> i % 2 == 0;\n    loop invariant x == 2*y+1 ==> i % 2 == 1;\n    loop invariant i % 2 == 0 ==> y <= x/2;\n    loop invariant i % 2 == 1 ==> y <= (x+1)/2;\n    loop invariant i == n;\n    loop invariant (i % 2 == 0) ==> (x == 2*y);\n    loop invariant (i % 2 == 1) ==> (x == 2*y+1);\n*/\n``` \n\nNote that we did not need to add any implications since the assertion is not guarded by a condition, and there are no non-deterministic variables in the program. We also added conjunctions to bound the maximum and minimum values of the variables.",
            "Pre-conditions:\n- The program does not have any pre-conditions.\n\nVariable Assignments:\n- `int x=0;` Initializes variable `x` to `0`.\n- `int y=0;` Initializes variable `y` to `0`.\n- `int i=0;` Initializes variable `i` to `0`.\n- `int n = unknown();` Initializes variable `n` to a non-deterministic value obtained from function `unknown()`.\n\nLoop Condition:\n- The loop runs while `i<n`.\n\nLoop Invariants:\n- `0 <= i <= n` - `i` is always between 0 and `n`.\n- `0 <= x` - `x` is always greater than or equal to 0.\n- `0 <= y` - `y` is always greater than or equal to 0.\n- `x == i - y` - `x` is always equal to the difference between `i` and `y`.\n- `i%2 == 0 ==> y <= i/2` - If `i` is even, `y` is less than or equal to `i/2`.\n- `(i+1)%2 == 0 ==> y <= (i+1)/2` - If `i+1` is even, `y` is less than or equal to `(i+1)/2`.\n- `(i+1)%2 == 1 ==> y <= i/2` - If `i+1` is odd, `y` is less than or equal to `i/2`.\n- `(i%2 == 0 && i == n) ==> x == 2*y` - If `i` is even and equal to `n`, `x` is twice `y`.\n\nExplanation:\n- `0 <= i <= n` - This ensures that `i` is always between 0 and `n`.\n- `0 <= x` - This ensures that `x` is always greater than or equal to 0.\n- `0 <= y` - This ensures that `y` is always greater than or equal to 0.\n- `x == i - y` - This ensures that the difference between `i` and `y` is always equal to `x`.\n- `i%2 == 0 ==> y <= i/2` - If `i` is even, then `y` is incremented and `i/2` represents the number of even numbers in the range `[1,i]`. Therefore, `y` is less than or equal to `i/2`.\n- `(i+1)%2 == 0 ==> y <= (i+1)/2` - If `i+1` is even, then `y` is incremented and `(i+1)/2` represents the number of even numbers in the range `[1,i+1]`. Therefore, `y` is less than or equal to `(i+1)/2`.\n- `(i+1)%2 == 1 ==> y <= i/2` - If `i+1` is odd, then `y` is not incremented and `i/2` represents the number of even numbers in the range `[1,i]`. Therefore, `y` is less than or equal to `i/2`.\n- `(i%2 == 0 && i == n) ==> x == 2*y` - If `i` is even and equal to `n`, then all the even numbers in the range `[1,n]` have been counted and stored in `y`. Therefore, `x` is twice `y`.",
            "**Step 1: Pre-conditions and variable assignments**\n\nThere are no pre-conditions or variable assignments in the program. \n\n**Step 2: Loop condition**\n\nThe loop condition is `i<n`.\n\n**Step 3: Loop invariants**\n\nLet's start with the necessary loop invariants:\n\n1. Before the loop execution:\n   - `x == 0`\n   - `y == 0`\n   - `i >= 0`\n   - `n >= 0`\n2. In every iteration of the loop:\n   - `1 <= i <= n+1`\n   - `x == i-1`\n   - `y == (i-1)/2`\n3. After the loop termination:\n   - `i == n+1`\n   - `x == n`\n   - `y == n/2`\n\nExplanation:\n- Before the loop, `x` and `y` are initialized to 0. `i` and `n` are non-negative integers.\n- In every iteration of the loop, `i` is incremented by 1, `x` is incremented by 1, and `y` is incremented by 1 if `i` is even. Since the loop condition is `i<n`, we have `1 <= i <= n+1`. Also, since `x` is incremented by 1 in every iteration, we have `x == i-1`. Similarly, since `y` is incremented by 1 every time `i` is even, we have `y == (i-1)/2`.\n- After the loop termination, `i` must be equal to `n+1`, since the loop condition is `i<n`. Also, since `x` is incremented by 1 in every iteration, `x` must be equal to `n`. Similarly, since `y` is incremented by 1 every time `i` is even, `y` must be equal to `n/2`.\n\nWe can express these loop invariants in ACSL annotations as follows:\n```\n/*@ \n    loop invariant x == 0;\n    loop invariant y == 0;\n    loop invariant i >= 0;\n    loop invariant n >= 0;\n    \n    loop invariant 1 <= i <= n+1;\n    loop invariant x == i-1;\n    loop invariant y == (i-1)/2;\n    \n    loop invariant i == n+1 ==> x == n && y == n/2;\n*/\n``` \n\nNote that we have used implication (==>) to express the last loop invariant, since it is only relevant after the loop termination.",
            "Pre-conditions:\n- None.\n\nVariable assignments:\n- x = 0;\n- y = 0;\n- i = 0;\n- n = unknown();\n\nLoop condition:\n- i < n\n\nPost-condition:\n- if i is even, then x = 2*y.\n\nLoop Invariants:\n1. i >= 0\n2. i <= n\n3. x == i - y\n4. y <= i/2\n5. x >= y\n\nExplanation:\n- Invariant 1 holds before the loop starts because i is initialized to 0.\n- Invariant 2 holds before the loop starts because n is assigned a non-negative value from the unknown() function.\n- Invariant 3 holds before the loop starts because both x and y are initialized to 0 and i - y = 0.\n- Invariant 4 holds before the loop starts because y is 0 initially and i/2 is non-negative.\n- Invariant 5 holds before the loop starts because x and y are both 0 initially.\n\n- Invariant 1, 2, 3, 4, and 5 hold in every iteration of the loop because:\n  - Invariant 1 holds because i is incremented by 1 in every iteration.\n  - Invariant 2 holds because n is not changed within the loop.\n  - Invariant 3 holds because x is incremented by 1 in every iteration and y is not changed when i is odd.\n  - Invariant 4 holds because y is incremented by 1 in every iteration when i is even.\n  - Invariant 5 holds because x and y are incremented by the same amount when i is odd and x and y are incremented by different amounts when i is even.\n\n- Invariant 1, 2, 3, 4, and 5 hold after the loop terminates because:\n  - Invariant 1 and 2 hold because the loop terminates when i >= n.\n  - Invariant 3 holds because x = n - y.\n  - Invariant 4 holds because y <= n/2.\n  - Invariant 5 holds because x >= y.\n\n- Finally, the post-condition is x == 2*y when i is even. Using implication, we can express this as:\n```\ni%2 == 0 ==> x == 2*y\n```\n\nTherefore, the final set of loop invariants is:\n```\n/*@ \n    loop invariant i >= 0 && i <= n;\n    loop invariant x == i - y;\n    loop invariant y <= i/2;\n    loop invariant x >= y;\n    loop invariant i%2 == 0 ==> x == 2*y;\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i == 0;\nloop invariant n >= 0;\nloop invariant i <= n;\nloop invariant x >= i;\nloop invariant y >= i/2;\nloop invariant i >= n;\nloop invariant (i%2 == 0) ==> (x == 2*y);\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant i >= 0;\n    loop invariant i <= n;\n    loop invariant x == 2*y ==> i % 2 == 0;\n    loop invariant x == 2*y+1 ==> i % 2 == 1;\n    loop invariant i % 2 == 0 ==> y <= x/2;\n    loop invariant i % 2 == 1 ==> y <= (x+1)/2;\n    loop invariant i == n;\n    loop invariant (i % 2 == 0) ==> (x == 2*y);\n    loop invariant (i % 2 == 1) ==> (x == 2*y+1);\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The program does not have any pre-conditions.\n\nVariable Assignments:\n- `int x=0;` Initializes variable `x` to `0`.\n- `int y=0;` Initializes variable `y` to `0`.\n- `int i=0;` Initializes variable `i` to `0`.\n- `int n = unknown();` Initializes variable `n` to a non-deterministic value obtained from function `unknown()`.\n\nLoop Condition:\n- The loop runs while `i<n`.\n\nLoop Invariants:\n- `0 <= i <= n` - `i` is always between 0 and `n`.\n- `0 <= x` - `x` is always greater than or equal to 0.\n- `0 <= y` - `y` is always greater than or equal to 0.\n- `x == i - y` - `x` is always equal to the difference between `i` and `y`.\n- `i%2 == 0 ==> y <= i/2` - If `i` is even, `y` is less than or equal to `i/2`.\n- `(i+1)%2 == 0 ==> y <= (i+1)/2` - If `i+1` is even, `y` is less than or equal to `(i+1)/2`.\n- `(i+1)%2 == 1 ==> y <= i/2` - If `i+1` is odd, `y` is less than or equal to `i/2`.\n- `(i%2 == 0 && i == n) ==> x == 2*y` - If `i` is even and equal to `n`, `x` is twice `y`.\n\nExplanation:\n- `0 <= i <= n` - This ensures that `i` is always between 0 and `n`.\n- `0 <= x` - This ensures that `x` is always greater than or equal to 0.\n- `0 <= y` - This ensures that `y` is always greater than or equal to 0.\n- `x == i - y` - This ensures that the difference between `i` and `y` is always equal to `x`.\n- `i%2 == 0 ==> y <= i/2` - If `i` is even, then `y` is incremented and `i/2` represents the number of even numbers in the range `[1,i]`. Therefore, `y` is less than or equal to `i/2`.\n- `(i+1)%2 == 0 ==> y <= (i+1)/2` - If `i+1` is even, then `y` is incremented and `(i+1)/2` represents the number of even numbers in the range `[1,i+1]`. Therefore, `y` is less than or equal to `(i+1)/2`.\n- `(i+1)%2 == 1 ==> y <= i/2` - If `i+1` is odd, then `y` is not incremented and `i/2` represents the number of even numbers in the range `[1,i]`. Therefore, `y` is less than or equal to `i/2`.\n- `(i%2 == 0 && i == n) ==> x == 2*y` - If `i` is even and equal to `n`, then all the even numbers in the range `[1,n]` have been counted and stored in `y`. Therefore, `x` is twice `y`."
            ],
            "/*@ \n    loop invariant x == 0;\n    loop invariant y == 0;\n    loop invariant i >= 0;\n    loop invariant n >= 0;\n    \n    loop invariant 1 <= i <= n+1;\n    loop invariant x == i-1;\n    loop invariant y == (i-1)/2;\n    \n    loop invariant i == n+1 ==> x == n && y == n/2;\n*/",
            "/*@ \n    loop invariant i >= 0 && i <= n;\n    loop invariant x == i - y;\n    loop invariant y <= i/2;\n    loop invariant x >= y;\n    loop invariant i%2 == 0 ==> x == 2*y;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 5,
                "annotations": "/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i == 0;\nloop invariant n >= 0;\nloop invariant i <= n;\nloop invariant x >= i;\nloop invariant y >= i/2;\nloop invariant i >= n;\nloop invariant (i%2 == 0) ==> (x == 2*y);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant i == 0 is partially proven to be inductive.\nloop invariant n >= 0 is preserved but not established.\nloop invariant i <= n is partially proven to be inductive.\nloop invariant x >= i is partially proven to be inductive.\nloop invariant y >= i/2 is partially proven to be inductive.\nloop invariant i >= n is preserved but not established.\nloop invariant (i%2 == 0) ==> (x == 2*y) is partially proven to be inductive.\nAssertion x == 2 * y: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main()\n{\n  int x=0;\n  int y=0;\n  int i=0;\n  int n = unknown();\n  \n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\n\n\n\nloop invariant i6: x >= i;\nloop invariant i7: y >= i/2;\n\n\n*/\nwhile(i<n) {\n    i++;\n    x++;\n    if(i%2 == 0) y++;\n  }\n  \n  if(i%2 == 0) {;\n//@ assert(x==2*y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant i >= 0;\n    loop invariant i <= n;\n    loop invariant x == 2*y ==> i % 2 == 0;\n    loop invariant x == 2*y+1 ==> i % 2 == 1;\n    loop invariant i % 2 == 0 ==> y <= x/2;\n    loop invariant i % 2 == 1 ==> y <= (x+1)/2;\n    loop invariant i == n;\n    loop invariant (i % 2 == 0) ==> (x == 2*y);\n    loop invariant (i % 2 == 1) ==> (x == 2*y+1);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant i <= n is preserved but not established.\nloop invariant x == 2*y ==> i % 2 == 0 is partially proven to be inductive.\nloop invariant x == 2*y+1 ==> i % 2 == 1 is partially proven to be inductive.\nloop invariant i % 2 == 0 ==> y <= x/2 is partially proven to be inductive.\nloop invariant i % 2 == 1 ==> y <= (x+1)/2 is partially proven to be inductive.\nloop invariant i == n is preserved but not established.\nloop invariant (i % 2 == 0) ==> (x == 2*y) is partially proven to be inductive.\nloop invariant (i % 2 == 1) ==> (x == 2*y+1) is partially proven to be inductive.\nAssertion x == 2 * y: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main()\n{\n  int x=0;\n  int y=0;\n  int i=0;\n  int n = unknown();\n  \n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: i >= 0;\n\nloop invariant i5: x == 2*y ==> i % 2 == 0;\nloop invariant i6: x == 2*y+1 ==> i % 2 == 1;\nloop invariant i7: i % 2 == 0 ==> y <= x/2;\nloop invariant i8: i % 2 == 1 ==> y <= (x+1)/2;\n\nloop invariant i10: (i % 2 == 0) ==> (x == 2*y);\nloop invariant i11: (i % 2 == 1) ==> (x == 2*y+1);\n*/\nwhile(i<n) {\n    i++;\n    x++;\n    if(i%2 == 0) y++;\n  }\n  \n  if(i%2 == 0) {;\n//@ assert(x==2*y);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The program does not have any pre-conditions.\n\nVariable Assignments:\n- `int x=0;` Initializes variable `x` to `0`.\n- `int y=0;` Initializes variable `y` to `0`.\n- `int i=0;` Initializes variable `i` to `0`.\n- `int n = unknown();` Initializes variable `n` to a non-deterministic value obtained from function `unknown()`.\n\nLoop Condition:\n- The loop runs while `i<n`.\n\nLoop Invariants:\n- `0 <= i <= n` - `i` is always between 0 and `n`.\n- `0 <= x` - `x` is always greater than or equal to 0.\n- `0 <= y` - `y` is always greater than or equal to 0.\n- `x == i - y` - `x` is always equal to the difference between `i` and `y`.\n- `i%2 == 0 ==> y <= i/2` - If `i` is even, `y` is less than or equal to `i/2`.\n- `(i+1)%2 == 0 ==> y <= (i+1)/2` - If `i+1` is even, `y` is less than or equal to `(i+1)/2`.\n- `(i+1)%2 == 1 ==> y <= i/2` - If `i+1` is odd, `y` is less than or equal to `i/2`.\n- `(i%2 == 0 && i == n) ==> x == 2*y` - If `i` is even and equal to `n`, `x` is twice `y`.\n\nExplanation:\n- `0 <= i <= n` - This ensures that `i` is always between 0 and `n`.\n- `0 <= x` - This ensures that `x` is always greater than or equal to 0.\n- `0 <= y` - This ensures that `y` is always greater than or equal to 0.\n- `x == i - y` - This ensures that the difference between `i` and `y` is always equal to `x`.\n- `i%2 == 0 ==> y <= i/2` - If `i` is even, then `y` is incremented and `i/2` represents the number of even numbers in the range `[1,i]`. Therefore, `y` is less than or equal to `i/2`.\n- `(i+1)%2 == 0 ==> y <= (i+1)/2` - If `i+1` is even, then `y` is incremented and `(i+1)/2` represents the number of even numbers in the range `[1,i+1]`. Therefore, `y` is less than or equal to `(i+1)/2`.\n- `(i+1)%2 == 1 ==> y <= i/2` - If `i+1` is odd, then `y` is not incremented and `i/2` represents the number of even numbers in the range `[1,i]`. Therefore, `y` is less than or equal to `i/2`.\n- `(i%2 == 0 && i == n) ==> x == 2*y` - If `i` is even and equal to `n`, then all the even numbers in the range `[1,n]` have been counted and stored in `y`. Therefore, `x` is twice `y`.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 6,
                "annotations": "/*@ \n    loop invariant x == 0;\n    loop invariant y == 0;\n    loop invariant i >= 0;\n    loop invariant n >= 0;\n    \n    loop invariant 1 <= i <= n+1;\n    loop invariant x == i-1;\n    loop invariant y == (i-1)/2;\n    \n    loop invariant i == n+1 ==> x == n && y == n/2;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x == 0 is partially proven to be inductive.\nloop invariant y == 0 is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant n >= 0 is preserved but not established.\nloop invariant 1 <= i <= n+1 is preserved but not established.\nloop invariant x == i-1 is partially proven to be inductive.\nloop invariant y == (i-1)/2 is partially proven to be inductive.\nloop invariant i == n+1 ==> x == n && y == n/2 is partially proven to be inductive.\nAssertion x == 2 * y: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main()\n{\n  int x=0;\n  int y=0;\n  int i=0;\n  int n = unknown();\n  \n  /*@\n\n\nloop invariant i3: i >= 0;\n\n\n\n\n\n*/\nwhile(i<n) {\n    i++;\n    x++;\n    if(i%2 == 0) y++;\n  }\n  \n  if(i%2 == 0) {;\n//@ assert(x==2*y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant i >= 0 && i <= n;\n    loop invariant x == i - y;\n    loop invariant y <= i/2;\n    loop invariant x >= y;\n    loop invariant i%2 == 0 ==> x == 2*y;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 0 && i <= n is preserved but not established.\nloop invariant x == i - y is established but not preserved.\nloop invariant y <= i/2 is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant i%2 == 0 ==> x == 2*y is partially proven to be inductive.\nAssertion x == 2 * y: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main()\n{\n  int x=0;\n  int y=0;\n  int i=0;\n  int n = unknown();\n  \n  /*@\n\n\n\nloop invariant i4: x >= y;\n\n*/\nwhile(i<n) {\n    i++;\n    x++;\n    if(i%2 == 0) y++;\n  }\n  \n  if(i%2 == 0) {;\n//@ assert(x==2*y);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant x >= 0 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant i == 0 is partially proven to be inductive.\nloop invariant n >= 0 is preserved but not established.\nloop invariant i <= n is partially proven to be inductive.\nloop invariant x >= i is partially proven to be inductive.\nloop invariant y >= i/2 is partially proven to be inductive.\nloop invariant i >= n is preserved but not established.\nloop invariant (i%2 == 0) ==> (x == 2*y) is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant x == 2*y ==> i % 2 == 0 is partially proven to be inductive.\nloop invariant x == 2*y+1 ==> i % 2 == 1 is partially proven to be inductive.\nloop invariant i % 2 == 0 ==> y <= x/2 is partially proven to be inductive.\nloop invariant i % 2 == 1 ==> y <= (x+1)/2 is partially proven to be inductive.\nloop invariant i == n is partially proven to be inductive.\nloop invariant (i % 2 == 0) ==> (x == 2*y) is partially proven to be inductive.\nloop invariant (i % 2 == 1) ==> (x == 2*y+1) is partially proven to be inductive.\nloop invariant x == 0 is partially proven to be inductive.\nloop invariant y == 0 is partially proven to be inductive.\nloop invariant 1 <= i <= n+1 is preserved but not established.\nloop invariant x == i-1 is partially proven to be inductive.\nloop invariant y == (i-1)/2 is partially proven to be inductive.\nloop invariant i == n+1 ==> x == n && y == n/2 is partially proven to be inductive.\nloop invariant i >= 0 && i <= n is partially proven to be inductive.\nloop invariant x == i - y is partially proven to be inductive.\nloop invariant y <= i/2 is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant i%2 == 0 ==> x == 2*y is partially proven to be inductive.\nAssertion x == 2 * y: Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main()\n{\n  int x=0;\n  int y=0;\n  int i=0;\n  int n = unknown();\n  \n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: i == 0;\nloop invariant i4: n >= 0;\nloop invariant i5: i <= n;\nloop invariant i6: x >= i;\nloop invariant i7: y >= i/2;\nloop invariant i8: i >= n;\nloop invariant i9: (i%2 == 0) ==> (x == 2*y);\nloop invariant i10: i >= 0;\nloop invariant i11: x == 2*y ==> i % 2 == 0;\nloop invariant i12: x == 2*y+1 ==> i % 2 == 1;\nloop invariant i13: i % 2 == 0 ==> y <= x/2;\nloop invariant i14: i % 2 == 1 ==> y <= (x+1)/2;\nloop invariant i15: i == n;\nloop invariant i16: (i % 2 == 0) ==> (x == 2*y);\nloop invariant i17: (i % 2 == 1) ==> (x == 2*y+1);\nloop invariant i18: x == 0;\nloop invariant i19: y == 0;\nloop invariant i20: 1 <= i <= n+1;\nloop invariant i21: x == i-1;\nloop invariant i22: y == (i-1)/2;\nloop invariant i23: i == n+1 ==> x == n && y == n/2;\nloop invariant i24: i >= 0 && i <= n;\nloop invariant i25: x == i - y;\nloop invariant i26: y <= i/2;\nloop invariant i27: x >= y;\nloop invariant i28: i%2 == 0 ==> x == 2*y;\n*/\nwhile(i<n) {\n    i++;\n    x++;\n    if(i%2 == 0) y++;\n  }\n  \n  if(i%2 == 0) {;\n//@ assert(x==2*y);\n}\n\n}\n",
        "combined_annotation_num_solver_calls": 8,
        "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main()\n{\n  int x=0;\n  int y=0;\n  int i=0;\n  int n = unknown();\n  \n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\n\n\n\nloop invariant i6: x >= i;\nloop invariant i7: y >= i/2;\n\nloop invariant i9: (i%2 == 0) ==> (x == 2*y);\nloop invariant i10: i >= 0;\nloop invariant i11: x == 2*y ==> i % 2 == 0;\nloop invariant i12: x == 2*y+1 ==> i % 2 == 1;\nloop invariant i13: i % 2 == 0 ==> y <= x/2;\nloop invariant i14: i % 2 == 1 ==> y <= (x+1)/2;\n\nloop invariant i16: (i % 2 == 0) ==> (x == 2*y);\nloop invariant i17: (i % 2 == 1) ==> (x == 2*y+1);\n\n\n\n\n\n\n\n\nloop invariant i26: y <= i/2;\nloop invariant i27: x >= y;\nloop invariant i28: i%2 == 0 ==> x == 2*y;\n*/\nwhile(i<n) {\n    i++;\n    x++;\n    if(i%2 == 0) y++;\n  }\n  \n  if(i%2 == 0) {;\n//@ assert(x==2*y);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c"
        ],
        "skipped": [],
        "total": 179,
        "success_count": 76,
        "failure_count": 103,
        "success_rate": 0.4245810055865922
    }
}