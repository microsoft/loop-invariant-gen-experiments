{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark37_conjunctive.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x == y && x >= 0)) return 0;\n  while (x > 0) {\n    x--;\n    y--;\n  }\n  {;\n//@ assert(y>=0);\n}\n\n  return 0;\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x == y && x >= 0)) return 0;\n  while (x > 0) {\n    x--;\n    y--;\n  }\n  {;\n//@ assert(y>=0);\n}\n\n  return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "First, let's analyze the program and identify the pre-conditions and variable assignments:\n\nPre-conditions:\n- x and y are initialized with non-deterministic values.\n- x == y and x >= 0.\n\nVariable Assignments:\n- x--;\n- y--;\n\nNext, let's analyze the loop body and make a note of the loop condition:\n\nLoop condition:\n- x > 0.\n\nNow, let's find the necessary loop invariants:\n\n- Before the loop execution:\n    - x == y.\n    - x >= 0.\n    - y >= 0.\n\n- In every iteration of the loop:\n    - x + y == \\at(x, Pre) + \\at(y, Pre).\n    - x >= 0.\n    - y >= 0.\n\n- After the loop termination:\n    - x == y.\n    - y >= 0.\n    - y <= \\at(y, Pre).\n\nExplanation:\n\n- Before the loop execution:\n    - x == y: Since x and y are equal initially, and there are no assignments to change their values before the loop, x and y will always be equal before the loop starts.\n    - x >= 0: This is one of the pre-conditions.\n    - y >= 0: This is also one of the pre-conditions.\n\n- In every iteration of the loop:\n    - x + y == \\at(x, Pre) + \\at(y, Pre): This invariant states that the sum of x and y is constant throughout the loop and is equal to their initial sum. This is because in every iteration, x is decremented by 1 and y is decremented by 1, so their sum remains constant.\n    - x >= 0: This invariant ensures that x is always non-negative throughout the loop.\n    - y >= 0: This invariant ensures that y is always non-negative throughout the loop.\n\n- After the loop termination:\n    - x == y: This is because the loop terminates when x becomes 0, and y is decremented by the same amount as x in every iteration of the loop.\n    - y >= 0: This is because y is always non-negative throughout the loop.\n    - y <= \\at(y, Pre): This invariant ensures that y is not decremented below its initial value. This is because y is decremented by 1 in every iteration of the loop, so after x iterations, y will have been decremented by x. Therefore, y <= \\at(y, Pre).",
            "Pre-conditions:\n- `x` and `y` are initialized with non-deterministic values.\n- `x` and `y` are integers.\n\nLoop condition:\n- `x > 0`\n\nPost-condition:\n- `y >= 0`\n\nLoop invariants:\n- `x >= 0 && y >= 0` (true before loop execution)\n- `x >= 0 && y >= 0 && x+y == \\at(x, Pre) + \\at(y, Pre)` (true in every iteration of the loop)\n- `(x <= 0 ==> y >= 0)` (true after loop termination, assuming the loop condition is false)\n\nExplanation:\n- The first invariant ensures that both `x` and `y` are non-negative before the loop starts.\n- The second invariant states that the sum of `x` and `y` remains constant throughout the loop. This is because `x` and `y` are both decremented by `1` in each iteration. The `at` notation is used to refer to the value of `x` and `y` before the loop execution.\n- The third invariant uses implication to state that if `x` is less than or equal to `0` after the loop execution, then `y` must be greater than or equal to `0`. This implies that `y` is non-negative after the loop terminates, which is the post-condition.",
            "Pre-conditions:\n- The program takes no input from the user.\n- The program calls an external function `unknown_int()` twice to initialize `x` and `y`.\n- The program checks if `x` and `y` are equal and non-negative. If not, the program returns 0.\n\nLoop condition:\n- The loop runs as long as `x` is greater than 0.\n\nPost-condition:\n- The program asserts that `y` is non-negative.\n\nLoop invariants:\n- Before loop execution: `x >= 0 && y >= 0 && x == y`\n- In every iteration of the loop: `x >= 0 && y >= 0 && x + y$old == x$pre + y$pre`\n- After loop termination: `(x == 0 && y == 0) ==> y$old >= 0`\n\nExplanation:\n- Before loop execution: We know that `x` and `y` are non-negative and equal. Thus, `x >= 0 && y >= 0 && x == y` is true before the loop starts.\n- In every iteration of the loop: We need to ensure that `x + y` remains constant in every iteration. Thus, we add `x + y$old == x$pre + y$pre` as a loop invariant.\n- After loop termination: We need to ensure that `y` remains non-negative after the loop ends. Since `x` becomes 0 after the loop, we only need to consider the value of `y`. Thus, we add `(x == 0 && y == 0) ==> y$old >= 0` as a loop invariant. This is true because `y$old` is the value of `y` before the loop and if `y$old` is non-negative, then `y` is also non-negative after the loop ends, because `y` can only decrease during the loop. If `y$old` is negative, then `y` can still be negative after the loop ends, but the assertion is not violated in this case, because the guard condition of the assertion ensures that the assertion is only checked when `y` is non-negative.",
            "Pre-conditions or variable assignments:\n- x and y are initialized with the result of unknown_int() function.\n- x and y are equal to each other and non-negative.\n\nLoop condition:\n- x > 0\n\nLoop invariants:\n- Before the loop: None needed.\n- In every iteration of the loop:\n    - x >= 0\n    - y >= 0\n    - x + y == \\at(x,Pre) + \\at(y,Pre) (since x and y are decremented by the same amount in each iteration)\n- After the loop:\n    - y >= 0 ==> x == 0 ==> y == \\at(y,Pre) - \\at(x,Pre)\n    - y < 0 ==> y == \\at(y,Pre) - \\at(x,Pre) (since x >= 0, y can only become negative if it started with a negative value)\n\nCombining all the loop invariants, we get:\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x + y == \\at(x,Pre) + \\at(y,Pre);\n    \n    loop variant x;\n*/\n```\nNote that we have also added a loop variant `x`, which is a decreasing expression that will ensure that the loop terminates.",
            "Pre-conditions:\n- `x` and `y` are initialized with non-deterministic integer values.\n- `x` is equal to `y` and both are non-negative.\n\nLoop condition:\n- `x > 0`\n\nWe want to verify that `y` is non-negative after the loop termination.\n\nLoop Invariants:\n- Before loop execution: `x == y` and `x >= 0` and `y >= 0`. (Pre-conditions)\n- In every iteration of the loop: `(x+y)` remains constant.\n  - Proof: At the beginning of each iteration, `x` and `y` are both decremented by `1`. Therefore, `x+y` remains constant throughout the loop.\n- After loop termination: `x == 0` and `y >= 0`.\n  - Proof: The loop terminates when `x` becomes `0`. Therefore, after the loop termination, `x == 0`. Also, since `(x+y)` remains constant throughout the loop and `x == 0`, we have `y >= 0`.\n  \nPutting it all together:\n```\n/*@ \n  loop invariant x == y && x >= 0 && y >= 0; // Before loop execution\n  loop invariant x+y == \\at(x+y, Pre); // In every iteration\n  loop invariant x == 0 ==> y >= 0; // After loop termination\n*/\n```"
        ],
        "annotation_blocks": [
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "First, let's analyze the program and identify the pre-conditions and variable assignments:\n\nPre-conditions:\n- x and y are initialized with non-deterministic values.\n- x == y and x >= 0.\n\nVariable Assignments:\n- x--;\n- y--;\n\nNext, let's analyze the loop body and make a note of the loop condition:\n\nLoop condition:\n- x > 0.\n\nNow, let's find the necessary loop invariants:\n\n- Before the loop execution:\n    - x == y.\n    - x >= 0.\n    - y >= 0.\n\n- In every iteration of the loop:\n    - x + y == \\at(x, Pre) + \\at(y, Pre).\n    - x >= 0.\n    - y >= 0.\n\n- After the loop termination:\n    - x == y.\n    - y >= 0.\n    - y <= \\at(y, Pre).\n\nExplanation:\n\n- Before the loop execution:\n    - x == y: Since x and y are equal initially, and there are no assignments to change their values before the loop, x and y will always be equal before the loop starts.\n    - x >= 0: This is one of the pre-conditions.\n    - y >= 0: This is also one of the pre-conditions.\n\n- In every iteration of the loop:\n    - x + y == \\at(x, Pre) + \\at(y, Pre): This invariant states that the sum of x and y is constant throughout the loop and is equal to their initial sum. This is because in every iteration, x is decremented by 1 and y is decremented by 1, so their sum remains constant.\n    - x >= 0: This invariant ensures that x is always non-negative throughout the loop.\n    - y >= 0: This invariant ensures that y is always non-negative throughout the loop.\n\n- After the loop termination:\n    - x == y: This is because the loop terminates when x becomes 0, and y is decremented by the same amount as x in every iteration of the loop.\n    - y >= 0: This is because y is always non-negative throughout the loop.\n    - y <= \\at(y, Pre): This invariant ensures that y is not decremented below its initial value. This is because y is decremented by 1 in every iteration of the loop, so after x iterations, y will have been decremented by x. Therefore, y <= \\at(y, Pre)."
            ],
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- `x` and `y` are initialized with non-deterministic values.\n- `x` and `y` are integers.\n\nLoop condition:\n- `x > 0`\n\nPost-condition:\n- `y >= 0`\n\nLoop invariants:\n- `x >= 0 && y >= 0` (true before loop execution)\n- `x >= 0 && y >= 0 && x+y == \\at(x, Pre) + \\at(y, Pre)` (true in every iteration of the loop)\n- `(x <= 0 ==> y >= 0)` (true after loop termination, assuming the loop condition is false)\n\nExplanation:\n- The first invariant ensures that both `x` and `y` are non-negative before the loop starts.\n- The second invariant states that the sum of `x` and `y` remains constant throughout the loop. This is because `x` and `y` are both decremented by `1` in each iteration. The `at` notation is used to refer to the value of `x` and `y` before the loop execution.\n- The third invariant uses implication to state that if `x` is less than or equal to `0` after the loop execution, then `y` must be greater than or equal to `0`. This implies that `y` is non-negative after the loop terminates, which is the post-condition."
            ],
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The program takes no input from the user.\n- The program calls an external function `unknown_int()` twice to initialize `x` and `y`.\n- The program checks if `x` and `y` are equal and non-negative. If not, the program returns 0.\n\nLoop condition:\n- The loop runs as long as `x` is greater than 0.\n\nPost-condition:\n- The program asserts that `y` is non-negative.\n\nLoop invariants:\n- Before loop execution: `x >= 0 && y >= 0 && x == y`\n- In every iteration of the loop: `x >= 0 && y >= 0 && x + y$old == x$pre + y$pre`\n- After loop termination: `(x == 0 && y == 0) ==> y$old >= 0`\n\nExplanation:\n- Before loop execution: We know that `x` and `y` are non-negative and equal. Thus, `x >= 0 && y >= 0 && x == y` is true before the loop starts.\n- In every iteration of the loop: We need to ensure that `x + y` remains constant in every iteration. Thus, we add `x + y$old == x$pre + y$pre` as a loop invariant.\n- After loop termination: We need to ensure that `y` remains non-negative after the loop ends. Since `x` becomes 0 after the loop, we only need to consider the value of `y`. Thus, we add `(x == 0 && y == 0) ==> y$old >= 0` as a loop invariant. This is true because `y$old` is the value of `y` before the loop and if `y$old` is non-negative, then `y` is also non-negative after the loop ends, because `y` can only decrease during the loop. If `y$old` is negative, then `y` can still be negative after the loop ends, but the assertion is not violated in this case, because the guard condition of the assertion ensures that the assertion is only checked when `y` is non-negative."
            ],
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x + y == \\at(x,Pre) + \\at(y,Pre);\n    \n    loop variant x;\n*/",
            "/*@ \n  loop invariant x == y && x >= 0 && y >= 0; // Before loop execution\n  loop invariant x+y == \\at(x+y, Pre); // In every iteration\n  loop invariant x == 0 ==> y >= 0; // After loop termination\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "First, let's analyze the program and identify the pre-conditions and variable assignments:\n\nPre-conditions:\n- x and y are initialized with non-deterministic values.\n- x == y and x >= 0.\n\nVariable Assignments:\n- x--;\n- y--;\n\nNext, let's analyze the loop body and make a note of the loop condition:\n\nLoop condition:\n- x > 0.\n\nNow, let's find the necessary loop invariants:\n\n- Before the loop execution:\n    - x == y.\n    - x >= 0.\n    - y >= 0.\n\n- In every iteration of the loop:\n    - x + y == \\at(x, Pre) + \\at(y, Pre).\n    - x >= 0.\n    - y >= 0.\n\n- After the loop termination:\n    - x == y.\n    - y >= 0.\n    - y <= \\at(y, Pre).\n\nExplanation:\n\n- Before the loop execution:\n    - x == y: Since x and y are equal initially, and there are no assignments to change their values before the loop, x and y will always be equal before the loop starts.\n    - x >= 0: This is one of the pre-conditions.\n    - y >= 0: This is also one of the pre-conditions.\n\n- In every iteration of the loop:\n    - x + y == \\at(x, Pre) + \\at(y, Pre): This invariant states that the sum of x and y is constant throughout the loop and is equal to their initial sum. This is because in every iteration, x is decremented by 1 and y is decremented by 1, so their sum remains constant.\n    - x >= 0: This invariant ensures that x is always non-negative throughout the loop.\n    - y >= 0: This invariant ensures that y is always non-negative throughout the loop.\n\n- After the loop termination:\n    - x == y: This is because the loop terminates when x becomes 0, and y is decremented by the same amount as x in every iteration of the loop.\n    - y >= 0: This is because y is always non-negative throughout the loop.\n    - y <= \\at(y, Pre): This invariant ensures that y is not decremented below its initial value. This is because y is decremented by 1 in every iteration of the loop, so after x iterations, y will have been decremented by x. Therefore, y <= \\at(y, Pre).",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- `x` and `y` are initialized with non-deterministic values.\n- `x` and `y` are integers.\n\nLoop condition:\n- `x > 0`\n\nPost-condition:\n- `y >= 0`\n\nLoop invariants:\n- `x >= 0 && y >= 0` (true before loop execution)\n- `x >= 0 && y >= 0 && x+y == \\at(x, Pre) + \\at(y, Pre)` (true in every iteration of the loop)\n- `(x <= 0 ==> y >= 0)` (true after loop termination, assuming the loop condition is false)\n\nExplanation:\n- The first invariant ensures that both `x` and `y` are non-negative before the loop starts.\n- The second invariant states that the sum of `x` and `y` remains constant throughout the loop. This is because `x` and `y` are both decremented by `1` in each iteration. The `at` notation is used to refer to the value of `x` and `y` before the loop execution.\n- The third invariant uses implication to state that if `x` is less than or equal to `0` after the loop execution, then `y` must be greater than or equal to `0`. This implies that `y` is non-negative after the loop terminates, which is the post-condition.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The program takes no input from the user.\n- The program calls an external function `unknown_int()` twice to initialize `x` and `y`.\n- The program checks if `x` and `y` are equal and non-negative. If not, the program returns 0.\n\nLoop condition:\n- The loop runs as long as `x` is greater than 0.\n\nPost-condition:\n- The program asserts that `y` is non-negative.\n\nLoop invariants:\n- Before loop execution: `x >= 0 && y >= 0 && x == y`\n- In every iteration of the loop: `x >= 0 && y >= 0 && x + y$old == x$pre + y$pre`\n- After loop termination: `(x == 0 && y == 0) ==> y$old >= 0`\n\nExplanation:\n- Before loop execution: We know that `x` and `y` are non-negative and equal. Thus, `x >= 0 && y >= 0 && x == y` is true before the loop starts.\n- In every iteration of the loop: We need to ensure that `x + y` remains constant in every iteration. Thus, we add `x + y$old == x$pre + y$pre` as a loop invariant.\n- After loop termination: We need to ensure that `y` remains non-negative after the loop ends. Since `x` becomes 0 after the loop, we only need to consider the value of `y`. Thus, we add `(x == 0 && y == 0) ==> y$old >= 0` as a loop invariant. This is true because `y$old` is the value of `y` before the loop and if `y$old` is non-negative, then `y` is also non-negative after the loop ends, because `y` can only decrease during the loop. If `y$old` is negative, then `y` can still be negative after the loop ends, but the assertion is not violated in this case, because the guard condition of the assertion ensures that the assertion is only checked when `y` is non-negative.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x + y == \\at(x,Pre) + \\at(y,Pre);\n    \n    loop variant x;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 13: unbound logic variable x. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x == y && x >= 0)) return 0;\n  /*@\nloop invariant i1: x >= 0;\n\n\n*/\nwhile (x > 0) {\n    x--;\n    y--;\n  }\n  {;\n//@ assert(y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n  loop invariant x == y && x >= 0 && y >= 0; // Before loop execution\n  loop invariant x+y == \\at(x+y, Pre); // In every iteration\n  loop invariant x == 0 ==> y >= 0; // After loop termination\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: unbound logic variable x. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x == y && x >= 0)) return 0;\n  /*@\nloop invariant i1: x == y && x >= 0 && y >= 0;\n\nloop invariant i3: x == 0 ==> y >= 0;\n*/\nwhile (x > 0) {\n    x--;\n    y--;\n  }\n  {;\n//@ assert(y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 13: unbound logic variable x. Ignoring loop annotation",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x == y && x >= 0)) return 0;\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: x + y == \\at(x,Pre) + \\at(y,Pre);\nloop invariant i4: x == y && x >= 0 && y >= 0;\nloop invariant i5: x+y == \\at(x+y, Pre);\nloop invariant i6: x == 0 ==> y >= 0;\n*/\nwhile (x > 0) {\n    x--;\n    y--;\n  }\n  {;\n//@ assert(y>=0);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 3,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x == y && x >= 0)) return 0;\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\n\nloop invariant i4: x == y && x >= 0 && y >= 0;\n\nloop invariant i6: x == 0 ==> y >= 0;\n*/\nwhile (x > 0) {\n    x--;\n    y--;\n  }\n  {;\n//@ assert(y>=0);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/const.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq1.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq2.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/afnp2014.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/css2003.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007b.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gsv2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/hhk2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_2.c",
            "../data/benchmarks/sv-benchmarks/loop-new/gauss_sum.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark10_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark11_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark13_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark14_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark15_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark16_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark17_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark18_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark20_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark21_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark22_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark23_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark25_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark26_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark27_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark29_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark30_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark31_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark32_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark33_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark34_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark35_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark36_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark37_conjunctive.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../data/benchmarks/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/even.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/mod4.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/odd.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/id_trans.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/bhmr2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/ddlm2013.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gcnr2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gr2006.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_k.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_nondet.c",
            "../data/benchmarks/sv-benchmarks/loop-new/half.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark07_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark12_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark19_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark24_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark28_linear.c"
        ],
        "skipped": [],
        "total": 344,
        "success_count": 176,
        "failure_count": 168,
        "success_rate": 0.5116279069767442
    }
}