{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loops-crafted-1/sum_natnum.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint SIZE = 40000; \n\nint main() {\n  int i;\n  unsigned long long sum;\n  i = 0, sum =0; \n  while(i< SIZE){ \n      i = i + 1; \n      sum += i;\n  }\n  {;\n//@ assert( sum == ((SIZE *(SIZE+1))/2));\n}\n\n  return 0;\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint SIZE = 40000; \n\nint main() {\n  int i;\n  unsigned long long sum;\n  i = 0, sum =0; \n  while(i< SIZE){ \n      i = i + 1; \n      sum += i;\n  }\n  {;\n//@ assert( sum == ((SIZE *(SIZE+1))/2));\n}\n\n  return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions or variable assignments:\n- The macro `assume` takes a boolean expression and returns 0 if the expression evaluates to false.\n- The integer variable `SIZE` is assigned the value 40000.\n- The integer variable `i` and the unsigned long long variable `sum` are both initialized to 0.\n\nLoop condition:\n- The loop condition is `i < SIZE`.\n\nLoop invariants:\n- Before the loop execution, `sum == 0`.\n- In every iteration of the loop, `1 <= i <= SIZE + 1` and `sum == (i*(i-1))/2`.\n- After the loop termination, `i == SIZE + 1` and `sum == (SIZE*(SIZE+1))/2`.\n\nExplanation:\n- Before the loop execution, `sum` is initialized to 0.\n- In every iteration of the loop, `i` is incremented by 1, so `i` starts at 1 and goes up to `SIZE + 1`. The formula for the sum of the first `n` natural numbers is `n*(n+1)/2`, so `sum` is equal to this formula for `i-1`. Therefore, `sum` is equal to `(i*(i-1))/2`.\n- After the loop termination, `i` is equal to `SIZE + 1`, which is the first value of `i` that makes the loop condition false. At this point, `sum` is equal to the sum of the first `SIZE` natural numbers, which is `(SIZE*(SIZE+1))/2`.\n\nCode block:\n```\n/*@ \n    loop invariant sum == 0;\n    loop invariant 1 <= i <= SIZE + 1 && sum == (i*(i-1))/2;\n    loop invariant i == SIZE + 1 ==> sum == (SIZE*(SIZE+1))/2;\n*/\n```",
            "**Step 1: Pre-conditions/Variable Assignments**\n\nThere are no pre-conditions. The program assigns the value 40000 to the variable SIZE. The program initializes the variables i and sum to 0.\n\n**Step 2: Loop Condition**\n\nThe loop continues while the value of i is less than SIZE.\n\n**Step 3: Loop Invariants**\n\nWe need to find loop invariants that hold true before the loop execution, in every iteration of the loop, and after the loop termination.\n\nBefore the loop execution:\n- None. \n\nIn every iteration of the loop:\n- sum == (i*(i+1))/2\n- i <= SIZE\n\nAfter the loop termination:\n- sum == (SIZE*(SIZE+1))/2\n\nExplanation:\n\n1. Before the loop execution, there are no loop invariants that we can state.\n\n2. In every iteration of the loop, the value of variable i is incremented by 1 and the value of sum is updated by adding i. Hence, at any point in time during the loop execution, sum will be equal to the sum of the first i natural numbers. The sum of the first i natural numbers is given by the formula (i*(i+1))/2. Therefore, sum == (i*(i+1))/2 is a loop invariant. Additionally, the value of i should always be less than or equal to SIZE. Hence, i <= SIZE is another loop invariant.\n\n3. After the loop termination, the loop has added all numbers from 1 to SIZE to the variable sum. Hence, sum should be equal to the sum of the first SIZE natural numbers. The sum of the first SIZE natural numbers is given by the formula (SIZE*(SIZE+1))/2. Therefore, sum == (SIZE*(SIZE+1))/2 is a loop invariant.\n\nTherefore, the final loop invariants are:\n```\n/*@ \n    loop invariant sum == (i*(i+1))/2;\n    loop invariant i <= SIZE;\n    loop invariant sum == (SIZE*(SIZE+1))/2;\n*/\n```",
            "Pre-conditions:\n- The program has a global constant `SIZE` with a value of `40000`.\n- The program defines a macro `assume` which returns 0 if its argument is false.\n\nVariable Assignments:\n- The program defines two integer variables `i` and `sum`.\n- The variable `i` is initialized to `0`.\n- The variable `sum` is initialized to `0`.\n\nLoop condition:\n- The loop continues as long as the value of `i` is less than `SIZE`.\n\nLoop invariants:\n- Before the loop execution, the value of `i` is `0` and the value of `sum` is `0`. \n```\n/*@ \n    loop invariant i >= 0 && i <= SIZE + 1;\n    loop invariant sum >= 0 && sum <= (SIZE + 1) * (SIZE + 2) / 2;\n*/\n```\n- In every iteration of the loop, the value of `i` is incremented by `1` and the value of `sum` is incremented by the value of `i`.\n```\n/*@ \n    loop invariant i >= 0 && i <= SIZE + 1;\n    loop invariant sum == (i * (i - 1)) / 2;\n*/\n```\n- After the loop termination, the value of `i` is `SIZE + 1` and the value of `sum` is equal to the sum of first `SIZE` natural numbers.\n```\n/*@ \n    loop invariant i == SIZE + 1;\n    loop invariant sum == (i * (i - 1)) / 2;\n    loop invariant sum == ((SIZE * (SIZE + 1)) / 2) ==> (sum == ((SIZE * (SIZE + 1)) / 2));\n*/\n```\nThe last loop invariant is an implication that takes into account the assertion inside the block. Since the assertion is guarded by the condition `i == SIZE + 1`, we can use this condition to make the implication. If `sum` is equal to the sum of first `SIZE` natural numbers, then it must also be equal to the sum of first `SIZE + 1` natural numbers.",
            "Pre-conditions:\n- None\n\nVariable Assignments:\n- `SIZE` is assigned a value of `40000`.\n- `i` is assigned a value of `0`.\n- `sum` is assigned a value of `0`.\n\nLoop Condition:\n- `i < SIZE`\n\nLoop Invariants:\n- Before the loop execution: `sum == 0 && i == 0 && SIZE == 40000`\n- In every iteration of the loop: `sum == ((i * (i + 1)) / 2) && i <= SIZE`\n- After the loop termination: `sum == ((SIZE * (SIZE + 1)) / 2)`\n\nExplanation:\n- Before the loop execution: At the beginning, `i` is `0` and `sum` is `0`, as initialized. `SIZE` is assigned a value of `40000`, which is a constant. Therefore, `sum` should be `0`, `i` should be `0`, and `SIZE` should be `40000` before the loop starts executing.\n- In every iteration of the loop: `sum` is the sum of all the integers from `1` to `i`. Therefore, `sum` should be equal to `(i * (i + 1)) / 2` at the end of every iteration. Also, `i` should be less than or equal to `SIZE` to ensure that the loop terminates.\n- After the loop termination: `sum` should be equal to the sum of all integers from `1` to `SIZE`, which is given by the formula `((SIZE * (SIZE + 1)) / 2)`.\n\nTherefore, the loop invariants are:\n```\n/*@ \n    loop invariant sum == 0 && i == 0 && SIZE == 40000;\n    loop invariant sum == ((i * (i + 1)) / 2) && i <= SIZE;\n    loop invariant sum == ((SIZE * (SIZE + 1)) / 2);\n*/\n```",
            "First, let's note down the pre-conditions and variable assignments in the program:\n- Pre-condition: None\n- Variable assignments: `SIZE` is assigned a value of 40000, `i` is assigned 0, and `sum` is assigned 0.\n\nNext, let's analyze the loop body and the loop condition:\n- Loop body: `i` is incremented by 1 and `sum` is incremented by the new value of `i`.\n- Loop condition: `i` is less than `SIZE`.\n\nNow, let's derive the loop invariants:\n- Before the loop execution:\n    - `i >= 0`\n    - `sum == 0`\n- In every iteration of the loop:\n    - `i <= SIZE`\n    - `sum == ((i-1)*i)/2`\n- After the loop termination:\n    - `i == SIZE + 1`\n    - `sum == (SIZE*(SIZE+1))/2`\n\nLet's explain the loop invariants:\n- Before the loop execution:\n    - `i >= 0`: Since `i` is initialized to 0, it is greater than or equal to 0.\n    - `sum == 0`: Since `sum` is initialized to 0, the sum of no elements is 0.\n- In every iteration of the loop:\n    - `i <= SIZE`: The loop continues until `i` is less than `SIZE`. Hence, at any point in time during the loop execution, `i` is less than or equal to `SIZE`.\n    - `sum == ((i-1)*i)/2`: This is a loop variant that calculates the sum of all integers from 1 to `i-1`. It holds true at the beginning of the loop because when `i` is 1, the sum is 0. It holds true in every iteration because `i` is incremented by 1, and the new value of `i` is added to the sum. It holds true at the end of the loop because `i` is equal to `SIZE+1` and the sum is the sum of all integers from 1 to `SIZE`.\n- After the loop termination:\n    - `i == SIZE + 1`: Since the loop exits when `i` is equal to `SIZE+1`, `i` must be equal to `SIZE+1` after the loop terminates.\n    - `sum == (SIZE*(SIZE+1))/2`: This is the sum of all integers from 1 to `SIZE`. This holds true at the end of the loop because `i` is equal to `SIZE+1` and the sum is the sum of all integers from 1 to `SIZE`.\n\nPutting it all together, we get the following loop invariants:\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant sum == 0;\n    loop invariant i <= SIZE;\n    loop invariant sum == ((i-1)*i)/2;\n    loop invariant i == SIZE + 1 ==> sum == (SIZE*(SIZE+1))/2;\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant sum == 0;\n    loop invariant 1 <= i <= SIZE + 1 && sum == (i*(i-1))/2;\n    loop invariant i == SIZE + 1 ==> sum == (SIZE*(SIZE+1))/2;\n*/",
            "/*@ \n    loop invariant sum == (i*(i+1))/2;\n    loop invariant i <= SIZE;\n    loop invariant sum == (SIZE*(SIZE+1))/2;\n*/",
            "/*@ \n    loop invariant i >= 0 && i <= SIZE + 1;\n    loop invariant sum >= 0 && sum <= (SIZE + 1) * (SIZE + 2) / 2;\n*/",
            "/*@ \n    loop invariant sum == 0 && i == 0 && SIZE == 40000;\n    loop invariant sum == ((i * (i + 1)) / 2) && i <= SIZE;\n    loop invariant sum == ((SIZE * (SIZE + 1)) / 2);\n*/",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant sum == 0;\n    loop invariant i <= SIZE;\n    loop invariant sum == ((i-1)*i)/2;\n    loop invariant i == SIZE + 1 ==> sum == (SIZE*(SIZE+1))/2;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant sum == 0;\n    loop invariant 1 <= i <= SIZE + 1 && sum == (i*(i-1))/2;\n    loop invariant i == SIZE + 1 ==> sum == (SIZE*(SIZE+1))/2;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant sum == 0 is partially proven to be inductive.\nloop invariant 1 <= i <= SIZE + 1 && sum == (i*(i-1))/2 is preserved but not established.\nloop invariant i == SIZE + 1 ==> sum == (SIZE*(SIZE+1))/2 is partially proven to be inductive.\nAssertion sum == (SIZE * (SIZE + 1)) / 2: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint SIZE = 40000; \n\nint main() {\n  int i;\n  unsigned long long sum;\n  i = 0, sum =0; \n  /*@\n\n\nloop invariant i3: i == SIZE + 1 ==> sum == (SIZE*(SIZE+1))/2;\n*/\nwhile(i< SIZE){ \n      i = i + 1; \n      sum += i;\n  }\n  {;\n//@ assert( sum == ((SIZE *(SIZE+1))/2));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant sum == (i*(i+1))/2;\n    loop invariant i <= SIZE;\n    loop invariant sum == (SIZE*(SIZE+1))/2;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant sum == (i*(i+1))/2 is partially proven to be inductive.\nloop invariant i <= SIZE is partially proven to be inductive.\nloop invariant sum == (SIZE*(SIZE+1))/2 is preserved but not established.\nAssertion sum == (SIZE * (SIZE + 1)) / 2: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint SIZE = 40000; \n\nint main() {\n  int i;\n  unsigned long long sum;\n  i = 0, sum =0; \n  /*@\n\nloop invariant i2: i <= SIZE;\n\n*/\nwhile(i< SIZE){ \n      i = i + 1; \n      sum += i;\n  }\n  {;\n//@ assert( sum == ((SIZE *(SIZE+1))/2));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant i >= 0 && i <= SIZE + 1;\n    loop invariant sum >= 0 && sum <= (SIZE + 1) * (SIZE + 2) / 2;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 0 && i <= SIZE + 1 is partially proven to be inductive.\nloop invariant sum >= 0 && sum <= (SIZE + 1) * (SIZE + 2) / 2 is established but not preserved.\nAssertion sum == (SIZE * (SIZE + 1)) / 2: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint SIZE = 40000; \n\nint main() {\n  int i;\n  unsigned long long sum;\n  i = 0, sum =0; \n  /*@\nloop invariant i1: i >= 0 && i <= SIZE + 1;\n\n*/\nwhile(i< SIZE){ \n      i = i + 1; \n      sum += i;\n  }\n  {;\n//@ assert( sum == ((SIZE *(SIZE+1))/2));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant sum == 0 && i == 0 && SIZE == 40000;\n    loop invariant sum == ((i * (i + 1)) / 2) && i <= SIZE;\n    loop invariant sum == ((SIZE * (SIZE + 1)) / 2);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant sum == 0 && i == 0 && SIZE == 40000 is partially proven to be inductive.\nloop invariant sum == ((i * (i + 1)) / 2) && i <= SIZE is partially proven to be inductive.\nloop invariant sum == ((SIZE * (SIZE + 1)) / 2) is preserved but not established.\nAssertion sum == (SIZE * (SIZE + 1)) / 2: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint SIZE = 40000; \n\nint main() {\n  int i;\n  unsigned long long sum;\n  i = 0, sum =0; \n  /*@\n\n\n\n*/\nwhile(i< SIZE){ \n      i = i + 1; \n      sum += i;\n  }\n  {;\n//@ assert( sum == ((SIZE *(SIZE+1))/2));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant i >= 0;\n    loop invariant sum == 0;\n    loop invariant i <= SIZE;\n    loop invariant sum == ((i-1)*i)/2;\n    loop invariant i == SIZE + 1 ==> sum == (SIZE*(SIZE+1))/2;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 0 is partially proven to be inductive.\nloop invariant sum == 0 is established but not preserved.\nloop invariant i <= SIZE is partially proven to be inductive.\nloop invariant sum == ((i-1)*i)/2 is partially proven to be inductive.\nloop invariant i == SIZE + 1 ==> sum == (SIZE*(SIZE+1))/2 is partially proven to be inductive.\nAssertion sum == (SIZE * (SIZE + 1)) / 2: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint SIZE = 40000; \n\nint main() {\n  int i;\n  unsigned long long sum;\n  i = 0, sum =0; \n  /*@\nloop invariant i1: i >= 0;\n\nloop invariant i3: i <= SIZE;\n\nloop invariant i5: i == SIZE + 1 ==> sum == (SIZE*(SIZE+1))/2;\n*/\nwhile(i< SIZE){ \n      i = i + 1; \n      sum += i;\n  }\n  {;\n//@ assert( sum == ((SIZE *(SIZE+1))/2));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant sum == 0 is partially proven to be inductive.\nloop invariant 1 <= i <= SIZE + 1 && sum == (i*(i-1))/2 is preserved but not established.\nloop invariant i == SIZE + 1 ==> sum == (SIZE*(SIZE+1))/2 is partially proven to be inductive.\nloop invariant sum == (i*(i+1))/2 is partially proven to be inductive.\nloop invariant i <= SIZE is partially proven to be inductive.\nloop invariant sum == (SIZE*(SIZE+1))/2 is partially proven to be inductive.\nloop invariant i >= 0 && i <= SIZE + 1 is partially proven to be inductive.\nloop invariant sum >= 0 && sum <= (SIZE + 1) * (SIZE + 2) / 2 is partially proven to be inductive.\nloop invariant sum == 0 && i == 0 && SIZE == 40000 is partially proven to be inductive.\nloop invariant sum == ((i * (i + 1)) / 2) && i <= SIZE is partially proven to be inductive.\nloop invariant sum == ((SIZE * (SIZE + 1)) / 2) is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant sum == ((i-1)*i)/2 is partially proven to be inductive.\nAssertion sum == (SIZE * (SIZE + 1)) / 2: Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n\nint SIZE = 40000; \n\nint main() {\n  int i;\n  unsigned long long sum;\n  i = 0, sum =0; \n  /*@\nloop invariant i1: sum == 0;\nloop invariant i2: 1 <= i <= SIZE + 1 && sum == (i*(i-1))/2;\nloop invariant i3: i == SIZE + 1 ==> sum == (SIZE*(SIZE+1))/2;\nloop invariant i4: sum == (i*(i+1))/2;\nloop invariant i5: i <= SIZE;\nloop invariant i6: sum == (SIZE*(SIZE+1))/2;\nloop invariant i7: i >= 0 && i <= SIZE + 1;\nloop invariant i8: sum >= 0 && sum <= (SIZE + 1) * (SIZE + 2) / 2;\nloop invariant i9: sum == 0 && i == 0 && SIZE == 40000;\nloop invariant i10: sum == ((i * (i + 1)) / 2) && i <= SIZE;\nloop invariant i11: sum == ((SIZE * (SIZE + 1)) / 2);\nloop invariant i12: i >= 0;\nloop invariant i13: sum == ((i-1)*i)/2;\n*/\nwhile(i< SIZE){ \n      i = i + 1; \n      sum += i;\n  }\n  {;\n//@ assert( sum == ((SIZE *(SIZE+1))/2));\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 7,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint SIZE = 40000; \n\nint main() {\n  int i;\n  unsigned long long sum;\n  i = 0, sum =0; \n  /*@\n\n\nloop invariant i3: i == SIZE + 1 ==> sum == (SIZE*(SIZE+1))/2;\nloop invariant i4: sum == (i*(i+1))/2;\nloop invariant i5: i <= SIZE;\n\nloop invariant i7: i >= 0 && i <= SIZE + 1;\nloop invariant i8: sum >= 0 && sum <= (SIZE + 1) * (SIZE + 2) / 2;\n\nloop invariant i10: sum == ((i * (i + 1)) / 2) && i <= SIZE;\n\nloop invariant i12: i >= 0;\n\n*/\nwhile(i< SIZE){ \n      i = i + 1; \n      sum += i;\n  }\n  {;\n//@ assert( sum == ((SIZE *(SIZE+1))/2));\n}\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/const.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq1.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq2.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/afnp2014.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/css2003.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007b.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gsv2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/hhk2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_2.c",
            "../data/benchmarks/sv-benchmarks/loop-new/gauss_sum.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark10_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark11_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark13_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark14_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark15_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark16_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark17_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark18_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark20_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark21_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark22_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark23_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark25_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark26_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark27_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark29_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark30_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark31_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark32_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark33_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark34_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark35_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark36_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark37_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark38_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark39_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark40_polynomial.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark41_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark42_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark43_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark45_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark48_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark49_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark50_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark51_polynomial.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark52_polynomial.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark53_polynomial.c",
            "../data/benchmarks/sv-benchmarks/loops/count_up_down-1.c",
            "../data/benchmarks/sv-benchmarks/loops/for_infinite_loop_1.c",
            "../data/benchmarks/sv-benchmarks/loops/for_infinite_loop_2.c",
            "../data/benchmarks/sv-benchmarks/loops/sum04-2.c",
            "../data/benchmarks/sv-benchmarks/loops/terminator_02-2.c",
            "../data/benchmarks/sv-benchmarks/loops/terminator_03-2.c",
            "../data/benchmarks/sv-benchmarks/loops/trex03-2.c",
            "../data/benchmarks/sv-benchmarks/loops/while_infinite_loop_1.c",
            "../data/benchmarks/sv-benchmarks/loops/while_infinite_loop_2.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/loopv1.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/loopv3.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/sumt2.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/sumt3.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/sumt6.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/sumt7.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/sumt8.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/sum_natnum.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../data/benchmarks/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/even.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/mod4.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/odd.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/id_trans.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/bhmr2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/ddlm2013.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gcnr2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gr2006.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_k.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_nondet.c",
            "../data/benchmarks/sv-benchmarks/loop-new/half.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark07_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark12_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark19_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark24_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark28_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark44_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark46_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark47_linear.c",
            "../data/benchmarks/sv-benchmarks/loops/count_up_down-2.c",
            "../data/benchmarks/sv-benchmarks/loops/for_bounded_loop1.c",
            "../data/benchmarks/sv-benchmarks/loops/sum01-1.c",
            "../data/benchmarks/sv-benchmarks/loops/sum01-2.c",
            "../data/benchmarks/sv-benchmarks/loops/sum01_bug02.c",
            "../data/benchmarks/sv-benchmarks/loops/sum01_bug02_sum01_bug02_base.case.c",
            "../data/benchmarks/sv-benchmarks/loops/sum03-1.c",
            "../data/benchmarks/sv-benchmarks/loops/sum03-2.c",
            "../data/benchmarks/sv-benchmarks/loops/sum04-1.c",
            "../data/benchmarks/sv-benchmarks/loops/terminator_02-1.c",
            "../data/benchmarks/sv-benchmarks/loops/terminator_03-1.c",
            "../data/benchmarks/sv-benchmarks/loops/trex03-1.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/iftelse.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_10.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_12.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_6.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_8.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_9.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono4_1.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono5_1.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono6_1.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/sumt4.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/sumt5.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/sumt9.c"
        ],
        "skipped": [],
        "total": 401,
        "success_count": 206,
        "failure_count": 195,
        "success_rate": 0.513715710723192
    }
}