{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loop-new/count_by_nondet.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    while(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    while(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "We start by analyzing the given program and identifying the pre-conditions, loop condition, and post-condition.\n\nPre-conditions:\n- None\n\nVariable Assignments:\n- `i` is assigned the value 0\n- `k` is assigned the value 0\n\nLoop Condition:\n- `i < LARGE_INT`\n\nLoop Body:\n- `j` is assigned the value returned by the function `unknown_int()`\n- If `j` is not between 1 and `LARGE_INT` (inclusive), the program returns 0\n- `i` is incremented by the value of `j`\n- `k` is incremented by 1\n\nPost-condition:\n- `k` is less than or equal to `LARGE_INT`\n\nNext, we need to find the necessary loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition.\n\nLoop Invariants:\n- `0 <= i <= LARGE_INT`\n- `0 <= k <= LARGE_INT`\n- `i + (LARGE_INT - i) * k <= LARGE_INT`\n- `(\\forall int x; 1 <= x && x < LARGE_INT ==> 0 <= i + x <= LARGE_INT)`\n\nExplanation:\n- The first two loop invariants ensure that `i` and `k` are always non-negative and less than or equal to `LARGE_INT`.\n- The third loop invariant ensures that the sum of the values of `i` in all iterations of the loop is less than or equal to `LARGE_INT`. This is because if `i` reaches `LARGE_INT` or exceeds it, the loop condition will become false, and the loop will terminate. Therefore, the maximum value of `i` in all iterations is `LARGE_INT - j`, where `j` is the value returned by `unknown_int()` in the last iteration. Hence, the sum of the values of `i` in all iterations is at most `i + (LARGE_INT - i) * k = LARGE_INT - j + j + LARGE_INT - j + 2j + ... + LARGE_INT - j + kj = LARGE_INT + kj - j(k+1) <= LARGE_INT`.\n- The fourth loop invariant ensures that for any non-negative integer `x` that is less than `LARGE_INT`, the value of `i + x` is always non-negative and less than or equal to `LARGE_INT`. This is because `i` is incremented by `j` in each iteration, and `j` is guaranteed to be between 1 and `LARGE_INT`. Therefore, the value of `i` can increase by at most `LARGE_INT - 1` in each iteration, which means that the value of `i + x` can increase by at most `LARGE_INT - 1` in each iteration. Hence, if `i + x` is initially between 1 and `LARGE_INT`, it will remain between 1 and `LARGE_INT` in all iterations.\n\nPutting it all together, the loop invariants are:\n```\n/*@ \n    loop invariant 0 <= i <= LARGE_INT;\n    loop invariant 0 <= k <= LARGE_INT;\n    loop invariant i + (LARGE_INT - i) * k <= LARGE_INT;\n    loop invariant (\\forall int x; 1 <= x && x < LARGE_INT ==> 0 <= i + x <= LARGE_INT);\n*/\n```",
            "Step 1: Pre-conditions or variable assignments:\n\nThe program does not have any pre-conditions or variable assignments.\n\nStep 2: Loop condition:\n\nThe loop condition is `i < LARGE_INT`.\n\nStep 3: Loop invariants:\n\nWe need to find loop invariants such that they are true before the loop execution, in every iteration of the loop, and after the loop termination such that they imply the post-condition.\n\nLet's start with the loop invariant that should hold before the loop execution. Since `i` and `k` are initialized to 0, the following loop invariant is true before the loop execution:\n\n```\n/*@ \n    loop invariant 0 <= i <= LARGE_INT;\n    loop invariant k == 0;\n*/\n```\n\nNext, let's find loop invariants that hold for every iteration of the loop. First, let's consider the case when `j` is greater than or equal to 1 and less than `LARGE_INT`. Then we can say that `i` is always less than `LARGE_INT` because `j` is less than `LARGE_INT`. Therefore, the following loop invariant holds for every iteration of the loop:\n\n```\n/*@ \n    loop invariant 0 <= i <= LARGE_INT;\n    loop invariant k >= 0;\n*/\n```\n\nNow, let's consider the case when `j` is not greater than or equal to 1 and less than `LARGE_INT`. In this case, the loop will terminate because of the if statement. Therefore, we can add an implication that makes the loop invariant trivially true at this point:\n\n```\n/*@ \n    loop invariant 0 <= i <= LARGE_INT;\n    loop invariant k >= 0;\n    loop invariant !(1 <= j && j < LARGE_INT) ==> k <= LARGE_INT;\n*/\n```\n\nFinally, we need to find loop invariants that hold after the loop termination such that they imply the post-condition. The post-condition is `k <= LARGE_INT`. Since we already have a loop invariant that implies this post-condition, we do not need to add any more loop invariants.\n\nTherefore, the final set of loop invariants is:\n\n```\n/*@ \n    loop invariant 0 <= i <= LARGE_INT;\n    loop invariant k == 0;\n    loop invariant 0 <= i <= LARGE_INT;\n    loop invariant k >= 0;\n    loop invariant !(1 <= j && j < LARGE_INT) ==> k <= LARGE_INT;\n*/\n```",
            "Pre-conditions or variable assignments:\n- The program does not have any explicit pre-conditions or variable assignments.\n- The macro `assume(e)` is defined to return 0 if the expression `e` is false.\n\nLoop condition:\n- The loop condition is `i < LARGE_INT`.\n\nLoop invariants:\n- Before the loop execution, `i == 0 && k == 0`.\n- In every iteration of the loop, the following must hold:\n    - `1 <= j && j < LARGE_INT`, where `j` is the non-deterministic integer generated by `unknown_int()`.\n    - `0 <= i <= LARGE_INT`, where `i` is the sum of all `j` generated in the loop so far.\n    - `0 <= k <= LARGE_INT`, where `k` is the number of iterations of the loop so far.\n- After the loop termination, `i <= LARGE_INT && k <= LARGE_INT`.\n- The assertion `k <= LARGE_INT` is guarded by the condition of the loop. Therefore, we need to add an implication that if the loop terminates, then the assertion must hold. This can be written as: `(i >= LARGE_INT ==> k <= LARGE_INT)`.\n- Since `j` is non-deterministic at the beginning of the loop, we need to add an implication to make the invariant trivially true at that location. This can be written as: `(i == 0 && k == 0 ==> 1 <= j && j < LARGE_INT)`.\n\nPutting all the loop invariants together, we get:\n```\n/*@\n    loop invariant i == 0 && k == 0 ==> 1 <= j && j < LARGE_INT;\n    loop invariant 1 <= j && j < LARGE_INT;\n    loop invariant 0 <= i <= LARGE_INT;\n    loop invariant 0 <= k <= LARGE_INT;\n    loop invariant i >= LARGE_INT ==> k <= LARGE_INT;\n*/\nwhile(i < LARGE_INT) {\n    int j = unknown_int();\n    assume(1 <= j && j < LARGE_INT);\n    i = i + j;\n    k ++;\n}\n{;\n//@ assert(i >= LARGE_INT ==> k <= LARGE_INT);\n//@ assert(k <= LARGE_INT);\n}\n``` \nNote: since we don't know the range of values that `unknown_int()` can return, we cannot add any bounds on `j` other than the ones given in the program.",
            "Pre-conditions:\n- None\n\nVariable Assignments:\n- i = 0\n- k = 0\n\nLoop Invariants:\n- i >= 0\n- k >= 0\n- For every iteration of the loop, 1 <= j < LARGE_INT\n- For every iteration of the loop, i is the sum of all previous values of j\n- k is the number of iterations executed so far\n- i + j <= LARGE_INT\n\nPost-condition:\n- k <= LARGE_INT\n\nExplanation:\n- The loop iterates until the value of i is less than LARGE_INT. Therefore, i must always be non-negative.\n- k represents the number of iterations executed so far, so it must be non-negative.\n- Since j is returned by the unknown_int() function, we can only assume that it satisfies 1 <= j < LARGE_INT. This condition must hold in every iteration of the loop.\n- The loop adds the value of j to i in every iteration. Therefore, the value of i must be the sum of all previous values of j. This condition must hold in every iteration of the loop.\n- The loop increments k in every iteration. Therefore, k must be the number of iterations executed so far. This condition must hold in every iteration of the loop.\n- The loop terminates either when i >= LARGE_INT or when the unknown_int() function returns a value such that 1 <= j < LARGE_INT and i + j > LARGE_INT. Therefore, in every iteration of the loop, the sum of i and j must be less than or equal to LARGE_INT.",
            "Pre-conditions:\n- None\n\nVariable assignments:\n- i is initialized to 0.\n- k is initialized to 0.\n\nLoop condition:\n- The loop continues as long as i is less than LARGE_INT.\n\nLoop invariants:\n- i is always non-negative.\n- k is always non-negative.\n- k is equal to the number of iterations of the loop.\n- For each iteration of the loop, j is greater than or equal to 1 and less than LARGE_INT.\n- The sum of all values of j encountered so far is equal to i.\n- If the loop terminates, then i is greater than or equal to LARGE_INT.\n\nPutting it all together, the loop invariants are:\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant k >= 0;\n    loop invariant k == \\at(k, Pre) + \\at(\\at(i, Pre) < LARGE_INT, Here);\n    loop invariant 1 <= j < LARGE_INT ==> \\forall integer m; 0 <= m < k ==> i >= \\at(i, Pre) + m*1;\n    loop invariant i == \\sum integer n; 0 <= n < k; \\at(\\at(j, Pre, Here), LoopEntry) + n*1;\n    loop invariant \\at(\\at(i, Pre) >= LARGE_INT, Here) ==> i >= LARGE_INT;\n*/\n``` \n\nNote that we use the \\at notation to refer to the value of a variable at a particular program point. Here, \\at(x, Pre) refers to the value of x at the beginning of the loop iteration, and \\at(x, Here) refers to the value of x at the current program point. Also, we use the ==> operator to represent implication."
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant 0 <= i <= LARGE_INT;\n    loop invariant 0 <= k <= LARGE_INT;\n    loop invariant i + (LARGE_INT - i) * k <= LARGE_INT;\n    loop invariant (\\forall int x; 1 <= x && x < LARGE_INT ==> 0 <= i + x <= LARGE_INT);\n*/",
            "/*@ \n    loop invariant 0 <= i <= LARGE_INT;\n    loop invariant k == 0;\n*/",
            "/*@\n    loop invariant i == 0 && k == 0 ==> 1 <= j && j < LARGE_INT;\n    loop invariant 1 <= j && j < LARGE_INT;\n    loop invariant 0 <= i <= LARGE_INT;\n    loop invariant 0 <= k <= LARGE_INT;\n    loop invariant i >= LARGE_INT ==> k <= LARGE_INT;\n*/\nwhile(i < LARGE_INT) {\n    int j = unknown_int();\n    assume(1 <= j && j < LARGE_INT);\n    i = i + j;\n    k ++;\n}\n{;\n//@ assert(i >= LARGE_INT ==> k <= LARGE_INT);\n//@ assert(k <= LARGE_INT);\n}",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- None\n\nVariable Assignments:\n- i = 0\n- k = 0\n\nLoop Invariants:\n- i >= 0\n- k >= 0\n- For every iteration of the loop, 1 <= j < LARGE_INT\n- For every iteration of the loop, i is the sum of all previous values of j\n- k is the number of iterations executed so far\n- i + j <= LARGE_INT\n\nPost-condition:\n- k <= LARGE_INT\n\nExplanation:\n- The loop iterates until the value of i is less than LARGE_INT. Therefore, i must always be non-negative.\n- k represents the number of iterations executed so far, so it must be non-negative.\n- Since j is returned by the unknown_int() function, we can only assume that it satisfies 1 <= j < LARGE_INT. This condition must hold in every iteration of the loop.\n- The loop adds the value of j to i in every iteration. Therefore, the value of i must be the sum of all previous values of j. This condition must hold in every iteration of the loop.\n- The loop increments k in every iteration. Therefore, k must be the number of iterations executed so far. This condition must hold in every iteration of the loop.\n- The loop terminates either when i >= LARGE_INT or when the unknown_int() function returns a value such that 1 <= j < LARGE_INT and i + j > LARGE_INT. Therefore, in every iteration of the loop, the sum of i and j must be less than or equal to LARGE_INT."
            ],
            "/*@ \n    loop invariant i >= 0;\n    loop invariant k >= 0;\n    loop invariant k == \\at(k, Pre) + \\at(\\at(i, Pre) < LARGE_INT, Here);\n    loop invariant 1 <= j < LARGE_INT ==> \\forall integer m; 0 <= m < k ==> i >= \\at(i, Pre) + m*1;\n    loop invariant i == \\sum integer n; 0 <= n < k; \\at(\\at(j, Pre, Here), LoopEntry) + n*1;\n    loop invariant \\at(\\at(i, Pre) >= LARGE_INT, Here) ==> i >= LARGE_INT;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= i <= LARGE_INT;\n    loop invariant 0 <= k <= LARGE_INT;\n    loop invariant i + (LARGE_INT - i) * k <= LARGE_INT;\n    loop invariant (\\forall int x; 1 <= x && x < LARGE_INT ==> 0 <= i + x <= LARGE_INT);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= LARGE_INT is partially proven to be inductive.\nloop invariant 0 <= k <= LARGE_INT is partially proven to be inductive.\nloop invariant i + (LARGE_INT - i) * k <= LARGE_INT is established but not preserved.\nloop invariant (\\forall int x; 1 <= x && x < LARGE_INT ==> 0 <= i + x <= LARGE_INT) is established but not preserved.\nAssertion k <= 1000000: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= i <= LARGE_INT;\n    loop invariant k == 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= LARGE_INT is established but not preserved.\nloop invariant k == 0 is established but not preserved.\nAssertion k <= 1000000: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "/*@\n    loop invariant i == 0 && k == 0 ==> 1 <= j && j < LARGE_INT;\n    loop invariant 1 <= j && j < LARGE_INT;\n    loop invariant 0 <= i <= LARGE_INT;\n    loop invariant 0 <= k <= LARGE_INT;\n    loop invariant i >= LARGE_INT ==> k <= LARGE_INT;\n*/\nwhile(i < LARGE_INT) {\n    int j = unknown_int();\n    assume(1 <= j && j < LARGE_INT);\n    i = i + j;\n    k ++;\n}\n{;\n//@ assert(i >= LARGE_INT ==> k <= LARGE_INT);\n//@ assert(k <= LARGE_INT);\n}",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 9: unbound logic variable j. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- None\n\nVariable Assignments:\n- i = 0\n- k = 0\n\nLoop Invariants:\n- i >= 0\n- k >= 0\n- For every iteration of the loop, 1 <= j < LARGE_INT\n- For every iteration of the loop, i is the sum of all previous values of j\n- k is the number of iterations executed so far\n- i + j <= LARGE_INT\n\nPost-condition:\n- k <= LARGE_INT\n\nExplanation:\n- The loop iterates until the value of i is less than LARGE_INT. Therefore, i must always be non-negative.\n- k represents the number of iterations executed so far, so it must be non-negative.\n- Since j is returned by the unknown_int() function, we can only assume that it satisfies 1 <= j < LARGE_INT. This condition must hold in every iteration of the loop.\n- The loop adds the value of j to i in every iteration. Therefore, the value of i must be the sum of all previous values of j. This condition must hold in every iteration of the loop.\n- The loop increments k in every iteration. Therefore, k must be the number of iterations executed so far. This condition must hold in every iteration of the loop.\n- The loop terminates either when i >= LARGE_INT or when the unknown_int() function returns a value such that 1 <= j < LARGE_INT and i + j > LARGE_INT. Therefore, in every iteration of the loop, the sum of i and j must be less than or equal to LARGE_INT.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 6,
                "annotations": "/*@ \n    loop invariant i >= 0;\n    loop invariant k >= 0;\n    loop invariant k == \\at(k, Pre) + \\at(\\at(i, Pre) < LARGE_INT, Here);\n    loop invariant 1 <= j < LARGE_INT ==> \\forall integer m; 0 <= m < k ==> i >= \\at(i, Pre) + m*1;\n    loop invariant i == \\sum integer n; 0 <= n < k; \\at(\\at(j, Pre, Here), LoopEntry) + n*1;\n    loop invariant \\at(\\at(i, Pre) >= LARGE_INT, Here) ==> i >= LARGE_INT;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 13: unexpected token 'integer'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\nloop invariant i1: i >= 0;\nloop invariant i2: k >= 0;\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 21: unexpected token 'integer'",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\nloop invariant i2: 0 <= k <= LARGE_INT;\nloop invariant i3: i + (LARGE_INT - i) * k <= LARGE_INT;\nloop invariant i4: (\\forall int x; 1 <= x && x < LARGE_INT ==> 0 <= i + x <= LARGE_INT);\nloop invariant i5: k == 0;\nloop invariant i6: i == 0 && k == 0 ==> 1 <= j && j < LARGE_INT;\nloop invariant i7: 1 <= j && j < LARGE_INT;\nloop invariant i8: i >= LARGE_INT ==> k <= LARGE_INT;\nloop invariant i9: i >= 0;\nloop invariant i10: k >= 0;\nloop invariant i11: k == \\at(k, Pre) + \\at(\\at(i, Pre) < LARGE_INT, Here);\nloop invariant i12: 1 <= j < LARGE_INT ==> \\forall integer m; 0 <= m < k ==> i >= \\at(i, Pre) + m*1;\nloop invariant i13: i == \\sum integer n; 0 <= n < k; \\at(\\at(j, Pre, Here), LoopEntry) + n*1;\nloop invariant i14: \\at(\\at(i, Pre) >= LARGE_INT, Here) ==> i >= LARGE_INT;\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 12,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\n\n\n\nloop invariant i9: i >= 0;\nloop invariant i10: k >= 0;\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/const.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq1.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq2.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/afnp2014.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/css2003.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007b.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gsv2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/hhk2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_2.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../data/benchmarks/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/even.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/mod4.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/odd.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/id_trans.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/bhmr2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/ddlm2013.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gcnr2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gr2006.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_k.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_nondet.c"
        ],
        "skipped": [],
        "total": 305,
        "success_count": 145,
        "failure_count": 160,
        "success_rate": 0.47540983606557374
    }
}