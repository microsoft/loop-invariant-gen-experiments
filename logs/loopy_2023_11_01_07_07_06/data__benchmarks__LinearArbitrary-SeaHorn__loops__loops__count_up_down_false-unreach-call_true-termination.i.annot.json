{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  while(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y!=n);\n}\n\n}",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  while(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y!=n);\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- The program assumes the existence of an external function `unknown_uint` which returns an unsigned integer.\n- The program sets the variable `n` to the value returned by the function `unknown_uint`.\n- The program initializes `x` to `n` and `y` to `0`.\n\nLoop condition:\n- The loop continues as long as `x` is greater than 0.\n\nLoop invariants:\n- Before the loop execution: `x+y = n`\n- In every iteration of the loop: `x+y = n`\n- After the loop termination: `y = n-x`\n\nExplanation:\n- Before the loop execution, `x` is equal to `n` and `y` is equal to `0`. Therefore, `x+y` is equal to `n`.\n- In every iteration of the loop, `x` is decremented by 1 and `y` is incremented by 1. Therefore, the sum of `x` and `y` remains equal to `n`.\n- After the loop termination, `x` is equal to `0` and `y` is equal to `n`. Therefore, `y` is equal to `n-x`.\n\nWe also need to add conjunctions that bound the maximum and minimum values that `x`, `y` and `n` can take:\n```\n/*@ \n    loop invariant 0 <= x <= n;\n    loop invariant 0 <= y <= n;\n    loop invariant x+y == n;\n*/\n```\nAnd finally, we need to add an implication for the assertion, since it is guarded by a condition:\n```\n{;\n    //@ assert (x == 0) ==> (y!=n);\n}\n```",
            "Pre-conditions and variable assignments:\n- The program reads an input `n` from an external function `unknown_uint()`.\n- Two unsigned integer variables `x` and `y` are initialized with `n` and `0` respectively.\n\nLoop condition:\n- The loop executes as long as `x` is greater than `0`.\n\nLoop invariants:\n- Before loop execution: `x+y=n`\n  - Explanation: At the beginning of the loop, `x` is initialized with `n` and `y` is initialized with `0`. Therefore, the sum of `x` and `y` is equal to `n`.\n- In every iteration of the loop: `x+y=n` and `x>=0`\n  - Explanation: In each iteration, `x` is decremented by `1` and `y` is incremented by `1`. Therefore, the sum of `x` and `y` remains equal to `n`. Also, since `x` is initialized with `n`, it can never be negative.\n- After loop termination: `x+y=n` and `x=0` and `y=n`\n  - Explanation: At the end of the loop, `x` becomes `0` and `y` becomes `n`. Therefore, the sum of `x` and `y` is equal to `n`. Also, since `x` is decremented by `1` in each iteration, it becomes `0` after `n` iterations.",
            "Pre-conditions:\n- The program takes no input.\n- The macro `assume(e)` takes a boolean expression `e` and if it evaluates to false, the program returns 0 and terminates.\n- The function `unknown_uint()` returns an unsigned integer with an unknown value.\n\nVariable assignments:\n- The variable `n` is assigned the value returned by `unknown_uint()`.\n- The variable `x` is assigned the value of `n`.\n- The variable `y` is assigned the value 0.\n\nLoop condition:\n- The loop continues as long as the value of `x` is greater than 0.\n\nLoop invariants:\n- Before the loop: None needed.\n- In every iteration of the loop: \n    - `0 <= y <= n`\n    - `0 <= x <= n`\n- After the loop:\n    - `y == n - x`\n    - `0 <= y <= n`\n\nExplanation:\n- Before the loop starts, there are no loop invariants needed.\n- In every iteration of the loop, `x` is decremented by 1 and `y` is incremented by 1. Thus, `0 <= y <= n` and `0 <= x <= n` are always true.\n- After the loop terminates, `x` becomes 0 and `y` becomes equal to the initial value of `n`. Thus, `y == n - x` and `0 <= y <= n`. \n- Note that there are no non-deterministic variables in this program, so we do not need to use any implications to make the invariants trivially true. \n\nPutting it all together, the loop invariants are:\n```\n/*@ \n    loop invariant 0 <= y <= n;\n    loop invariant 0 <= x <= n;\n*/\nwhile(x>0)\n{\n    x--;\n    y++;\n}\n/*@ \n    loop invariant y == n - x;\n    loop invariant 0 <= y <= n;\n*/\n{;\n//@ assert(y!=n);\n}\n```",
            "Pre-conditions:\n- The macro `assume` is defined such that if its argument evaluates to false, the function returns 0.\n- There is an external function `unknown_uint` which returns an unsigned integer.\n\nVariable assignments:\n- `n` is assigned the value returned by `unknown_uint()`.\n- `x` is assigned the value of `n`.\n- `y` is assigned 0.\n\nLoop condition:\n- `x>0`\n\nLoop invariants:\n- Before loop execution: None needed.\n- In every iteration of the loop:\n  - `0 <= y <= n`\n  - `0 <= x <= n`\n- After loop termination:\n  - `y = n - x`\n  - `x = 0`\n  - `0 <= y <= n`\n\nExplanation:\n- Before the loop execution, no loop invariants are required as the values of `x` and `y` are already defined.\n- In every iteration of the loop, `y` is incremented by 1 and `x` is decremented by 1. Therefore, `0 <= y <= n` and `0 <= x <= n`.\n- After the loop termination, `x` becomes 0 as the loop condition `x>0` fails. Therefore, `x = 0`. Also, the value of `y` becomes equal to the initial value of `n` minus the number of times the loop executed. Therefore, `y = n - x`. Finally, `0 <= y <= n` as `y` is always incremented by 1 in each iteration of the loop.\n\nTherefore, the loop invariants are:\n```\n/*@ \n    loop invariant 0 <= y <= n;\n    loop invariant 0 <= x <= n;\n    loop invariant y == n - x;\n*/\n```\n\nSince the assertion is not guarded by any condition, we can add it as is:\n```\n{;\n    //@ assert y!=n;\n}\n```\n",
            "Step 1: Pre-conditions and variable assignments:\n- The program declares two unsigned integer variables x and y and initializes them with the value of n and 0 respectively.\n- The program also declares an external function unknown_uint() that returns an unsigned integer value.\n\nStep 2: Loop condition:\n- The loop continues to execute while the value of x is greater than 0.\n\nStep 3: Loop invariants:\n- Before the loop execution:\n    - The value of y is 0 (since it is initialized to 0).\n    - The value of x is less than or equal to n (since x is initially assigned the value of n, and it decrements by 1 in each iteration of the loop).\n- In every iteration of the loop:\n    - The value of y is incremented by 1.\n    - The value of x is decremented by 1.\n    - The sum of x and y is always equal to n.\n    - The value of x is greater than or equal to 0.\n- After the loop termination:\n    - The value of x is 0.\n    - The value of y is equal to n.\n    - The sum of x and y is always equal to n.\n    - The value of x is less than or equal to n.\n    \nCombining all the loop invariants, we get:\n```\n/*@ \n    loop invariant y >= 0 && x <= n;\n    loop invariant x + y == n;\n    loop invariant x >= 0;\n    loop invariant x <= n;\n*/\n``` \n\nStep 4: Implications:\n- Since the assertion is not guarded by any condition, we do not need to use an implication here.\n- There are no non-deterministic variables in this program, so we do not need to use any implications to make the invariants trivially true.\n\nTherefore, the final loop invariants for the given program are:\n```\n/*@ \n    loop invariant y >= 0 && x <= n;\n    loop invariant x + y == n;\n    loop invariant x >= 0;\n    loop invariant x <= n;\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant 0 <= x <= n;\n    loop invariant 0 <= y <= n;\n    loop invariant x+y == n;\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions and variable assignments:\n- The program reads an input `n` from an external function `unknown_uint()`.\n- Two unsigned integer variables `x` and `y` are initialized with `n` and `0` respectively.\n\nLoop condition:\n- The loop executes as long as `x` is greater than `0`.\n\nLoop invariants:\n- Before loop execution: `x+y=n`\n  - Explanation: At the beginning of the loop, `x` is initialized with `n` and `y` is initialized with `0`. Therefore, the sum of `x` and `y` is equal to `n`.\n- In every iteration of the loop: `x+y=n` and `x>=0`\n  - Explanation: In each iteration, `x` is decremented by `1` and `y` is incremented by `1`. Therefore, the sum of `x` and `y` remains equal to `n`. Also, since `x` is initialized with `n`, it can never be negative.\n- After loop termination: `x+y=n` and `x=0` and `y=n`\n  - Explanation: At the end of the loop, `x` becomes `0` and `y` becomes `n`. Therefore, the sum of `x` and `y` is equal to `n`. Also, since `x` is decremented by `1` in each iteration, it becomes `0` after `n` iterations."
            ],
            "/*@ \n    loop invariant 0 <= y <= n;\n    loop invariant 0 <= x <= n;\n*/\nwhile(x>0)\n{\n    x--;\n    y++;\n}\n/*@ \n    loop invariant y == n - x;\n    loop invariant 0 <= y <= n;\n*/\n{;\n//@ assert(y!=n);\n}",
            "/*@ \n    loop invariant 0 <= y <= n;\n    loop invariant 0 <= x <= n;\n    loop invariant y == n - x;\n*/",
            "/*@ \n    loop invariant y >= 0 && x <= n;\n    loop invariant x + y == n;\n    loop invariant x >= 0;\n    loop invariant x <= n;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= x <= n;\n    loop invariant 0 <= y <= n;\n    loop invariant x+y == n;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is inductive.\nloop invariant 0 <= y <= n is inductive.\nloop invariant x+y == n is inductive.\nAssertion y != n: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: 0 <= y <= n;\nloop invariant i3: x+y == n;\n*/\nwhile(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y!=n);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions and variable assignments:\n- The program reads an input `n` from an external function `unknown_uint()`.\n- Two unsigned integer variables `x` and `y` are initialized with `n` and `0` respectively.\n\nLoop condition:\n- The loop executes as long as `x` is greater than `0`.\n\nLoop invariants:\n- Before loop execution: `x+y=n`\n  - Explanation: At the beginning of the loop, `x` is initialized with `n` and `y` is initialized with `0`. Therefore, the sum of `x` and `y` is equal to `n`.\n- In every iteration of the loop: `x+y=n` and `x>=0`\n  - Explanation: In each iteration, `x` is decremented by `1` and `y` is incremented by `1`. Therefore, the sum of `x` and `y` remains equal to `n`. Also, since `x` is initialized with `n`, it can never be negative.\n- After loop termination: `x+y=n` and `x=0` and `y=n`\n  - Explanation: At the end of the loop, `x` becomes `0` and `y` becomes `n`. Therefore, the sum of `x` and `y` is equal to `n`. Also, since `x` is decremented by `1` in each iteration, it becomes `0` after `n` iterations.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= y <= n;\n    loop invariant 0 <= x <= n;\n*/\nwhile(x>0)\n{\n    x--;\n    y++;\n}\n/*@ \n    loop invariant y == n - x;\n    loop invariant 0 <= y <= n;\n*/\n{;\n//@ assert(y!=n);\n}",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= n is inductive.\nloop invariant 0 <= x <= n is inductive.\nloop invariant y == n - x is inductive.\nAssertion y != n: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  /*@\nloop invariant i1: 0 <= y <= n;\nloop invariant i2: 0 <= x <= n;\nloop invariant i3: y == n - x;\n*/\nwhile(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y!=n);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= y <= n;\n    loop invariant 0 <= x <= n;\n    loop invariant y == n - x;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= n is inductive.\nloop invariant 0 <= x <= n is inductive.\nloop invariant y == n - x is inductive.\nAssertion y != n: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  /*@\nloop invariant i1: 0 <= y <= n;\nloop invariant i2: 0 <= x <= n;\nloop invariant i3: y == n - x;\n*/\nwhile(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y!=n);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant y >= 0 && x <= n;\n    loop invariant x + y == n;\n    loop invariant x >= 0;\n    loop invariant x <= n;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant y >= 0 && x <= n is inductive.\nloop invariant x + y == n is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant x <= n is inductive.\nAssertion y != n: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  /*@\nloop invariant i1: y >= 0 && x <= n;\nloop invariant i2: x + y == n;\nloop invariant i3: x >= 0;\nloop invariant i4: x <= n;\n*/\nwhile(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y!=n);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= x <= n is inductive.\nloop invariant 0 <= y <= n is inductive.\nloop invariant x+y == n is inductive.\nloop invariant y == n - x is inductive.\nloop invariant y >= 0 && x <= n is inductive.\nloop invariant x + y == n is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant x <= n is inductive.\nAssertion y != n: Unproven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: 0 <= y <= n;\nloop invariant i3: x+y == n;\nloop invariant i4: y == n - x;\nloop invariant i5: y >= 0 && x <= n;\nloop invariant i6: x + y == n;\nloop invariant i7: x >= 0;\nloop invariant i8: x <= n;\n*/\nwhile(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y!=n);\n}\n\n}",
        "combined_annotation_num_solver_calls": 2,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: 0 <= y <= n;\nloop invariant i3: x+y == n;\nloop invariant i4: y == n - x;\nloop invariant i5: y >= 0 && x <= n;\nloop invariant i6: x + y == n;\nloop invariant i7: x >= 0;\nloop invariant i8: x <= n;\n*/\nwhile(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y!=n);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c"
        ],
        "skipped": [],
        "total": 135,
        "success_count": 55,
        "failure_count": 80,
        "success_rate": 0.4074074074074074
    }
}