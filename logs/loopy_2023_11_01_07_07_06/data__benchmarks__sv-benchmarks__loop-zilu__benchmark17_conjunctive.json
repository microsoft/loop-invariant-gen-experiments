{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark17_conjunctive.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==0)) return 0;\n  while (i<n) {\n    i++;\n    k++;\n  }\n  {;\n//@ assert(k>=n);\n}\n\n  return 0;\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==0)) return 0;\n  while (i<n) {\n    i++;\n    k++;\n  }\n  {;\n//@ assert(k>=n);\n}\n\n  return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- The variables `i`, `k` and `n` are initialized with non-deterministic values.\n- The condition `(i==0 && k==0)` holds true.\n\nLoop condition:\n- The loop continues while `i<n`.\n\nPost-condition:\n- `k` is greater than or equal to `n`.\n\nLoop invariants:\n- `i >= 0 && k >= 0 && n >= 0` (all variables are non-negative)\n- `i <= n` (the loop continues while `i` is less than `n`)\n- `k == i` (the value of `k` is always equal to `i`)\n- `i == \\old(i) + 1` (the value of `i` increments by 1 in each iteration)\n- `k == \\old(k) + 1` (the value of `k` increments by 1 in each iteration)\n- `(i==0 && k==0) ==> n >= 0` (if the initial condition holds true, then `n` must be non-negative)\n- `k >= n ==> i >= n` (when the loop terminates, `k` must be greater than or equal to `n`, which implies that `i` must also be greater than or equal to `n`) \n\nPutting it all together:\n```\n/*@ \n    loop invariant i >= 0 && k >= 0 && n >= 0;\n    loop invariant i <= n;\n    loop invariant k == i;\n    loop invariant i == \\old(i) + 1;\n    loop invariant k == \\old(k) + 1;\n    loop invariant (i==0 && k==0) ==> n >= 0;\n    loop invariant k >= n ==> i >= n;\n*/\nwhile (i<n) {\n    i++;\n    k++;\n}\n{;\n//@ assert(k>=n);\n}\n```\nNote: Since all variables are non-deterministic, we do not need to use any implications to make the invariants true at the beginning or end of the loop.",
            "Pre-conditions:\n- The program takes no input.\n- The program calls an external function `unknown_int()` three times to initialize variables `i`, `k`, and `n`.\n- The program checks if `i` and `k` are both 0. If not, the program returns 0.\n\nVariable assignments:\n- `i`, `k`, and `n` are initialized using `unknown_int()`.\n\nLoop condition:\n- The loop runs while `i` is less than `n`.\n\nPost-condition:\n- `k` is greater than or equal to `n`.\n\nLoop invariants:\n- Since `i` and `k` are both initially 0, we can add the following loop invariant before the loop execution:\n```\n/*@ loop invariant i>=0 && k>=0;*/\n```\n- In every iteration of the loop, `i` is incremented by 1 and `k` is incremented by 1. Thus, the following loop invariant holds:\n```\n/*@ loop invariant i>=0 && k>=0 && i<=n && k<=n && k-i>=0;*/\n```\n- After the loop termination, `i` is equal to `n` and `k` is equal to `n` plus the number of iterations of the loop. Thus, the following loop invariant holds:\n```\n/*@ loop invariant i==n ==> k>=n;*/\n```\n- We can add an implication for the non-deterministic initialization of variables `i`, `k`, and `n` before the loop execution:\n```\n/*@ loop invariant i==0 && k==0 && n>=0 ==> i>=0 && k>=0;*/\n```\n- Since we have a guard condition for the assertion, we can add an implication to make the invariant trivially true when the guard condition is false:\n```\n/*@ loop invariant i<n ==> (k>=i ==> k>=n);*/\n```\nPutting it all together, the final loop invariants are:\n```\n/*@ \n    loop invariant i==0 && k==0 && n>=0 ==> i>=0 && k>=0;\n    loop invariant i>=0 && k>=0 && i<=n && k<=n && k-i>=0;\n    loop invariant i<n ==> (k>=i ==> k>=n);\n    loop invariant i==n ==> k>=n;\n*/\n```",
            "Pre-conditions:\n- Variables `i`, `k`, and `n` are integers.\n- The values of `i` and `k` are unknown, and the value of `n` is also unknown.\n- The program assumes that the initial values of `i` and `k` are 0.\n\nLoop condition:\n- The loop executes while `i` is less than `n`.\n\nPost-condition:\n- The value of `k` is greater than or equal to `n`.\n\nLoop invariants:\n- Before the loop execution, `i` is less than or equal to `n` and `k` is equal to `i`.\n- In every iteration of the loop, `i` is less than or equal to `n` and `k` is equal to `i`.\n- After the loop termination, `k` is greater than or equal to `n`.\n\nExplanation:\n- Before the loop starts, `i` is equal to 0 and `k` is equal to 0. The loop will only execute if `n` is greater than 0. Therefore, `i` is less than or equal to `n` and `k` is equal to `i`.\n- In every iteration of the loop, `i` is incremented by 1 and `k` is also incremented by 1. Since the loop condition is that `i` is less than `n`, it follows that `i` is always less than or equal to `n` in every iteration of the loop. Also, since `k` is incremented by 1 in each iteration, it follows that `k` is always equal to `i`.\n- After the loop terminates, `i` is greater than or equal to `n` and `k` is greater than or equal to `n`. However, since the post-condition only requires that `k` is greater than or equal to `n`, we only need to show that `k` is greater than or equal to `n`. Since `k` is equal to `i` after the loop, and `i` is greater than or equal to `n`, it follows that `k` is also greater than or equal to `n`.",
            "Pre-conditions:\n- The values of `i`, `k`, and `n` are non-negative integers.\n- The initial values of `i` and `k` are both 0.\n- The value of `n` is greater than or equal to 0.\n\nLoop condition:\n- `i < n`\n\nPost-condition:\n- `k >= n`\n\nLoop invariants:\n- `i >= 0 && k >= 0 && n >= 0`\n- `i <= n`\n- `k == i`\n- For every iteration of the loop: `i < n ==> k < n`\n- After the loop terminates: `i >= n ==> k >= n`\n- Guarded assertion: `i >= n ==> k >= n`\n\nExplanation:\n- The first invariant ensures that `i`, `k`, and `n` are non-negative integers.\n- The second invariant ensures that `i` is less than or equal to `n`.\n- The third invariant ensures that `k` is always equal to `i`.\n- The fourth invariant ensures that as long as `i` is less than `n`, `k` is also less than `n`.\n- The fifth invariant ensures that when `i` is greater than or equal to `n`, `k` is also greater than or equal to `n`, which implies the post-condition.\n- The sixth invariant is a guarded assertion that ensures that when `i` is greater than or equal to `n`, `k` is also greater than or equal to `n`, which implies the post-condition.",
            "Pre-conditions:\n- The program does not have any pre-conditions.\n- The program has three integer variables, i, k, and n, which are initialized with non-deterministic values.\n\nLoop Condition:\n- The loop executes while the value of i is less than n.\n\nPost-condition:\n- The value of k is greater than or equal to n.\n\nLoop Invariants:\n- Since i and k are initialized to 0, we can add a conjunction to bound their minimum value:\n```\n/*@ loop invariant 0 <= i;\n    loop invariant 0 <= k;\n*/\n```\n- The loop continues as long as i is less than n, so we can add a conjunction to bound the maximum value of i:\n```\n/*@ loop invariant 0 <= i <= n;\n    loop invariant 0 <= k;\n*/\n```\n- In each iteration of the loop, i and k are incremented by 1, so we can add a conjunction to express their relation:\n```\n/*@ loop invariant 0 <= i <= n;\n    loop invariant i == k;\n*/\n```\n- Since the post-condition is guarded by the condition `i>=n`, we can use an implication to incorporate this condition:\n```\n/*@ loop invariant 0 <= i <= n;\n    loop invariant i == k;\n    loop invariant i >= n ==> k >= n;\n*/\n```\n- Since the variables i, k, and n are initialized with non-deterministic values, we can use an implication to make the loop invariants trivially true at the beginning of the loop:\n```\n/*@ loop invariant \\true;\n    loop invariant 0 <= i <= n;\n    loop invariant i == k;\n    loop invariant i >= n ==> k >= n;\n*/\n```\n- The loop terminates when i is greater than or equal to n, so we can add a conjunction to express this:\n```\n/*@ loop invariant \\true;\n    loop invariant 0 <= i <= n;\n    loop invariant i == k;\n    loop invariant i >= n ==> k >= n;\n    loop variant n-i;\n*/\n```\n- The loop invariant `loop variant n-i` expresses that the value of `n-i` decreases in each iteration of the loop. This invariant is necessary for Frama-C to prove that the loop terminates. \n\nPutting it all together:\n```\n/*@ loop invariant \\true;\n    loop invariant 0 <= i <= n;\n    loop invariant i == k;\n    loop invariant i >= n ==> k >= n;\n    loop variant n-i;\n*/\nwhile (i < n) {\n    i++;\n    k++;\n}\n```"
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant i >= 0 && k >= 0 && n >= 0;\n    loop invariant i <= n;\n    loop invariant k == i;\n    loop invariant i == \\old(i) + 1;\n    loop invariant k == \\old(k) + 1;\n    loop invariant (i==0 && k==0) ==> n >= 0;\n    loop invariant k >= n ==> i >= n;\n*/\nwhile (i<n) {\n    i++;\n    k++;\n}\n{;\n//@ assert(k>=n);\n}",
            "/*@ loop invariant i>=0 && k>=0;*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- Variables `i`, `k`, and `n` are integers.\n- The values of `i` and `k` are unknown, and the value of `n` is also unknown.\n- The program assumes that the initial values of `i` and `k` are 0.\n\nLoop condition:\n- The loop executes while `i` is less than `n`.\n\nPost-condition:\n- The value of `k` is greater than or equal to `n`.\n\nLoop invariants:\n- Before the loop execution, `i` is less than or equal to `n` and `k` is equal to `i`.\n- In every iteration of the loop, `i` is less than or equal to `n` and `k` is equal to `i`.\n- After the loop termination, `k` is greater than or equal to `n`.\n\nExplanation:\n- Before the loop starts, `i` is equal to 0 and `k` is equal to 0. The loop will only execute if `n` is greater than 0. Therefore, `i` is less than or equal to `n` and `k` is equal to `i`.\n- In every iteration of the loop, `i` is incremented by 1 and `k` is also incremented by 1. Since the loop condition is that `i` is less than `n`, it follows that `i` is always less than or equal to `n` in every iteration of the loop. Also, since `k` is incremented by 1 in each iteration, it follows that `k` is always equal to `i`.\n- After the loop terminates, `i` is greater than or equal to `n` and `k` is greater than or equal to `n`. However, since the post-condition only requires that `k` is greater than or equal to `n`, we only need to show that `k` is greater than or equal to `n`. Since `k` is equal to `i` after the loop, and `i` is greater than or equal to `n`, it follows that `k` is also greater than or equal to `n`."
            ],
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The values of `i`, `k`, and `n` are non-negative integers.\n- The initial values of `i` and `k` are both 0.\n- The value of `n` is greater than or equal to 0.\n\nLoop condition:\n- `i < n`\n\nPost-condition:\n- `k >= n`\n\nLoop invariants:\n- `i >= 0 && k >= 0 && n >= 0`\n- `i <= n`\n- `k == i`\n- For every iteration of the loop: `i < n ==> k < n`\n- After the loop terminates: `i >= n ==> k >= n`\n- Guarded assertion: `i >= n ==> k >= n`\n\nExplanation:\n- The first invariant ensures that `i`, `k`, and `n` are non-negative integers.\n- The second invariant ensures that `i` is less than or equal to `n`.\n- The third invariant ensures that `k` is always equal to `i`.\n- The fourth invariant ensures that as long as `i` is less than `n`, `k` is also less than `n`.\n- The fifth invariant ensures that when `i` is greater than or equal to `n`, `k` is also greater than or equal to `n`, which implies the post-condition.\n- The sixth invariant is a guarded assertion that ensures that when `i` is greater than or equal to `n`, `k` is also greater than or equal to `n`, which implies the post-condition."
            ],
            "/*@ loop invariant 0 <= i;\n    loop invariant 0 <= k;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 6,
                "annotations": "/*@ \n    loop invariant i >= 0 && k >= 0 && n >= 0;\n    loop invariant i <= n;\n    loop invariant k == i;\n    loop invariant i == \\old(i) + 1;\n    loop invariant k == \\old(k) + 1;\n    loop invariant (i==0 && k==0) ==> n >= 0;\n    loop invariant k >= n ==> i >= n;\n*/\nwhile (i<n) {\n    i++;\n    k++;\n}\n{;\n//@ assert(k>=n);\n}",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 16: \\old undefined in this context. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==0)) return 0;\n  /*@\n\n\nloop invariant i3: k == i;\n\n\n\nloop invariant i7: k >= n ==> i >= n;\n*/\nwhile (i<n) {\n    i++;\n    k++;\n  }\n  {;\n//@ assert(k>=n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ loop invariant i>=0 && k>=0;*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i>=0 && k>=0 is inductive.\nAssertion k >= n: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==0)) return 0;\n  /*@\nloop invariant i1: i>=0 && k>=0;\n*/\nwhile (i<n) {\n    i++;\n    k++;\n  }\n  {;\n//@ assert(k>=n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- Variables `i`, `k`, and `n` are integers.\n- The values of `i` and `k` are unknown, and the value of `n` is also unknown.\n- The program assumes that the initial values of `i` and `k` are 0.\n\nLoop condition:\n- The loop executes while `i` is less than `n`.\n\nPost-condition:\n- The value of `k` is greater than or equal to `n`.\n\nLoop invariants:\n- Before the loop execution, `i` is less than or equal to `n` and `k` is equal to `i`.\n- In every iteration of the loop, `i` is less than or equal to `n` and `k` is equal to `i`.\n- After the loop termination, `k` is greater than or equal to `n`.\n\nExplanation:\n- Before the loop starts, `i` is equal to 0 and `k` is equal to 0. The loop will only execute if `n` is greater than 0. Therefore, `i` is less than or equal to `n` and `k` is equal to `i`.\n- In every iteration of the loop, `i` is incremented by 1 and `k` is also incremented by 1. Since the loop condition is that `i` is less than `n`, it follows that `i` is always less than or equal to `n` in every iteration of the loop. Also, since `k` is incremented by 1 in each iteration, it follows that `k` is always equal to `i`.\n- After the loop terminates, `i` is greater than or equal to `n` and `k` is greater than or equal to `n`. However, since the post-condition only requires that `k` is greater than or equal to `n`, we only need to show that `k` is greater than or equal to `n`. Since `k` is equal to `i` after the loop, and `i` is greater than or equal to `n`, it follows that `k` is also greater than or equal to `n`.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The values of `i`, `k`, and `n` are non-negative integers.\n- The initial values of `i` and `k` are both 0.\n- The value of `n` is greater than or equal to 0.\n\nLoop condition:\n- `i < n`\n\nPost-condition:\n- `k >= n`\n\nLoop invariants:\n- `i >= 0 && k >= 0 && n >= 0`\n- `i <= n`\n- `k == i`\n- For every iteration of the loop: `i < n ==> k < n`\n- After the loop terminates: `i >= n ==> k >= n`\n- Guarded assertion: `i >= n ==> k >= n`\n\nExplanation:\n- The first invariant ensures that `i`, `k`, and `n` are non-negative integers.\n- The second invariant ensures that `i` is less than or equal to `n`.\n- The third invariant ensures that `k` is always equal to `i`.\n- The fourth invariant ensures that as long as `i` is less than `n`, `k` is also less than `n`.\n- The fifth invariant ensures that when `i` is greater than or equal to `n`, `k` is also greater than or equal to `n`, which implies the post-condition.\n- The sixth invariant is a guarded assertion that ensures that when `i` is greater than or equal to `n`, `k` is also greater than or equal to `n`, which implies the post-condition.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ loop invariant 0 <= i;\n    loop invariant 0 <= k;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i is inductive.\nloop invariant 0 <= k is inductive.\nAssertion k >= n: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==0)) return 0;\n  /*@\nloop invariant i1: 0 <= i;\nloop invariant i2: 0 <= k;\n*/\nwhile (i<n) {\n    i++;\n    k++;\n  }\n  {;\n//@ assert(k>=n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 16: \\old undefined in this context. Ignoring loop annotation",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==0)) return 0;\n  /*@\nloop invariant i1: i >= 0 && k >= 0 && n >= 0;\nloop invariant i2: i <= n;\nloop invariant i3: k == i;\nloop invariant i4: i == \\old(i) + 1;\nloop invariant i5: k == \\old(k) + 1;\nloop invariant i6: (i==0 && k==0) ==> n >= 0;\nloop invariant i7: k >= n ==> i >= n;\nloop invariant i8: i>=0 && k>=0;\nloop invariant i9: 0 <= i;\nloop invariant i10: 0 <= k;\n*/\nwhile (i<n) {\n    i++;\n    k++;\n  }\n  {;\n//@ assert(k>=n);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 6,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==0)) return 0;\n  /*@\n\n\nloop invariant i3: k == i;\n\n\n\nloop invariant i7: k >= n ==> i >= n;\nloop invariant i8: i>=0 && k>=0;\nloop invariant i9: 0 <= i;\nloop invariant i10: 0 <= k;\n*/\nwhile (i<n) {\n    i++;\n    k++;\n  }\n  {;\n//@ assert(k>=n);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/const.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq1.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq2.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/afnp2014.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/css2003.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007b.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gsv2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/hhk2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_2.c",
            "../data/benchmarks/sv-benchmarks/loop-new/gauss_sum.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark10_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark11_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark13_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark14_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark15_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark16_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark17_conjunctive.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../data/benchmarks/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/even.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/mod4.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/odd.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/id_trans.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/bhmr2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/ddlm2013.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gcnr2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gr2006.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_k.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_nondet.c",
            "../data/benchmarks/sv-benchmarks/loop-new/half.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark07_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark12_linear.c"
        ],
        "skipped": [],
        "total": 324,
        "success_count": 159,
        "failure_count": 165,
        "success_rate": 0.49074074074074076
    }
}