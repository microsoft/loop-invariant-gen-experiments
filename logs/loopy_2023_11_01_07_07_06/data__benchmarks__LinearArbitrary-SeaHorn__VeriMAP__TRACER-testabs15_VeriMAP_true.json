{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i, a, b;\n  int TRACER_NONDET;\n\n  if(n >=0){\n\n    i=0; a=0; b=0;\n\n    while (i < n){\n      if (TRACER_NONDET){\n a=a+1;\n b=b+2;\n      }\n      else{\n a=a+2;\n b=b+1;\n      }\n      i++;\n    }\n    {;\n//@ assert(!( a+b != 3*n ));\n}\n\n  }\n}",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i, a, b;\n  int TRACER_NONDET;\n\n  if(n >=0){\n\n    i=0; a=0; b=0;\n\n    while (i < n){\n      if (TRACER_NONDET){\n a=a+1;\n b=b+2;\n      }\n      else{\n a=a+2;\n b=b+1;\n      }\n      i++;\n    }\n    {;\n//@ assert(!( a+b != 3*n ));\n}\n\n  }\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- The input parameter `n` must be non-negative.\n\nVariable assignments:\n- `i`, `a`, and `b` are initialized to 0.\n\nLoop condition:\n- The loop iterates as long as the value of `i` is less than `n`.\n\nLoop invariants:\n- Before the loop execution: None required.\n- In every iteration of the loop: \n    - `0 <= i <= n`\n    - `0 <= a <= 2*i`\n    - `0 <= b <= 2*i`\n    - `a+b = 3*k`, where `k` is the number of iterations completed so far.\n    - `(i%2==0 && a=2*k) || (i%2==1 && a=k)`\n    - `(i%2==0 && b=k) || (i%2==1 && b=2*k)`\n- After the loop termination: \n    - `i = n`\n    - `a+b = 3*n`\n\nExplanation:\n- Before the loop execution, there are no loop invariants required, as the variables are all initialized to 0.\n- In every iteration of the loop, we need to maintain the bounds on `i`, `a`, and `b`. Since `a` and `b` are incremented by either 1 or 2 in each iteration depending on the value of `TRACER_NONDET`, we can bound them by `2*i` to ensure that they do not exceed their maximum possible value. We also need to maintain the relationship between `a` and `b`, which must add up to `3*k`, where `k` is the number of iterations completed so far. Finally, we can use the parity of `i` to determine the relationship between `a` and `b` in each iteration.\n- After the loop termination, we know that `i` must be equal to `n`, and that `a` and `b` must add up to `3*n`, which is the post-condition of the program.\n\nNote:\n- Since `TRACER_NONDET` is non-deterministic, we cannot make any assumptions about its value. Therefore, we do not need to include it in the loop invariants.",
            "Pre-conditions:\n- The program takes an integer input `n`.\n- The macro `assume` takes in a Boolean expression `e` and returns 0 if the expression is false.\n\nVariable Assignments:\n- `i` is initialized to 0.\n- `a` is initialized to 0.\n- `b` is initialized to 0.\n- `TRACER_NONDET` is a non-deterministic integer variable.\n\nLoop Condition:\n- The loop continues as long as `i` is less than `n`.\n\nLoop Invariants:\n- At the beginning of the loop execution:\n    - `0 <= i <= n`\n    - `0 <= a`\n    - `0 <= b`\n- In every iteration of the loop:\n    - `(i < n) ==> (0 <= i+1 <= n)`\n    - If `TRACER_NONDET` is 1:\n        - `a+1 <= a+2`\n        - `b+2 <= b+3`\n    - If `TRACER_NONDET` is 0:\n        - `a+2 <= a+3`\n        - `b+1 <= b+2`\n- After the loop termination:\n    - `i >= n`\n    - `a+b == 3*n`\n\nPutting it all together, we get:\n\n```\n/*@\n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= a;\n    loop invariant 0 <= b;\n    loop invariant (i < n) ==> (0 <= i+1 <= n);\n    loop invariant (i < n && TRACER_NONDET == 1) ==> (a+1 <= a+2);\n    loop invariant (i < n && TRACER_NONDET == 1) ==> (b+2 <= b+3);\n    loop invariant (i < n && TRACER_NONDET == 0) ==> (a+2 <= a+3);\n    loop invariant (i < n && TRACER_NONDET == 0) ==> (b+1 <= b+2);\n    loop invariant i >= n ==> (a+b == 3*n);\n*/\n``` \n\nNote that we used implication to handle the conditional nature of the code. We also added conjunctions to bound the maximum and minimum values of the variables and to relate the variables to each other. Finally, we used an implication to make the loop invariant trivially true at the end of the loop.",
            "Step 1: Pre-conditions or variable assignments in the program:\n- The function `main` takes an integer input `n`.\n- There is a macro `assume(e)` which returns 0 if the expression `e` is false.\n- There is a function `errorFn` which has an infinite loop.\n- There are four integer variables `i`, `a`, `b`, and `TRACER_NONDET`.\n\nStep 2: Loop condition:\n- The while loop executes while `i < n`.\n\nStep 3: Loop invariants:\n- Before loop execution:\n```\n//@ assert n >= 0;\n//@ assert a == 0;\n//@ assert b == 0;\n//@ assert i == 0;\n```\n- In every iteration of the loop:\n```\n//@ assert i >= 0 && i <= n;\n//@ assert a >= 0;\n//@ assert b >= 0;\n//@ assert a+b == 2*(i-1) + TRACER_NONDET;\n```\n- After loop termination:\n```\n//@ assert i == n;\n//@ assert a+b == 3*n;\n```\nExplanation:\n- Before loop execution:\n    - `n` must be non-negative.\n    - All other variables are initialized to 0.\n- In every iteration of the loop:\n    - `i` is always non-negative and does not exceed `n`.\n    - `a` and `b` are non-negative.\n    - `a+b` is always equal to `2*(i-1)` plus either 1 or 2, depending on the value of `TRACER_NONDET`.\n- After loop termination:\n    - `i` must be equal to `n`.\n    - `a+b` must be equal to `3*n`.\n    \nNote:\n- Since `TRACER_NONDET` is non-deterministic, we cannot determine its exact value. However, we know that it is either 0 or 1. Therefore, the loop invariant for `a+b` includes `TRACER_NONDET` in the form of an implication.",
            "Pre-conditions:\n- The input parameter `n` is an integer.\n\nVariable assignments:\n- `i` is initialized to 0.\n- `a` is initialized to 0.\n- `b` is initialized to 0.\n\nLoop condition:\n- The loop continues while `i` is less than `n`.\n\nPost-condition:\n- The sum of `a` and `b` should be equal to 3 times `n`.\n\nLoop invariants:\n- Before the loop execution:\n```\n//@ assert n >= 0;\n//@ assert i == 0;\n//@ assert a == 0;\n//@ assert b == 0;\n```\n\n- In every iteration of the loop:\n```\n//@ assert 0 <= i <= n;\n//@ assert a + b == 2 * i || a + b == 2 * i + 1;\n```\nExplanation: Since `a` and `b` are updated in each iteration, we need to keep track of their sum. If `TRACER_NONDET` is true, then `a` is incremented by 1 and `b` is incremented by 2. If `TRACER_NONDET` is false, then `a` is incremented by 2 and `b` is incremented by 1. Therefore, the sum of `a` and `b` is either 2 times `i` or 2 times `i` plus 1.\n\n- After the loop termination:\n```\n//@ assert a + b == 3 * n ==> (i == n);\n```\nExplanation: If the loop terminates, then `i` must be equal to `n`. Otherwise, the loop condition would still hold and the loop would continue. Also, since the sum of `a` and `b` should be equal to 3 times `n`, we use implication to make sure that this condition holds if the loop terminates.\n\n- Combining all loop invariants together:\n```\n/*@ \n    loop invariant n >= 0;\n    loop invariant i >= 0 && i <= n;\n    loop invariant a + b == 2 * i || a + b == 2 * i + 1;\n    loop invariant (a + b == 3 * n) ==> (i == n);\n*/\n```",
            "Pre-conditions:\n- `n` is an integer input to the program.\n\nVariable Assignments:\n- `i` is initialized to 0.\n- `a` is initialized to 0.\n- `b` is initialized to 0.\n\nLoop condition:\n- `i < n`\n\nLoop invariants:\n- `0 <= i <= n`\n- `0 <= a <= 2*i`\n- `0 <= b <= 2*i`\n- `(a+b) == (2*i) ==> (a+b) == 2*i`\n- `(a+b) != (2*i) ==> (a+b) == 2*i + 1`\n\nExplanation:\n- The first loop invariant states that `i` is always between 0 and `n`.\n- The second and third loop invariants state that `a` and `b` are always between 0 and `2*i`.\n- The fourth loop invariant states that if the sum of `a` and `b` is even (`2*i`), then their sum is equal to `2*i`. This is because the code either adds 1 to `a` and 2 to `b`, or 2 to `a` and 1 to `b` on each iteration. This implies that the sum of `a` and `b` will always be even. If it is even, then it is equal to `2*i`.\n- The fifth loop invariant states that if the sum of `a` and `b` is odd (`2*i + 1`), then their sum is equal to `2*i + 1`. This is the case when the loop condition is false and the program exits the loop. Since `i` is incremented by 1 on each iteration, the sum of `a` and `b` will be equal to `2*i + 1` when the loop terminates.\n\nPost-condition:\n- `a+b == 3*n`\n\nFinally, the loop invariants and post-condition can be combined in the following code block:\n```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= a <= 2*i;\n    loop invariant 0 <= b <= 2*i;\n    loop invariant (a+b) == (2*i) ==> (a+b) == 2*i;\n    loop invariant (a+b) != (2*i) ==> (a+b) == 2*i + 1;\n    loop variant n-i;\n*/\nwhile (i < n){\n    if (TRACER_NONDET){\n        a=a+1;\n        b=b+2;\n    }\n    else{\n        a=a+2;\n        b=b+1;\n    }\n    i++;\n}\nassume(a+b == 3*n);\n```"
        ],
        "annotation_blocks": [
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The input parameter `n` must be non-negative.\n\nVariable assignments:\n- `i`, `a`, and `b` are initialized to 0.\n\nLoop condition:\n- The loop iterates as long as the value of `i` is less than `n`.\n\nLoop invariants:\n- Before the loop execution: None required.\n- In every iteration of the loop: \n    - `0 <= i <= n`\n    - `0 <= a <= 2*i`\n    - `0 <= b <= 2*i`\n    - `a+b = 3*k`, where `k` is the number of iterations completed so far.\n    - `(i%2==0 && a=2*k) || (i%2==1 && a=k)`\n    - `(i%2==0 && b=k) || (i%2==1 && b=2*k)`\n- After the loop termination: \n    - `i = n`\n    - `a+b = 3*n`\n\nExplanation:\n- Before the loop execution, there are no loop invariants required, as the variables are all initialized to 0.\n- In every iteration of the loop, we need to maintain the bounds on `i`, `a`, and `b`. Since `a` and `b` are incremented by either 1 or 2 in each iteration depending on the value of `TRACER_NONDET`, we can bound them by `2*i` to ensure that they do not exceed their maximum possible value. We also need to maintain the relationship between `a` and `b`, which must add up to `3*k`, where `k` is the number of iterations completed so far. Finally, we can use the parity of `i` to determine the relationship between `a` and `b` in each iteration.\n- After the loop termination, we know that `i` must be equal to `n`, and that `a` and `b` must add up to `3*n`, which is the post-condition of the program.\n\nNote:\n- Since `TRACER_NONDET` is non-deterministic, we cannot make any assumptions about its value. Therefore, we do not need to include it in the loop invariants."
            ],
            "/*@\n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= a;\n    loop invariant 0 <= b;\n    loop invariant (i < n) ==> (0 <= i+1 <= n);\n    loop invariant (i < n && TRACER_NONDET == 1) ==> (a+1 <= a+2);\n    loop invariant (i < n && TRACER_NONDET == 1) ==> (b+2 <= b+3);\n    loop invariant (i < n && TRACER_NONDET == 0) ==> (a+2 <= a+3);\n    loop invariant (i < n && TRACER_NONDET == 0) ==> (b+1 <= b+2);\n    loop invariant i >= n ==> (a+b == 3*n);\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Step 1: Pre-conditions or variable assignments in the program:\n- The function `main` takes an integer input `n`.\n- There is a macro `assume(e)` which returns 0 if the expression `e` is false.\n- There is a function `errorFn` which has an infinite loop.\n- There are four integer variables `i`, `a`, `b`, and `TRACER_NONDET`.\n\nStep 2: Loop condition:\n- The while loop executes while `i < n`.\n\nStep 3: Loop invariants:\n- Before loop execution:\n```\n//@ assert n >= 0;\n//@ assert a == 0;\n//@ assert b == 0;\n//@ assert i == 0;\n```\n- In every iteration of the loop:\n```\n//@ assert i >= 0 && i <= n;\n//@ assert a >= 0;\n//@ assert b >= 0;\n//@ assert a+b == 2*(i-1) + TRACER_NONDET;\n```\n- After loop termination:\n```\n//@ assert i == n;\n//@ assert a+b == 3*n;\n```\nExplanation:\n- Before loop execution:\n    - `n` must be non-negative.\n    - All other variables are initialized to 0.\n- In every iteration of the loop:\n    - `i` is always non-negative and does not exceed `n`.\n    - `a` and `b` are non-negative.\n    - `a+b` is always equal to `2*(i-1)` plus either 1 or 2, depending on the value of `TRACER_NONDET`.\n- After loop termination:\n    - `i` must be equal to `n`.\n    - `a+b` must be equal to `3*n`.\n    \nNote:\n- Since `TRACER_NONDET` is non-deterministic, we cannot determine its exact value. However, we know that it is either 0 or 1. Therefore, the loop invariant for `a+b` includes `TRACER_NONDET` in the form of an implication."
            ],
            "/*@ \n    loop invariant n >= 0;\n    loop invariant i >= 0 && i <= n;\n    loop invariant a + b == 2 * i || a + b == 2 * i + 1;\n    loop invariant (a + b == 3 * n) ==> (i == n);\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= a <= 2*i;\n    loop invariant 0 <= b <= 2*i;\n    loop invariant (a+b) == (2*i) ==> (a+b) == 2*i;\n    loop invariant (a+b) != (2*i) ==> (a+b) == 2*i + 1;\n    loop variant n-i;\n*/\nwhile (i < n){\n    if (TRACER_NONDET){\n        a=a+1;\n        b=b+2;\n    }\n    else{\n        a=a+2;\n        b=b+1;\n    }\n    i++;\n}\nassume(a+b == 3*n);"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The input parameter `n` must be non-negative.\n\nVariable assignments:\n- `i`, `a`, and `b` are initialized to 0.\n\nLoop condition:\n- The loop iterates as long as the value of `i` is less than `n`.\n\nLoop invariants:\n- Before the loop execution: None required.\n- In every iteration of the loop: \n    - `0 <= i <= n`\n    - `0 <= a <= 2*i`\n    - `0 <= b <= 2*i`\n    - `a+b = 3*k`, where `k` is the number of iterations completed so far.\n    - `(i%2==0 && a=2*k) || (i%2==1 && a=k)`\n    - `(i%2==0 && b=k) || (i%2==1 && b=2*k)`\n- After the loop termination: \n    - `i = n`\n    - `a+b = 3*n`\n\nExplanation:\n- Before the loop execution, there are no loop invariants required, as the variables are all initialized to 0.\n- In every iteration of the loop, we need to maintain the bounds on `i`, `a`, and `b`. Since `a` and `b` are incremented by either 1 or 2 in each iteration depending on the value of `TRACER_NONDET`, we can bound them by `2*i` to ensure that they do not exceed their maximum possible value. We also need to maintain the relationship between `a` and `b`, which must add up to `3*k`, where `k` is the number of iterations completed so far. Finally, we can use the parity of `i` to determine the relationship between `a` and `b` in each iteration.\n- After the loop termination, we know that `i` must be equal to `n`, and that `a` and `b` must add up to `3*n`, which is the post-condition of the program.\n\nNote:\n- Since `TRACER_NONDET` is non-deterministic, we cannot make any assumptions about its value. Therefore, we do not need to include it in the loop invariants.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@\n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= a;\n    loop invariant 0 <= b;\n    loop invariant (i < n) ==> (0 <= i+1 <= n);\n    loop invariant (i < n && TRACER_NONDET == 1) ==> (a+1 <= a+2);\n    loop invariant (i < n && TRACER_NONDET == 1) ==> (b+2 <= b+3);\n    loop invariant (i < n && TRACER_NONDET == 0) ==> (a+2 <= a+3);\n    loop invariant (i < n && TRACER_NONDET == 0) ==> (b+1 <= b+2);\n    loop invariant i >= n ==> (a+b == 3*n);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is partially proven to be inductive.\nloop invariant 0 <= a is partially proven to be inductive.\nloop invariant 0 <= b is partially proven to be inductive.\nloop invariant (i < n) ==> (0 <= i+1 <= n) is partially proven to be inductive.\nloop invariant (i < n && TRACER_NONDET == 1) ==> (a+1 <= a+2) is partially proven to be inductive.\nloop invariant (i < n && TRACER_NONDET == 1) ==> (b+2 <= b+3) is partially proven to be inductive.\nloop invariant (i < n && TRACER_NONDET == 0) ==> (a+2 <= a+3) is partially proven to be inductive.\nloop invariant (i < n && TRACER_NONDET == 0) ==> (b+1 <= b+2) is partially proven to be inductive.\nloop invariant i >= n ==> (a+b == 3*n) is established but not preserved.\nAssertion !(a + b != 3 * n): Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i, a, b;\n  int TRACER_NONDET;\n\n  if(n >=0){\n\n    i=0; a=0; b=0;\n\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a;\nloop invariant i3: 0 <= b;\nloop invariant i4: (i < n) ==> (0 <= i+1 <= n);\nloop invariant i5: (i < n && TRACER_NONDET == 1) ==> (a+1 <= a+2);\nloop invariant i6: (i < n && TRACER_NONDET == 1) ==> (b+2 <= b+3);\nloop invariant i7: (i < n && TRACER_NONDET == 0) ==> (a+2 <= a+3);\nloop invariant i8: (i < n && TRACER_NONDET == 0) ==> (b+1 <= b+2);\n\n*/\nwhile (i < n){\n      if (TRACER_NONDET){\n a=a+1;\n b=b+2;\n      }\n      else{\n a=a+2;\n b=b+1;\n      }\n      i++;\n    }\n    {;\n//@ assert(!( a+b != 3*n ));\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Step 1: Pre-conditions or variable assignments in the program:\n- The function `main` takes an integer input `n`.\n- There is a macro `assume(e)` which returns 0 if the expression `e` is false.\n- There is a function `errorFn` which has an infinite loop.\n- There are four integer variables `i`, `a`, `b`, and `TRACER_NONDET`.\n\nStep 2: Loop condition:\n- The while loop executes while `i < n`.\n\nStep 3: Loop invariants:\n- Before loop execution:\n```\n//@ assert n >= 0;\n//@ assert a == 0;\n//@ assert b == 0;\n//@ assert i == 0;\n```\n- In every iteration of the loop:\n```\n//@ assert i >= 0 && i <= n;\n//@ assert a >= 0;\n//@ assert b >= 0;\n//@ assert a+b == 2*(i-1) + TRACER_NONDET;\n```\n- After loop termination:\n```\n//@ assert i == n;\n//@ assert a+b == 3*n;\n```\nExplanation:\n- Before loop execution:\n    - `n` must be non-negative.\n    - All other variables are initialized to 0.\n- In every iteration of the loop:\n    - `i` is always non-negative and does not exceed `n`.\n    - `a` and `b` are non-negative.\n    - `a+b` is always equal to `2*(i-1)` plus either 1 or 2, depending on the value of `TRACER_NONDET`.\n- After loop termination:\n    - `i` must be equal to `n`.\n    - `a+b` must be equal to `3*n`.\n    \nNote:\n- Since `TRACER_NONDET` is non-deterministic, we cannot determine its exact value. However, we know that it is either 0 or 1. Therefore, the loop invariant for `a+b` includes `TRACER_NONDET` in the form of an implication.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant n >= 0;\n    loop invariant i >= 0 && i <= n;\n    loop invariant a + b == 2 * i || a + b == 2 * i + 1;\n    loop invariant (a + b == 3 * n) ==> (i == n);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant n >= 0 is partially proven to be inductive.\nloop invariant i >= 0 && i <= n is partially proven to be inductive.\nloop invariant a + b == 2 * i || a + b == 2 * i + 1 is established but not preserved.\nloop invariant (a + b == 3 * n) ==> (i == n) is partially proven to be inductive.\nAssertion !(a + b != 3 * n): Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i, a, b;\n  int TRACER_NONDET;\n\n  if(n >=0){\n\n    i=0; a=0; b=0;\n\n    /*@\nloop invariant i1: n >= 0;\nloop invariant i2: i >= 0 && i <= n;\n\n\n*/\nwhile (i < n){\n      if (TRACER_NONDET){\n a=a+1;\n b=b+2;\n      }\n      else{\n a=a+2;\n b=b+1;\n      }\n      i++;\n    }\n    {;\n//@ assert(!( a+b != 3*n ));\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= a <= 2*i;\n    loop invariant 0 <= b <= 2*i;\n    loop invariant (a+b) == (2*i) ==> (a+b) == 2*i;\n    loop invariant (a+b) != (2*i) ==> (a+b) == 2*i + 1;\n    loop variant n-i;\n*/\nwhile (i < n){\n    if (TRACER_NONDET){\n        a=a+1;\n        b=b+2;\n    }\n    else{\n        a=a+2;\n        b=b+1;\n    }\n    i++;\n}\nassume(a+b == 3*n);",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is partially proven to be inductive.\nloop invariant 0 <= a <= 2*i is partially proven to be inductive.\nloop invariant 0 <= b <= 2*i is partially proven to be inductive.\nloop invariant (a+b) == (2*i) ==> (a+b) == 2*i is partially proven to be inductive.\nloop invariant (a+b) != (2*i) ==> (a+b) == 2*i + 1 is established but not preserved.\nAssertion !(a + b != 3 * n): Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i, a, b;\n  int TRACER_NONDET;\n\n  if(n >=0){\n\n    i=0; a=0; b=0;\n\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a <= 2*i;\nloop invariant i3: 0 <= b <= 2*i;\nloop invariant i4: (a+b) == (2*i) ==> (a+b) == 2*i;\n\n*/\nwhile (i < n){\n      if (TRACER_NONDET){\n a=a+1;\n b=b+2;\n      }\n      else{\n a=a+2;\n b=b+1;\n      }\n      i++;\n    }\n    {;\n//@ assert(!( a+b != 3*n ));\n}\n\n  }\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= i <= n is partially proven to be inductive.\nloop invariant 0 <= a is partially proven to be inductive.\nloop invariant 0 <= b is partially proven to be inductive.\nloop invariant (i < n) ==> (0 <= i+1 <= n) is partially proven to be inductive.\nloop invariant (i < n && TRACER_NONDET == 1) ==> (a+1 <= a+2) is partially proven to be inductive.\nloop invariant (i < n && TRACER_NONDET == 1) ==> (b+2 <= b+3) is partially proven to be inductive.\nloop invariant (i < n && TRACER_NONDET == 0) ==> (a+2 <= a+3) is partially proven to be inductive.\nloop invariant (i < n && TRACER_NONDET == 0) ==> (b+1 <= b+2) is partially proven to be inductive.\nloop invariant i >= n ==> (a+b == 3*n) is established but not preserved.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant i >= 0 && i <= n is partially proven to be inductive.\nloop invariant a + b == 2 * i || a + b == 2 * i + 1 is established but not preserved.\nloop invariant (a + b == 3 * n) ==> (i == n) is partially proven to be inductive.\nloop invariant 0 <= a <= 2*i is partially proven to be inductive.\nloop invariant 0 <= b <= 2*i is partially proven to be inductive.\nloop invariant (a+b) == (2*i) ==> (a+b) == 2*i is partially proven to be inductive.\nloop invariant (a+b) != (2*i) ==> (a+b) == 2*i + 1 is partially proven to be inductive.\nAssertion !(a + b != 3 * n): Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i, a, b;\n  int TRACER_NONDET;\n\n  if(n >=0){\n\n    i=0; a=0; b=0;\n\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a;\nloop invariant i3: 0 <= b;\nloop invariant i4: (i < n) ==> (0 <= i+1 <= n);\nloop invariant i5: (i < n && TRACER_NONDET == 1) ==> (a+1 <= a+2);\nloop invariant i6: (i < n && TRACER_NONDET == 1) ==> (b+2 <= b+3);\nloop invariant i7: (i < n && TRACER_NONDET == 0) ==> (a+2 <= a+3);\nloop invariant i8: (i < n && TRACER_NONDET == 0) ==> (b+1 <= b+2);\nloop invariant i9: i >= n ==> (a+b == 3*n);\nloop invariant i10: n >= 0;\nloop invariant i11: i >= 0 && i <= n;\nloop invariant i12: a + b == 2 * i || a + b == 2 * i + 1;\nloop invariant i13: (a + b == 3 * n) ==> (i == n);\nloop invariant i14: 0 <= a <= 2*i;\nloop invariant i15: 0 <= b <= 2*i;\nloop invariant i16: (a+b) == (2*i) ==> (a+b) == 2*i;\nloop invariant i17: (a+b) != (2*i) ==> (a+b) == 2*i + 1;\n*/\nwhile (i < n){\n      if (TRACER_NONDET){\n a=a+1;\n b=b+2;\n      }\n      else{\n a=a+2;\n b=b+1;\n      }\n      i++;\n    }\n    {;\n//@ assert(!( a+b != 3*n ));\n}\n\n  }\n}",
        "combined_annotation_num_solver_calls": 5,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i, a, b;\n  int TRACER_NONDET;\n\n  if(n >=0){\n\n    i=0; a=0; b=0;\n\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a;\nloop invariant i3: 0 <= b;\nloop invariant i4: (i < n) ==> (0 <= i+1 <= n);\nloop invariant i5: (i < n && TRACER_NONDET == 1) ==> (a+1 <= a+2);\nloop invariant i6: (i < n && TRACER_NONDET == 1) ==> (b+2 <= b+3);\nloop invariant i7: (i < n && TRACER_NONDET == 0) ==> (a+2 <= a+3);\nloop invariant i8: (i < n && TRACER_NONDET == 0) ==> (b+1 <= b+2);\n\nloop invariant i10: n >= 0;\nloop invariant i11: i >= 0 && i <= n;\n\n\nloop invariant i14: 0 <= a <= 2*i;\nloop invariant i15: 0 <= b <= 2*i;\nloop invariant i16: (a+b) == (2*i) ==> (a+b) == 2*i;\n\n*/\nwhile (i < n){\n      if (TRACER_NONDET){\n a=a+1;\n b=b+2;\n      }\n      else{\n a=a+2;\n b=b+1;\n      }\n      i++;\n    }\n    {;\n//@ assert(!( a+b != 3*n ));\n}\n\n  }\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c"
        ],
        "skipped": [],
        "total": 229,
        "success_count": 107,
        "failure_count": 122,
        "success_rate": 0.4672489082969432
    }
}