{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loops-crafted-1/sumt6.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v2=0, v3=0, v4=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  while( l < n ) {\n\t\n\t  if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k+v4+v3+v2) == l);\n}\n\n  return 0;\n}\n",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v2=0, v3=0, v4=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  while( l < n ) {\n\t\n\t  if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k+v4+v3+v2) == l);\n}\n\n  return 0;\n}\n\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- The macro `assume(e)` checks if the condition `e` is true. If it is not true, the program returns 0.\n- The function `unknown_int()` returns an unknown integer value.\n- The global variable `SIZE` is initialized to 20000001.\n\nVariable Assignments:\n- `n` is initialized to the value returned by `unknown_int()`.\n- `i`, `j`, `k`, `l`, `v2`, `v3`, and `v4` are initialized to 0.\n\nLoop Condition:\n- The loop continues while `l < n`.\n\nLoop Invariants:\n- `0 <= i <= l`\n- `0 <= j <= l`\n- `0 <= k <= l`\n- `0 <= v2 <= l/6`\n- `0 <= v3 <= l/5`\n- `0 <= v4 <= l/4`\n- `0 <= l <= n`\n- `(l%6==0 ==> v2+1 <= l/6+1) && (l%6!=0 ==> v2 <= l/6)`\n- `(l%5==0 ==> v3+1 <= l/5+1) && (l%5!=0 ==> v3 <= l/5)`\n- `(l%4==0 ==> v4+1 <= l/4+1) && (l%4!=0 ==> v4 <= l/4)`\n- `(l%3==0 ==> i+1 <= l/3+1) && (l%3!=0 ==> i <= l/3)`\n- `(l%2==0 ==> j+1 <= l/2+1) && (l%2!=0 ==> j <= l/2)`\n- `((i+j+k+v4+v3+v2) == l) ==> (n >= SIZE) || (l >= n)`\n\nExplanation:\n\n- The loop invariants for `i`, `j`, `k`, `v2`, `v3`, and `v4` are straightforward. They ensure that these variables do not exceed `l` and that they are non-negative.\n- The loop invariant for `l` ensures that `l` does not exceed `n` and that it is non-negative.\n- The loop invariants for `v2`, `v3`, and `v4` ensure that the values of these variables are updated correctly inside the loop. For example, if `l` is a multiple of 6, then `v2` should be incremented by 1.\n- The loop invariants for `i` and `j` ensure that the values of these variables are updated correctly inside the loop.\n- The last loop invariant ensures that the sum of all the variables in the loop is equal to `l`. The implication at the end takes into account the pre-condition that `n` should not exceed `SIZE`. If `n` is greater than `SIZE`, the assertion is trivially true. If `n` is less than `SIZE`, then `l` will eventually become equal to `n`, and the assertion will hold.",
            "**Step 1: Pre-conditions and variable assignments**\n\nThe program declares and initializes variables `n`, `i`, `k`, `j`, `l`, `v2`, `v3`, and `v4`. It also defines a macro `assume` and an external function `unknown_int`. The value of `n` is obtained by calling the `unknown_int` function. The program then checks if `n` is less than or equal to `SIZE` and enters a while loop.\n\n**Step 2: Loop condition**\n\nThe loop condition is `l < n`.\n\n**Step 3: Loop invariants**\n\nWe need to find loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition.\n\nBefore the loop execution, we can state that all the counters are initialized to zero and that `n` is less than or equal to `SIZE`:\n```\n/*@ \n    loop invariant i == 0;\n    loop invariant j == 0;\n    loop invariant k == 0;\n    loop invariant v2 == 0;\n    loop invariant v3 == 0;\n    loop invariant v4 == 0;\n    loop invariant n <= SIZE;\n*/\n```\n\nIn every iteration of the loop, we can state that all the counters are either incremented or remain the same:\n```\n/*@ \n    loop invariant (i+j+k+v4+v3+v2) == l;\n    loop invariant (l%6 == 0 ==> v2 == \\at(v2, Pre) + 1);\n    loop invariant (l%6 != 0 && l%5 == 0 ==> v3 == \\at(v3, Pre) + 1);\n    loop invariant (l%6 != 0 && l%5 != 0 && l%4 == 0 ==> v4 == \\at(v4, Pre) + 1);\n    loop invariant (l%6 != 0 && l%5 != 0 && l%4 != 0 && l%3 == 0 ==> i == \\at(i, Pre) + 1);\n    loop invariant (l%6 != 0 && l%5 != 0 && l%4 != 0 && l%3 != 0 && l%2 == 0 ==> j == \\at(j, Pre) + 1);\n    loop invariant (l%6 != 0 && l%5 != 0 && l%4 != 0 && l%3 != 0 && l%2 != 0 ==> k == \\at(k, Pre) + 1);\n*/\n```\nNote that we are using implication to take care of the conditional nature of the code. For example, if `l` is not divisible by 6, then `v2` remains the same. \n\nAfter the loop termination, we can state that the sum of all the counters is equal to `n`:\n```\n/*@ \n    loop invariant (i+j+k+v4+v3+v2) == l;\n    loop invariant l >= n;\n    loop invariant (l%6 == 0 ==> v2 == \\at(v2, Pre) + (n-l)/6);\n    loop invariant (l%6 != 0 && l%5 == 0 ==> v3 == \\at(v3, Pre) + (n-l)/5);\n    loop invariant (l%6 != 0 && l%5 != 0 && l%4 == 0 ==> v4 == \\at(v4, Pre) + (n-l)/4);\n    loop invariant (l%6 != 0 && l%5 != 0 && l%4 != 0 && l%3 == 0 ==> i == \\at(i, Pre) + (n-l)/3);\n    loop invariant (l%6 != 0 && l%5 != 0 && l%4 != 0 && l%3 != 0 && l%2 == 0 ==> j == \\at(j, Pre) + (n-l)/2);\n    loop invariant (l%6 != 0 && l%5 != 0 && l%4 != 0 && l%3 != 0 && l%2 != 0 ==> k == \\at(k, Pre) + (n-l));\n    //@ assert (i+j+k+v4+v3+v2) == n;\n*/\n```\n\nNote that if `l` is not divisible by 6, 5, 4, 3, or 2, then the corresponding counter remains the same. We can use this fact to compute the final value of the counters by adding the number of times each counter would have been incremented if the loop had continued until `n`. \n\nWe also use an implication to make the loop invariant trivial",
            "Pre-conditions: The program assumes the existence of an external function called `unknown_int()` which returns an integer value. The program also defines a macro `assume(e)` which returns 0 if the expression `e` is false.\n\nVariable assignments: \n- `SIZE` is assigned the value `20000001`. \n- `n`, `i`, `k`, `j`, `l`, `v2`, `v3`, and `v4` are all initialized to 0.\n\nLoop condition: The loop will continue as long as `l<n`.\n\nLoop invariants:\n- The value of `l` is always less than or equal to `n`. `0 <= l <= n`. (Before loop execution and in every iteration)\n- The sum of `i`, `j`, `k`, `v4`, `v3`, and `v2` is equal to `l`. `(i+j+k+v4+v3+v2) == l`. (Before loop execution, in every iteration, and after loop termination)\n\nNow, let's analyze the loop body:\n- If `l` is divisible by 6, then `v2` is incremented by 1.\n- Else, if `l` is divisible by 5, then `v3` is incremented by 1.\n- Else, if `l` is divisible by 4, then `v4` is incremented by 1.\n- Else, if `l` is divisible by 3, then `i` is incremented by 1.\n- Else, if `l` is divisible by 2, then `j` is incremented by 1.\n- Else, `k` is incremented by 1.\n\nSince all the variables are non-negative integers, we can add the following loop invariants:\n```\n/*@ \n    loop invariant 0 <= l <= n;\n    loop invariant i+j+k+v4+v3+v2 == l;\n*/\n```\nThese invariants hold before loop execution, in every iteration, and after loop termination. The invariants imply the post-condition, which is that the sum of `i`, `j`, `k`, `v4`, `v3`, and `v2` is equal to `l`. \n\nSince the program uses the `unknown_int()` function, we cannot make any assumptions about the value of `n`. Therefore, we cannot add any additional loop invariants about the value of `n`.",
            "First, let's analyze the loop body and make a note of the loop condition. The loop condition is `l < n`.\n\nNext, let's make a note of the pre-conditions or variable assignments in the program. The program assigns `n` a non-deterministic value, which is assumed to be less than or equal to `SIZE`. All other variables are initialized to 0.\n\nNow, let's find the necessary loop invariants. \n\nBefore the loop execution, we have:\n- `n <= SIZE` (pre-condition)\n- `i == 0`\n- `j == 0`\n- `k == 0`\n- `l == 0`\n- `v2 == 0`\n- `v3 == 0`\n- `v4 == 0`\n\nIn every iteration of the loop, we have:\n- `l < n`\n\nAfter the loop termination, we have:\n- `i+j+k+v4+v3+v2 == l`\n\nAdditionally, we can add the following loop invariants:\n- `v2 + v3 + v4 + i + j + k == l`\n- `0 <= i <= l`\n- `0 <= j <= l`\n- `0 <= k <= l`\n- `0 <= v2 <= l/6`\n- `0 <= v3 <= l/5`\n- `0 <= v4 <= l/4`\n\nNote that the bounds on `v2`, `v3`, and `v4` are derived from the conditions inside the loop. If `l` is a multiple of 6, then `v2` is incremented. Therefore, `v2` can be at most `l/6`. Similarly, `v3` can be at most `l/5` and `v4` can be at most `l/4`.\n\nLastly, we can use the guard condition of the assertion to add another loop invariant:\n- `(l >= n) ==> (i+j+k+v4+v3+v2 == l)`\n\nPutting all of these together, we get the following loop invariants:\n\n```\n/*@\n  loop invariant n <= SIZE;\n  loop invariant i == 0;\n  loop invariant j == 0;\n  loop invariant k == 0;\n  loop invariant l >= 0;\n  loop invariant l < n;\n  loop invariant v2 == 0;\n  loop invariant v3 == 0;\n  loop invariant v4 == 0;\n  loop invariant v2 + v3 + v4 + i + j + k == l;\n  loop invariant 0 <= i <= l;\n  loop invariant 0 <= j <= l;\n  loop invariant 0 <= k <= l;\n  loop invariant 0 <= v2 <= l/6;\n  loop invariant 0 <= v3 <= l/5;\n  loop invariant 0 <= v4 <= l/4;\n  loop invariant (l >= n) ==> (i+j+k+v4+v3+v2 == l);\n*/\n``` \n\nNote that we have used implication to handle the conditional nature of the assertion. We have also added conjunctions that bound the maximum and minimum values of the variables, where possible.",
            "Pre-conditions:\n- The macro `assume(e)` checks if the condition `e` is true. If it is false, the program returns 0. \n- The function `unknown_int()` returns an unknown integer value. \n- The variable `SIZE` is initialized to 20000001.\n\nVariable assignments:\n- `n`, `i`, `k`, `j`, `l`, `v2`, `v3`, `v4` are initialized to 0.\n\nLoop condition:\n- The loop continues as long as `l < n`.\n\nLoop invariants:\n- `0 <= l <= n`\n- `0 <= i, j, k, v2, v3, v4 <= n`\n- `v2 + v3 + v4 + i + j + k = l`\n- If `l` is divisible by 6, then `v2` is incremented by 1. Otherwise, `v2` remains unchanged. Thus, `v2` counts the number of multiples of 6 that are less than `l`. Therefore, `0 <= v2 <= n/6`.\n- If `l` is divisible by 5, but not by 6, then `v3` is incremented by 1. Otherwise, `v3` remains unchanged. Thus, `v3` counts the number of multiples of 5 that are less than `l`, but not multiples of 6. Therefore, `0 <= v3 <= n/5`.\n- If `l` is divisible by 4, but not by 5 or 6, then `v4` is incremented by 1. Otherwise, `v4` remains unchanged. Thus, `v4` counts the number of multiples of 4 that are less than `l`, but not multiples of 5 or 6. Therefore, `0 <= v4 <= n/4`.\n- If `l` is divisible by 3, but not by 4, 5 or 6, then `i` is incremented by 1. Otherwise, `i` remains unchanged. Thus, `i` counts the number of multiples of 3 that are less than `l`, but not multiples of 4, 5 or 6. Therefore, `0 <= i <= n/3`.\n- If `l` is divisible by 2, but not by 3, 4, 5 or 6, then `j` is incremented by 1. Otherwise, `j` remains unchanged. Thus, `j` counts the number of multiples of 2 that are less than `l`, but not multiples of 3, 4, 5 or 6. Therefore, `0 <= j <= n/2`.\n- If `l` is not divisible by 2, 3, 4, 5 or 6, then `k` is incremented by 1. Otherwise, `k` remains unchanged. Thus, `k` counts the number of integers that are less than `l` and not divisible by 2, 3, 4, 5 or 6. Therefore, `0 <= k <= n - v2 - v3 - v4 - i - j`.\n- The loop invariant `v2 + v3 + v4 + i + j + k = l` holds true before the loop execution, in every iteration of the loop, and after the loop termination.\n- The assertion `i+j+k+v4+v3+v2=l` holds true if the loop terminates. Thus, we can use the loop invariant `v2 + v3 + v4 + i + j + k = l` and the loop condition `l < n` to prove the assertion. \n\nTherefore, the loop invariants are:\n```\n/*@ \n  loop invariant 0 <= l <= n;\n  loop invariant 0 <= i <= n;\n  loop invariant 0 <= j <= n;\n  loop invariant 0 <= k <= n - v2 - v3 - v4 - i - j;\n  loop invariant 0 <= v2 <= n/6;\n  loop invariant 0 <= v3 <= n/5;\n  loop invariant 0 <= v4 <= n/4;\n  loop invariant v2 + v3 + v4 + i + j + k == l;\n  loop invariant (l < n ==> i+j+k+v4+v3+v2==l);\n*/\n```"
        ],
        "annotation_blocks": [
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The macro `assume(e)` checks if the condition `e` is true. If it is not true, the program returns 0.\n- The function `unknown_int()` returns an unknown integer value.\n- The global variable `SIZE` is initialized to 20000001.\n\nVariable Assignments:\n- `n` is initialized to the value returned by `unknown_int()`.\n- `i`, `j`, `k`, `l`, `v2`, `v3`, and `v4` are initialized to 0.\n\nLoop Condition:\n- The loop continues while `l < n`.\n\nLoop Invariants:\n- `0 <= i <= l`\n- `0 <= j <= l`\n- `0 <= k <= l`\n- `0 <= v2 <= l/6`\n- `0 <= v3 <= l/5`\n- `0 <= v4 <= l/4`\n- `0 <= l <= n`\n- `(l%6==0 ==> v2+1 <= l/6+1) && (l%6!=0 ==> v2 <= l/6)`\n- `(l%5==0 ==> v3+1 <= l/5+1) && (l%5!=0 ==> v3 <= l/5)`\n- `(l%4==0 ==> v4+1 <= l/4+1) && (l%4!=0 ==> v4 <= l/4)`\n- `(l%3==0 ==> i+1 <= l/3+1) && (l%3!=0 ==> i <= l/3)`\n- `(l%2==0 ==> j+1 <= l/2+1) && (l%2!=0 ==> j <= l/2)`\n- `((i+j+k+v4+v3+v2) == l) ==> (n >= SIZE) || (l >= n)`\n\nExplanation:\n\n- The loop invariants for `i`, `j`, `k`, `v2`, `v3`, and `v4` are straightforward. They ensure that these variables do not exceed `l` and that they are non-negative.\n- The loop invariant for `l` ensures that `l` does not exceed `n` and that it is non-negative.\n- The loop invariants for `v2`, `v3`, and `v4` ensure that the values of these variables are updated correctly inside the loop. For example, if `l` is a multiple of 6, then `v2` should be incremented by 1.\n- The loop invariants for `i` and `j` ensure that the values of these variables are updated correctly inside the loop.\n- The last loop invariant ensures that the sum of all the variables in the loop is equal to `l`. The implication at the end takes into account the pre-condition that `n` should not exceed `SIZE`. If `n` is greater than `SIZE`, the assertion is trivially true. If `n` is less than `SIZE`, then `l` will eventually become equal to `n`, and the assertion will hold."
            ],
            "/*@ \n    loop invariant i == 0;\n    loop invariant j == 0;\n    loop invariant k == 0;\n    loop invariant v2 == 0;\n    loop invariant v3 == 0;\n    loop invariant v4 == 0;\n    loop invariant n <= SIZE;\n*/",
            "/*@ \n    loop invariant 0 <= l <= n;\n    loop invariant i+j+k+v4+v3+v2 == l;\n*/",
            "/*@\n  loop invariant n <= SIZE;\n  loop invariant i == 0;\n  loop invariant j == 0;\n  loop invariant k == 0;\n  loop invariant l >= 0;\n  loop invariant l < n;\n  loop invariant v2 == 0;\n  loop invariant v3 == 0;\n  loop invariant v4 == 0;\n  loop invariant v2 + v3 + v4 + i + j + k == l;\n  loop invariant 0 <= i <= l;\n  loop invariant 0 <= j <= l;\n  loop invariant 0 <= k <= l;\n  loop invariant 0 <= v2 <= l/6;\n  loop invariant 0 <= v3 <= l/5;\n  loop invariant 0 <= v4 <= l/4;\n  loop invariant (l >= n) ==> (i+j+k+v4+v3+v2 == l);\n*/",
            "/*@ \n  loop invariant 0 <= l <= n;\n  loop invariant 0 <= i <= n;\n  loop invariant 0 <= j <= n;\n  loop invariant 0 <= k <= n - v2 - v3 - v4 - i - j;\n  loop invariant 0 <= v2 <= n/6;\n  loop invariant 0 <= v3 <= n/5;\n  loop invariant 0 <= v4 <= n/4;\n  loop invariant v2 + v3 + v4 + i + j + k == l;\n  loop invariant (l < n ==> i+j+k+v4+v3+v2==l);\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The macro `assume(e)` checks if the condition `e` is true. If it is not true, the program returns 0.\n- The function `unknown_int()` returns an unknown integer value.\n- The global variable `SIZE` is initialized to 20000001.\n\nVariable Assignments:\n- `n` is initialized to the value returned by `unknown_int()`.\n- `i`, `j`, `k`, `l`, `v2`, `v3`, and `v4` are initialized to 0.\n\nLoop Condition:\n- The loop continues while `l < n`.\n\nLoop Invariants:\n- `0 <= i <= l`\n- `0 <= j <= l`\n- `0 <= k <= l`\n- `0 <= v2 <= l/6`\n- `0 <= v3 <= l/5`\n- `0 <= v4 <= l/4`\n- `0 <= l <= n`\n- `(l%6==0 ==> v2+1 <= l/6+1) && (l%6!=0 ==> v2 <= l/6)`\n- `(l%5==0 ==> v3+1 <= l/5+1) && (l%5!=0 ==> v3 <= l/5)`\n- `(l%4==0 ==> v4+1 <= l/4+1) && (l%4!=0 ==> v4 <= l/4)`\n- `(l%3==0 ==> i+1 <= l/3+1) && (l%3!=0 ==> i <= l/3)`\n- `(l%2==0 ==> j+1 <= l/2+1) && (l%2!=0 ==> j <= l/2)`\n- `((i+j+k+v4+v3+v2) == l) ==> (n >= SIZE) || (l >= n)`\n\nExplanation:\n\n- The loop invariants for `i`, `j`, `k`, `v2`, `v3`, and `v4` are straightforward. They ensure that these variables do not exceed `l` and that they are non-negative.\n- The loop invariant for `l` ensures that `l` does not exceed `n` and that it is non-negative.\n- The loop invariants for `v2`, `v3`, and `v4` ensure that the values of these variables are updated correctly inside the loop. For example, if `l` is a multiple of 6, then `v2` should be incremented by 1.\n- The loop invariants for `i` and `j` ensure that the values of these variables are updated correctly inside the loop.\n- The last loop invariant ensures that the sum of all the variables in the loop is equal to `l`. The implication at the end takes into account the pre-condition that `n` should not exceed `SIZE`. If `n` is greater than `SIZE`, the assertion is trivially true. If `n` is less than `SIZE`, then `l` will eventually become equal to `n`, and the assertion will hold.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant i == 0;\n    loop invariant j == 0;\n    loop invariant k == 0;\n    loop invariant v2 == 0;\n    loop invariant v3 == 0;\n    loop invariant v4 == 0;\n    loop invariant n <= SIZE;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i == 0 is established but not preserved.\nloop invariant j == 0 is established but not preserved.\nloop invariant k == 0 is established but not preserved.\nloop invariant v2 == 0 is established but not preserved.\nloop invariant v3 == 0 is established but not preserved.\nloop invariant v4 == 0 is established but not preserved.\nloop invariant n <= SIZE is partially proven to be inductive.\nAssertion ((((i + j) + k) + v4) + v3) + v2 == l: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v2=0, v3=0, v4=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  /*@\n\n\n\n\n\n\nloop invariant i7: n <= SIZE;\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k+v4+v3+v2) == l);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant 0 <= l <= n;\n    loop invariant i+j+k+v4+v3+v2 == l;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant 0 <= l <= n is inductive.\nloop invariant i+j+k+v4+v3+v2 == l is inductive.\nAssertion ((((i + j) + k) + v4) + v3) + v2 == l: Valid"
            },
            {
                "num_solver_calls": 5,
                "annotations": "/*@\n  loop invariant n <= SIZE;\n  loop invariant i == 0;\n  loop invariant j == 0;\n  loop invariant k == 0;\n  loop invariant l >= 0;\n  loop invariant l < n;\n  loop invariant v2 == 0;\n  loop invariant v3 == 0;\n  loop invariant v4 == 0;\n  loop invariant v2 + v3 + v4 + i + j + k == l;\n  loop invariant 0 <= i <= l;\n  loop invariant 0 <= j <= l;\n  loop invariant 0 <= k <= l;\n  loop invariant 0 <= v2 <= l/6;\n  loop invariant 0 <= v3 <= l/5;\n  loop invariant 0 <= v4 <= l/4;\n  loop invariant (l >= n) ==> (i+j+k+v4+v3+v2 == l);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant n <= SIZE is partially proven to be inductive.\nloop invariant i == 0 is partially proven to be inductive.\nloop invariant j == 0 is partially proven to be inductive.\nloop invariant k == 0 is partially proven to be inductive.\nloop invariant l >= 0 is partially proven to be inductive.\nloop invariant l < n is neither established nor preserved.\nloop invariant v2 == 0 is established but not preserved.\nloop invariant v3 == 0 is partially proven to be inductive.\nloop invariant v4 == 0 is partially proven to be inductive.\nloop invariant v2 + v3 + v4 + i + j + k == l is partially proven to be inductive.\nloop invariant 0 <= i <= l is partially proven to be inductive.\nloop invariant 0 <= j <= l is partially proven to be inductive.\nloop invariant 0 <= k <= l is partially proven to be inductive.\nloop invariant 0 <= v2 <= l/6 is partially proven to be inductive.\nloop invariant 0 <= v3 <= l/5 is partially proven to be inductive.\nloop invariant 0 <= v4 <= l/4 is partially proven to be inductive.\nloop invariant (l >= n) ==> (i+j+k+v4+v3+v2 == l) is partially proven to be inductive.\nAssertion ((((i + j) + k) + v4) + v3) + v2 == l: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v2=0, v3=0, v4=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  /*@\nloop invariant i1: n <= SIZE;\n\n\n\nloop invariant i5: l >= 0;\n\n\n\n\nloop invariant i10: v2 + v3 + v4 + i + j + k == l;\nloop invariant i11: 0 <= i <= l;\nloop invariant i12: 0 <= j <= l;\nloop invariant i13: 0 <= k <= l;\n\n\n\nloop invariant i17: (l >= n) ==> (i+j+k+v4+v3+v2 == l);\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k+v4+v3+v2) == l);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n  loop invariant 0 <= l <= n;\n  loop invariant 0 <= i <= n;\n  loop invariant 0 <= j <= n;\n  loop invariant 0 <= k <= n - v2 - v3 - v4 - i - j;\n  loop invariant 0 <= v2 <= n/6;\n  loop invariant 0 <= v3 <= n/5;\n  loop invariant 0 <= v4 <= n/4;\n  loop invariant v2 + v3 + v4 + i + j + k == l;\n  loop invariant (l < n ==> i+j+k+v4+v3+v2==l);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= l <= n is partially proven to be inductive.\nloop invariant 0 <= i <= n is partially proven to be inductive.\nloop invariant 0 <= j <= n is partially proven to be inductive.\nloop invariant 0 <= k <= n - v2 - v3 - v4 - i - j is partially proven to be inductive.\nloop invariant 0 <= v2 <= n/6 is established but not preserved.\nloop invariant 0 <= v3 <= n/5 is established but not preserved.\nloop invariant 0 <= v4 <= n/4 is established but not preserved.\nloop invariant v2 + v3 + v4 + i + j + k == l is partially proven to be inductive.\nloop invariant (l < n ==> i+j+k+v4+v3+v2==l) is partially proven to be inductive.\nAssertion ((((i + j) + k) + v4) + v3) + v2 == l: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v2=0, v3=0, v4=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  /*@\nloop invariant i1: 0 <= l <= n;\nloop invariant i2: 0 <= i <= n;\nloop invariant i3: 0 <= j <= n;\nloop invariant i4: 0 <= k <= n - v2 - v3 - v4 - i - j;\n\n\n\nloop invariant i8: v2 + v3 + v4 + i + j + k == l;\nloop invariant i9: (l < n ==> i+j+k+v4+v3+v2==l);\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k+v4+v3+v2) == l);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant i == 0 is partially proven to be inductive.\nloop invariant j == 0 is partially proven to be inductive.\nloop invariant k == 0 is partially proven to be inductive.\nloop invariant v2 == 0 is established but not preserved.\nloop invariant v3 == 0 is partially proven to be inductive.\nloop invariant v4 == 0 is partially proven to be inductive.\nloop invariant n <= SIZE is partially proven to be inductive.\nloop invariant 0 <= l <= n is partially proven to be inductive.\nloop invariant i+j+k+v4+v3+v2 == l is partially proven to be inductive.\nloop invariant l >= 0 is partially proven to be inductive.\nloop invariant l < n is preserved but not established.\nloop invariant v2 + v3 + v4 + i + j + k == l is partially proven to be inductive.\nloop invariant 0 <= i <= l is partially proven to be inductive.\nloop invariant 0 <= j <= l is partially proven to be inductive.\nloop invariant 0 <= k <= l is partially proven to be inductive.\nloop invariant 0 <= v2 <= l/6 is partially proven to be inductive.\nloop invariant 0 <= v3 <= l/5 is partially proven to be inductive.\nloop invariant 0 <= v4 <= l/4 is partially proven to be inductive.\nloop invariant (l >= n) ==> (i+j+k+v4+v3+v2 == l) is partially proven to be inductive.\nloop invariant 0 <= i <= n is partially proven to be inductive.\nloop invariant 0 <= j <= n is partially proven to be inductive.\nloop invariant 0 <= k <= n - v2 - v3 - v4 - i - j is partially proven to be inductive.\nloop invariant 0 <= v2 <= n/6 is partially proven to be inductive.\nloop invariant 0 <= v3 <= n/5 is partially proven to be inductive.\nloop invariant 0 <= v4 <= n/4 is partially proven to be inductive.\nloop invariant (l < n ==> i+j+k+v4+v3+v2==l) is partially proven to be inductive.\nAssertion ((((i + j) + k) + v4) + v3) + v2 == l: Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v2=0, v3=0, v4=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  /*@\nloop invariant i1: i == 0;\nloop invariant i2: j == 0;\nloop invariant i3: k == 0;\nloop invariant i4: v2 == 0;\nloop invariant i5: v3 == 0;\nloop invariant i6: v4 == 0;\nloop invariant i7: n <= SIZE;\nloop invariant i8: 0 <= l <= n;\nloop invariant i9: i+j+k+v4+v3+v2 == l;\nloop invariant i10: l >= 0;\nloop invariant i11: l < n;\nloop invariant i12: v2 + v3 + v4 + i + j + k == l;\nloop invariant i13: 0 <= i <= l;\nloop invariant i14: 0 <= j <= l;\nloop invariant i15: 0 <= k <= l;\nloop invariant i16: 0 <= v2 <= l/6;\nloop invariant i17: 0 <= v3 <= l/5;\nloop invariant i18: 0 <= v4 <= l/4;\nloop invariant i19: (l >= n) ==> (i+j+k+v4+v3+v2 == l);\nloop invariant i20: 0 <= i <= n;\nloop invariant i21: 0 <= j <= n;\nloop invariant i22: 0 <= k <= n - v2 - v3 - v4 - i - j;\nloop invariant i23: 0 <= v2 <= n/6;\nloop invariant i24: 0 <= v3 <= n/5;\nloop invariant i25: 0 <= v4 <= n/4;\nloop invariant i26: (l < n ==> i+j+k+v4+v3+v2==l);\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k+v4+v3+v2) == l);\n}\n\n  return 0;\n}\n",
        "combined_annotation_num_solver_calls": 6,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v2=0, v3=0, v4=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  /*@\n\n\n\n\n\n\nloop invariant i7: n <= SIZE;\nloop invariant i8: 0 <= l <= n;\nloop invariant i9: i+j+k+v4+v3+v2 == l;\nloop invariant i10: l >= 0;\n\nloop invariant i12: v2 + v3 + v4 + i + j + k == l;\nloop invariant i13: 0 <= i <= l;\nloop invariant i14: 0 <= j <= l;\nloop invariant i15: 0 <= k <= l;\n\n\n\nloop invariant i19: (l >= n) ==> (i+j+k+v4+v3+v2 == l);\nloop invariant i20: 0 <= i <= n;\nloop invariant i21: 0 <= j <= n;\nloop invariant i22: 0 <= k <= n - v2 - v3 - v4 - i - j;\n\n\n\nloop invariant i26: (l < n ==> i+j+k+v4+v3+v2==l);\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k+v4+v3+v2) == l);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/const.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq1.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq2.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/afnp2014.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/css2003.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007b.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gsv2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/hhk2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_2.c",
            "../data/benchmarks/sv-benchmarks/loop-new/gauss_sum.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark10_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark11_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark13_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark14_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark15_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark16_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark17_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark18_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark20_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark21_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark22_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark23_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark25_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark26_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark27_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark29_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark30_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark31_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark32_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark33_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark34_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark35_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark36_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark37_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark38_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark39_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark40_polynomial.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark41_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark42_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark43_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark45_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark48_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark49_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark50_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark51_polynomial.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark52_polynomial.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark53_polynomial.c",
            "../data/benchmarks/sv-benchmarks/loops/count_up_down-1.c",
            "../data/benchmarks/sv-benchmarks/loops/for_infinite_loop_1.c",
            "../data/benchmarks/sv-benchmarks/loops/for_infinite_loop_2.c",
            "../data/benchmarks/sv-benchmarks/loops/sum04-2.c",
            "../data/benchmarks/sv-benchmarks/loops/terminator_02-2.c",
            "../data/benchmarks/sv-benchmarks/loops/terminator_03-2.c",
            "../data/benchmarks/sv-benchmarks/loops/trex03-2.c",
            "../data/benchmarks/sv-benchmarks/loops/while_infinite_loop_1.c",
            "../data/benchmarks/sv-benchmarks/loops/while_infinite_loop_2.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/loopv1.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/loopv3.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/sumt2.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/sumt3.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/sumt6.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../data/benchmarks/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/even.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/mod4.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/odd.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/id_trans.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/bhmr2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/ddlm2013.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gcnr2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gr2006.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_k.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_nondet.c",
            "../data/benchmarks/sv-benchmarks/loop-new/half.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark07_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark12_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark19_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark24_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark28_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark44_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark46_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark47_linear.c",
            "../data/benchmarks/sv-benchmarks/loops/count_up_down-2.c",
            "../data/benchmarks/sv-benchmarks/loops/for_bounded_loop1.c",
            "../data/benchmarks/sv-benchmarks/loops/sum01-1.c",
            "../data/benchmarks/sv-benchmarks/loops/sum01-2.c",
            "../data/benchmarks/sv-benchmarks/loops/sum01_bug02.c",
            "../data/benchmarks/sv-benchmarks/loops/sum01_bug02_sum01_bug02_base.case.c",
            "../data/benchmarks/sv-benchmarks/loops/sum03-1.c",
            "../data/benchmarks/sv-benchmarks/loops/sum03-2.c",
            "../data/benchmarks/sv-benchmarks/loops/sum04-1.c",
            "../data/benchmarks/sv-benchmarks/loops/terminator_02-1.c",
            "../data/benchmarks/sv-benchmarks/loops/terminator_03-1.c",
            "../data/benchmarks/sv-benchmarks/loops/trex03-1.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/iftelse.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_10.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_12.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_6.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_8.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_9.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono4_1.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono5_1.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono6_1.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/sumt4.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/sumt5.c"
        ],
        "skipped": [],
        "total": 397,
        "success_count": 203,
        "failure_count": 194,
        "success_rate": 0.5113350125944585
    }
}