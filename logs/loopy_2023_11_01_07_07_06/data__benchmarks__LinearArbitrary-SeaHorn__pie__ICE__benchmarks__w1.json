{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
        "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\nvoid main() {\n\tint n = unknown_int();\n\tif(n < 0)\n\t  \nreturn;\n\n\tint x = 0;\n\n \twhile (x < n) {\n\n\t\tx = x + 1;\n\n\t}\n\t{;\n//@ assert(x == n);\n}\n\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\nvoid main() {\n\tint n = unknown_int();\n\tif(n < 0)\n\t  \nreturn;\n\n\tint x = 0;\n\n \twhile (x < n) {\n\n\t\tx = x + 1;\n\n\t}\n\t{;\n//@ assert(x == n);\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- The value of `n` is non-negative. \n\nLoop condition:\n- The loop executes while `x` is less than `n`.\n\nPost-condition:\n- The value of `x` equals `n`.\n\nLoop Invariants:\n- Before the loop executes, `x` is equal to 0.\n- In every iteration of the loop, `x` is less than or equal to `n`.\n- In every iteration of the loop, `x` is greater than or equal to 0.\n- After the loop terminates, `x` is equal to `n`.\n- Since `n` is non-negative, `x` is also non-negative before the loop executes and in every iteration of the loop.\n- Since `x` is incremented by 1 in each iteration, `x` is always less than or equal to `n` in every iteration of the loop.\n\nPutting all the loop invariants together, we get:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant x <= n;\n    loop invariant x == 0 ==> x == 0;\n    loop invariant 0 <= x && x <= n;\n    loop invariant x == n ==> x == n;\n*/\n``` \n\nNote that the loop invariant `x == 0 ==> x == 0` is added to make the invariant trivially true before the loop executes. Similarly, the loop invariant `x == n ==> x == n` is added to make the invariant trivially true after the loop terminates.",
            "Let's start by analyzing the program:\n\nPre-conditions:\n- n is an integer that is assigned a non-negative value (n >= 0).\n\nLoop condition:\n- x < n\n\nPost-condition:\n- x == n\n\nLoop invariants:\n- i1: x >= 0 (minimum bound for x)\n- i2: x <= n (maximum bound for x)\n- i3: n >= 0 (minimum bound for n)\n- i4: x <= n ==> x < n (if x is less than or equal to n, then x is strictly less than n)\n- i5: x == n || x < n (either x equals n or x is less than n)\n\nExplanation:\n- The first invariant (i1) states that x is always greater than or equal to 0. Since x is initially assigned 0 and is incremented by 1 in each iteration, it will always remain greater than or equal to 0.\n- The second invariant (i2) states that x is always less than or equal to n. Since the loop condition is x < n, this invariant holds true for all iterations of the loop.\n- The third invariant (i3) states that n is always greater than or equal to 0. This is a pre-condition that needs to hold true for the program to execute correctly.\n- The fourth invariant (i4) states that if x is less than or equal to n, then x must be strictly less than n. This is important because if x were to become equal to n, the loop would terminate and the post-condition would not hold true.\n- The fifth invariant (i5) states that x is either equal to n or less than n. This is important because the post-condition requires x to be equal to n. If x were to be greater than n, the loop would not terminate and the post-condition would not hold true.\n\nLoop invariants block:\n```\n/*@ \n    loop invariant i1: x >= 0;\n    loop invariant i2: x <= n;\n    loop invariant i3: n >= 0;\n    loop invariant i4: x <= n ==> x < n;\n    loop invariant i5: x == n || x < n;\n*/\n```",
            "First, let's analyze the program and identify the pre-conditions and variable assignments:\n- The program declares a macro `assume` that takes a boolean expression and returns if the expression is false.\n- The program calls an external function `unknown_int` that returns an integer of unknown value and assigns it to variable `n`.\n- If `n` is negative, the program returns without executing the loop.\n- Variable `x` is assigned the value 0.\n- The while loop condition is `x < n`.\n- Inside the loop, `x` is incremented by 1.\n- After the loop, an assertion checks if `x` is equal to `n`.\n\nBased on the above analysis, we can come up with the following loop invariants:\n```\n/*@ \nloop invariant 0 <= x <= n;\nloop invariant \\forall integer i; 0 <= i < x ==> i < n;\nloop invariant x == n || x < n;\n*/\n```\nExplanation:\n- The first loop invariant ensures that `x` is always between 0 and `n` (inclusive).\n- The second loop invariant ensures that all integers between 0 and `x-1` are less than `n`. This is equivalent to saying that if `x < n`, then all integers between 0 and `x-1` are less than `n`.\n- The third loop invariant ensures that either `x` is equal to `n` or `x` is less than `n`. This is equivalent to saying that if `x < n`, then `x` must eventually become equal to `n`.\n\nSince `unknown_int` is non-deterministic, we can use the following implication to make the invariants trivially true at the beginning of the loop:\n```\n/*@ \nloop invariant 0 <= x <= n;\nloop invariant \\forall integer i; 0 <= i < x ==> i < n;\nloop invariant x == n || x < n;\nloop invariant n < 0 ==> x == 0;\n*/\n```\nSimilarly, we can use the following implication to make the assertion trivially true if `n < 0`:\n```\n{;\n//@ assert n < 0 || x == n;\n}\n```\nNote that we didn't need to add any loop invariants for the external function `unknown_int` since we are not making any assumptions about its behavior.",
            "Pre-conditions:\n- The variable `n` is an integer and its value is obtained from the function `unknown_int()`.\n- If `n` is less than 0, the program returns without executing the loop.\n\nLoop body:\n- The loop starts with the value of `x` equal to 0.\n- In each iteration, the value of `x` is incremented by 1.\n\nLoop condition:\n- The loop continues as long as the value of `x` is less than `n`.\n\nPost-condition:\n- The value of `x` is equal to `n` after the loop terminates.\n\nBased on the above, we can derive the following loop invariants:\n```\n//@ loop invariant 0 <= x <= n;\n//@ loop invariant \\forall integer i; 0 <= i < x ==> i < n;\n//@ loop invariant x == n ==> x >= 0;\n//@ loop invariant x <= n + 1;\n//@ loop invariant x >= 0 ==> x <= n + 1;\n//@ loop invariant x == 0 || \\exists integer i; 0 <= i < x && i != n;\n//@ loop invariant x == n ==> x >= 0 ==> x == n;\n```\nExplanation:\n- The first invariant ensures that `x` is always between 0 and `n`, inclusive.\n- The second invariant ensures that for all integers `i` between 0 and `x-1`, `i` is less than `n`. This is true because in each iteration, `x` is incremented by 1 and the loop continues as long as `x` is less than `n`.\n- The third invariant ensures that if `x` is equal to `n`, then `x` must be greater than or equal to 0. This is true because `n` is guaranteed to be non-negative (due to the pre-condition), and if `x` is equal to `n`, then `x` must have been incremented at least once, so it cannot be negative.\n- The fourth invariant ensures that `x` is less than or equal to `n+1`. This is true because the loop continues as long as `x` is less than `n`, and if `x` is equal to `n`, then the loop terminates.\n- The fifth invariant ensures that if `x` is greater than or equal to 0, then `x` is less than or equal to `n+1`. This is true because `n` is guaranteed to be non-negative, so `n+1` is also non-negative.\n- The sixth invariant ensures that either `x` is equal to 0, or there exists an integer `i` between 0 and `x-1` (inclusive) that is not equal to `n`. This is true because if `x` is not equal to 0, then it must have been incremented at least once, and since `n` is non-negative, there must exist an integer `i` between 0 and `x-1` (inclusive) that is not equal to `n`.\n- The seventh invariant ensures that if `x` is equal to `n`, then `x` must be greater than or equal to 0, and if `x` is greater than or equal to 0, then `x` must be equal to `n`. This is true because if `x` is equal to `n`, then the loop must have terminated, so `x` must be greater than or equal to 0. Also, if `x` is greater than or equal to 0, then either `x` is less than `n`, in which case the loop continues, or `x` is equal to `n`, in which case the loop terminates.",
            "Pre-conditions:\n- The function `unknown_int()` returns an integer value.\n- The variable `n` is assigned the value returned by `unknown_int()`.\n- If `n` is less than 0, the program returns without executing the loop.\n- The variable `x` is initialized to 0.\n\nLoop condition: \n- The loop continues as long as the value of `x` is less than the value of `n`.\n\nPost-condition:\n- The value of `x` is equal to the value of `n`.\n\nLoop Invariants:\n- Before the loop execution: \n\t- `x >= 0`\n\t- `n >= 0`\n\t- `x <= n`\n- In every iteration of the loop:\n\t- `x >= 0`\n\t- `n >= 0`\n\t- `x <= n`\n\t- `x < n`\n- After the loop termination:\n\t- `x >= 0`\n\t- `n >= 0`\n\t- `x <= n`\n\t- `x >= n`\n\nExplanation:\n- Before the loop execution, `x` is initialized to 0 and `n` is assigned a non-negative integer value. Hence, `x >= 0` and `n >= 0`.\n- In every iteration of the loop, `x` is incremented by 1 until it becomes equal to `n`. Hence, `x <= n` and `x < n`.\n- After the loop termination, the value of `x` is equal to the value of `n`. Hence, `x >= n`.\n- The loop invariants imply the post-condition because at the end of the loop, `x` is equal to `n` and all loop invariants hold."
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant x >= 0;\n    loop invariant x <= n;\n    loop invariant x == 0 ==> x == 0;\n    loop invariant 0 <= x && x <= n;\n    loop invariant x == n ==> x == n;\n*/",
            "/*@ \n    loop invariant i1: x >= 0;\n    loop invariant i2: x <= n;\n    loop invariant i3: n >= 0;\n    loop invariant i4: x <= n ==> x < n;\n    loop invariant i5: x == n || x < n;\n*/",
            "/*@ \nloop invariant 0 <= x <= n;\nloop invariant \\forall integer i; 0 <= i < x ==> i < n;\nloop invariant x == n || x < n;\n*/",
            "//@ loop invariant 0 <= x <= n;\n//@ loop invariant \\forall integer i; 0 <= i < x ==> i < n;\n//@ loop invariant x == n ==> x >= 0;\n//@ loop invariant x <= n + 1;\n//@ loop invariant x >= 0 ==> x <= n + 1;\n//@ loop invariant x == 0 || \\exists integer i; 0 <= i < x && i != n;\n//@ loop invariant x == n ==> x >= 0 ==> x == n;",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The function `unknown_int()` returns an integer value.\n- The variable `n` is assigned the value returned by `unknown_int()`.\n- If `n` is less than 0, the program returns without executing the loop.\n- The variable `x` is initialized to 0.\n\nLoop condition: \n- The loop continues as long as the value of `x` is less than the value of `n`.\n\nPost-condition:\n- The value of `x` is equal to the value of `n`.\n\nLoop Invariants:\n- Before the loop execution: \n\t- `x >= 0`\n\t- `n >= 0`\n\t- `x <= n`\n- In every iteration of the loop:\n\t- `x >= 0`\n\t- `n >= 0`\n\t- `x <= n`\n\t- `x < n`\n- After the loop termination:\n\t- `x >= 0`\n\t- `n >= 0`\n\t- `x <= n`\n\t- `x >= n`\n\nExplanation:\n- Before the loop execution, `x` is initialized to 0 and `n` is assigned a non-negative integer value. Hence, `x >= 0` and `n >= 0`.\n- In every iteration of the loop, `x` is incremented by 1 until it becomes equal to `n`. Hence, `x <= n` and `x < n`.\n- After the loop termination, the value of `x` is equal to the value of `n`. Hence, `x >= n`.\n- The loop invariants imply the post-condition because at the end of the loop, `x` is equal to `n` and all loop invariants hold."
            ]
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant x <= n;\n    loop invariant x == 0 ==> x == 0;\n    loop invariant 0 <= x && x <= n;\n    loop invariant x == n ==> x == n;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant x <= n is inductive.\nloop invariant x == 0 ==> x == 0 is inductive.\nloop invariant 0 <= x && x <= n is inductive.\nloop invariant x == n ==> x == n is inductive.\nAssertion x == n: Valid"
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant i1: x >= 0;\n    loop invariant i2: x <= n;\n    loop invariant i3: n >= 0;\n    loop invariant i4: x <= n ==> x < n;\n    loop invariant i5: x == n || x < n;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant x <= n ==> x < n is neither established nor preserved.\nloop invariant x == n || x < n is partially proven to be inductive.\nAssertion x == n: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\nvoid main() {\n\tint n = unknown_int();\n\tif(n < 0)\n\t  \nreturn;\n\n\tint x = 0;\n\n \t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: x <= n;\nloop invariant i3: n >= 0;\n\nloop invariant i5: x == n || x < n;\n*/\nwhile (x < n) {\n\n\t\tx = x + 1;\n\n\t}\n\t{;\n//@ assert(x == n);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \nloop invariant 0 <= x <= n;\nloop invariant \\forall integer i; 0 <= i < x ==> i < n;\nloop invariant x == n || x < n;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is inductive.\nloop invariant \\forall integer i; 0 <= i < x ==> i < n is inductive.\nloop invariant x == n || x < n is inductive.\nAssertion x == n: Valid"
            },
            {
                "num_solver_calls": 1,
                "annotations": "//@ loop invariant 0 <= x <= n;\n//@ loop invariant \\forall integer i; 0 <= i < x ==> i < n;\n//@ loop invariant x == n ==> x >= 0;\n//@ loop invariant x <= n + 1;\n//@ loop invariant x >= 0 ==> x <= n + 1;\n//@ loop invariant x == 0 || \\exists integer i; 0 <= i < x && i != n;\n//@ loop invariant x == n ==> x >= 0 ==> x == n;",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is inductive.\nloop invariant \\forall integer i; 0 <= i < x ==> i < n is inductive.\nloop invariant x == n ==> x >= 0 is inductive.\nloop invariant x <= n + 1 is inductive.\nloop invariant x >= 0 ==> x <= n + 1 is inductive.\nloop invariant x == 0 || \\exists integer i; 0 <= i < x && i != n is inductive.\nloop invariant x == n ==> x >= 0 ==> x == n is inductive.\nAssertion x == n: Valid"
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The function `unknown_int()` returns an integer value.\n- The variable `n` is assigned the value returned by `unknown_int()`.\n- If `n` is less than 0, the program returns without executing the loop.\n- The variable `x` is initialized to 0.\n\nLoop condition: \n- The loop continues as long as the value of `x` is less than the value of `n`.\n\nPost-condition:\n- The value of `x` is equal to the value of `n`.\n\nLoop Invariants:\n- Before the loop execution: \n\t- `x >= 0`\n\t- `n >= 0`\n\t- `x <= n`\n- In every iteration of the loop:\n\t- `x >= 0`\n\t- `n >= 0`\n\t- `x <= n`\n\t- `x < n`\n- After the loop termination:\n\t- `x >= 0`\n\t- `n >= 0`\n\t- `x <= n`\n\t- `x >= n`\n\nExplanation:\n- Before the loop execution, `x` is initialized to 0 and `n` is assigned a non-negative integer value. Hence, `x >= 0` and `n >= 0`.\n- In every iteration of the loop, `x` is incremented by 1 until it becomes equal to `n`. Hence, `x <= n` and `x < n`.\n- After the loop termination, the value of `x` is equal to the value of `n`. Hence, `x >= n`.\n- The loop invariants imply the post-condition because at the end of the loop, `x` is equal to `n` and all loop invariants hold.",
                "error": "Output does not contain at least 1 code block"
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant x == 0 ==> x == 0 is partially proven to be inductive.\nloop invariant 0 <= x && x <= n is partially proven to be inductive.\nloop invariant x == n ==> x == n is partially proven to be inductive.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant x <= n ==> x < n is neither established nor preserved.\nloop invariant x == n || x < n is partially proven to be inductive.\nloop invariant 0 <= x <= n is partially proven to be inductive.\nloop invariant \\forall integer i; 0 <= i < x ==> i < n is partially proven to be inductive.\nloop invariant x == n ==> x >= 0 is partially proven to be inductive.\nloop invariant x <= n + 1 is partially proven to be inductive.\nloop invariant x >= 0 ==> x <= n + 1 is partially proven to be inductive.\nloop invariant x == 0 || \\exists integer i; 0 <= i < x && i != n is partially proven to be inductive.\nloop invariant x == n ==> x >= 0 ==> x == n is partially proven to be inductive.\nAssertion x == n: Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\nvoid main() {\n\tint n = unknown_int();\n\tif(n < 0)\n\t  \nreturn;\n\n\tint x = 0;\n\n \t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: x <= n;\nloop invariant i3: x == 0 ==> x == 0;\nloop invariant i4: 0 <= x && x <= n;\nloop invariant i5: x == n ==> x == n;\nloop invariant i6: n >= 0;\nloop invariant i7: x <= n ==> x < n;\nloop invariant i8: x == n || x < n;\nloop invariant i9: 0 <= x <= n;\nloop invariant i10: \\forall integer i; 0 <= i < x ==> i < n;\nloop invariant i11: x == n ==> x >= 0;\nloop invariant i12: x <= n + 1;\nloop invariant i13: x >= 0 ==> x <= n + 1;\nloop invariant i14: x == 0 || \\exists integer i; 0 <= i < x && i != n;\nloop invariant i15: x == n ==> x >= 0 ==> x == n;\n*/\nwhile (x < n) {\n\n\t\tx = x + 1;\n\n\t}\n\t{;\n//@ assert(x == n);\n}\n\n}",
        "combined_annotation_num_solver_calls": 2,
        "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\nvoid main() {\n\tint n = unknown_int();\n\tif(n < 0)\n\t  \nreturn;\n\n\tint x = 0;\n\n \t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: x <= n;\nloop invariant i3: x == 0 ==> x == 0;\nloop invariant i4: 0 <= x && x <= n;\nloop invariant i5: x == n ==> x == n;\nloop invariant i6: n >= 0;\n\nloop invariant i8: x == n || x < n;\nloop invariant i9: 0 <= x <= n;\nloop invariant i10: \\forall integer i; 0 <= i < x ==> i < n;\nloop invariant i11: x == n ==> x >= 0;\nloop invariant i12: x <= n + 1;\nloop invariant i13: x >= 0 ==> x <= n + 1;\nloop invariant i14: x == 0 || \\exists integer i; 0 <= i < x && i != n;\nloop invariant i15: x == n ==> x >= 0 ==> x == n;\n*/\nwhile (x < n) {\n\n\t\tx = x + 1;\n\n\t}\n\t{;\n//@ assert(x == n);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c"
        ],
        "skipped": [],
        "total": 221,
        "success_count": 104,
        "failure_count": 117,
        "success_rate": 0.47058823529411764
    }
}