{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int k = unknown_int();\n  int j = unknown_int();\n  int n = unknown_int();\n  \n  if (!(n>=1 && k>=n && j==0)) return 0;\n  while (j<=n-1) {\n    j++;\n    k--;\n  }\n  {;\n//@ assert(k>=0);\n}\n\n  return 0;\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int k = unknown_int();\n  int j = unknown_int();\n  int n = unknown_int();\n  \n  if (!(n>=1 && k>=n && j==0)) return 0;\n  while (j<=n-1) {\n    j++;\n    k--;\n  }\n  {;\n//@ assert(k>=0);\n}\n\n  return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- The value of variable `n` is greater than or equal to 1.\n- The value of variable `k` is greater than or equal to the value of variable `n`.\n- The value of variable `j` is 0.\n\nLoop condition:\n- The value of variable `j` is less than or equal to `n-1`.\n\nPost-condition:\n- The value of variable `k` is greater than or equal to 0.\n\nLoop invariants:\n```\n/*@\nloop invariant 0 <= j <= n;\nloop invariant k >= 0;\nloop invariant k >= n-j;\nloop invariant k <= n;\n*/\n```\nExplanation:\n- The first loop invariant ensures that the value of `j` remains within the bounds of 0 and `n`.\n- The second loop invariant ensures that the value of `k` remains greater than or equal to 0 throughout the loop execution.\n- The third loop invariant ensures that the difference between `k` and `n-j` remains non-negative, i.e., `k` is always greater than or equal to `n-j`.\n- The fourth loop invariant ensures that the value of `k` remains less than or equal to `n` throughout the loop execution.\n\nSince the loop invariants hold true before the loop execution, in every iteration of the loop, and after the loop termination, and they imply the post-condition, Frama-C can use them to verify the correctness of the program.",
            "Step 1: Pre-conditions and variable assignments\n```\nint k = unknown_int();   // k is an integer initialized to an unknown value\nint j = unknown_int();   // j is an integer initialized to an unknown value\nint n = unknown_int();   // n is an integer initialized to an unknown value\n\nassume(n>=1 && k>=n && j==0);   // assume n is at least 1, k is greater or equal to n, and j is 0\n```\n\nStep 2: Loop condition\n```\nwhile (j<=n-1)   // loop until j is greater than n-1\n```\n\nStep 3: Loop invariants\n```\n/*@ \n    loop invariant j >= 0 && j <= n;   // j is always between 0 and n (inclusive)\n    loop invariant k >= 0;   // k is always non-negative\n    loop invariant k + j == \\at(k, Pre) + \\at(j, Pre);   // k+j is constant throughout the loop\n*/\n```\n- Before the loop, the loop invariants hold trivially since j is initialized to 0 and k is non-negative.\n- In every iteration of the loop, j is incremented by 1 and k is decremented by 1. Thus, j is always between 0 and n, and k is always non-negative. Also, since k+j is constant throughout the loop, the third invariant holds.\n- After the loop, we have j > n-1, which implies that j == n. Thus, j <= n holds trivially. Since k has been decremented by j times, we have k >= \\at(k, Pre) - j. From the assumption at the beginning of the program, we have \\at(k, Pre) >= n, so k >= n - j. Since j == n, we get k >= 0, which proves the assertion. Therefore, the loop invariants imply the post-condition.",
            "First, let's analyze the pre-conditions and variable assignments in the program:\n- The variables `k`, `j`, and `n` are initialized with non-deterministic values using the `unknown_int()` function. Therefore, we cannot make any assumptions about their initial values.\n- The `assume` macro is defined to check if a condition is true and return 0 if it is not. However, we will use implications instead of the assume macro in our loop invariants.\n- The `if` statement checks if `n>=1` and `k>=n` and `j==0`. If this condition is false, the program returns 0 and terminates. We can use this condition as a loop invariant to ensure that the loop is executed at least once.\n\nNow, let's analyze the while loop and find the necessary loop invariants:\n- Loop condition: `j<=n-1`. This means that the loop will terminate when `j` becomes greater than `n-1`.\n- Loop body: `j++` and `k--`. This means that in each iteration of the loop, the value of `j` is increased by 1 and the value of `k` is decreased by 1.\n\nBased on the above analysis, we can come up with the following loop invariants:\n```\n/*@ \n    loop invariant n>=1 && k>=n && j>=0; // pre-condition\n    loop invariant j<=n;\n    loop invariant k+j<=n;\n    loop invariant \\forall integer i; 0<=i<j ==> k+i>=n;\n    loop invariant \\forall integer i; j<=i<n ==> k+i<n;\n*/\n```\nExplanation of the loop invariants:\n- The first loop invariant is the pre-condition of the program.\n- The second loop invariant ensures that `j` is always less than or equal to `n`.\n- The third loop invariant ensures that the sum of `k` and `j` is always less than or equal to `n`.\n- The fourth loop invariant ensures that for all `i` between 0 and `j` (exclusive), the sum of `k` and `i` is always greater than or equal to `n`. This holds because in each iteration of the loop, `j` is increased by 1 and `k` is decreased by 1, which maintains this property.\n- The fifth loop invariant ensures that for all `i` between `j` and `n` (exclusive), the sum of `k` and `i` is always less than `n`. This also holds because in each iteration of the loop, `j` is increased by 1 and `k` is decreased by 1, which maintains this property.\n\nFinally, we use an implication to ensure that the assertion `k>=0` holds after the loop termination:\n```\n//@ assert n>=1 && k>=n && j==n ==> k>=0;\n```\nExplanation of the assertion:\n- The assertion is guarded by the condition `n>=1 && k>=n && j==n`. This means that the assertion is checked only if the loop terminates normally (i.e., `j` becomes equal to `n`).\n- The implication ensures that if the condition `n>=1 && k>=n && j==n` holds before the assertion, then `k>=0` holds after the assertion. This is because the loop invariants ensure that `k+j<=n` and `j==n`, which implies that `k>=0`.",
            "Pre-conditions:\n- The variables `k`, `j`, and `n` are integers.\n- The function `unknown_int` returns an integer value.\n- The value of `n` should be greater than or equal to 1.\n- The value of `k` should be greater than or equal to `n`.\n- The value of `j` should be equal to 0.\n\nLoop condition:\n- The loop will execute as long as the value of `j` is less than or equal to `n-1`.\n\nPost-condition:\n- The value of `k` should be greater than or equal to 0 after the loop terminates.\n\nLoop Invariants:\n- Before the loop execution, the value of `k` should be greater than or equal to `n`. (`k >= n`)\n- Before the loop execution, the value of `j` should be equal to 0. (`j == 0`)\n- In every iteration of the loop, the value of `j` should be less than or equal to `n-1`. (`j <= n-1`)\n- In every iteration of the loop, the value of `k` should be greater than or equal to 0. (`k >= 0`)\n- After the loop termination, the value of `j` should be greater than `n-1`. (`j > n-1`)\n- After the loop termination, the value of `k` should be greater than or equal to 0. (`k >= 0`)\n\nExplanation:\n- The first invariant (`k >= n`) ensures that the loop will execute correctly as `k` is decremented in each iteration of the loop and should not become less than `0` before the loop terminates.\n- The second invariant (`j == 0`) is true before the loop execution and ensures that the loop starts with the correct initial value of `j`.\n- The third invariant (`j <= n-1`) ensures that the loop will terminate after a finite number of iterations and that the value of `j` will be greater than `n-1` after the loop terminates.\n- The fourth invariant (`k >= 0`) ensures that the loop will not cause `k` to become negative during its execution.\n- The fifth invariant (`j > n-1`) ensures that the loop has terminated and that the value of `j` has exceeded its maximum value.\n- The sixth invariant (`k >= 0`) ensures that the post-condition is satisfied and that `k` is greater than or equal to `0` after the loop terminates.\n\nNote:\n- The use of implication is not necessary in this case as there are no conditional statements in the loop.",
            "Pre-conditions:\n- `n >= 1`\n- `k >= n`\n- `j == 0`\n\nLoop condition:\n- `j <= n-1`\n\nWe want to prove the post-condition:\n- `k >= 0`\n\nLoop invariants:\n- Before the loop execution, `k >= n` (from pre-condition).\n- Before the loop execution, `j == 0` (from pre-condition).\n- In every iteration of the loop, `j <= n-1` (loop condition).\n- In every iteration of the loop, `k+j == n` (sum of `k` and `j` remains unchanged).\n- After the loop termination, `j == n` (from loop condition and sum invariant).\n- After the loop termination, `k >= 0` (from post-condition).\n\nWe can combine these loop invariants into one block of code as follows:\n```\n/*@\n  loop invariant k >= n;\n  loop invariant j == 0;\n  loop invariant j <= n-1;\n  loop invariant k+j == n;\n\n  loop assigns j, k;\n\n  loop variant n-j;\n*/\n```\n\nNote that we also need to specify the `loop assigns` clause to indicate which variables are modified inside the loop, and the `loop variant` clause to indicate a strictly decreasing expression that ensures loop termination. In this case, we use `n-j` as the loop variant because `j` is incremented by 1 in each iteration and we want to ensure that `j` eventually reaches `n`."
        ],
        "annotation_blocks": [
            "/*@\nloop invariant 0 <= j <= n;\nloop invariant k >= 0;\nloop invariant k >= n-j;\nloop invariant k <= n;\n*/",
            "/*@ \n    loop invariant j >= 0 && j <= n;   // j is always between 0 and n (inclusive)\n    loop invariant k >= 0;   // k is always non-negative\n    loop invariant k + j == \\at(k, Pre) + \\at(j, Pre);   // k+j is constant throughout the loop\n*/",
            "/*@ \n    loop invariant n>=1 && k>=n && j>=0; // pre-condition\n    loop invariant j<=n;\n    loop invariant k+j<=n;\n    loop invariant \\forall integer i; 0<=i<j ==> k+i>=n;\n    loop invariant \\forall integer i; j<=i<n ==> k+i<n;\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The variables `k`, `j`, and `n` are integers.\n- The function `unknown_int` returns an integer value.\n- The value of `n` should be greater than or equal to 1.\n- The value of `k` should be greater than or equal to `n`.\n- The value of `j` should be equal to 0.\n\nLoop condition:\n- The loop will execute as long as the value of `j` is less than or equal to `n-1`.\n\nPost-condition:\n- The value of `k` should be greater than or equal to 0 after the loop terminates.\n\nLoop Invariants:\n- Before the loop execution, the value of `k` should be greater than or equal to `n`. (`k >= n`)\n- Before the loop execution, the value of `j` should be equal to 0. (`j == 0`)\n- In every iteration of the loop, the value of `j` should be less than or equal to `n-1`. (`j <= n-1`)\n- In every iteration of the loop, the value of `k` should be greater than or equal to 0. (`k >= 0`)\n- After the loop termination, the value of `j` should be greater than `n-1`. (`j > n-1`)\n- After the loop termination, the value of `k` should be greater than or equal to 0. (`k >= 0`)\n\nExplanation:\n- The first invariant (`k >= n`) ensures that the loop will execute correctly as `k` is decremented in each iteration of the loop and should not become less than `0` before the loop terminates.\n- The second invariant (`j == 0`) is true before the loop execution and ensures that the loop starts with the correct initial value of `j`.\n- The third invariant (`j <= n-1`) ensures that the loop will terminate after a finite number of iterations and that the value of `j` will be greater than `n-1` after the loop terminates.\n- The fourth invariant (`k >= 0`) ensures that the loop will not cause `k` to become negative during its execution.\n- The fifth invariant (`j > n-1`) ensures that the loop has terminated and that the value of `j` has exceeded its maximum value.\n- The sixth invariant (`k >= 0`) ensures that the post-condition is satisfied and that `k` is greater than or equal to `0` after the loop terminates.\n\nNote:\n- The use of implication is not necessary in this case as there are no conditional statements in the loop."
            ],
            "/*@\n  loop invariant k >= n;\n  loop invariant j == 0;\n  loop invariant j <= n-1;\n  loop invariant k+j == n;\n\n  loop assigns j, k;\n\n  loop variant n-j;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "/*@\nloop invariant 0 <= j <= n;\nloop invariant k >= 0;\nloop invariant k >= n-j;\nloop invariant k <= n;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= j <= n is partially proven to be inductive.\nloop invariant k >= 0 is partially proven to be inductive.\nloop invariant k >= n-j is partially proven to be inductive.\nloop invariant k <= n is preserved but not established.\nAssertion k >= 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int k = unknown_int();\n  int j = unknown_int();\n  int n = unknown_int();\n  \n  if (!(n>=1 && k>=n && j==0)) return 0;\n  /*@\nloop invariant i1: 0 <= j <= n;\nloop invariant i2: k >= 0;\nloop invariant i3: k >= n-j;\n\n*/\nwhile (j<=n-1) {\n    j++;\n    k--;\n  }\n  {;\n//@ assert(k>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant j >= 0 && j <= n;   // j is always between 0 and n (inclusive)\n    loop invariant k >= 0;   // k is always non-negative\n    loop invariant k + j == \\at(k, Pre) + \\at(j, Pre);   // k+j is constant throughout the loop\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: unbound logic variable k. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int k = unknown_int();\n  int j = unknown_int();\n  int n = unknown_int();\n  \n  if (!(n>=1 && k>=n && j==0)) return 0;\n  /*@\nloop invariant i1: j >= 0 && j <= n;\n\n\n*/\nwhile (j<=n-1) {\n    j++;\n    k--;\n  }\n  {;\n//@ assert(k>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "/*@ \n    loop invariant n>=1 && k>=n && j>=0; // pre-condition\n    loop invariant j<=n;\n    loop invariant k+j<=n;\n    loop invariant \\forall integer i; 0<=i<j ==> k+i>=n;\n    loop invariant \\forall integer i; j<=i<n ==> k+i<n;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant n>=1 && k>=n && j>=0 is partially proven to be inductive.\nloop invariant j<=n is partially proven to be inductive.\nloop invariant k+j<=n is preserved but not established.\nloop invariant \\forall integer i; 0<=i<j ==> k+i>=n is partially proven to be inductive.\nloop invariant \\forall integer i; j<=i<n ==> k+i<n is preserved but not established.\nAssertion k >= 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int k = unknown_int();\n  int j = unknown_int();\n  int n = unknown_int();\n  \n  if (!(n>=1 && k>=n && j==0)) return 0;\n  /*@\n\nloop invariant i2: j<=n;\n\n\n\n*/\nwhile (j<=n-1) {\n    j++;\n    k--;\n  }\n  {;\n//@ assert(k>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The variables `k`, `j`, and `n` are integers.\n- The function `unknown_int` returns an integer value.\n- The value of `n` should be greater than or equal to 1.\n- The value of `k` should be greater than or equal to `n`.\n- The value of `j` should be equal to 0.\n\nLoop condition:\n- The loop will execute as long as the value of `j` is less than or equal to `n-1`.\n\nPost-condition:\n- The value of `k` should be greater than or equal to 0 after the loop terminates.\n\nLoop Invariants:\n- Before the loop execution, the value of `k` should be greater than or equal to `n`. (`k >= n`)\n- Before the loop execution, the value of `j` should be equal to 0. (`j == 0`)\n- In every iteration of the loop, the value of `j` should be less than or equal to `n-1`. (`j <= n-1`)\n- In every iteration of the loop, the value of `k` should be greater than or equal to 0. (`k >= 0`)\n- After the loop termination, the value of `j` should be greater than `n-1`. (`j > n-1`)\n- After the loop termination, the value of `k` should be greater than or equal to 0. (`k >= 0`)\n\nExplanation:\n- The first invariant (`k >= n`) ensures that the loop will execute correctly as `k` is decremented in each iteration of the loop and should not become less than `0` before the loop terminates.\n- The second invariant (`j == 0`) is true before the loop execution and ensures that the loop starts with the correct initial value of `j`.\n- The third invariant (`j <= n-1`) ensures that the loop will terminate after a finite number of iterations and that the value of `j` will be greater than `n-1` after the loop terminates.\n- The fourth invariant (`k >= 0`) ensures that the loop will not cause `k` to become negative during its execution.\n- The fifth invariant (`j > n-1`) ensures that the loop has terminated and that the value of `j` has exceeded its maximum value.\n- The sixth invariant (`k >= 0`) ensures that the post-condition is satisfied and that `k` is greater than or equal to `0` after the loop terminates.\n\nNote:\n- The use of implication is not necessary in this case as there are no conditional statements in the loop.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@\n  loop invariant k >= n;\n  loop invariant j == 0;\n  loop invariant j <= n-1;\n  loop invariant k+j == n;\n\n  loop assigns j, k;\n\n  loop variant n-j;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant k >= n is established but not preserved.\nloop invariant j == 0 is partially proven to be inductive.\nloop invariant j <= n-1 is partially proven to be inductive.\nloop invariant k+j == n is preserved but not established.\nAssertion k >= 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int k = unknown_int();\n  int j = unknown_int();\n  int n = unknown_int();\n  \n  if (!(n>=1 && k>=n && j==0)) return 0;\n  /*@\n\n\n\n\n*/\nwhile (j<=n-1) {\n    j++;\n    k--;\n  }\n  {;\n//@ assert(k>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 18: unbound logic variable k. Ignoring loop annotation",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int k = unknown_int();\n  int j = unknown_int();\n  int n = unknown_int();\n  \n  if (!(n>=1 && k>=n && j==0)) return 0;\n  /*@\nloop invariant i1: 0 <= j <= n;\nloop invariant i2: k >= 0;\nloop invariant i3: k >= n-j;\nloop invariant i4: k <= n;\nloop invariant i5: j >= 0 && j <= n;\nloop invariant i6: k + j == \\at(k, Pre) + \\at(j, Pre);\nloop invariant i7: n>=1 && k>=n && j>=0;\nloop invariant i8: j<=n;\nloop invariant i9: k+j<=n;\nloop invariant i10: \\forall integer i; 0<=i<j ==> k+i>=n;\nloop invariant i11: \\forall integer i; j<=i<n ==> k+i<n;\nloop invariant i12: k >= n;\nloop invariant i13: j == 0;\nloop invariant i14: j <= n-1;\nloop invariant i15: k+j == n;\n*/\nwhile (j<=n-1) {\n    j++;\n    k--;\n  }\n  {;\n//@ assert(k>=0);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 7,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int k = unknown_int();\n  int j = unknown_int();\n  int n = unknown_int();\n  \n  if (!(n>=1 && k>=n && j==0)) return 0;\n  /*@\nloop invariant i1: 0 <= j <= n;\nloop invariant i2: k >= 0;\nloop invariant i3: k >= n-j;\n\nloop invariant i5: j >= 0 && j <= n;\n\n\nloop invariant i8: j<=n;\n\n\n\n\n\n\n\n*/\nwhile (j<=n-1) {\n    j++;\n    k--;\n  }\n  {;\n//@ assert(k>=0);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/const.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq1.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq2.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/afnp2014.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/css2003.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007b.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gsv2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/hhk2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_2.c",
            "../data/benchmarks/sv-benchmarks/loop-new/gauss_sum.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../data/benchmarks/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/even.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/mod4.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/odd.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/id_trans.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/bhmr2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/ddlm2013.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gcnr2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gr2006.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_k.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_nondet.c",
            "../data/benchmarks/sv-benchmarks/loop-new/half.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark03_linear.c"
        ],
        "skipped": [],
        "total": 311,
        "success_count": 149,
        "failure_count": 162,
        "success_rate": 0.4790996784565916
    }
}