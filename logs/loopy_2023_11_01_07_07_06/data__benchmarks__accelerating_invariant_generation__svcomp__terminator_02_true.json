{
    "logs": {
        "file": "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  while(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;\n//@ assert(x>=100 || z<=100);\n}\n\n}\n",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  while(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;\n//@ assert(x>=100 || z<=100);\n}\n\n}\n\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- x, y and z are initialized with non-deterministic values.\n- x < 100\n- z < 100\n\nLoop condition:\n- x < 100 && 100 < z\n\nLoop invariants:\n- x < 101\n- z < 101\n- x >= 0\n- z >= 0\n- x + z < y + 200\n- If x < 100 && 100 < z:\n  - x + z < 201\n- If x >= 100 || z <= 100:\n  - x + z >= y + 200\n\nExplanation:\n- The first two loop invariants ensure that x and z remain less than 101 throughout the loop execution.\n- The next two loop invariants ensure that x and z remain non-negative throughout the loop execution.\n- The fifth loop invariant ensures that the sum of x and z is always less than the sum of y and 200. This is because in each iteration, either x or z is incremented or decremented by 1, and the loop continues only if x < 100 and 100 < z, which ensures that the sum of x and z is less than 200. So, the sum of x and z can never exceed y + 200.\n- If x < 100 and 100 < z, then the sum of x and z is less than 201. This is because if x < 100 and 100 < z, then x + z < 200 and adding 1 to either x or z makes the sum less than or equal to 201.\n- If x >= 100 or z <= 100, then the sum of x and z must be greater than or equal to y + 200. This is because the loop terminates when this condition is true, and the assertion is only checked if this condition is true. Therefore, if the assertion is true, then x >= 100 or z <= 100. So, the sum of x and z must be greater than or equal to y + 200.",
            "The pre-conditions and variable assignments are:\n\n```\nint x=unknown_int();\nint y=unknown_int();\nint z=unknown_int();\nassume(x<100);\nassume(z<100);\n```\n\nLoop condition:\n\n```\nx<100 && 100<z\n```\n\nLoop invariants:\n\n```\n/*@ \nloop invariant x<100;\nloop invariant z<100;\nloop invariant x<=z+100;\nloop invariant z<=x+100;\nloop invariant (x>=100 || z<=100) ==> (x==\\old(x) && z==\\old(z));\n*/\n```\n\nExplanation:\n\n- The first two loop invariants match the pre-conditions.\n- The third and fourth loop invariants capture the relationship between x and z. Since the loop condition is `x<100 && 100<z`, it means that `z` is at least 100 greater than `x`. Therefore, `x` can be at most `z+100`, and `z` can be at most `x+100`.\n- The final loop invariant is an implication that states that if the assertion is true, then either `x` is greater than or equal to 100 or `z` is less than or equal to 100. This implication is used to take into account the conditional nature of the code. If the assertion is not true, then the implication is vacuously true.",
            "Pre-conditions:\n- `x`, `y` and `z` are integer variables initialized with non-deterministic values.\n- `assume(x<100)` ensures that `x` is less than 100.\n- `assume(z<100)` ensures that `z` is less than 100.\n\nLoop condition: `x<100 && 100<z`\n\nLoop Invariants:\n- Before the loop: `x<100 && z<100`\n- In every iteration:\n    - `x<100 && z<100` (loop invariant from above)\n    - Either `x` increases by 1 or `x` decreases by 1 and `z` decreases by 1.\n    - If `tmp` is true, `x` increases by 1. So, `x-1<100` implies `x<101`.\n    - If `tmp` is false, `x` decreases by 1 and `z` decreases by 1. So, `x<100` and `z+1>100` imply `z>99`.\n    - Therefore, the loop invariant is `x<101 && z>99`.\n- After the loop: \n    - The loop condition is false, so either `x>=100` or `100>=z`.\n    - If `x>=100`, then `x>=100 || z<=100` is true.\n    - If `100>=z`, then `x<101` and `z<=100` imply `x>=100 || z<=100`.\n    - Therefore, the post-condition is `x>=100 || z<=100`.",
            "Pre-conditions and variable assignments:\n- Three integer variables `x`, `y`, and `z` are declared and initialized with non-deterministic values.\n- `assume(x<100)` indicates that `x` is less than 100.\n- `assume(z<100)` indicates that `z` is less than 100.\n\nLoop condition:\n- The loop condition is `x<100 && 100<z`.\n\nLoop invariants:\n- Before the loop execution: `x<100 && z<100`.\n- In every iteration of the loop: \n  - `x<100 && z<100` (since we assume that the loop invariant is true before the loop execution).\n  - If `tmp` is true, then `x` is incremented by 1. Therefore, the new value of `x` is greater than or equal to its previous value. If `tmp` is false, then `x` is decremented by 1 and `z` is decremented by 1. Therefore, the new value of `x` is less than or equal to its previous value and the new value of `z` is less than or equal to its previous value.\n  - Since `x` is incremented or decremented by 1 in each iteration, it will eventually become greater than or equal to 100 or less than 100. Similarly, since `z` is decremented by 1 whenever `tmp` is false, it will eventually become less than or equal to 100. Therefore, the loop invariant can be extended to: `x>=100 || z<=100`.\n- After the loop termination: `x>=100 || z<=100`. This is the assertion that needs to be verified. However, since it is guarded by the loop condition, we can express it as an implication: `(x<100 && 100<z) ==> (x>=100 || z<=100)`. \n\nPutting it all together, we get the following loop invariants:\n```\n/*@ \n    loop invariant x<100 && z<100;\n    loop invariant (x<100 && 100<z) ==> (x>=100 || z<=100);\n*/\n```",
            "Pre-conditions:\n- `x`, `y`, and `z` are integer variables that are initialized with non-deterministic values.\n- `assume(x<100)` and `assume(z<100)` are given as the pre-conditions.\n\nLoop condition:\n- The loop condition is `x<100 && 100<z`.\n\nLoop invariants:\n- `x<100`\n- `z<100`\n- If the loop condition is true, then either `x` increases by 1 or both `x` decreases by 1 and `z` decreases by 1. Therefore, the following conjunction is true for every iteration of the loop:\n  - `(x<=y && y<=100) && (z<=y && y<=100)`\n- If `tmp` is true, then `x` increases by 1. If `tmp` is false, then `x` decreases by 1 and `z` decreases by 1. Therefore, the following conjunction is true for every iteration of the loop:\n  - `((tmp && x'==x+1 && z'==z) || (!tmp && x'==x-1 && z'==z-1))`\n- After the loop terminates, we know that `x>=100 || z<=100`. Therefore, the assertion can be written as an implication:\n  - `((x>=100 || z<=100) ==> (x>=100 || z<=100))`\n\nPutting it all together, the loop invariants are:\n```\n/*@ \n    loop invariant x<100;\n    loop invariant z<100;\n    loop invariant (x<=y && y<=100) && (z<=y && y<=100);\n    loop invariant ((tmp && x'==x+1 && z'==z) || (!tmp && x'==x-1 && z'==z-1));\n*/\nwhile(x<100 && 100<z) \n{\n  _Bool tmp=unknown_bool();\n  if (tmp)\n  {\n    x++;\n  }\n  else\n  {\n    x--;\n    z--;\n  }\n}\n/*@ \n    assert ((x>=100 || z<=100) ==> (x>=100 || z<=100));\n*/"
        ],
        "annotation_blocks": [
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- x, y and z are initialized with non-deterministic values.\n- x < 100\n- z < 100\n\nLoop condition:\n- x < 100 && 100 < z\n\nLoop invariants:\n- x < 101\n- z < 101\n- x >= 0\n- z >= 0\n- x + z < y + 200\n- If x < 100 && 100 < z:\n  - x + z < 201\n- If x >= 100 || z <= 100:\n  - x + z >= y + 200\n\nExplanation:\n- The first two loop invariants ensure that x and z remain less than 101 throughout the loop execution.\n- The next two loop invariants ensure that x and z remain non-negative throughout the loop execution.\n- The fifth loop invariant ensures that the sum of x and z is always less than the sum of y and 200. This is because in each iteration, either x or z is incremented or decremented by 1, and the loop continues only if x < 100 and 100 < z, which ensures that the sum of x and z is less than 200. So, the sum of x and z can never exceed y + 200.\n- If x < 100 and 100 < z, then the sum of x and z is less than 201. This is because if x < 100 and 100 < z, then x + z < 200 and adding 1 to either x or z makes the sum less than or equal to 201.\n- If x >= 100 or z <= 100, then the sum of x and z must be greater than or equal to y + 200. This is because the loop terminates when this condition is true, and the assertion is only checked if this condition is true. Therefore, if the assertion is true, then x >= 100 or z <= 100. So, the sum of x and z must be greater than or equal to y + 200."
            ],
            "/*@ \nloop invariant x<100;\nloop invariant z<100;\nloop invariant x<=z+100;\nloop invariant z<=x+100;\nloop invariant (x>=100 || z<=100) ==> (x==\\old(x) && z==\\old(z));\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- `x`, `y` and `z` are integer variables initialized with non-deterministic values.\n- `assume(x<100)` ensures that `x` is less than 100.\n- `assume(z<100)` ensures that `z` is less than 100.\n\nLoop condition: `x<100 && 100<z`\n\nLoop Invariants:\n- Before the loop: `x<100 && z<100`\n- In every iteration:\n    - `x<100 && z<100` (loop invariant from above)\n    - Either `x` increases by 1 or `x` decreases by 1 and `z` decreases by 1.\n    - If `tmp` is true, `x` increases by 1. So, `x-1<100` implies `x<101`.\n    - If `tmp` is false, `x` decreases by 1 and `z` decreases by 1. So, `x<100` and `z+1>100` imply `z>99`.\n    - Therefore, the loop invariant is `x<101 && z>99`.\n- After the loop: \n    - The loop condition is false, so either `x>=100` or `100>=z`.\n    - If `x>=100`, then `x>=100 || z<=100` is true.\n    - If `100>=z`, then `x<101` and `z<=100` imply `x>=100 || z<=100`.\n    - Therefore, the post-condition is `x>=100 || z<=100`."
            ],
            "/*@ \n    loop invariant x<100 && z<100;\n    loop invariant (x<100 && 100<z) ==> (x>=100 || z<=100);\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- `x`, `y`, and `z` are integer variables that are initialized with non-deterministic values.\n- `assume(x<100)` and `assume(z<100)` are given as the pre-conditions.\n\nLoop condition:\n- The loop condition is `x<100 && 100<z`.\n\nLoop invariants:\n- `x<100`\n- `z<100`\n- If the loop condition is true, then either `x` increases by 1 or both `x` decreases by 1 and `z` decreases by 1. Therefore, the following conjunction is true for every iteration of the loop:\n  - `(x<=y && y<=100) && (z<=y && y<=100)`\n- If `tmp` is true, then `x` increases by 1. If `tmp` is false, then `x` decreases by 1 and `z` decreases by 1. Therefore, the following conjunction is true for every iteration of the loop:\n  - `((tmp && x'==x+1 && z'==z) || (!tmp && x'==x-1 && z'==z-1))`\n- After the loop terminates, we know that `x>=100 || z<=100`. Therefore, the assertion can be written as an implication:\n  - `((x>=100 || z<=100) ==> (x>=100 || z<=100))`\n\nPutting it all together, the loop invariants are:\n```\n/*@ \n    loop invariant x<100;\n    loop invariant z<100;\n    loop invariant (x<=y && y<=100) && (z<=y && y<=100);\n    loop invariant ((tmp && x'==x+1 && z'==z) || (!tmp && x'==x-1 && z'==z-1));\n*/\nwhile(x<100 && 100<z) \n{\n  _Bool tmp=unknown_bool();\n  if (tmp)\n  {\n    x++;\n  }\n  else\n  {\n    x--;\n    z--;\n  }\n}\n/*@ \n    assert ((x>=100 || z<=100) ==> (x>=100 || z<=100));\n*/"
            ]
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- x, y and z are initialized with non-deterministic values.\n- x < 100\n- z < 100\n\nLoop condition:\n- x < 100 && 100 < z\n\nLoop invariants:\n- x < 101\n- z < 101\n- x >= 0\n- z >= 0\n- x + z < y + 200\n- If x < 100 && 100 < z:\n  - x + z < 201\n- If x >= 100 || z <= 100:\n  - x + z >= y + 200\n\nExplanation:\n- The first two loop invariants ensure that x and z remain less than 101 throughout the loop execution.\n- The next two loop invariants ensure that x and z remain non-negative throughout the loop execution.\n- The fifth loop invariant ensures that the sum of x and z is always less than the sum of y and 200. This is because in each iteration, either x or z is incremented or decremented by 1, and the loop continues only if x < 100 and 100 < z, which ensures that the sum of x and z is less than 200. So, the sum of x and z can never exceed y + 200.\n- If x < 100 and 100 < z, then the sum of x and z is less than 201. This is because if x < 100 and 100 < z, then x + z < 200 and adding 1 to either x or z makes the sum less than or equal to 201.\n- If x >= 100 or z <= 100, then the sum of x and z must be greater than or equal to y + 200. This is because the loop terminates when this condition is true, and the assertion is only checked if this condition is true. Therefore, if the assertion is true, then x >= 100 or z <= 100. So, the sum of x and z must be greater than or equal to y + 200.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \nloop invariant x<100;\nloop invariant z<100;\nloop invariant x<=z+100;\nloop invariant z<=x+100;\nloop invariant (x>=100 || z<=100) ==> (x==\\old(x) && z==\\old(z));\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: \\old undefined in this context. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  /*@\nloop invariant i1: x<100;\nloop invariant i2: z<100;\n\n\n\n*/\nwhile(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;\n//@ assert(x>=100 || z<=100);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- `x`, `y` and `z` are integer variables initialized with non-deterministic values.\n- `assume(x<100)` ensures that `x` is less than 100.\n- `assume(z<100)` ensures that `z` is less than 100.\n\nLoop condition: `x<100 && 100<z`\n\nLoop Invariants:\n- Before the loop: `x<100 && z<100`\n- In every iteration:\n    - `x<100 && z<100` (loop invariant from above)\n    - Either `x` increases by 1 or `x` decreases by 1 and `z` decreases by 1.\n    - If `tmp` is true, `x` increases by 1. So, `x-1<100` implies `x<101`.\n    - If `tmp` is false, `x` decreases by 1 and `z` decreases by 1. So, `x<100` and `z+1>100` imply `z>99`.\n    - Therefore, the loop invariant is `x<101 && z>99`.\n- After the loop: \n    - The loop condition is false, so either `x>=100` or `100>=z`.\n    - If `x>=100`, then `x>=100 || z<=100` is true.\n    - If `100>=z`, then `x<101` and `z<=100` imply `x>=100 || z<=100`.\n    - Therefore, the post-condition is `x>=100 || z<=100`.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant x<100 && z<100;\n    loop invariant (x<100 && 100<z) ==> (x>=100 || z<=100);\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant x<100 && z<100 is inductive.\nloop invariant (x<100 && 100<z) ==> (x>=100 || z<=100) is inductive.\nAssertion x >= 100 || z <= 100: Valid"
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- `x`, `y`, and `z` are integer variables that are initialized with non-deterministic values.\n- `assume(x<100)` and `assume(z<100)` are given as the pre-conditions.\n\nLoop condition:\n- The loop condition is `x<100 && 100<z`.\n\nLoop invariants:\n- `x<100`\n- `z<100`\n- If the loop condition is true, then either `x` increases by 1 or both `x` decreases by 1 and `z` decreases by 1. Therefore, the following conjunction is true for every iteration of the loop:\n  - `(x<=y && y<=100) && (z<=y && y<=100)`\n- If `tmp` is true, then `x` increases by 1. If `tmp` is false, then `x` decreases by 1 and `z` decreases by 1. Therefore, the following conjunction is true for every iteration of the loop:\n  - `((tmp && x'==x+1 && z'==z) || (!tmp && x'==x-1 && z'==z-1))`\n- After the loop terminates, we know that `x>=100 || z<=100`. Therefore, the assertion can be written as an implication:\n  - `((x>=100 || z<=100) ==> (x>=100 || z<=100))`\n\nPutting it all together, the loop invariants are:\n```\n/*@ \n    loop invariant x<100;\n    loop invariant z<100;\n    loop invariant (x<=y && y<=100) && (z<=y && y<=100);\n    loop invariant ((tmp && x'==x+1 && z'==z) || (!tmp && x'==x-1 && z'==z-1));\n*/\nwhile(x<100 && 100<z) \n{\n  _Bool tmp=unknown_bool();\n  if (tmp)\n  {\n    x++;\n  }\n  else\n  {\n    x--;\n    z--;\n  }\n}\n/*@ \n    assert ((x>=100 || z<=100) ==> (x>=100 || z<=100));\n*/",
                "error": "Output does not contain at least 1 code block"
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 17: \\old undefined in this context. Ignoring loop annotation",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  /*@\nloop invariant i1: x<100;\nloop invariant i2: z<100;\nloop invariant i3: x<=z+100;\nloop invariant i4: z<=x+100;\nloop invariant i5: (x>=100 || z<=100) ==> (x==\\old(x) && z==\\old(z));\nloop invariant i6: x<100 && z<100;\nloop invariant i7: (x<100 && 100<z) ==> (x>=100 || z<=100);\n*/\nwhile(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;\n//@ assert(x>=100 || z<=100);\n}\n\n}\n",
        "combined_annotation_num_solver_calls": 3,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  /*@\nloop invariant i1: x<100;\nloop invariant i2: z<100;\n\n\n\nloop invariant i6: x<100 && z<100;\nloop invariant i7: (x<100 && 100<z) ==> (x>=100 || z<=100);\n*/\nwhile(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;\n//@ assert(x>=100 || z<=100);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c"
        ],
        "skipped": [],
        "total": 84,
        "success_count": 36,
        "failure_count": 48,
        "success_rate": 0.42857142857142855
    }
}