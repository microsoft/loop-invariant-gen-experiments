{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    for (i = 0; i < LARGE_INT; i++) ;\n    {;\n//@ assert(i == LARGE_INT);\n}\n\n    return 0;\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    for (i = 0; i < LARGE_INT; i++) ;\n    {;\n//@ assert(i == LARGE_INT);\n}\n\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- None.\n\nVariable assignments:\n- None.\n\nLoop condition:\n- The loop condition is `i < LARGE_INT`.\n\nPost-condition:\n- The post-condition is `i == LARGE_INT`.\n\nLoop invariants:\n- Before the loop execution: `i >= 0`\n- In every iteration of the loop: `i < LARGE_INT`\n- After the loop termination: `i == LARGE_INT`\n\nExplanation:\n- Before the loop execution, `i` is initialized to 0 and therefore, `i >= 0`.\n- In every iteration of the loop, `i` is incremented by 1 and compared to `LARGE_INT`. Since the loop condition is `i < LARGE_INT`, we know that `i` is always less than `LARGE_INT`.\n- After the loop termination, `i` is equal to `LARGE_INT` since the loop condition fails when `i` reaches `LARGE_INT`. Therefore, `i == LARGE_INT`.\n- Since there are no non-deterministic variables, there is no need to add any implications to make the invariants trivially true. \n\nOutput:\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant i < LARGE_INT;\n    loop invariant i == LARGE_INT ==> \\at(i, LoopEntry);\n    loop invariant i == LARGE_INT;\n*/\n```",
            "Pre-conditions:\n- None\n\nVariable assignments:\n- None\n\nLoop condition:\n- `i < LARGE_INT`\n\nPost-condition:\n- `i == LARGE_INT`\n\nLoop invariants:\n- Before loop execution: `i == 0`\n- In every iteration of the loop: `0 <= i <= LARGE_INT`\n- After loop termination: `i == LARGE_INT`\n\nExplanation:\n- Before the loop execution, the value of `i` is `0`.\n- In every iteration of the loop, the value of `i` increases by `1` and is always between `0` and `LARGE_INT` (inclusive).\n- After the loop termination, the value of `i` is `LARGE_INT`.\n- These loop invariants imply the post-condition `i == LARGE_INT`.\n- Since there are no non-deterministic variables, there is no need for any trivially true implications. \n- Since there are no conditional statements in the program, there is no need for any implication using a guard condition. \n\nTherefore, the loop invariants are:\n\n```\n/*@ \n    loop invariant i == 0;\n    loop invariant 0 <= i <= LARGE_INT;\n    loop invariant i == LARGE_INT;\n*/\n```",
            "Pre-conditions/Variable Assignments:\n- No explicit pre-conditions\n- `i` is assigned the value 0 in the for loop\n\nLoop Condition:\n- `i < LARGE_INT`\n\nPost-condition:\n- `i == LARGE_INT`\n\nLoop Invariants:\n- `0 <= i <= LARGE_INT` (true before loop execution)\n- `0 <= i <= LARGE_INT` (true in every iteration of the loop)\n- `i == LARGE_INT` (true after loop termination)\n\nExplanation:\n- The loop invariant `0 <= i <= LARGE_INT` is true before loop execution since `i` is assigned the value 0 and `LARGE_INT` is a positive integer constant. \n- The loop invariant `0 <= i <= LARGE_INT` is true in every iteration of the loop since the loop condition is `i < LARGE_INT`. Since `i` is incremented by 1 in every iteration, `i` will always be less than `LARGE_INT` until the termination condition is reached. \n- The loop invariant `i == LARGE_INT` is true after loop termination since the loop termination condition is `i >= LARGE_INT` and the loop invariant `0 <= i <= LARGE_INT` holds in every iteration. Therefore, the only way the loop can terminate is when `i` is equal to `LARGE_INT`. \n\nSince all three loop invariants are true, they imply the post-condition `i == LARGE_INT`.",
            "First, let's analyze the loop. The loop in the program is a for loop with no body, i.e., an empty statement. It simply increments the variable i until it reaches the value of LARGE_INT. Therefore, we can say the loop condition is:\n```\ni < LARGE_INT\n```\n\nNext, let's analyze the post-condition. The post-condition is:\n```\ni == LARGE_INT\n```\nSince this is an assertion, we don't need to use implication to take care of the conditional nature of the code.\n\nNow, let's find the necessary loop invariants. \n\nBefore the loop execution, we need an invariant that initializes the loop variable i. Since we don't know the initial value of i, we cannot use any bounds. Therefore, we can say:\n```\n/*@ \n    loop invariant 0 <= i <= LARGE_INT;\n*/\n```\n\nIn every iteration of the loop, we need an invariant that preserves the loop variable i. Since the loop does not have a body, we don't need any preservation of i. We can use a trivial invariant that always holds:\n```\n/*@ \n    loop invariant i < LARGE_INT ==> i+1 < LARGE_INT;\n*/\n```\n\nAfter the loop termination, we need an invariant that implies the post-condition. Since the only thing that changes in the loop is the value of i, we can use the loop condition to imply the post-condition:\n```\n/*@ \n    loop invariant !(i < LARGE_INT) ==> i == LARGE_INT;\n*/\n```\n\nPutting it all together, we get the following loop invariants:\n```\n/*@ \n    loop invariant 0 <= i <= LARGE_INT;\n    loop invariant i < LARGE_INT ==> i+1 < LARGE_INT;\n    loop invariant !(i < LARGE_INT) ==> i == LARGE_INT;\n*/\n```\n\nNote that we don't need any implications or bounds on i, since we don't have any non-deterministic values or relations between variables in this program.",
            "First, we note that the loop in the program is a `for` loop with an empty body. This means that the loop condition will be checked in every iteration, and since the body is empty, the loop will terminate when the condition evaluates to false.\n\nNow let's analyze the loop condition. The loop condition is `i < LARGE_INT`. This means that `i` is increasing in every iteration, and the loop will terminate when `i` becomes equal to or larger than `LARGE_INT`.\n\nBefore the loop execution, `i` is assigned the value `0`. So, a loop invariant that holds before the loop execution is `i == 0`.\n\nIn every iteration of the loop, `i` is incremented by `1`, and we know that `i` is less than `LARGE_INT`. So, a loop invariant that holds in every iteration is `0 <= i < LARGE_INT`.\n\nAfter the loop termination, `i` is equal to `LARGE_INT`. So, a loop invariant that holds after the loop termination is `i == LARGE_INT`.\n\nPutting all the loop invariants together, we get:\n\n```\n/*@ \n    loop invariant i == 0;\n    loop invariant 0 <= i < LARGE_INT;\n    loop invariant i == LARGE_INT;\n*/\n```\n\nSince the loop invariants imply the post-condition `i == LARGE_INT`, Frama-C should be able to verify the post-condition with these loop invariants."
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant i >= 0;\n    loop invariant i < LARGE_INT;\n    loop invariant i == LARGE_INT ==> \\at(i, LoopEntry);\n    loop invariant i == LARGE_INT;\n*/",
            "/*@ \n    loop invariant i == 0;\n    loop invariant 0 <= i <= LARGE_INT;\n    loop invariant i == LARGE_INT;\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions/Variable Assignments:\n- No explicit pre-conditions\n- `i` is assigned the value 0 in the for loop\n\nLoop Condition:\n- `i < LARGE_INT`\n\nPost-condition:\n- `i == LARGE_INT`\n\nLoop Invariants:\n- `0 <= i <= LARGE_INT` (true before loop execution)\n- `0 <= i <= LARGE_INT` (true in every iteration of the loop)\n- `i == LARGE_INT` (true after loop termination)\n\nExplanation:\n- The loop invariant `0 <= i <= LARGE_INT` is true before loop execution since `i` is assigned the value 0 and `LARGE_INT` is a positive integer constant. \n- The loop invariant `0 <= i <= LARGE_INT` is true in every iteration of the loop since the loop condition is `i < LARGE_INT`. Since `i` is incremented by 1 in every iteration, `i` will always be less than `LARGE_INT` until the termination condition is reached. \n- The loop invariant `i == LARGE_INT` is true after loop termination since the loop termination condition is `i >= LARGE_INT` and the loop invariant `0 <= i <= LARGE_INT` holds in every iteration. Therefore, the only way the loop can terminate is when `i` is equal to `LARGE_INT`. \n\nSince all three loop invariants are true, they imply the post-condition `i == LARGE_INT`."
            ],
            "/*@ \n    loop invariant 0 <= i <= LARGE_INT;\n*/",
            "/*@ \n    loop invariant i == 0;\n    loop invariant 0 <= i < LARGE_INT;\n    loop invariant i == LARGE_INT;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 5,
                "annotations": "/*@ \n    loop invariant i >= 0;\n    loop invariant i < LARGE_INT;\n    loop invariant i == LARGE_INT ==> \\at(i, LoopEntry);\n    loop invariant i == LARGE_INT;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 0 is partially proven to be inductive.\nloop invariant i < LARGE_INT is partially proven to be inductive.\nloop invariant i == LARGE_INT ==> \\at(i, LoopEntry) is partially proven to be inductive.\nloop invariant i == LARGE_INT is preserved but not established.\nAssertion i == 1000000: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: i >= 0;\n\n\n\n*/\nfor (i = 0; i < LARGE_INT; i++) ;\n    {;\n//@ assert(i == LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant i == 0;\n    loop invariant 0 <= i <= LARGE_INT;\n    loop invariant i == LARGE_INT;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i == 0 is partially proven to be inductive.\nloop invariant 0 <= i <= LARGE_INT is partially proven to be inductive.\nloop invariant i == LARGE_INT is preserved but not established.\nAssertion i == 1000000: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\n\nloop invariant i2: 0 <= i <= LARGE_INT;\n\n*/\nfor (i = 0; i < LARGE_INT; i++) ;\n    {;\n//@ assert(i == LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions/Variable Assignments:\n- No explicit pre-conditions\n- `i` is assigned the value 0 in the for loop\n\nLoop Condition:\n- `i < LARGE_INT`\n\nPost-condition:\n- `i == LARGE_INT`\n\nLoop Invariants:\n- `0 <= i <= LARGE_INT` (true before loop execution)\n- `0 <= i <= LARGE_INT` (true in every iteration of the loop)\n- `i == LARGE_INT` (true after loop termination)\n\nExplanation:\n- The loop invariant `0 <= i <= LARGE_INT` is true before loop execution since `i` is assigned the value 0 and `LARGE_INT` is a positive integer constant. \n- The loop invariant `0 <= i <= LARGE_INT` is true in every iteration of the loop since the loop condition is `i < LARGE_INT`. Since `i` is incremented by 1 in every iteration, `i` will always be less than `LARGE_INT` until the termination condition is reached. \n- The loop invariant `i == LARGE_INT` is true after loop termination since the loop termination condition is `i >= LARGE_INT` and the loop invariant `0 <= i <= LARGE_INT` holds in every iteration. Therefore, the only way the loop can terminate is when `i` is equal to `LARGE_INT`. \n\nSince all three loop invariants are true, they imply the post-condition `i == LARGE_INT`.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant 0 <= i <= LARGE_INT;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant 0 <= i <= LARGE_INT is inductive.\nAssertion i == 1000000: Valid"
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant i == 0;\n    loop invariant 0 <= i < LARGE_INT;\n    loop invariant i == LARGE_INT;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i == 0 is partially proven to be inductive.\nloop invariant 0 <= i < LARGE_INT is partially proven to be inductive.\nloop invariant i == LARGE_INT is preserved but not established.\nAssertion i == 1000000: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\n\n\n\n*/\nfor (i = 0; i < LARGE_INT; i++) ;\n    {;\n//@ assert(i == LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant i >= 0 is partially proven to be inductive.\nloop invariant i < LARGE_INT is partially proven to be inductive.\nloop invariant i == LARGE_INT ==> \\at(i, LoopEntry) is partially proven to be inductive.\nloop invariant i == LARGE_INT is preserved but not established.\nloop invariant i == 0 is partially proven to be inductive.\nloop invariant 0 <= i <= LARGE_INT is partially proven to be inductive.\nloop invariant 0 <= i < LARGE_INT is partially proven to be inductive.\nAssertion i == 1000000: Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: i >= 0;\nloop invariant i2: i < LARGE_INT;\nloop invariant i3: i == LARGE_INT ==> \\at(i, LoopEntry);\nloop invariant i4: i == LARGE_INT;\nloop invariant i5: i == 0;\nloop invariant i6: 0 <= i <= LARGE_INT;\nloop invariant i7: 0 <= i < LARGE_INT;\n*/\nfor (i = 0; i < LARGE_INT; i++) ;\n    {;\n//@ assert(i == LARGE_INT);\n}\n\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 6,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: i >= 0;\n\n\n\n\nloop invariant i6: 0 <= i <= LARGE_INT;\n\n*/\nfor (i = 0; i < LARGE_INT; i++) ;\n    {;\n//@ assert(i == LARGE_INT);\n}\n\n    return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c"
        ],
        "skipped": [],
        "total": 129,
        "success_count": 53,
        "failure_count": 76,
        "success_rate": 0.4108527131782946
    }
}