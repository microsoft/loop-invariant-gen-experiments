{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  for (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}\n",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  for (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}\n\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- `leader_len`, `bufsize`, and `ielen` are integers that are initialized with non-negative values less than `LARGE_INT`.\n\nVariable Assignments:\n- `p` is an integer initialized with 0.\n- `bufsize_0` is an integer initialized with `bufsize`.\n\nLoop Condition:\n- The loop iterates as long as `i < ielen` and `bufsize > 2`.\n\nLoop Invariants:\n```\n/*@ \nloop invariant 0 <= i <= ielen;\nloop invariant 2 <= bufsize_0;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant bufsize + leader_len == bufsize_0;\nloop invariant i * 2 <= p;\nloop invariant (ielen - i) * 2 <= bufsize;\nloop invariant (ielen - i) * 2 + leader_len <= bufsize_0;\n*/\n```\nExplanation:\n- The first loop invariant ensures that `i` is always between `0` and `ielen`.\n- The second loop invariant ensures that `bufsize_0` is always greater than or equal to 2.\n- The third loop invariant ensures that `p` is always between `0` and `bufsize_0`.\n- The fourth loop invariant ensures that the sum of `bufsize` and `leader_len` is always equal to `bufsize_0`.\n- The fifth loop invariant ensures that `p` is always greater than or equal to `i` times 2.\n- The sixth loop invariant ensures that the remaining buffer size is always greater than or equal to `(ielen - i)` times 2.\n- The seventh loop invariant ensures that the remaining buffer size plus `leader_len` is always greater than or equal to `(ielen - i)` times 2 plus `leader_len`.\n\nUsing these loop invariants, we can verify the post-condition that there are no assertion violations in the loop.",
            "Pre-conditions:\n- `leader_len`, `bufsize`, and `ielen` are initialized with values obtained from the `unknown_int()` function.\n- `leader_len`, `bufsize`, and `ielen` are less than `LARGE_INT`.\n- `leader_len`, `bufsize`, and `ielen` are greater than 0.\n- `bufsize` is greater than or equal to `leader_len`.\n\nLoop condition:\n- `i < ielen && bufsize > 2`\n\nLoop invariants:\n```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant bufsize_0 >= bufsize >= leader_len;\nloop invariant i >= 0 && i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant p % 2 == 0;\nloop invariant \\forall integer j; 0 <= j < i ==> (j*2+1 < bufsize_0 ==> j*2+1 < p);\nloop invariant \\forall integer j; 0 <= j < i ==> (j*2+2 < bufsize_0 ==> j*2+2 < p);\n*/\n```\nExplanation:\n- The first loop invariant states that `p` is between 0 and `bufsize_0` (the original value of `bufsize`).\n- The second loop invariant states that `bufsize` is between `leader_len` and `bufsize_0`, which implies that `bufsize` is always greater than or equal to `leader_len`.\n- The third loop invariant states that `i` is between 0 and `ielen`.\n- The fourth loop invariant states that `bufsize` is always greater than or equal to `2*i`.\n- The fifth loop invariant states that `p` is even, because it is incremented by 2 in each iteration of the loop.\n- The sixth and seventh loop invariants state that for all `j` between 0 and `i`, if `j*2+1` or `j*2+2` is less than `bufsize_0`, then it is also less than `p`. This ensures that the two assertions in the loop body hold. \n\nNote: Since `unknown_int()` returns a non-deterministic value, we cannot make any assumptions about the values of `leader_len`, `bufsize`, and `ielen`. However, we can make sure that their values are within a certain range by adding the bounds as conjunctions in the loop invariants.",
            "Pre-conditions:\n- `leader_len`, `bufsize`, and `ielen` are integer variables initialized with non-negative values less than `LARGE_INT`.\n\nVariable bounds:\n- `0 <= leader_len < LARGE_INT`\n- `0 <= bufsize < LARGE_INT`\n- `0 <= ielen < LARGE_INT`\n- `0 <= i < ielen`\n\nLoop Invariants:\n```\n/*@\n  loop invariant 0 <= p <= bufsize_0;\n  loop invariant bufsize_0 - bufsize <= leader_len;\n  loop invariant i <= ielen;\n  loop invariant bufsize >= 2*ielen ==> p+2*i <= bufsize_0;\n  loop invariant i < ielen ==> bufsize > 2;\n*/\n```\nExplanation:\n- `0 <= p <= bufsize_0` - `p` always lies between 0 and `bufsize_0`. This is true before and after the loop execution.\n- `bufsize_0 - bufsize <= leader_len` - `bufsize` is decreased by `leader_len` before the loop. Hence, the difference between `bufsize_0` and `bufsize` is at most `leader_len`. This is true before and after the loop execution.\n- `i <= ielen` - `i` is incremented by 1 in each iteration and the loop runs `ielen` times. Hence, `i` is always less than or equal to `ielen`. This is true before and after the loop execution.\n- `bufsize >= 2*ielen ==> p+2*i <= bufsize_0` - If `bufsize` is greater than or equal to `2*ielen`, then `p+2*i` is less than or equal to `bufsize_0`. This is true in every iteration of the loop.\n- `i < ielen ==> bufsize > 2` - If `i` is less than `ielen`, then `bufsize` is greater than 2. This is true in every iteration of the loop.",
            "Pre-conditions:\n- `leader_len`, `bufsize`, and `ielen` are initialized with non-negative integer values that are less than `LARGE_INT`.\n\nLoop condition:\n- `i < ielen && bufsize > 2`\n\nLoop invariants:\n- `0 <= p <= bufsize_0`\n- `leader_len > 0 ==> bufsize >= leader_len`\n- `bufsize_0 > 0 ==> bufsize >= 0`\n- `ielen > 0 ==> i >= 0`\n- `ielen > 0 ==> i < ielen`\n- `bufsize_0 > 0 ==> bufsize_0 >= bufsize`\n- `ielen > 0 && i < ielen ==> p <= bufsize_0 - 2*(ielen - 1)`\n- `ielen > 0 && i >= 0 ==> p >= 2*i`\n- `ielen > 0 && i < ielen && bufsize > 2 ==> p + 2 <= bufsize_0`\n- `!(bufsize > 2) ==> i == ielen`\n- `!(bufsize >= 2*ielen) ==> i == 0`\n\nExplanation:\n- The first invariant states that `p` is always non-negative and less than or equal to `bufsize_0`, which is the original value of `bufsize` before it was modified by the program. This is true because `p` is initialized to 0 and incremented by 2 in each iteration of the loop, while `bufsize` is decremented by at least 2 in each iteration.\n- The second invariant states that if `leader_len` is positive, then `bufsize` must be at least `leader_len`. This is true because the program checks if `bufsize` is less than `leader_len` and terminates if it is.\n- The third invariant states that if `bufsize_0` is positive, then `bufsize` must be non-negative. This is true because `bufsize` is decremented by at least `leader_len` and then by at least `2*ielen` in the loop, so it can never become negative if it is initially non-negative.\n- The fourth invariant states that if `ielen` is positive, then `i` must be non-negative. This is true because `i` is initialized to 0 and incremented by 1 in each iteration of the loop.\n- The fifth invariant states that if `ielen` is positive, then `i` must be less than `ielen`. This is true because the loop condition is `i < ielen`.\n- The sixth invariant states that `bufsize_0` is always greater than or equal to `bufsize`. This is true because `bufsize` is decremented by at least `leader_len` and then by at least `2*ielen` in the loop.\n- The seventh invariant states that if `ielen` is positive and `i` is less than `ielen`, then `p` must be less than or equal to `bufsize_0 - 2*(ielen - 1)`. This is true because `p` is initialized to `leader_len` and incremented by 2 in each iteration of the loop, so it can reach at most `bufsize_0 - 2*(ielen - 1)` before the loop terminates.\n- The eighth invariant states that if `ielen` is positive and `i` is non-negative, then `p` must be greater than or equal to `2*i`. This is true because `p` is initialized to `leader_len` and incremented by 2 in each iteration of the loop, so it can reach at least `2*i`.\n- The ninth invariant states that if `ielen` is positive, `i` is less than `ielen`, and `bufsize` is greater than 2, then `p + 2` must be less than or equal to `bufsize_0`. This is true because `p` is incremented by 2 in each iteration of the loop and `bufsize` is decremented by at least 2 in each iteration, so `p + 2` can reach at most `bufsize_0` before the loop terminates.\n- The tenth invariant states that if `bufsize` is not greater than 2, then `i` must be equal to `ielen`. This is true because the loop condition is `i < ielen && bufsize > 2`, so if `bufsize` is not greater than 2, the loop terminates and `i` must be equal to `ielen`.\n- The eleventh invariant states that if `bufsize` is not greater than or equal to `2*ielen`, then `i` must be equal to 0. This is true because if `bufsize` is not",
            "Pre-conditions:\n- `leader_len`, `bufsize`, and `ielen` are integers with values less than `LARGE_INT`.\n\nVariable assignments:\n- `leader_len`, `bufsize`, and `ielen` are assigned the result of the function `unknown_int()`.\n- `p`, `i`, `leader_len`, `bufsize`, `bufsize_0`, and `ielen` are integers.\n\nLoop condition:\n- The loop will execute as long as `i < ielen` and `bufsize > 2`.\n\nLoop Invariants:\n```\n/*@\n    loop invariant 0 <= p <= bufsize_0;\n    loop invariant bufsize_0 >= bufsize >= leader_len;\n    loop invariant ielen >= i;\n    loop invariant bufsize_0 >= 2 * i + leader_len;\n    loop invariant i >= 0;\n*/\n```\nExplanation:\n- The first loop invariant states that `p` is always between 0 and `bufsize_0`.\n- The second loop invariant states that `bufsize` is always greater than or equal to `leader_len` and less than or equal to `bufsize_0`.\n- The third loop invariant states that `i` is always less than or equal to `ielen`.\n- The fourth loop invariant states that `bufsize_0` is always greater than or equal to `2 * i + leader_len`.\n- The fifth loop invariant states that `i` is always greater than or equal to 0.\n\nNote that the assertion statements are trivially true because they are not guarded by any condition."
        ],
        "annotation_blocks": [
            "/*@ \nloop invariant 0 <= i <= ielen;\nloop invariant 2 <= bufsize_0;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant bufsize + leader_len == bufsize_0;\nloop invariant i * 2 <= p;\nloop invariant (ielen - i) * 2 <= bufsize;\nloop invariant (ielen - i) * 2 + leader_len <= bufsize_0;\n*/",
            "/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant bufsize_0 >= bufsize >= leader_len;\nloop invariant i >= 0 && i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant p % 2 == 0;\nloop invariant \\forall integer j; 0 <= j < i ==> (j*2+1 < bufsize_0 ==> j*2+1 < p);\nloop invariant \\forall integer j; 0 <= j < i ==> (j*2+2 < bufsize_0 ==> j*2+2 < p);\n*/",
            "/*@\n  loop invariant 0 <= p <= bufsize_0;\n  loop invariant bufsize_0 - bufsize <= leader_len;\n  loop invariant i <= ielen;\n  loop invariant bufsize >= 2*ielen ==> p+2*i <= bufsize_0;\n  loop invariant i < ielen ==> bufsize > 2;\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- `leader_len`, `bufsize`, and `ielen` are initialized with non-negative integer values that are less than `LARGE_INT`.\n\nLoop condition:\n- `i < ielen && bufsize > 2`\n\nLoop invariants:\n- `0 <= p <= bufsize_0`\n- `leader_len > 0 ==> bufsize >= leader_len`\n- `bufsize_0 > 0 ==> bufsize >= 0`\n- `ielen > 0 ==> i >= 0`\n- `ielen > 0 ==> i < ielen`\n- `bufsize_0 > 0 ==> bufsize_0 >= bufsize`\n- `ielen > 0 && i < ielen ==> p <= bufsize_0 - 2*(ielen - 1)`\n- `ielen > 0 && i >= 0 ==> p >= 2*i`\n- `ielen > 0 && i < ielen && bufsize > 2 ==> p + 2 <= bufsize_0`\n- `!(bufsize > 2) ==> i == ielen`\n- `!(bufsize >= 2*ielen) ==> i == 0`\n\nExplanation:\n- The first invariant states that `p` is always non-negative and less than or equal to `bufsize_0`, which is the original value of `bufsize` before it was modified by the program. This is true because `p` is initialized to 0 and incremented by 2 in each iteration of the loop, while `bufsize` is decremented by at least 2 in each iteration.\n- The second invariant states that if `leader_len` is positive, then `bufsize` must be at least `leader_len`. This is true because the program checks if `bufsize` is less than `leader_len` and terminates if it is.\n- The third invariant states that if `bufsize_0` is positive, then `bufsize` must be non-negative. This is true because `bufsize` is decremented by at least `leader_len` and then by at least `2*ielen` in the loop, so it can never become negative if it is initially non-negative.\n- The fourth invariant states that if `ielen` is positive, then `i` must be non-negative. This is true because `i` is initialized to 0 and incremented by 1 in each iteration of the loop.\n- The fifth invariant states that if `ielen` is positive, then `i` must be less than `ielen`. This is true because the loop condition is `i < ielen`.\n- The sixth invariant states that `bufsize_0` is always greater than or equal to `bufsize`. This is true because `bufsize` is decremented by at least `leader_len` and then by at least `2*ielen` in the loop.\n- The seventh invariant states that if `ielen` is positive and `i` is less than `ielen`, then `p` must be less than or equal to `bufsize_0 - 2*(ielen - 1)`. This is true because `p` is initialized to `leader_len` and incremented by 2 in each iteration of the loop, so it can reach at most `bufsize_0 - 2*(ielen - 1)` before the loop terminates.\n- The eighth invariant states that if `ielen` is positive and `i` is non-negative, then `p` must be greater than or equal to `2*i`. This is true because `p` is initialized to `leader_len` and incremented by 2 in each iteration of the loop, so it can reach at least `2*i`.\n- The ninth invariant states that if `ielen` is positive, `i` is less than `ielen`, and `bufsize` is greater than 2, then `p + 2` must be less than or equal to `bufsize_0`. This is true because `p` is incremented by 2 in each iteration of the loop and `bufsize` is decremented by at least 2 in each iteration, so `p + 2` can reach at most `bufsize_0` before the loop terminates.\n- The tenth invariant states that if `bufsize` is not greater than 2, then `i` must be equal to `ielen`. This is true because the loop condition is `i < ielen && bufsize > 2`, so if `bufsize` is not greater than 2, the loop terminates and `i` must be equal to `ielen`.\n- The eleventh invariant states that if `bufsize` is not greater than or equal to `2*ielen`, then `i` must be equal to 0. This is true because if `bufsize` is not"
            ],
            "/*@\n    loop invariant 0 <= p <= bufsize_0;\n    loop invariant bufsize_0 >= bufsize >= leader_len;\n    loop invariant ielen >= i;\n    loop invariant bufsize_0 >= 2 * i + leader_len;\n    loop invariant i >= 0;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \nloop invariant 0 <= i <= ielen;\nloop invariant 2 <= bufsize_0;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant bufsize + leader_len == bufsize_0;\nloop invariant i * 2 <= p;\nloop invariant (ielen - i) * 2 <= bufsize;\nloop invariant (ielen - i) * 2 + leader_len <= bufsize_0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant 2 <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize + leader_len == bufsize_0 is partially proven to be inductive.\nloop invariant i * 2 <= p is partially proven to be inductive.\nloop invariant (ielen - i) * 2 <= bufsize is partially proven to be inductive.\nloop invariant (ielen - i) * 2 + leader_len <= bufsize_0 is partially proven to be inductive.\nAssertion 0 <= p: Valid\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: 2 <= bufsize_0;\nloop invariant i3: 0 <= p <= bufsize_0;\nloop invariant i4: bufsize + leader_len == bufsize_0;\nloop invariant i5: i * 2 <= p;\nloop invariant i6: (ielen - i) * 2 <= bufsize;\nloop invariant i7: (ielen - i) * 2 + leader_len <= bufsize_0;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}\n",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant bufsize_0 >= bufsize >= leader_len;\nloop invariant i >= 0 && i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant p % 2 == 0;\nloop invariant \\forall integer j; 0 <= j < i ==> (j*2+1 < bufsize_0 ==> j*2+1 < p);\nloop invariant \\forall integer j; 0 <= j < i ==> (j*2+2 < bufsize_0 ==> j*2+2 < p);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize_0 >= bufsize >= leader_len is preserved but not established.\nloop invariant i >= 0 && i <= ielen is partially proven to be inductive.\nloop invariant bufsize >= 2*i is established but not preserved.\nloop invariant p % 2 == 0 is preserved but not established.\nloop invariant \\forall integer j; 0 <= j < i ==> (j*2+1 < bufsize_0 ==> j*2+1 < p) is partially proven to be inductive.\nloop invariant \\forall integer j; 0 <= j < i ==> (j*2+2 < bufsize_0 ==> j*2+2 < p) is established but not preserved.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\n\nloop invariant i3: i >= 0 && i <= ielen;\n\n\nloop invariant i6: \\forall integer j; 0 <= j < i ==> (j*2+1 < bufsize_0 ==> j*2+1 < p);\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@\n  loop invariant 0 <= p <= bufsize_0;\n  loop invariant bufsize_0 - bufsize <= leader_len;\n  loop invariant i <= ielen;\n  loop invariant bufsize >= 2*ielen ==> p+2*i <= bufsize_0;\n  loop invariant i < ielen ==> bufsize > 2;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize_0 - bufsize <= leader_len is partially proven to be inductive.\nloop invariant i <= ielen is partially proven to be inductive.\nloop invariant bufsize >= 2*ielen ==> p+2*i <= bufsize_0 is established but not preserved.\nloop invariant i < ielen ==> bufsize > 2 is preserved but not established.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: bufsize_0 - bufsize <= leader_len;\nloop invariant i3: i <= ielen;\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- `leader_len`, `bufsize`, and `ielen` are initialized with non-negative integer values that are less than `LARGE_INT`.\n\nLoop condition:\n- `i < ielen && bufsize > 2`\n\nLoop invariants:\n- `0 <= p <= bufsize_0`\n- `leader_len > 0 ==> bufsize >= leader_len`\n- `bufsize_0 > 0 ==> bufsize >= 0`\n- `ielen > 0 ==> i >= 0`\n- `ielen > 0 ==> i < ielen`\n- `bufsize_0 > 0 ==> bufsize_0 >= bufsize`\n- `ielen > 0 && i < ielen ==> p <= bufsize_0 - 2*(ielen - 1)`\n- `ielen > 0 && i >= 0 ==> p >= 2*i`\n- `ielen > 0 && i < ielen && bufsize > 2 ==> p + 2 <= bufsize_0`\n- `!(bufsize > 2) ==> i == ielen`\n- `!(bufsize >= 2*ielen) ==> i == 0`\n\nExplanation:\n- The first invariant states that `p` is always non-negative and less than or equal to `bufsize_0`, which is the original value of `bufsize` before it was modified by the program. This is true because `p` is initialized to 0 and incremented by 2 in each iteration of the loop, while `bufsize` is decremented by at least 2 in each iteration.\n- The second invariant states that if `leader_len` is positive, then `bufsize` must be at least `leader_len`. This is true because the program checks if `bufsize` is less than `leader_len` and terminates if it is.\n- The third invariant states that if `bufsize_0` is positive, then `bufsize` must be non-negative. This is true because `bufsize` is decremented by at least `leader_len` and then by at least `2*ielen` in the loop, so it can never become negative if it is initially non-negative.\n- The fourth invariant states that if `ielen` is positive, then `i` must be non-negative. This is true because `i` is initialized to 0 and incremented by 1 in each iteration of the loop.\n- The fifth invariant states that if `ielen` is positive, then `i` must be less than `ielen`. This is true because the loop condition is `i < ielen`.\n- The sixth invariant states that `bufsize_0` is always greater than or equal to `bufsize`. This is true because `bufsize` is decremented by at least `leader_len` and then by at least `2*ielen` in the loop.\n- The seventh invariant states that if `ielen` is positive and `i` is less than `ielen`, then `p` must be less than or equal to `bufsize_0 - 2*(ielen - 1)`. This is true because `p` is initialized to `leader_len` and incremented by 2 in each iteration of the loop, so it can reach at most `bufsize_0 - 2*(ielen - 1)` before the loop terminates.\n- The eighth invariant states that if `ielen` is positive and `i` is non-negative, then `p` must be greater than or equal to `2*i`. This is true because `p` is initialized to `leader_len` and incremented by 2 in each iteration of the loop, so it can reach at least `2*i`.\n- The ninth invariant states that if `ielen` is positive, `i` is less than `ielen`, and `bufsize` is greater than 2, then `p + 2` must be less than or equal to `bufsize_0`. This is true because `p` is incremented by 2 in each iteration of the loop and `bufsize` is decremented by at least 2 in each iteration, so `p + 2` can reach at most `bufsize_0` before the loop terminates.\n- The tenth invariant states that if `bufsize` is not greater than 2, then `i` must be equal to `ielen`. This is true because the loop condition is `i < ielen && bufsize > 2`, so if `bufsize` is not greater than 2, the loop terminates and `i` must be equal to `ielen`.\n- The eleventh invariant states that if `bufsize` is not greater than or equal to `2*ielen`, then `i` must be equal to 0. This is true because if `bufsize` is not",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@\n    loop invariant 0 <= p <= bufsize_0;\n    loop invariant bufsize_0 >= bufsize >= leader_len;\n    loop invariant ielen >= i;\n    loop invariant bufsize_0 >= 2 * i + leader_len;\n    loop invariant i >= 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize_0 >= bufsize >= leader_len is preserved but not established.\nloop invariant ielen >= i is partially proven to be inductive.\nloop invariant bufsize_0 >= 2 * i + leader_len is established but not preserved.\nloop invariant i >= 0 is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\n\nloop invariant i3: ielen >= i;\n\nloop invariant i5: i >= 0;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant 2 <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize + leader_len == bufsize_0 is partially proven to be inductive.\nloop invariant i * 2 <= p is partially proven to be inductive.\nloop invariant (ielen - i) * 2 <= bufsize is partially proven to be inductive.\nloop invariant (ielen - i) * 2 + leader_len <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize_0 >= bufsize >= leader_len is preserved but not established.\nloop invariant i >= 0 && i <= ielen is partially proven to be inductive.\nloop invariant bufsize >= 2*i is established but not preserved.\nloop invariant p % 2 == 0 is preserved but not established.\nloop invariant \\forall integer j; 0 <= j < i ==> (j*2+1 < bufsize_0 ==> j*2+1 < p) is partially proven to be inductive.\nloop invariant \\forall integer j; 0 <= j < i ==> (j*2+2 < bufsize_0 ==> j*2+2 < p) is established but not preserved.\nloop invariant bufsize_0 - bufsize <= leader_len is partially proven to be inductive.\nloop invariant i <= ielen is partially proven to be inductive.\nloop invariant bufsize >= 2*ielen ==> p+2*i <= bufsize_0 is established but not preserved.\nloop invariant i < ielen ==> bufsize > 2 is preserved but not established.\nloop invariant ielen >= i is partially proven to be inductive.\nloop invariant bufsize_0 >= 2 * i + leader_len is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: 2 <= bufsize_0;\nloop invariant i3: 0 <= p <= bufsize_0;\nloop invariant i4: bufsize + leader_len == bufsize_0;\nloop invariant i5: i * 2 <= p;\nloop invariant i6: (ielen - i) * 2 <= bufsize;\nloop invariant i7: (ielen - i) * 2 + leader_len <= bufsize_0;\nloop invariant i8: bufsize_0 >= bufsize >= leader_len;\nloop invariant i9: i >= 0 && i <= ielen;\nloop invariant i10: bufsize >= 2*i;\nloop invariant i11: p % 2 == 0;\nloop invariant i12: \\forall integer j; 0 <= j < i ==> (j*2+1 < bufsize_0 ==> j*2+1 < p);\nloop invariant i13: \\forall integer j; 0 <= j < i ==> (j*2+2 < bufsize_0 ==> j*2+2 < p);\nloop invariant i14: bufsize_0 - bufsize <= leader_len;\nloop invariant i15: i <= ielen;\nloop invariant i16: bufsize >= 2*ielen ==> p+2*i <= bufsize_0;\nloop invariant i17: i < ielen ==> bufsize > 2;\nloop invariant i18: ielen >= i;\nloop invariant i19: bufsize_0 >= 2 * i + leader_len;\nloop invariant i20: i >= 0;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}\n",
        "combined_annotation_num_solver_calls": 4,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: 2 <= bufsize_0;\nloop invariant i3: 0 <= p <= bufsize_0;\nloop invariant i4: bufsize + leader_len == bufsize_0;\nloop invariant i5: i * 2 <= p;\nloop invariant i6: (ielen - i) * 2 <= bufsize;\nloop invariant i7: (ielen - i) * 2 + leader_len <= bufsize_0;\n\nloop invariant i9: i >= 0 && i <= ielen;\n\n\nloop invariant i12: \\forall integer j; 0 <= j < i ==> (j*2+1 < bufsize_0 ==> j*2+1 < p);\n\nloop invariant i14: bufsize_0 - bufsize <= leader_len;\nloop invariant i15: i <= ielen;\n\n\nloop invariant i18: ielen >= i;\n\nloop invariant i20: i >= 0;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c"
        ],
        "skipped": [],
        "total": 112,
        "success_count": 48,
        "failure_count": 64,
        "success_rate": 0.42857142857142855
    }
}