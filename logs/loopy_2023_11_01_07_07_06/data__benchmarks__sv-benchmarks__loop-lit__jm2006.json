{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loop-lit/jm2006.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    while(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n\n    }\n    return 0;\n}",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    while(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n\n    }\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions or variable assignments:\n- The program declares and initializes two integer variables `i` and `j` using non-deterministic function `unknown_int()`.\n- The program checks if both `i` and `j` are non-negative and returns 0 if either of them is negative.\n- The program initializes two integer variables `x` and `y` with the values of `i` and `j`, respectively.\n\nLoop condition:\n- The loop continues as long as `x` is not equal to 0.\n\nLoop invariants:\n- Before the loop execution, `x` and `y` should be non-negative as they are initialized with the non-negative values of `i` and `j` respectively. Therefore, we can add the following loop invariants:\n```\n/*@ loop invariant x >= 0;\n    loop invariant y >= 0;\n*/\n```\n- In each iteration of the loop, `x` decreases by 1 and `y` also decreases by 1. Therefore, we can add the following loop invariants:\n```\n/*@ loop invariant 0 <= x <= i;\n    loop invariant j-x == y;\n*/\n```\n- After the loop termination, `x` should be 0, since it is decremented in each iteration of the loop. Therefore, we can add the following loop invariant:\n```\n/*@ loop invariant x == 0;\n*/\n```\n- The assertion `y == 0` is guarded by the condition `i == j`. Therefore, we can use implication to include this condition in the loop invariant:\n```\n/*@ loop invariant (i != j) ==> (y == j - x);\n    loop invariant (i == j) ==> (y == 0);\n*/\n```\n- Since `i` and `j` are non-deterministic at the beginning of the loop, we can use implication to make the loop invariant trivially true at that location:\n```\n/*@ loop invariant (x != i) ==> (y == j - x);\n    loop invariant (x == i) ==> (y == j);\n*/\n```\n- Since there are no variables with maximum or minimum bounds or any relations between variables, we do not need to include any additional loop invariants. \n\nTherefore, the complete set of loop invariants for the given program is:\n```\n/*@ loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant 0 <= x <= i;\n    loop invariant j-x == y;\n    loop invariant x == 0;\n    loop invariant (i != j) ==> (y == j - x);\n    loop invariant (i == j) ==> (y == 0);\n    loop invariant (x != i) ==> (y == j - x);\n    loop invariant (x == i) ==> (y == j);\n*/\n```",
            "Pre-conditions:\n- The program does not take any input from the user.\n- The program calls an external function `unknown_int()` to assign non-deterministic integer values to variables `i` and `j`.\n- The program checks if `i` and `j` are non-negative before continuing execution.\n\nLoop condition:\n- The loop continues as long as `x` is not equal to 0.\n\nLoop invariants:\n- Before the loop execution:\n    - `i >= 0 && j >= 0`\n    - `x == i && y == j`\n- In every iteration of the loop:\n    - `x >= 0 && y >= 0`\n    - `x + y == i + j`\n- After the loop termination:\n    - `i == j ==> y == 0`\n\nExplanation:\n- Before the loop execution:\n    - `i >= 0 && j >= 0`: This is the same as the pre-condition of the program.\n    - `x == i && y == j`: This assigns the initial values of `i` and `j` to `x` and `y` respectively.\n- In every iteration of the loop:\n    - `x >= 0 && y >= 0`: Since both `x` and `y` are decremented by 1 in every iteration, they can never become negative.\n    - `x + y == i + j`: This is true because `x` and `y` are initialized to `i` and `j` respectively, and both `x` and `y` are decremented by the same value in every iteration.\n- After the loop termination:\n    - `i == j ==> y == 0`: This assertion checks if `i` and `j` are equal, then `y` must be equal to 0. We can use implication here, as the assertion is guarded by the condition `i == j`. If `i` and `j` are not equal, then the assertion is trivially true. If `i` and `j` are equal, then `x` must also be 0, and therefore `y` must also be 0.",
            "Pre-conditions:\n- The program does not have any pre-conditions.\n- The variables `i` and `j` are assigned values returned by the function `unknown_int()`.\n- The program checks if `i` and `j` are both non-negative. If they are not, the program returns 0.\n\nLoop condition:\n- The loop continues to execute as long as the value of `x` is not equal to 0.\n\nPost-condition:\n- If `i` is equal to `j`, then `y` should be equal to 0.\n\nLoop invariants:\n- Before the loop execution: `i >= 0 && j >= 0 && x == i && y == j`\n- In every iteration of the loop: `0 <= x <= i && 0 <= y <= j`\n- After the loop termination: `(i == j) ==> (y == 0)` \n\nExplanation:\n- Before the loop execution: \n    - `i >= 0 && j >= 0` is a pre-condition.\n    - `x == i` and `y == j` are assignments before the loop execution.\n- In every iteration of the loop: \n    - `0 <= x <= i` and `0 <= y <= j` are true because `x` and `y` are decremented in every iteration and their initial values are `i` and `j` respectively.\n- After the loop termination: \n    - `(i == j) ==> (y == 0)` is the post-condition. We can use implication because the assertion is guarded by the condition `if (i == j)`.\n    \nAdditional notes:\n- There are no variables in the program that have maximum or minimum bounds.\n- The variables `x` and `y` are always equal to or smaller than `i` and `j` respectively, so we do not need to add any conjunction for their relation.\n- The variables `i` and `j` are non-deterministic at the beginning of the loop, but since we have already included their initial values in the loop invariant, we do not need to use an implication to make the invariant trivially true at the beginning of the loop.",
            "Pre-conditions:\n- The values of variables `i` and `j` are unknown and can be any integer.\n- `i` and `j` are non-negative integers.\n\nVariable assignments:\n- `x` is assigned the value of `i`.\n- `y` is assigned the value of `j`.\n\nLoop condition:\n- `x != 0`\n\nPost-condition:\n- If `i` is equal to `j`, then `y` is equal to `0`.\n\nLoop invariants:\n- `i >= 0 && j >= 0`\n- `i == x + y`\n- `j == x`\n- `x >= 0`\n- `y >= 0`\n- `x + y <= i + j`\n- `i == j ==> y == 0`\n- `x == 0 ==> y == j`\n- `y <= j`\n- `x <= i`\n\nExplanation:\n- The first invariant `i >= 0 && j >= 0` is a pre-condition for the program.\n- The second invariant `i == x + y` is true before the loop starts, since `x` is assigned the value of `i` and `y` is assigned the value of `j`.\n- The third invariant `j == x` is also true before the loop starts, since `x` is assigned the value of `i` and `y` is assigned the value of `j`.\n- The fourth invariant `x >= 0` is always true in every iteration of the loop, since `x` is decremented by 1 in each iteration and is initially non-negative.\n- The fifth invariant `y >= 0` is always true in every iteration of the loop, since `y` is decremented by 1 in each iteration and is initially non-negative.\n- The sixth invariant `x + y <= i + j` is true before the loop starts, since `x` is assigned the value of `i` and `y` is assigned the value of `j`.\n- The seventh invariant `i == j ==> y == 0` is true before the loop starts, since `i` is initially equal to `j` and `y` is initially equal to `j - i`. If `i` and `j` are not equal, then the implication is trivially true.\n- The eighth invariant `x == 0 ==> y == j` is true in every iteration of the loop, since `y` is decremented by 1 in each iteration and becomes equal to `j` when `x` becomes equal to `0`.\n- The ninth invariant `y <= j` is always true in every iteration of the loop, since `y` is decremented by 1 in each iteration and is initially equal to `j`.\n- The tenth invariant `x <= i` is true before the loop starts, since `x` is assigned the value of `i`. \n\nThe conjunction of all these loop invariants imply the post-condition.",
            "Pre-conditions:\n- The program does not have any pre-conditions.\n- Variables `i` and `j` are initialized with non-negative integer values.\n\nLoop condition:\n- The loop will continue to execute as long as the value of `x` is not equal to 0.\n\nLoop Invariants:\n1. Before the loop execution:\n    - `x >= 0 && y >= 0` (since `i` and `j` are both non-negative, `x` and `y` will also be non-negative)\n2. In every iteration of the loop:\n    - `x >= 0 && y >= 0` (since `x` and `y` are decremented by 1 in every iteration, they will always be non-negative)\n    - `x + y = i + j` (the sum of `x` and `y` will always be equal to the sum of the initial values of `i` and `j`)\n3. After the loop termination:\n    - `x == 0` (since the loop terminates when `x` becomes 0)\n    - `y == j - i` (since `y` is decremented by the same amount as `x` in every iteration, it will end up being equal to the difference between the initial values of `j` and `i`)\n    - `(i == j) ==> (y == 0)` (the assertion is guarded by the condition `i == j`, so we use implication to state that if `i` and `j` are equal, then `y` must be equal to 0)\n\nPutting it all together, the loop invariants are:\n```\n/*@ \n    loop invariant x >= 0 && y >= 0;\n    loop invariant x + y == i + j;\n    loop invariant x == 0;\n    loop invariant y == j - i;\n    loop invariant (i == j) ==> (y == 0);\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@ loop invariant x >= 0;\n    loop invariant y >= 0;\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The program does not take any input from the user.\n- The program calls an external function `unknown_int()` to assign non-deterministic integer values to variables `i` and `j`.\n- The program checks if `i` and `j` are non-negative before continuing execution.\n\nLoop condition:\n- The loop continues as long as `x` is not equal to 0.\n\nLoop invariants:\n- Before the loop execution:\n    - `i >= 0 && j >= 0`\n    - `x == i && y == j`\n- In every iteration of the loop:\n    - `x >= 0 && y >= 0`\n    - `x + y == i + j`\n- After the loop termination:\n    - `i == j ==> y == 0`\n\nExplanation:\n- Before the loop execution:\n    - `i >= 0 && j >= 0`: This is the same as the pre-condition of the program.\n    - `x == i && y == j`: This assigns the initial values of `i` and `j` to `x` and `y` respectively.\n- In every iteration of the loop:\n    - `x >= 0 && y >= 0`: Since both `x` and `y` are decremented by 1 in every iteration, they can never become negative.\n    - `x + y == i + j`: This is true because `x` and `y` are initialized to `i` and `j` respectively, and both `x` and `y` are decremented by the same value in every iteration.\n- After the loop termination:\n    - `i == j ==> y == 0`: This assertion checks if `i` and `j` are equal, then `y` must be equal to 0. We can use implication here, as the assertion is guarded by the condition `i == j`. If `i` and `j` are not equal, then the assertion is trivially true. If `i` and `j` are equal, then `x` must also be 0, and therefore `y` must also be 0."
            ],
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The program does not have any pre-conditions.\n- The variables `i` and `j` are assigned values returned by the function `unknown_int()`.\n- The program checks if `i` and `j` are both non-negative. If they are not, the program returns 0.\n\nLoop condition:\n- The loop continues to execute as long as the value of `x` is not equal to 0.\n\nPost-condition:\n- If `i` is equal to `j`, then `y` should be equal to 0.\n\nLoop invariants:\n- Before the loop execution: `i >= 0 && j >= 0 && x == i && y == j`\n- In every iteration of the loop: `0 <= x <= i && 0 <= y <= j`\n- After the loop termination: `(i == j) ==> (y == 0)` \n\nExplanation:\n- Before the loop execution: \n    - `i >= 0 && j >= 0` is a pre-condition.\n    - `x == i` and `y == j` are assignments before the loop execution.\n- In every iteration of the loop: \n    - `0 <= x <= i` and `0 <= y <= j` are true because `x` and `y` are decremented in every iteration and their initial values are `i` and `j` respectively.\n- After the loop termination: \n    - `(i == j) ==> (y == 0)` is the post-condition. We can use implication because the assertion is guarded by the condition `if (i == j)`.\n    \nAdditional notes:\n- There are no variables in the program that have maximum or minimum bounds.\n- The variables `x` and `y` are always equal to or smaller than `i` and `j` respectively, so we do not need to add any conjunction for their relation.\n- The variables `i` and `j` are non-deterministic at the beginning of the loop, but since we have already included their initial values in the loop invariant, we do not need to use an implication to make the invariant trivially true at the beginning of the loop."
            ],
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The values of variables `i` and `j` are unknown and can be any integer.\n- `i` and `j` are non-negative integers.\n\nVariable assignments:\n- `x` is assigned the value of `i`.\n- `y` is assigned the value of `j`.\n\nLoop condition:\n- `x != 0`\n\nPost-condition:\n- If `i` is equal to `j`, then `y` is equal to `0`.\n\nLoop invariants:\n- `i >= 0 && j >= 0`\n- `i == x + y`\n- `j == x`\n- `x >= 0`\n- `y >= 0`\n- `x + y <= i + j`\n- `i == j ==> y == 0`\n- `x == 0 ==> y == j`\n- `y <= j`\n- `x <= i`\n\nExplanation:\n- The first invariant `i >= 0 && j >= 0` is a pre-condition for the program.\n- The second invariant `i == x + y` is true before the loop starts, since `x` is assigned the value of `i` and `y` is assigned the value of `j`.\n- The third invariant `j == x` is also true before the loop starts, since `x` is assigned the value of `i` and `y` is assigned the value of `j`.\n- The fourth invariant `x >= 0` is always true in every iteration of the loop, since `x` is decremented by 1 in each iteration and is initially non-negative.\n- The fifth invariant `y >= 0` is always true in every iteration of the loop, since `y` is decremented by 1 in each iteration and is initially non-negative.\n- The sixth invariant `x + y <= i + j` is true before the loop starts, since `x` is assigned the value of `i` and `y` is assigned the value of `j`.\n- The seventh invariant `i == j ==> y == 0` is true before the loop starts, since `i` is initially equal to `j` and `y` is initially equal to `j - i`. If `i` and `j` are not equal, then the implication is trivially true.\n- The eighth invariant `x == 0 ==> y == j` is true in every iteration of the loop, since `y` is decremented by 1 in each iteration and becomes equal to `j` when `x` becomes equal to `0`.\n- The ninth invariant `y <= j` is always true in every iteration of the loop, since `y` is decremented by 1 in each iteration and is initially equal to `j`.\n- The tenth invariant `x <= i` is true before the loop starts, since `x` is assigned the value of `i`. \n\nThe conjunction of all these loop invariants imply the post-condition."
            ],
            "/*@ \n    loop invariant x >= 0 && y >= 0;\n    loop invariant x + y == i + j;\n    loop invariant x == 0;\n    loop invariant y == j - i;\n    loop invariant (i == j) ==> (y == 0);\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "/*@ loop invariant x >= 0;\n    loop invariant y >= 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is partially proven to be inductive.\nloop invariant y >= 0 is established but not preserved.\nAssertion y == 0: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\nloop invariant i1: x >= 0;\n\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The program does not take any input from the user.\n- The program calls an external function `unknown_int()` to assign non-deterministic integer values to variables `i` and `j`.\n- The program checks if `i` and `j` are non-negative before continuing execution.\n\nLoop condition:\n- The loop continues as long as `x` is not equal to 0.\n\nLoop invariants:\n- Before the loop execution:\n    - `i >= 0 && j >= 0`\n    - `x == i && y == j`\n- In every iteration of the loop:\n    - `x >= 0 && y >= 0`\n    - `x + y == i + j`\n- After the loop termination:\n    - `i == j ==> y == 0`\n\nExplanation:\n- Before the loop execution:\n    - `i >= 0 && j >= 0`: This is the same as the pre-condition of the program.\n    - `x == i && y == j`: This assigns the initial values of `i` and `j` to `x` and `y` respectively.\n- In every iteration of the loop:\n    - `x >= 0 && y >= 0`: Since both `x` and `y` are decremented by 1 in every iteration, they can never become negative.\n    - `x + y == i + j`: This is true because `x` and `y` are initialized to `i` and `j` respectively, and both `x` and `y` are decremented by the same value in every iteration.\n- After the loop termination:\n    - `i == j ==> y == 0`: This assertion checks if `i` and `j` are equal, then `y` must be equal to 0. We can use implication here, as the assertion is guarded by the condition `i == j`. If `i` and `j` are not equal, then the assertion is trivially true. If `i` and `j` are equal, then `x` must also be 0, and therefore `y` must also be 0.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The program does not have any pre-conditions.\n- The variables `i` and `j` are assigned values returned by the function `unknown_int()`.\n- The program checks if `i` and `j` are both non-negative. If they are not, the program returns 0.\n\nLoop condition:\n- The loop continues to execute as long as the value of `x` is not equal to 0.\n\nPost-condition:\n- If `i` is equal to `j`, then `y` should be equal to 0.\n\nLoop invariants:\n- Before the loop execution: `i >= 0 && j >= 0 && x == i && y == j`\n- In every iteration of the loop: `0 <= x <= i && 0 <= y <= j`\n- After the loop termination: `(i == j) ==> (y == 0)` \n\nExplanation:\n- Before the loop execution: \n    - `i >= 0 && j >= 0` is a pre-condition.\n    - `x == i` and `y == j` are assignments before the loop execution.\n- In every iteration of the loop: \n    - `0 <= x <= i` and `0 <= y <= j` are true because `x` and `y` are decremented in every iteration and their initial values are `i` and `j` respectively.\n- After the loop termination: \n    - `(i == j) ==> (y == 0)` is the post-condition. We can use implication because the assertion is guarded by the condition `if (i == j)`.\n    \nAdditional notes:\n- There are no variables in the program that have maximum or minimum bounds.\n- The variables `x` and `y` are always equal to or smaller than `i` and `j` respectively, so we do not need to add any conjunction for their relation.\n- The variables `i` and `j` are non-deterministic at the beginning of the loop, but since we have already included their initial values in the loop invariant, we do not need to use an implication to make the invariant trivially true at the beginning of the loop.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The values of variables `i` and `j` are unknown and can be any integer.\n- `i` and `j` are non-negative integers.\n\nVariable assignments:\n- `x` is assigned the value of `i`.\n- `y` is assigned the value of `j`.\n\nLoop condition:\n- `x != 0`\n\nPost-condition:\n- If `i` is equal to `j`, then `y` is equal to `0`.\n\nLoop invariants:\n- `i >= 0 && j >= 0`\n- `i == x + y`\n- `j == x`\n- `x >= 0`\n- `y >= 0`\n- `x + y <= i + j`\n- `i == j ==> y == 0`\n- `x == 0 ==> y == j`\n- `y <= j`\n- `x <= i`\n\nExplanation:\n- The first invariant `i >= 0 && j >= 0` is a pre-condition for the program.\n- The second invariant `i == x + y` is true before the loop starts, since `x` is assigned the value of `i` and `y` is assigned the value of `j`.\n- The third invariant `j == x` is also true before the loop starts, since `x` is assigned the value of `i` and `y` is assigned the value of `j`.\n- The fourth invariant `x >= 0` is always true in every iteration of the loop, since `x` is decremented by 1 in each iteration and is initially non-negative.\n- The fifth invariant `y >= 0` is always true in every iteration of the loop, since `y` is decremented by 1 in each iteration and is initially non-negative.\n- The sixth invariant `x + y <= i + j` is true before the loop starts, since `x` is assigned the value of `i` and `y` is assigned the value of `j`.\n- The seventh invariant `i == j ==> y == 0` is true before the loop starts, since `i` is initially equal to `j` and `y` is initially equal to `j - i`. If `i` and `j` are not equal, then the implication is trivially true.\n- The eighth invariant `x == 0 ==> y == j` is true in every iteration of the loop, since `y` is decremented by 1 in each iteration and becomes equal to `j` when `x` becomes equal to `0`.\n- The ninth invariant `y <= j` is always true in every iteration of the loop, since `y` is decremented by 1 in each iteration and is initially equal to `j`.\n- The tenth invariant `x <= i` is true before the loop starts, since `x` is assigned the value of `i`. \n\nThe conjunction of all these loop invariants imply the post-condition.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant x >= 0 && y >= 0;\n    loop invariant x + y == i + j;\n    loop invariant x == 0;\n    loop invariant y == j - i;\n    loop invariant (i == j) ==> (y == 0);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 && y >= 0 is partially proven to be inductive.\nloop invariant x + y == i + j is partially proven to be inductive.\nloop invariant x == 0 is preserved but not established.\nloop invariant y == j - i is partially proven to be inductive.\nloop invariant (i == j) ==> (y == 0) is partially proven to be inductive.\nAssertion y == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\n\n\n\n\n\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant x >= 0 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant x >= 0 && y >= 0 is partially proven to be inductive.\nloop invariant x + y == i + j is partially proven to be inductive.\nloop invariant x == 0 is preserved but not established.\nloop invariant y == j - i is partially proven to be inductive.\nloop invariant (i == j) ==> (y == 0) is partially proven to be inductive.\nAssertion y == 0: Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: x >= 0 && y >= 0;\nloop invariant i4: x + y == i + j;\nloop invariant i5: x == 0;\nloop invariant i6: y == j - i;\nloop invariant i7: (i == j) ==> (y == 0);\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n\n    }\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 5,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\nloop invariant i1: x >= 0;\n\n\n\n\n\n\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n\n    }\n    return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/const.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq1.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq2.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/afnp2014.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/css2003.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007b.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gsv2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/hhk2008.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../data/benchmarks/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/even.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/mod4.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/odd.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/id_trans.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/bhmr2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/ddlm2013.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gcnr2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gr2006.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006.c"
        ],
        "skipped": [],
        "total": 299,
        "success_count": 141,
        "failure_count": 158,
        "success_rate": 0.47157190635451507
    }
}