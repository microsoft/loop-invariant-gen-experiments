{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-1.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions or variable assignments:\n- unsigned int x is initialized to 0.\n\nLoop condition:\n- x < 0x0fffffff\n\nLoop invariants:\n- Before the loop execution: x is non-negative (x >= 0)\n- In every iteration of the loop:\n    - (i) x is less than or equal to 0x0fffffff (x <= 0x0fffffff)\n    - (ii) if x is less than 0xfff0, then x is odd (x % 2 == 1)\n    - (iii) if x is greater than or equal to 0xfff0, then x is even (x % 2 == 0)\n- After the loop termination: x is even (x % 2 == 0) and x is less than or equal to 0x0fffffff (x <= 0x0fffffff)\n\nExplanation:\n- Before the loop execution: Since x is initialized to 0, it is non-negative.\n- In every iteration of the loop:\n    - (i) The loop condition is x < 0x0fffffff, so x is always less than or equal to 0x0fffffff.\n    - (ii) If x is less than 0xfff0, then in each iteration, x is incremented by 1. Therefore, if x is odd initially, it remains odd in each iteration.\n    - (iii) If x is greater than or equal to 0xfff0, then in each iteration, x is incremented by 2. Therefore, if x is even initially, it remains even in each iteration.\n- After the loop termination: The loop terminates when x is greater than or equal to 0x0fffffff. Therefore, x is less than or equal to 0x0fffffff. Also, if the loop terminates, then the loop condition x < 0x0fffffff is false, so x is greater than or equal to 0x0fffffff. Therefore, x is equal to 0x0fffffff after the loop termination. Since x is either incremented by 1 or 2 in each iteration, it is either odd or even. Therefore, x is even after the loop termination. \n\nLoop invariants:\n```\n//@ loop invariant x >= 0;\n//@ loop invariant x <= 0x0fffffff;\n//@ loop invariant (x < 0xfff0 ==> x % 2 == 1);\n//@ loop invariant (x >= 0xfff0 ==> x % 2 == 0);\n//@ loop invariant (x >= 0x0fffffff ==> x % 2 == 0);\n```",
            "Pre-conditions: None.\n\nVariable assignments: \n- x is assigned 0 at the beginning of the program.\n\nLoop condition: \n- The loop continues while x is less than 0x0fffffff.\n\nWe need to find loop invariants that hold before the loop, in every iteration of the loop, and after the loop.\n\nBefore the loop:\n- x is initialized to 0, so we can add the invariant x >= 0.\n- Since the loop condition is x < 0x0fffffff, we can add the invariant x <= 0x0fffffff.\n\nIn every iteration of the loop:\n- We can add the invariant x < 0x10000000, since this is the negation of the loop condition.\n- We can add the invariant (x < 0xfff0) ==> (x' == x + 1), where x' represents the value of x in the next iteration of the loop. This invariant states that if x is less than 0xfff0, then in the next iteration of the loop, x will be incremented by 1.\n- We can add the invariant !(x < 0xfff0) ==> (x' == x + 2), which states that if x is greater than or equal to 0xfff0, then in the next iteration of the loop, x will be incremented by 2.\n- We can add the invariant x >= 0, since x is always non-negative.\n- We can add the invariant x <= 0x0fffffff, since this is the loop condition.\n\nAfter the loop:\n- The assertion is guarded by the condition !(x < 0x0fffffff), so we can use this as an implication: (x >= 0x0fffffff) ==> (!(x % 2)). This states that if x is greater than or equal to 0x0fffffff, then x is even.\n\nPutting it all together, we get the following loop invariants:\n\n```\n/*@ \n  loop invariant x >= 0;\n  loop invariant x <= 0x0fffffff;\n  loop invariant x < 0x10000000;\n  loop invariant (x < 0xfff0) ==> (x' == x + 1);\n  loop invariant !(x < 0xfff0) ==> (x' == x + 2);\n  loop invariant x >= 0;\n  loop invariant x <= 0x0fffffff;\n*/\n``` \n\nand the post-condition:\n```\n/*@ assert !(x < 0x0fffffff) ==> !(x % 2);\n*/\n```",
            "The pre-conditions and variable assignments are:\n- x is an unsigned integer initialized to 0.\n\nThe loop condition is:\n- x < 0x0fffffff\n\nLoop invariants that we can think of are:\n\n1. Before the loop execution:\n- x is initialized to 0, so x <= 0x0fffffff.\n\n2. In every iteration of the loop:\n- x < 0x0fffffff\n- If x < 0xfff0, then x has to be incremented by 1. So, x >= 0xfff0 ==> x' = x + 1.\n- If x >= 0xfff0, then x has to be incremented by 2. So, x < 0xfff0 ==> x' = x + 2.\n\n3. After the loop termination:\n- Since the loop terminates when x >= 0x0fffffff, x >= 0x0fffffff.\n- If the loop terminates with x = 0x0fffffff, then x % 2 == 1. Otherwise, x % 2 == 0.\n\nPutting all these together, we get the following loop invariants:\n```\n/*@ \n    loop invariant 0 <= x <= 0x0fffffff;\n    loop invariant x < 0x0fffffff;\n    loop invariant (x < 0xfff0 ==> x' == x+1);\n    loop invariant (x >= 0xfff0 ==> x' == x+2);\n    loop invariant (x >= 0x0fffffff ==> x % 2 == 1);\n    loop invariant (x < 0x0fffffff ==> x % 2 == 0);\n*/\n```",
            "Pre-conditions: None\n\nVariable Assignments: \n- `unsigned int x = 0;`\n\nLoop Condition: `x < 0x0fffffff`\n\nWe need to find loop invariants that are true:\n- before the loop execution\n- in every iteration of the loop\n- after the loop termination \n\nsuch that the loop invariants imply the post condition `!(x % 2)`.\n\nObservations:\n- The loop continues as long as the value of `x` is less than `0x0fffffff`.\n- If `x` is less than `0xfff0`, then it is incremented by 1, else it is incremented by 2.\n- The post-condition asserts that `x` is even.\n\nLoop Invariants:\n- Before the loop execution, `x` is non-negative, i.e., `x >= 0`.\n- In every iteration of the loop, `x` is less than or equal to `0x0fffffff`.\n- In every iteration of the loop, `x` is even if it has been incremented even number of times before that iteration, otherwise it is odd.\n- After the loop termination, `x` is less than or equal to `0x0fffffff`.\n- After the loop termination, if `x` has been incremented odd number of times, then it is odd, otherwise it is even.\n\nPutting it all together, the loop invariants are:\n```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= 0x0fffffff;\n    loop invariant ((\\at(x, Pre) < 0xfff0 && (\\at(x, Here) - \\at(x, Pre)) % 2 == 0) || (\\at(x, Pre) >= 0xfff0 && (\\at(x, Here) - \\at(x, Pre)) % 2 == 0));\n    loop invariant ((x < 0xfff0 && x % 2 == \\at(x, Pre) % 2) || (x >= 0xfff0 && x % 2 == (\\at(x, Pre) + 1) % 2));\n    loop invariant x <= 0x0fffffff;\n    loop invariant ((x - \\at(x, Pre)) % 2 == 0);\n*/\n``` \n\nNote that the first, second, and fifth loop invariants are straightforward. The third and fourth loop invariants are used to keep track of the parity of `x` as it is incremented. The fourth loop invariant uses an implication to capture the conditional increment of `x` based on its value.",
            "Let's start by analyzing the program and making a note of the pre-conditions or variable assignments in the program:\n\n- The program defines a macro `assume` that returns 0 if the given expression is false.\n- The `main` function initializes an unsigned integer variable `x` to 0.\n\nNext, let's analyze the loop body and make a note of the loop condition:\n\n- The loop condition is `x < 0x0fffffff`.\n- Inside the loop, there is an if-else statement:\n  - If `x` is less than `0xfff0`, then `x` is incremented by 1.\n  - Otherwise, `x` is incremented by 2.\n\nNow, we need to find loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition.\n\nLet's start by finding a loop invariant that is true before the loop execution:\n\n- `x` is initialized to 0, which is less than `0xfff0`.\n- Therefore, before the loop execution, we have `x < 0xfff0`.\n\nNext, let's find loop invariants that are true in every iteration of the loop:\n\n- Since the loop condition is `x < 0x0fffffff`, we have `x <= 0x0fffffff` in every iteration of the loop.\n- If `x` is less than `0xfff0`, then it is incremented by 1. Therefore, in every iteration of the loop, we have `x < 0xfff0 ==> x' = x + 1`, where `x'` is the value of `x` after the iteration.\n- If `x` is greater than or equal to `0xfff0`, then it is incremented by 2. Therefore, in every iteration of the loop, we have `x >= 0xfff0 ==> x' = x + 2`.\n\nFinally, let's find loop invariants that are true after the loop termination:\n\n- The loop terminates when `x >= 0x0fffffff`.\n- If `x` is less than `0xfff0`, then it is incremented by 1 in every iteration. Therefore, the final value of `x` must be odd.\n- If `x` is greater than or equal to `0xfff0`, then it is incremented by 2 in every iteration. Therefore, the final value of `x` must be even.\n\nPutting it all together, we get the following loop invariants:\n\n```\n/*@\n  loop invariant 0 <= x <= 0x0fffffff;\n  loop invariant x < 0xfff0 ==> x % 2;\n  loop invariant x >= 0xfff0 ==> !(x % 2);\n*/\n```\n\nNote that we used implication to take care of the conditional nature of the code, and we added conjunctions that bound the maximum and minimum values that `x` can take. We also added a conjunction to relate the parity of `x` to its value."
        ],
        "annotation_blocks": [
            "//@ loop invariant x >= 0;\n//@ loop invariant x <= 0x0fffffff;\n//@ loop invariant (x < 0xfff0 ==> x % 2 == 1);\n//@ loop invariant (x >= 0xfff0 ==> x % 2 == 0);\n//@ loop invariant (x >= 0x0fffffff ==> x % 2 == 0);",
            "/*@ \n  loop invariant x >= 0;\n  loop invariant x <= 0x0fffffff;\n  loop invariant x < 0x10000000;\n  loop invariant (x < 0xfff0) ==> (x' == x + 1);\n  loop invariant !(x < 0xfff0) ==> (x' == x + 2);\n  loop invariant x >= 0;\n  loop invariant x <= 0x0fffffff;\n*/",
            "/*@ \n    loop invariant 0 <= x <= 0x0fffffff;\n    loop invariant x < 0x0fffffff;\n    loop invariant (x < 0xfff0 ==> x' == x+1);\n    loop invariant (x >= 0xfff0 ==> x' == x+2);\n    loop invariant (x >= 0x0fffffff ==> x % 2 == 1);\n    loop invariant (x < 0x0fffffff ==> x % 2 == 0);\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= 0x0fffffff;\n    loop invariant ((\\at(x, Pre) < 0xfff0 && (\\at(x, Here) - \\at(x, Pre)) % 2 == 0) || (\\at(x, Pre) >= 0xfff0 && (\\at(x, Here) - \\at(x, Pre)) % 2 == 0));\n    loop invariant ((x < 0xfff0 && x % 2 == \\at(x, Pre) % 2) || (x >= 0xfff0 && x % 2 == (\\at(x, Pre) + 1) % 2));\n    loop invariant x <= 0x0fffffff;\n    loop invariant ((x - \\at(x, Pre)) % 2 == 0);\n*/",
            "/*@\n  loop invariant 0 <= x <= 0x0fffffff;\n  loop invariant x < 0xfff0 ==> x % 2;\n  loop invariant x >= 0xfff0 ==> !(x % 2);\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "//@ loop invariant x >= 0;\n//@ loop invariant x <= 0x0fffffff;\n//@ loop invariant (x < 0xfff0 ==> x % 2 == 1);\n//@ loop invariant (x >= 0xfff0 ==> x % 2 == 0);\n//@ loop invariant (x >= 0x0fffffff ==> x % 2 == 0);",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= 0x0fffffff is partially proven to be inductive.\nloop invariant (x < 0xfff0 ==> x % 2 == 1) is preserved but not established.\nloop invariant (x >= 0xfff0 ==> x % 2 == 0) is partially proven to be inductive.\nloop invariant (x >= 0x0fffffff ==> x % 2 == 0) is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\nloop invariant i1: x >= 0;\n\n\nloop invariant i4: (x >= 0xfff0 ==> x % 2 == 0);\nloop invariant i5: (x >= 0x0fffffff ==> x % 2 == 0);\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n  loop invariant x >= 0;\n  loop invariant x <= 0x0fffffff;\n  loop invariant x < 0x10000000;\n  loop invariant (x < 0xfff0) ==> (x' == x + 1);\n  loop invariant !(x < 0xfff0) ==> (x' == x + 2);\n  loop invariant x >= 0;\n  loop invariant x <= 0x0fffffff;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 10: lexical error, illegal character '",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: x <= 0x0fffffff;\nloop invariant i3: x < 0x10000000;\n\nloop invariant i5: !(x < 0xfff0) ==> (x' == x + 2);\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= x <= 0x0fffffff;\n    loop invariant x < 0x0fffffff;\n    loop invariant (x < 0xfff0 ==> x' == x+1);\n    loop invariant (x >= 0xfff0 ==> x' == x+2);\n    loop invariant (x >= 0x0fffffff ==> x % 2 == 1);\n    loop invariant (x < 0x0fffffff ==> x % 2 == 0);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 9: lexical error, illegal character '",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\nloop invariant i1: 0 <= x <= 0x0fffffff;\nloop invariant i2: x < 0x0fffffff;\n\nloop invariant i4: (x >= 0xfff0 ==> x' == x+2);\nloop invariant i5: (x >= 0x0fffffff ==> x % 2 == 1);\nloop invariant i6: (x < 0x0fffffff ==> x % 2 == 0);\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= 0x0fffffff;\n    loop invariant ((\\at(x, Pre) < 0xfff0 && (\\at(x, Here) - \\at(x, Pre)) % 2 == 0) || (\\at(x, Pre) >= 0xfff0 && (\\at(x, Here) - \\at(x, Pre)) % 2 == 0));\n    loop invariant ((x < 0xfff0 && x % 2 == \\at(x, Pre) % 2) || (x >= 0xfff0 && x % 2 == (\\at(x, Pre) + 1) % 2));\n    loop invariant x <= 0x0fffffff;\n    loop invariant ((x - \\at(x, Pre)) % 2 == 0);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 9: unbound logic variable x. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\nloop invariant i1: 0 <= x;\n\n\n\n\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@\n  loop invariant 0 <= x <= 0x0fffffff;\n  loop invariant x < 0xfff0 ==> x % 2;\n  loop invariant x >= 0xfff0 ==> !(x % 2);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 0x0fffffff is partially proven to be inductive.\nloop invariant x < 0xfff0 ==> x % 2 is preserved but not established.\nloop invariant x >= 0xfff0 ==> !(x % 2) is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\n\nloop invariant i3: x >= 0xfff0 ==> !(x % 2);\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 13: lexical error, illegal character '",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: x <= 0x0fffffff;\nloop invariant i3: (x < 0xfff0 ==> x % 2 == 1);\nloop invariant i4: (x >= 0xfff0 ==> x % 2 == 0);\nloop invariant i5: (x >= 0x0fffffff ==> x % 2 == 0);\nloop invariant i6: x < 0x10000000;\nloop invariant i7: (x < 0xfff0) ==> (x' == x + 1);\nloop invariant i8: !(x < 0xfff0) ==> (x' == x + 2);\nloop invariant i9: 0 <= x <= 0x0fffffff;\nloop invariant i10: x < 0x0fffffff;\nloop invariant i11: (x < 0xfff0 ==> x' == x+1);\nloop invariant i12: (x >= 0xfff0 ==> x' == x+2);\nloop invariant i13: (x >= 0x0fffffff ==> x % 2 == 1);\nloop invariant i14: (x < 0x0fffffff ==> x % 2 == 0);\nloop invariant i15: 0 <= x;\nloop invariant i16: ((\\at(x, Pre) < 0xfff0 && (\\at(x, Here) - \\at(x, Pre)) % 2 == 0) || (\\at(x, Pre) >= 0xfff0 && (\\at(x, Here) - \\at(x, Pre)) % 2 == 0));\nloop invariant i17: ((x < 0xfff0 && x % 2 == \\at(x, Pre) % 2) || (x >= 0xfff0 && x % 2 == (\\at(x, Pre) + 1) % 2));\nloop invariant i18: ((x - \\at(x, Pre)) % 2 == 0);\nloop invariant i19: x < 0xfff0 ==> x % 2;\nloop invariant i20: x >= 0xfff0 ==> !(x % 2);\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
        "combined_annotation_num_solver_calls": 3,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: x <= 0x0fffffff;\nloop invariant i3: (x < 0xfff0 ==> x % 2 == 1);\nloop invariant i4: (x >= 0xfff0 ==> x % 2 == 0);\nloop invariant i5: (x >= 0x0fffffff ==> x % 2 == 0);\nloop invariant i6: x < 0x10000000;\n\nloop invariant i8: !(x < 0xfff0) ==> (x' == x + 2);\nloop invariant i9: 0 <= x <= 0x0fffffff;\nloop invariant i10: x < 0x0fffffff;\nloop invariant i11: (x < 0xfff0 ==> x' == x+1);\nloop invariant i12: (x >= 0xfff0 ==> x' == x+2);\nloop invariant i13: (x >= 0x0fffffff ==> x % 2 == 1);\nloop invariant i14: (x < 0x0fffffff ==> x % 2 == 0);\nloop invariant i15: 0 <= x;\nloop invariant i16: ((\\at(x, Pre) < 0xfff0 && (\\at(x, Here) - \\at(x, Pre)) % 2 == 0) || (\\at(x, Pre) >= 0xfff0 && (\\at(x, Here) - \\at(x, Pre)) % 2 == 0));\nloop invariant i17: ((x < 0xfff0 && x % 2 == \\at(x, Pre) % 2) || (x >= 0xfff0 && x % 2 == (\\at(x, Pre) + 1) % 2));\nloop invariant i18: ((x - \\at(x, Pre)) % 2 == 0);\nloop invariant i19: x < 0xfff0 ==> x % 2;\nloop invariant i20: x >= 0xfff0 ==> !(x % 2);\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-1.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/overflow_1-1.c"
        ],
        "skipped": [],
        "total": 257,
        "success_count": 123,
        "failure_count": 134,
        "success_rate": 0.4785992217898833
    }
}