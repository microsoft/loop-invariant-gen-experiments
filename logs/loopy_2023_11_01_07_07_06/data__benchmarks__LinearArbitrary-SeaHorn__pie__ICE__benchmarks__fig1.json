{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\n\tint x = -50;\n\tint y;\n\n \twhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main() {\n\n\tint x = -50;\n\tint y;\n\n \twhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- x is initialized to -50\n\nLoop condition:\n- x < 0\n\nLoop body:\n- x = x + y\n- y++\n\nPost-condition:\n- y > 0\n\nSince x starts at -50 and only increases in each iteration of the loop, it will always remain negative. Therefore, we can use implication to simplify our loop invariants.\n\nLoop invariants:\n```\n/*@ \n    loop invariant x < 0;\n    loop invariant y >= 0;\n    loop invariant y == \\at(y, Pre) + (\\at(x, Pre) - x);\n    loop invariant y > 0 ==> y > \\at(y, Pre);\n*/\n```\nExplanation:\n- The first loop invariant states that x is always negative.\n- The second loop invariant states that y is non-negative.\n- The third loop invariant states that y equals its initial value plus the difference between the initial value of x and the current value of x. This is because in each iteration, x is increased by y, so the difference between the initial value of x and the current value of x is equal to the sum of all the values of y so far.\n- The fourth loop invariant states that if y is greater than 0, then it must be greater than its initial value. This is because y is incremented in each iteration of the loop. \n\nSince the loop terminates when x becomes non-negative, we know that y must be positive at the end of the loop, which implies the post-condition.",
            "First, let's look at the pre-conditions and variable assignments:\n\n- The variable `x` is initialized to -50.\n- The variable `y` is uninitialized and contains a garbage value.\n\nNow, let's analyze the loop body:\n\n- `x = x + y;` adds the value of `y` to `x`.\n- `y++;` increments the value of `y` by 1.\n\nThe loop condition is `x < 0`.\n\nNext, let's think about loop invariants that are true:\n\n- Before the loop execution, `y` is non-negative since it is uninitialized and contains a garbage value. Therefore, `y >= 0`.\n- Before the loop execution, `x <= -50`.\n- In every iteration of the loop, `y` is incremented by 1. Therefore, `y > 0`.\n- In every iteration of the loop, `x` is increased by the value of `y`. Therefore, `x <= -50 + y*y`.\n- After the loop termination, `x >= 0` since the loop terminates when `x >= 0`.\n- After the loop termination, `y > 0` since the loop terminates when `x >= 0` and `y` is incremented by 1 in every iteration.\n\nPutting it all together, the loop invariants are:\n```\n/*@ \n\tloop invariant y >= 0;\n\tloop invariant x <= -50 + y*y;\n\tloop invariant x < 0 ==> y > 0;\n\tloop invariant x >= 0 ==> y > 0;\n*/\n``` \n\nNote that the loop invariants are written as implications to take care of the conditional nature of the code.",
            "First, let's analyze the program and make a note of the pre-conditions and variable assignments:\n- `x` is initialized to `-50`.\n- `y` is not initialized and could have a garbage value.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is `x < 0`.\n\nNext, let's output the loop invariants that are true:\n- Before the loop execution:\n```\n/*@ \n    loop invariant x <= -50;\n    loop invariant y >= 0;\n*/\n```\n- In every iteration of the loop:\n```\n/*@ \n    loop invariant x + y <= -50;\n    loop invariant y > 0 ==> x < 0;\n*/\n```\n- After the loop termination:\n```\n/*@ \n    loop invariant y > 0 ==> x >= 0;\n    loop invariant y > 0 ==> y > 0;\n*/\n```\nThe loop invariant `y > 0` is used to guard the assertion. Using the above loop invariants, we can prove that `y` is greater than 0 after the loop termination, which implies that the assertion `y > 0` holds.",
            "Pre-conditions:\n- x is initialized to -50.\n- y is uninitialized and contains garbage values.\n\nLoop condition:\n- x < 0.\n\nLoop body:\n- x = x + y.\n- y++.\n\nPost-condition:\n- y > 0.\n\nLoop Invariants:\n- Since y starts with a garbage value, we cannot reason about its value. Hence, we will use an implication to make the loop invariant trivially true at the beginning of the loop.\n```\n/*@ \n    loop invariant x <= 0;\n    loop invariant y >= 1;\n*/\n```\n- Before the loop starts, x is initialized to -50. So, x <= 0 is true.\n- y is uninitialized and contains garbage values. So, y >= 1 is not true. We will use an implication to make it trivially true.\n```\n/*@ \n    loop invariant x <= 0;\n    loop invariant y >= 1 || x >= 0;\n*/\n```\n- In every iteration of the loop, x is updated to x + y. So, x + y <= 0 is true. We can split this into two loop invariants:\n```\n/*@ \n    loop invariant x + y <= 0;\n    loop invariant y >= 1 || x >= 0;\n*/\n```\n- After the loop terminates, x >= 0 is true. We can use this to strengthen the previous loop invariants.\n```\n/*@ \n    loop invariant x + y <= 0;\n    loop invariant x >= 0 ==> y >= 1;\n*/\n```\n- Finally, we need to use an implication to take care of the conditional nature of the code. Since the loop condition is x < 0, we can use the implication x >= 0 ==> x >= 0 && !(x < 0) to strengthen the loop invariant that involves x.\n```\n/*@ \n    loop invariant x + y <= 0;\n    loop invariant x >= 0 && !(x < 0) ==> y >= 1;\n*/\n```\n- These loop invariants imply the post-condition y > 0.",
            "Pre-conditions: \n- The variable `x` is assigned an initial value of `-50`.\n\nLoop Invariant:\n- `x < 0` ==> `y > 0`: This implies that if `x < 0` is true, then `y` must be greater than `0`.\n- `y >= 0`: This ensures that `y` is always greater than or equal to `0`.\n\nPost-condition:\n- `y > 0`: This ensures that `y` is greater than `0` after the loop execution.\n\nCombining the loop invariant and post-condition, we get:\n```\n/*@ \n\tloop invariant x < 0 ==> y > 0;\n\tloop invariant y >= 0;\n\t\n\t// Condition to imply the post-condition\n\tloop invariant !(x < 0) ==> y > 0;\n\n\t// Implication for non-deterministic variable x at the beginning of the loop\n\tloop invariant x >= 0 ==> y > 0;\n\n\t// Implication for non-deterministic variable x at the end of the loop\n\tloop invariant !(x < 0) ==> y > 0;\n\t\n\t// Implication for non-deterministic variable y at the end of the loop\n\tloop invariant x >= 0 ==> y > 0;\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant x < 0;\n    loop invariant y >= 0;\n    loop invariant y == \\at(y, Pre) + (\\at(x, Pre) - x);\n    loop invariant y > 0 ==> y > \\at(y, Pre);\n*/",
            "/*@ \n\tloop invariant y >= 0;\n\tloop invariant x <= -50 + y*y;\n\tloop invariant x < 0 ==> y > 0;\n\tloop invariant x >= 0 ==> y > 0;\n*/",
            "/*@ \n    loop invariant x <= -50;\n    loop invariant y >= 0;\n*/",
            "/*@ \n    loop invariant x <= 0;\n    loop invariant y >= 1;\n*/",
            "/*@ \n\tloop invariant x < 0 ==> y > 0;\n\tloop invariant y >= 0;\n\t\n\t// Condition to imply the post-condition\n\tloop invariant !(x < 0) ==> y > 0;\n\n\t// Implication for non-deterministic variable x at the beginning of the loop\n\tloop invariant x >= 0 ==> y > 0;\n\n\t// Implication for non-deterministic variable x at the end of the loop\n\tloop invariant !(x < 0) ==> y > 0;\n\t\n\t// Implication for non-deterministic variable y at the end of the loop\n\tloop invariant x >= 0 ==> y > 0;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant x < 0;\n    loop invariant y >= 0;\n    loop invariant y == \\at(y, Pre) + (\\at(x, Pre) - x);\n    loop invariant y > 0 ==> y > \\at(y, Pre);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 11: unbound logic variable y. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\n\tint x = -50;\n\tint y;\n\n \t/*@\n\n\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n\tloop invariant y >= 0;\n\tloop invariant x <= -50 + y*y;\n\tloop invariant x < 0 ==> y > 0;\n\tloop invariant x >= 0 ==> y > 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant y >= 0 is preserved but not established.\nloop invariant x <= -50 + y*y is partially proven to be inductive.\nloop invariant x < 0 ==> y > 0 is preserved but not established.\nloop invariant x >= 0 ==> y > 0 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\n\tint x = -50;\n\tint y;\n\n \t/*@\n\n\n\nloop invariant i4: x >= 0 ==> y > 0;\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x <= -50;\n    loop invariant y >= 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x <= -50 is established but not preserved.\nloop invariant y >= 0 is preserved but not established.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\n\tint x = -50;\n\tint y;\n\n \t/*@\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x <= 0;\n    loop invariant y >= 1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x <= 0 is established but not preserved.\nloop invariant y >= 1 is preserved but not established.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\n\tint x = -50;\n\tint y;\n\n \t/*@\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n\tloop invariant x < 0 ==> y > 0;\n\tloop invariant y >= 0;\n\t\n\t// Condition to imply the post-condition\n\tloop invariant !(x < 0) ==> y > 0;\n\n\t// Implication for non-deterministic variable x at the beginning of the loop\n\tloop invariant x >= 0 ==> y > 0;\n\n\t// Implication for non-deterministic variable x at the end of the loop\n\tloop invariant !(x < 0) ==> y > 0;\n\t\n\t// Implication for non-deterministic variable y at the end of the loop\n\tloop invariant x >= 0 ==> y > 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x < 0 ==> y > 0 is preserved but not established.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant !(x < 0) ==> y > 0 is partially proven to be inductive.\nloop invariant x >= 0 ==> y > 0 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\n\tint x = -50;\n\tint y;\n\n \t/*@\n\n\nloop invariant i3: !(x < 0) ==> y > 0;\nloop invariant i4: x >= 0 ==> y > 0;\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 11: unbound logic variable y. Ignoring loop annotation",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\n\tint x = -50;\n\tint y;\n\n \t/*@\nloop invariant i1: x < 0;\nloop invariant i2: y >= 0;\nloop invariant i3: y == \\at(y, Pre) + (\\at(x, Pre) - x);\nloop invariant i4: y > 0 ==> y > \\at(y, Pre);\nloop invariant i5: x <= -50 + y*y;\nloop invariant i6: x < 0 ==> y > 0;\nloop invariant i7: x >= 0 ==> y > 0;\nloop invariant i8: x <= -50;\nloop invariant i9: x <= 0;\nloop invariant i10: y >= 1;\nloop invariant i11: !(x < 0) ==> y > 0;\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
        "combined_annotation_num_solver_calls": 6,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\n\tint x = -50;\n\tint y;\n\n \t/*@\n\n\n\n\n\n\nloop invariant i7: x >= 0 ==> y > 0;\n\n\n\nloop invariant i11: !(x < 0) ==> y > 0;\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c"
        ],
        "skipped": [],
        "total": 193,
        "success_count": 84,
        "failure_count": 109,
        "success_rate": 0.43523316062176165
    }
}