{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(0 <= b)) return 0;\n    res = a;\n    cnt = b;\n    while (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(0 <= b)) return 0;\n    res = a;\n    cnt = b;\n    while (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- The program assumes the existence of an external function `unknown_int()` which returns an integer value.\n- The program initializes two integer variables `a` and `b` with the return value of `unknown_int()`.\n- The program checks that `b` is non-negative, and returns 0 if it is not.\n\nLoop condition:\n- The loop continues while `cnt` is greater than 0.\n\nPost-condition:\n- The program asserts that the value of `res` after the loop is equal to the sum of `a` and `b`.\n\nLoop invariants:\n- `0 <= cnt <= b` (before the loop execution)\n- `res == a + (b - cnt)` (before the loop execution)\n- For each iteration of the loop, `0 <= cnt <= \\old(cnt)` and `res == a + (b - \\old(cnt))` (where `\\old(cnt)` and `\\old(res)` are the values of `cnt` and `res` in the previous iteration of the loop)\n- `cnt == 0 ==> res == a + b` (after the loop termination)\n\nExplanation:\n- The first invariant ensures that `cnt` is within the bounds of `0` and `b` at the beginning of each iteration of the loop.\n- The second invariant ensures that `res` is equal to `a` plus the remaining value of `b` at the beginning of the loop (since `cnt` is initialized to `b`).\n- The third invariant ensures that `cnt` decreases by 1 in each iteration of the loop, and that `res` is updated accordingly (by adding 1 to `res` for each decrease in `cnt`).\n- The fourth invariant ensures that `res` is equal to `a` plus `b` after the loop termination, since `cnt` would be equal to `0` at that point.",
            "Pre-conditions:\n- `a` and `b` are integer variables initialized to some unknown values returned by the function `unknown_int()`.\n- The value of `b` is greater than or equal to 0.\n\nPost-condition:\n- The final value of `res` is equal to the sum of `a` and `b`.\n\nLoop condition:\n- The loop executes while the value of `cnt` is greater than 0.\n\nLoop invariants:\n- Before the loop execution, `res` is equal to `a` and `cnt` is greater than or equal to 0:\n```\n/*@ \n    loop invariant res == a && 0 <= cnt;\n*/\n```\n- In every iteration of the loop, `res` is equal to the sum of `a` and `b` minus `cnt`, and `cnt` is decremented by 1:\n```\n/*@ \n    loop invariant res == a + b - cnt && 0 <= cnt && cnt <= b;\n*/\n```\n- After the loop termination, `res` is equal to the sum of `a` and `b`:\n```\n/*@ \n    loop invariant res == a + b && cnt == 0;\n*/\n```\nExplanation:\n- Before the loop execution, the loop invariant ensures that `res` is initialized to `a` and `cnt` is non-negative, which is true since `cnt` is initialized to `b` which is greater than or equal to 0.\n- In every iteration of the loop, the loop invariant ensures that `res` is updated correctly by adding 1 to it in each iteration, while `cnt` is decremented by 1. The second part of the invariant ensures that `cnt` never becomes negative, which is necessary for the loop to eventually terminate.\n- After the loop termination, the loop invariant ensures that `res` is equal to the sum of `a` and `b`, and `cnt` is 0, which means that the loop has executed exactly `b` times. This implies that the final value of `res` is equal to the sum of `a` and `b`.",
            "Pre-conditions:\n- The program takes no input parameters.\n- The program calls `unknown_int` function twice to initialize `a` and `b`.\n- `b` should be non-negative, i.e., `0 <= b`.\n\nLoop Condition:\n- The loop will continue as long as `cnt` is greater than 0, where `cnt` is initialized to `b`.\n\nPost-condition:\n- The program verifies that the value of `res` is equal to the sum of `a` and `b`.\n\nLoop Invariants:\n- Before the loop executes, the value of `res` should be `a` and the value of `cnt` should be `b`.\n```\n/*@ \n    loop invariant res == a;\n    loop invariant cnt == b;\n*/\n```\n- In every iteration of the loop, the value of `res` should be incremented by 1 and the value of `cnt` should be decremented by 1.\n```\n/*@ \n    loop invariant res == a + (b - cnt);\n    loop invariant 0 <= cnt <= b;\n*/\n```\n- After the loop terminates, the value of `res` should be equal to the sum of `a` and `b`.\n```\n/*@ \n    loop invariant res == a + (b - cnt);\n    loop invariant cnt == 0;\n    loop invariant \\forall integer i; 0 <= i < b - cnt ==> res == a + i;\n    loop assigns cnt, res;\n    loop variant cnt;\n*/\n```\nIn the last invariant, we use `i` as an integer variable to iterate over the loop from 0 to `b-cnt-1`, and we assert that for all such values of `i`, `res` should be equal to `a+i`. Finally, we have added `loop assigns` to indicate the variables modified inside the loop, and `loop variant` to indicate a strictly decreasing expression that decreases in each iteration of the loop, to ensure that the loop terminates. \n\nNote that we do not need to add any additional constraints on the variables `a` and `b`, as they are already initialized by calling the `unknown_int` function, and we do not know the range of values they can take.",
            "First, let's note the preconditions and variable assignments in the program:\n- `a` and `b` are assigned non-deterministic values.\n- `res` is initialized to `a`.\n- `cnt` is initialized to `b`.\n- The program assumes that `b` is non-negative.\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is `cnt > 0`.\n- In each iteration of the loop, `cnt` is decremented by 1 and `res` is incremented by 1.\n\nTo find the necessary loop invariants, we need to find conditions that hold true before the loop execution, in every iteration of the loop and after the loop termination, such that these conditions imply the post-condition that `res` is equal to `a + b`.\n\nHere are some possible loop invariants:\n```\n/*@ \n    loop invariant 0 <= cnt <= \\at(cnt, Pre); // cnt is always non-negative\n    loop invariant res == a + b - cnt; // res is always equal to a+b-cnt\n*/\n```\nExplanation:\n- The first loop invariant states that `cnt` is always non-negative and does not exceed its initial value. This follows from the precondition that `b` is non-negative and the fact that `cnt` is decremented by 1 in each iteration of the loop.\n- The second loop invariant states that `res` is always equal to `a + b - cnt`. This follows from the fact that `res` is initialized to `a` and incremented by 1 in each iteration of the loop, while `cnt` is decremented by 1 in each iteration. Therefore, `res` is equal to `a + b - cnt` at the end of each iteration of the loop. \n\nThese loop invariants imply the post-condition that `res == a + b`, since `cnt` is equal to 0 at the end of the loop.",
            "Pre-conditions:\n- Variables `a` and `b` are integers with unknown values.\n- Variable `res` is an integer initialized with the value of `a`.\n- Variable `cnt` is an integer initialized with the value of `b`.\n- `b` is greater than or equal to `0`.\n\nLoop condition:\n- `cnt > 0`\n\nPost-condition:\n- `res == a + b`\n\nLoop invariants:\n- Before loop execution:\n    - `res == a + (b - cnt)`\n    - `cnt >= 0`\n    - `b >= 0`\n\n- In every iteration of the loop:\n    - `res == a + (b - cnt)`\n    - `cnt >= 0`\n\n- After loop termination:\n    - `res == a + (b - 0)`\n    - `cnt == 0`\n    - `b >= 0`\n    \nNote:\n- Before loop execution, the value of `res` is `a` and the value of `cnt` is `b`. Hence, the first invariant holds.\n- In every iteration of the loop, the value of `res` is incremented by 1 and the value of `cnt` is decremented by 1. Hence, the second invariant holds.\n- After loop termination, the value of `cnt` becomes `0` and the value of `res` becomes `a + b`. Hence, the third invariant holds and the post-condition is satisfied."
        ],
        "annotation_blocks": [
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The program assumes the existence of an external function `unknown_int()` which returns an integer value.\n- The program initializes two integer variables `a` and `b` with the return value of `unknown_int()`.\n- The program checks that `b` is non-negative, and returns 0 if it is not.\n\nLoop condition:\n- The loop continues while `cnt` is greater than 0.\n\nPost-condition:\n- The program asserts that the value of `res` after the loop is equal to the sum of `a` and `b`.\n\nLoop invariants:\n- `0 <= cnt <= b` (before the loop execution)\n- `res == a + (b - cnt)` (before the loop execution)\n- For each iteration of the loop, `0 <= cnt <= \\old(cnt)` and `res == a + (b - \\old(cnt))` (where `\\old(cnt)` and `\\old(res)` are the values of `cnt` and `res` in the previous iteration of the loop)\n- `cnt == 0 ==> res == a + b` (after the loop termination)\n\nExplanation:\n- The first invariant ensures that `cnt` is within the bounds of `0` and `b` at the beginning of each iteration of the loop.\n- The second invariant ensures that `res` is equal to `a` plus the remaining value of `b` at the beginning of the loop (since `cnt` is initialized to `b`).\n- The third invariant ensures that `cnt` decreases by 1 in each iteration of the loop, and that `res` is updated accordingly (by adding 1 to `res` for each decrease in `cnt`).\n- The fourth invariant ensures that `res` is equal to `a` plus `b` after the loop termination, since `cnt` would be equal to `0` at that point."
            ],
            "/*@ \n    loop invariant res == a && 0 <= cnt;\n*/",
            "/*@ \n    loop invariant res == a;\n    loop invariant cnt == b;\n*/",
            "/*@ \n    loop invariant 0 <= cnt <= \\at(cnt, Pre); // cnt is always non-negative\n    loop invariant res == a + b - cnt; // res is always equal to a+b-cnt\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- Variables `a` and `b` are integers with unknown values.\n- Variable `res` is an integer initialized with the value of `a`.\n- Variable `cnt` is an integer initialized with the value of `b`.\n- `b` is greater than or equal to `0`.\n\nLoop condition:\n- `cnt > 0`\n\nPost-condition:\n- `res == a + b`\n\nLoop invariants:\n- Before loop execution:\n    - `res == a + (b - cnt)`\n    - `cnt >= 0`\n    - `b >= 0`\n\n- In every iteration of the loop:\n    - `res == a + (b - cnt)`\n    - `cnt >= 0`\n\n- After loop termination:\n    - `res == a + (b - 0)`\n    - `cnt == 0`\n    - `b >= 0`\n    \nNote:\n- Before loop execution, the value of `res` is `a` and the value of `cnt` is `b`. Hence, the first invariant holds.\n- In every iteration of the loop, the value of `res` is incremented by 1 and the value of `cnt` is decremented by 1. Hence, the second invariant holds.\n- After loop termination, the value of `cnt` becomes `0` and the value of `res` becomes `a + b`. Hence, the third invariant holds and the post-condition is satisfied."
            ]
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The program assumes the existence of an external function `unknown_int()` which returns an integer value.\n- The program initializes two integer variables `a` and `b` with the return value of `unknown_int()`.\n- The program checks that `b` is non-negative, and returns 0 if it is not.\n\nLoop condition:\n- The loop continues while `cnt` is greater than 0.\n\nPost-condition:\n- The program asserts that the value of `res` after the loop is equal to the sum of `a` and `b`.\n\nLoop invariants:\n- `0 <= cnt <= b` (before the loop execution)\n- `res == a + (b - cnt)` (before the loop execution)\n- For each iteration of the loop, `0 <= cnt <= \\old(cnt)` and `res == a + (b - \\old(cnt))` (where `\\old(cnt)` and `\\old(res)` are the values of `cnt` and `res` in the previous iteration of the loop)\n- `cnt == 0 ==> res == a + b` (after the loop termination)\n\nExplanation:\n- The first invariant ensures that `cnt` is within the bounds of `0` and `b` at the beginning of each iteration of the loop.\n- The second invariant ensures that `res` is equal to `a` plus the remaining value of `b` at the beginning of the loop (since `cnt` is initialized to `b`).\n- The third invariant ensures that `cnt` decreases by 1 in each iteration of the loop, and that `res` is updated accordingly (by adding 1 to `res` for each decrease in `cnt`).\n- The fourth invariant ensures that `res` is equal to `a` plus `b` after the loop termination, since `cnt` would be equal to `0` at that point.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant res == a && 0 <= cnt;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant res == a && 0 <= cnt is established but not preserved.\nAssertion res == a + b: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(0 <= b)) return 0;\n    res = a;\n    cnt = b;\n    /*@\n\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant res == a;\n    loop invariant cnt == b;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant res == a is established but not preserved.\nloop invariant cnt == b is partially proven to be inductive.\nAssertion res == a + b: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(0 <= b)) return 0;\n    res = a;\n    cnt = b;\n    /*@\n\n\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= cnt <= \\at(cnt, Pre); // cnt is always non-negative\n    loop invariant res == a + b - cnt; // res is always equal to a+b-cnt\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: unbound logic variable cnt. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(0 <= b)) return 0;\n    res = a;\n    cnt = b;\n    /*@\n\nloop invariant i2: res == a + b - cnt;\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- Variables `a` and `b` are integers with unknown values.\n- Variable `res` is an integer initialized with the value of `a`.\n- Variable `cnt` is an integer initialized with the value of `b`.\n- `b` is greater than or equal to `0`.\n\nLoop condition:\n- `cnt > 0`\n\nPost-condition:\n- `res == a + b`\n\nLoop invariants:\n- Before loop execution:\n    - `res == a + (b - cnt)`\n    - `cnt >= 0`\n    - `b >= 0`\n\n- In every iteration of the loop:\n    - `res == a + (b - cnt)`\n    - `cnt >= 0`\n\n- After loop termination:\n    - `res == a + (b - 0)`\n    - `cnt == 0`\n    - `b >= 0`\n    \nNote:\n- Before loop execution, the value of `res` is `a` and the value of `cnt` is `b`. Hence, the first invariant holds.\n- In every iteration of the loop, the value of `res` is incremented by 1 and the value of `cnt` is decremented by 1. Hence, the second invariant holds.\n- After loop termination, the value of `cnt` becomes `0` and the value of `res` becomes `a + b`. Hence, the third invariant holds and the post-condition is satisfied.",
                "error": "Output does not contain at least 1 code block"
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 15: unbound logic variable cnt. Ignoring loop annotation",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(0 <= b)) return 0;\n    res = a;\n    cnt = b;\n    /*@\nloop invariant i1: res == a && 0 <= cnt;\nloop invariant i2: res == a;\nloop invariant i3: cnt == b;\nloop invariant i4: 0 <= cnt <= \\at(cnt, Pre);\nloop invariant i5: res == a + b - cnt;\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 6,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(0 <= b)) return 0;\n    res = a;\n    cnt = b;\n    /*@\n\n\n\n\nloop invariant i5: res == a + b - cnt;\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c"
        ],
        "skipped": [],
        "total": 126,
        "success_count": 51,
        "failure_count": 75,
        "success_rate": 0.40476190476190477
    }
}