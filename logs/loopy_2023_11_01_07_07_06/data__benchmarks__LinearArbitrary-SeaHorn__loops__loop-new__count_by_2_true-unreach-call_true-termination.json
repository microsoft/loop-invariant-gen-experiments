{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    for (i = 0; i < LARGE_INT; i += 2) ;\n    {;\n//@ assert(i == LARGE_INT);\n}\n\n    return 0;\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    for (i = 0; i < LARGE_INT; i += 2) ;\n    {;\n//@ assert(i == LARGE_INT);\n}\n\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\nNone.\n\nVariable Assignments:\nNone.\n\nLoop Condition:\nThe loop condition is `i < LARGE_INT`. \n\nLoop Invariants:\n- Before the loop execution:\n```\n/*@ \n    loop invariant 0 <= i <= LARGE_INT;\n*/\n```\n- In every iteration of the loop:\n```\n/*@ \n    loop invariant 0 <= i <= LARGE_INT;\n*/\n```\n- After the loop termination:\n```\n/*@ \n    loop invariant i == LARGE_INT;\n*/\n```\nThe loop terminates when `i` becomes equal to `LARGE_INT`. Therefore, after the loop, `i` should be equal to `LARGE_INT`. \n\nUsing the loop condition and the fact that `i` is incremented by `2` in each iteration, we can infer that `i` will always be an even number. Therefore, we can add the following loop invariants:\n- Before the loop execution:\n```\n/*@ \n    loop invariant 0 <= i <= LARGE_INT;\n    loop invariant i%2 == 0;\n*/\n```\n- In every iteration of the loop:\n```\n/*@ \n    loop invariant 0 <= i <= LARGE_INT;\n    loop invariant i%2 == 0;\n*/\n```\n- After the loop termination:\n```\n/*@ \n    loop invariant i == LARGE_INT;\n    loop invariant i%2 == 0;\n*/\n```\nFinally, since there are no pre-conditions or non-deterministic variables, we don't need to add any additional implications to make the invariants hold. Therefore, the final loop invariants are:\n```\n/*@ \n    loop invariant 0 <= i <= LARGE_INT;\n    loop invariant i%2 == 0;\n    loop invariant i == LARGE_INT;\n*/\n```",
            "Pre-conditions: None\n\nVariable Assignments: None\n\nLoop condition: `i < LARGE_INT`\n\nPost-condition: `i == LARGE_INT`\n\nLoop Invariants:\n```\n/*@ \n    loop invariant 0 <= i <= LARGE_INT;\n    loop invariant i % 2 == 0;\n    loop invariant i <= LARGE_INT - 2;\n    loop invariant i != LARGE_INT;\n*/\n```\n\nExplanation:\n- The first loop invariant specifies that `i` is always greater than or equal to 0 and less than or equal to `LARGE_INT`.\n- The second loop invariant specifies that `i` is always even.\n- The third loop invariant specifies that `i` is always less than `LARGE_INT - 2`.\n- The fourth loop invariant specifies that `i` is never equal to `LARGE_INT`.\n- Since there is no loop body, we do not need to consider any changes to variables inside the loop. \n- After the loop terminates, we know that `i` is equal to `LARGE_INT` due to the post-condition. Therefore, we do not need to add any additional loop invariants to imply the post-condition.",
            "Pre-conditions: None.\n\nVariable assignments: None.\n\nLoop condition: `i < LARGE_INT`\n\nPost-condition: `i == LARGE_INT`\n\nLoop invariant:\n```\n/*@ \nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i % 2 == 0;\n*/\n```\nExplanation:\n- The first loop invariant states that `i` is always between 0 and `LARGE_INT`.\n- The second loop invariant states that `i` is always even.\n- Since the loop increments `i` by 2 in each iteration, both loop invariants are true before the loop execution.\n- In each iteration of the loop, `i` is incremented by 2, so both loop invariants are maintained.\n- After the loop termination, `i` is equal to `LARGE_INT`, so the first loop invariant implies the post-condition.",
            "Pre-conditions: None\n\nVariable assignments: None\n\nLoop condition: i < LARGE_INT\n\nPost-condition: i == LARGE_INT\n\nLoop invariant:\n\n- Before the loop execution: i == 0\n- In every iteration of the loop: i is even\n- After the loop termination: i <= LARGE_INT\n\nThe loop invariant implies the post-condition because i == LARGE_INT is only true when i <= LARGE_INT and i is even. \n\nTherefore, the complete loop invariant is:\n\n```\n/*@ \n    loop invariant i == 0;\n    loop invariant i <= LARGE_INT;\n    loop invariant i % 2 == 0;\n*/\n```",
            "**Step 1: Pre-conditions and variable assignments**\n\nThere are no explicit pre-conditions or variable assignments in the program.\n\n**Step 2: Loop condition**\n\nThe loop condition is `i < LARGE_INT`.\n\n**Step 3: Loop invariants**\n\nWe need to find loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition `i == LARGE_INT`.\n\nBefore the loop execution, `i` is assigned the value `0`. We can use this to form the first loop invariant:\n```\n/*@ \n    loop invariant 0 <= i <= LARGE_INT;\n*/\n```\n\nIn every iteration of the loop, `i` is incremented by `2`. Hence, we can add the following invariant:\n```\n/*@ \n    loop invariant 0 <= i <= LARGE_INT;\n    loop invariant i % 2 == 0;\n*/\n```\n\nAfter the loop termination, `i` is equal to `LARGE_INT`. However, since the loop only increments `i` by `2`, `LARGE_INT` must be even. Hence, we can add the following invariant:\n```\n/*@ \n    loop invariant 0 <= i <= LARGE_INT;\n    loop invariant i % 2 == 0;\n    loop invariant i == LARGE_INT ==> (i % 2 == 0);\n*/\n```\n\nSince the assertion is not guarded by any condition, we can use the implication `i == LARGE_INT ==> (i % 2 == 0)` in the post-condition of the loop invariants:\n```\n/*@ \n    loop invariant 0 <= i <= LARGE_INT;\n    loop invariant i % 2 == 0;\n    loop invariant i == LARGE_INT ==> (i % 2 == 0);\n    loop variant LARGE_INT - i;\n*/\n```\n\nNote that we have also added a loop variant `LARGE_INT - i` to ensure that the loop terminates. The loop variant is a decreasing expression that is modified by the loop. In this case, `LARGE_INT - i` decreases by at least `2` in every iteration, and is initially equal to `LARGE_INT`, so it is a valid loop variant."
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant 0 <= i <= LARGE_INT;\n*/",
            "/*@ \n    loop invariant 0 <= i <= LARGE_INT;\n    loop invariant i % 2 == 0;\n    loop invariant i <= LARGE_INT - 2;\n    loop invariant i != LARGE_INT;\n*/",
            "/*@ \nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i % 2 == 0;\n*/",
            "/*@ \n    loop invariant i == 0;\n    loop invariant i <= LARGE_INT;\n    loop invariant i % 2 == 0;\n*/",
            "/*@ \n    loop invariant 0 <= i <= LARGE_INT;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= i <= LARGE_INT;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= LARGE_INT is established but not preserved.\nAssertion i == 1000000: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\n\n*/\nfor (i = 0; i < LARGE_INT; i += 2) ;\n    {;\n//@ assert(i == LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= i <= LARGE_INT;\n    loop invariant i % 2 == 0;\n    loop invariant i <= LARGE_INT - 2;\n    loop invariant i != LARGE_INT;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= LARGE_INT is partially proven to be inductive.\nloop invariant i % 2 == 0 is partially proven to be inductive.\nloop invariant i <= LARGE_INT - 2 is established but not preserved.\nloop invariant i != LARGE_INT is partially proven to be inductive.\nAssertion i == 1000000: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\nloop invariant i2: i % 2 == 0;\n\n\n*/\nfor (i = 0; i < LARGE_INT; i += 2) ;\n    {;\n//@ assert(i == LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i % 2 == 0;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant 0 <= i <= LARGE_INT is inductive.\nloop invariant i % 2 == 0 is inductive.\nAssertion i == 1000000: Valid"
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant i == 0;\n    loop invariant i <= LARGE_INT;\n    loop invariant i % 2 == 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i == 0 is established but not preserved.\nloop invariant i <= LARGE_INT is partially proven to be inductive.\nloop invariant i % 2 == 0 is partially proven to be inductive.\nAssertion i == 1000000: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\n\nloop invariant i2: i <= LARGE_INT;\nloop invariant i3: i % 2 == 0;\n*/\nfor (i = 0; i < LARGE_INT; i += 2) ;\n    {;\n//@ assert(i == LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= i <= LARGE_INT;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= LARGE_INT is established but not preserved.\nAssertion i == 1000000: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\n\n*/\nfor (i = 0; i < LARGE_INT; i += 2) ;\n    {;\n//@ assert(i == LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= i <= LARGE_INT is partially proven to be inductive.\nloop invariant i % 2 == 0 is partially proven to be inductive.\nloop invariant i <= LARGE_INT - 2 is partially proven to be inductive.\nloop invariant i != LARGE_INT is partially proven to be inductive.\nloop invariant i == 0 is established but not preserved.\nloop invariant i <= LARGE_INT is partially proven to be inductive.\nAssertion i == 1000000: Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\nloop invariant i2: i % 2 == 0;\nloop invariant i3: i <= LARGE_INT - 2;\nloop invariant i4: i != LARGE_INT;\nloop invariant i5: i == 0;\nloop invariant i6: i <= LARGE_INT;\n*/\nfor (i = 0; i < LARGE_INT; i += 2) ;\n    {;\n//@ assert(i == LARGE_INT);\n}\n\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 4,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\nloop invariant i2: i % 2 == 0;\n\n\n\nloop invariant i6: i <= LARGE_INT;\n*/\nfor (i = 0; i < LARGE_INT; i += 2) ;\n    {;\n//@ assert(i == LARGE_INT);\n}\n\n    return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c"
        ],
        "skipped": [],
        "total": 131,
        "success_count": 55,
        "failure_count": 76,
        "success_rate": 0.4198473282442748
    }
}