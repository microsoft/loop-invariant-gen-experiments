{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loop-new/count_by_k.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i;\n    int k;\n    k = unknown_int();\n    if (!(0 <= k && k <= 10)) return 0;\n    for (i = 0; i < LARGE_INT*k; i += k) ;\n    {;\n//@ assert(i == LARGE_INT*k);\n}\n\n    return 0;\n}",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i;\n    int k;\n    k = unknown_int();\n    if (!(0 <= k && k <= 10)) return 0;\n    for (i = 0; i < LARGE_INT*k; i += k) ;\n    {;\n//@ assert(i == LARGE_INT*k);\n}\n\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "First, let's analyze the program and note down the pre-conditions and variable assignments:\n- The program takes no input.\n- The program initializes an integer variable `k` with the return value of an external function `unknown_int()`.\n- The program checks if `k` is between 0 and 10 (inclusive) and returns 0 if it is not.\n- The program then enters a for loop with an iteration variable `i` initialized to 0 and loop condition `i < LARGE_INT*k`. The loop body is empty except for an empty statement (;).\n- After the loop, the program has an assertion that `i` is equal to `LARGE_INT*k`.\n- The program returns 0.\n\nNext, let's analyze the loop condition and loop body:\n- The loop condition is `i < LARGE_INT*k`, so the loop will continue as long as `i` is less than `LARGE_INT*k`.\n- The loop body is empty, so there are no changes to any variables in each iteration of the loop.\n\nNow, let's find the necessary loop invariants:\n- Before the loop starts, `i` is initialized to 0. Therefore, a loop invariant that is true before the loop starts is `i == 0`.\n- In each iteration of the loop, `i` is incremented by `k`. Therefore, a loop invariant that is true in every iteration of the loop is `i % k == 0`.\n- After the loop terminates, `i` is equal to `LARGE_INT*k`. Therefore, a loop invariant that is true after the loop terminates is `i == LARGE_INT*k`.\n- Since `k` is initialized with the return value of an external function `unknown_int()`, we cannot make any assumptions about its initial value. Therefore, we add an implication that makes the loop invariant trivially true when `k` is not between 0 and 10: `!(0 <= k && k <= 10) ==> i == 0`.\n- Since the loop body is empty, we do not need to add any loop invariants to bound the maximum and minimum values of `i` or `k`.\n\nPutting everything together, the loop invariants are:\n```\n/*@\n    loop invariant i == 0;\n    loop invariant i % k == 0;\n    loop invariant i == LARGE_INT*k;\n    loop invariant !(0 <= k && k <= 10) ==> i == 0;\n*/\n```",
            "Pre-conditions:\n- The program takes no input.\n- The macro `assume(e)` checks if the condition `e` is true and returns 0 if it is not true. \n- The macro `LARGE_INT` is defined as 1000000.\n- The function `unknown_int()` returns an integer with unknown value.\n\nVariables:\n- `i` is an integer variable that is initialized to 0 before the loop.\n- `k` is an integer variable that is assigned the return value of `unknown_int()`.\n\nLoop condition:\n- The loop condition is `i < LARGE_INT*k`.\n\nPost-condition:\n- The post-condition is `i == LARGE_INT*k`.\n\nLoop Invariants:\n- Before the loop: None required.\n- In every iteration of the loop:\n    - `0 <= i <= LARGE_INT*k`.\n    - `i % k == 0`.\n    - `i/k <= LARGE_INT`.\n    - `i/k == \\floor(i/k)`.\n    - `i == j*k` where `j` is the number of iterations executed so far.\n    - `i == LARGE_INT*k ==> j == k`.\n- After the loop termination:\n    - `i == LARGE_INT*k`.\n\nReasoning:\n- Before the loop, no loop invariants are required since no statements have been executed yet.\n- In every iteration of the loop:\n    - Since `i` is initialized to 0 before the loop and incremented by `k` in every iteration, the condition `0 <= i <= LARGE_INT*k` holds in every iteration.\n    - Since `k` is a fixed integer and `i` is incremented by `k` in every iteration, the condition `i % k == 0` holds in every iteration.\n    - Since `i/k` is an integer division of `i` by `k`, the condition `i/k == \\floor(i/k)` holds in every iteration.\n    - The condition `i == j*k` holds in every iteration since `i` is incremented by `k` in every iteration.\n    - The condition `i == LARGE_INT*k ==> j == k` holds since the loop terminates when `i` becomes equal to `LARGE_INT*k`, which happens after exactly `k` iterations.\n- After the loop termination, the condition `i == LARGE_INT*k` holds since the loop terminates when `i` becomes equal to `LARGE_INT*k`.",
            "We are given a C program with a single for loop and an assertion after it. The program initializes an integer variable `k` with a non-deterministic value and checks if it is between 0 and 10 (inclusive). Then, it executes a loop that increments a variable `i` by `k` until `i` reaches `LARGE_INT*k`. Finally, it asserts that `i` is equal to `LARGE_INT*k`.\n\nPre-conditions:\n\nNone.\n\nVariable bounds:\n\n- `0 <= k <= 10`: given in the program.\n- `0 <= i <= LARGE_INT*k`: `i` is initialized to 0 and incremented by `k` each time the loop runs, until it reaches `LARGE_INT*k`.\n\nLoop Invariants:\n```\n/*\n    loop invariant 1: 0 <= i <= LARGE_INT*k\n    loop invariant 2: 0 <= k <= 10\n    loop invariant 3: i == j*k ==> i+j*k <= LARGE_INT*k\n*/\n```\nExplanation:\n\n- Loop invariant 1: `i` is initialized to 0 and incremented by `k` each time the loop runs, until it reaches `LARGE_INT*k`. Therefore, `0 <= i <= LARGE_INT*k` holds before, during, and after the loop execution.\n- Loop invariant 2: `k` is initialized with a non-deterministic value and checked to be between 0 and 10 (inclusive). Therefore, `0 <= k <= 10` holds before, during, and after the loop execution.\n- Loop invariant 3: We know that `i` is incremented by `k` in each iteration of the loop. Therefore, if `i == j*k` is true for some `j` (i.e., `i` is a multiple of `k`), then `i+j*k` should be less than or equal to `LARGE_INT*k` to satisfy the loop condition. This is because if `i+j*k` is greater than `LARGE_INT*k`, then the loop will not terminate. Therefore, `i == j*k ==> i+j*k <= LARGE_INT*k` holds before, during, and after the loop execution. We use implication to handle the conditional nature of the code.\n\nPost-conditions:\n\nThe assertion `i == LARGE_INT*k` is true after the loop execution. However, it is guarded by a condition that checks if `0 <= k <= 10`. Therefore, we use implication to handle this condition.\n```\n//@ assert (0 <= k <= 10) ==> i == LARGE_INT*k;\n```",
            "Let's start by analyzing the program.\n\nPre-conditions:\n- None\n\nVariable assignments:\n- `k` is assigned the value of `unknown_int()` which returns an integer value.\n\nLoop condition:\n- `i < LARGE_INT*k`\n\nPost-condition:\n- `i == LARGE_INT*k`\n\nTo find the necessary loop invariants, we need to consider the following:\n\n1. Before the loop execution, `i` is equal to `0` and `k` is between `0` and `10` (inclusive).\n```\n/*@ \n    loop invariant 0 <= k <= 10;\n    loop invariant i == 0;\n*/\n```\n\n2. In every iteration of the loop, `i` is a multiple of `k`.\n```\n/*@ \n    loop invariant 0 <= k <= 10;\n    loop invariant i % k == 0;\n*/\n```\n\n3. After the loop termination, `i` is equal to `LARGE_INT*k`.\n```\n/*@ \n    loop invariant 0 <= k <= 10;\n    loop invariant i % k == 0;\n    loop invariant i == j*k;\n    loop invariant j == LARGE_INT ==> i == LARGE_INT*k;\n*/\n```\nHere, `j` is a new variable introduced to represent the number of times the loop has executed. The third invariant ensures that `i` is a multiple of `k`, and the fourth invariant ensures that `i` is equal to `LARGE_INT*k` when the loop has executed `LARGE_INT` times.\n\nFinally, we need to use implication to take care of the conditional nature of the code, since the assertion is guarded by a condition. We can use the guard condition in an implication to include it in the loop invariants:\n```\n/*@ \n    loop invariant 0 <= k <= 10;\n    loop invariant i % k == 0;\n    loop invariant i == j*k;\n    loop invariant (j < LARGE_INT) ==> (i < LARGE_INT*k);\n    loop invariant j == LARGE_INT ==> i == LARGE_INT*k;\n*/\n```\n\nNote that we do not need to bound the maximum or minimum values of `i` or `j`, since they are incremented by a multiple of `k` in each iteration of the loop. \n\nTherefore, the final set of loop invariants that imply the post-condition are:\n```\n/*@ \n    loop invariant 0 <= k <= 10;\n    loop invariant i % k == 0;\n    loop invariant i == j*k;\n    loop invariant (j < LARGE_INT) ==> (i < LARGE_INT*k);\n    loop invariant j == LARGE_INT ==> i == LARGE_INT*k;\n*/\n```",
            "First, let's consider the pre-conditions and variable assignments in the program:\n- The program defines two macros, `assume` and `LARGE_INT`.\n- The program declares two integer variables `i` and `k`.\n- The program assigns the result of the function `unknown_int()` to the variable `k`.\n- The program checks if `k` is between 0 and 10 (inclusive). If not, the program returns 0.\n- The program initializes `i` to 0.\n\nNext, let's analyze the loop body:\n- The loop body is empty.\n\nThe loop condition is `i < LARGE_INT*k`.\n\nNow, let's find loop invariants:\n- Before the loop execution:\n    - `0 <= k <= 10`\n    - `0 <= i`\n- In every iteration of the loop:\n    - `i % k == 0`\n    - `0 <= i <= LARGE_INT*k`\n- After the loop termination:\n    - `i == LARGE_INT*k`\n\nWe can use implication to take care of the conditional nature of the code. For example, the loop invariant `i == LARGE_INT*k` can be expressed as `(i == LARGE_INT*k) ==> (0 <= k <= 10)`.\n\nWe can also add conjunctions to bound the maximum and minimum values that variables can take:\n- `0 <= k <= 10`\n- `0 <= i <= LARGE_INT*k`\n\nFinally, since `unknown_int()` is non-deterministic, we need to use an implication to make the invariant true at the beginning of the loop:\n- `(k < 0 || k > 10) ==> (i == 0)`\n\nPutting it all together, the loop invariants are:\n```\n/*@ \n    loop invariant 0 <= k <= 10;\n    loop invariant 0 <= i <= LARGE_INT*k;\n    loop invariant i % k == 0;\n    loop invariant (k < 0 || k > 10) ==> (i == 0);\n    loop invariant (i == LARGE_INT*k) ==> (0 <= k <= 10);\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@\n    loop invariant i == 0;\n    loop invariant i % k == 0;\n    loop invariant i == LARGE_INT*k;\n    loop invariant !(0 <= k && k <= 10) ==> i == 0;\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The program takes no input.\n- The macro `assume(e)` checks if the condition `e` is true and returns 0 if it is not true. \n- The macro `LARGE_INT` is defined as 1000000.\n- The function `unknown_int()` returns an integer with unknown value.\n\nVariables:\n- `i` is an integer variable that is initialized to 0 before the loop.\n- `k` is an integer variable that is assigned the return value of `unknown_int()`.\n\nLoop condition:\n- The loop condition is `i < LARGE_INT*k`.\n\nPost-condition:\n- The post-condition is `i == LARGE_INT*k`.\n\nLoop Invariants:\n- Before the loop: None required.\n- In every iteration of the loop:\n    - `0 <= i <= LARGE_INT*k`.\n    - `i % k == 0`.\n    - `i/k <= LARGE_INT`.\n    - `i/k == \\floor(i/k)`.\n    - `i == j*k` where `j` is the number of iterations executed so far.\n    - `i == LARGE_INT*k ==> j == k`.\n- After the loop termination:\n    - `i == LARGE_INT*k`.\n\nReasoning:\n- Before the loop, no loop invariants are required since no statements have been executed yet.\n- In every iteration of the loop:\n    - Since `i` is initialized to 0 before the loop and incremented by `k` in every iteration, the condition `0 <= i <= LARGE_INT*k` holds in every iteration.\n    - Since `k` is a fixed integer and `i` is incremented by `k` in every iteration, the condition `i % k == 0` holds in every iteration.\n    - Since `i/k` is an integer division of `i` by `k`, the condition `i/k == \\floor(i/k)` holds in every iteration.\n    - The condition `i == j*k` holds in every iteration since `i` is incremented by `k` in every iteration.\n    - The condition `i == LARGE_INT*k ==> j == k` holds since the loop terminates when `i` becomes equal to `LARGE_INT*k`, which happens after exactly `k` iterations.\n- After the loop termination, the condition `i == LARGE_INT*k` holds since the loop terminates when `i` becomes equal to `LARGE_INT*k`."
            ],
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "We are given a C program with a single for loop and an assertion after it. The program initializes an integer variable `k` with a non-deterministic value and checks if it is between 0 and 10 (inclusive). Then, it executes a loop that increments a variable `i` by `k` until `i` reaches `LARGE_INT*k`. Finally, it asserts that `i` is equal to `LARGE_INT*k`.\n\nPre-conditions:\n\nNone.\n\nVariable bounds:\n\n- `0 <= k <= 10`: given in the program.\n- `0 <= i <= LARGE_INT*k`: `i` is initialized to 0 and incremented by `k` each time the loop runs, until it reaches `LARGE_INT*k`.\n\nLoop Invariants:\n```\n/*\n    loop invariant 1: 0 <= i <= LARGE_INT*k\n    loop invariant 2: 0 <= k <= 10\n    loop invariant 3: i == j*k ==> i+j*k <= LARGE_INT*k\n*/\n```\nExplanation:\n\n- Loop invariant 1: `i` is initialized to 0 and incremented by `k` each time the loop runs, until it reaches `LARGE_INT*k`. Therefore, `0 <= i <= LARGE_INT*k` holds before, during, and after the loop execution.\n- Loop invariant 2: `k` is initialized with a non-deterministic value and checked to be between 0 and 10 (inclusive). Therefore, `0 <= k <= 10` holds before, during, and after the loop execution.\n- Loop invariant 3: We know that `i` is incremented by `k` in each iteration of the loop. Therefore, if `i == j*k` is true for some `j` (i.e., `i` is a multiple of `k`), then `i+j*k` should be less than or equal to `LARGE_INT*k` to satisfy the loop condition. This is because if `i+j*k` is greater than `LARGE_INT*k`, then the loop will not terminate. Therefore, `i == j*k ==> i+j*k <= LARGE_INT*k` holds before, during, and after the loop execution. We use implication to handle the conditional nature of the code.\n\nPost-conditions:\n\nThe assertion `i == LARGE_INT*k` is true after the loop execution. However, it is guarded by a condition that checks if `0 <= k <= 10`. Therefore, we use implication to handle this condition.\n```\n//@ assert (0 <= k <= 10) ==> i == LARGE_INT*k;\n```"
            ],
            "/*@ \n    loop invariant 0 <= k <= 10;\n    loop invariant i == 0;\n*/",
            "/*@ \n    loop invariant 0 <= k <= 10;\n    loop invariant 0 <= i <= LARGE_INT*k;\n    loop invariant i % k == 0;\n    loop invariant (k < 0 || k > 10) ==> (i == 0);\n    loop invariant (i == LARGE_INT*k) ==> (0 <= k <= 10);\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "/*@\n    loop invariant i == 0;\n    loop invariant i % k == 0;\n    loop invariant i == LARGE_INT*k;\n    loop invariant !(0 <= k && k <= 10) ==> i == 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i == 0 is partially proven to be inductive.\nloop invariant i % k == 0 is preserved but not established.\nloop invariant i == LARGE_INT*k is preserved but not established.\nloop invariant !(0 <= k && k <= 10) ==> i == 0 is partially proven to be inductive.\nAssertion i == 1000000 * k: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i;\n    int k;\n    k = unknown_int();\n    if (!(0 <= k && k <= 10)) return 0;\n    /*@\n\n\n\n\n*/\nfor (i = 0; i < LARGE_INT*k; i += k) ;\n    {;\n//@ assert(i == LARGE_INT*k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The program takes no input.\n- The macro `assume(e)` checks if the condition `e` is true and returns 0 if it is not true. \n- The macro `LARGE_INT` is defined as 1000000.\n- The function `unknown_int()` returns an integer with unknown value.\n\nVariables:\n- `i` is an integer variable that is initialized to 0 before the loop.\n- `k` is an integer variable that is assigned the return value of `unknown_int()`.\n\nLoop condition:\n- The loop condition is `i < LARGE_INT*k`.\n\nPost-condition:\n- The post-condition is `i == LARGE_INT*k`.\n\nLoop Invariants:\n- Before the loop: None required.\n- In every iteration of the loop:\n    - `0 <= i <= LARGE_INT*k`.\n    - `i % k == 0`.\n    - `i/k <= LARGE_INT`.\n    - `i/k == \\floor(i/k)`.\n    - `i == j*k` where `j` is the number of iterations executed so far.\n    - `i == LARGE_INT*k ==> j == k`.\n- After the loop termination:\n    - `i == LARGE_INT*k`.\n\nReasoning:\n- Before the loop, no loop invariants are required since no statements have been executed yet.\n- In every iteration of the loop:\n    - Since `i` is initialized to 0 before the loop and incremented by `k` in every iteration, the condition `0 <= i <= LARGE_INT*k` holds in every iteration.\n    - Since `k` is a fixed integer and `i` is incremented by `k` in every iteration, the condition `i % k == 0` holds in every iteration.\n    - Since `i/k` is an integer division of `i` by `k`, the condition `i/k == \\floor(i/k)` holds in every iteration.\n    - The condition `i == j*k` holds in every iteration since `i` is incremented by `k` in every iteration.\n    - The condition `i == LARGE_INT*k ==> j == k` holds since the loop terminates when `i` becomes equal to `LARGE_INT*k`, which happens after exactly `k` iterations.\n- After the loop termination, the condition `i == LARGE_INT*k` holds since the loop terminates when `i` becomes equal to `LARGE_INT*k`.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "We are given a C program with a single for loop and an assertion after it. The program initializes an integer variable `k` with a non-deterministic value and checks if it is between 0 and 10 (inclusive). Then, it executes a loop that increments a variable `i` by `k` until `i` reaches `LARGE_INT*k`. Finally, it asserts that `i` is equal to `LARGE_INT*k`.\n\nPre-conditions:\n\nNone.\n\nVariable bounds:\n\n- `0 <= k <= 10`: given in the program.\n- `0 <= i <= LARGE_INT*k`: `i` is initialized to 0 and incremented by `k` each time the loop runs, until it reaches `LARGE_INT*k`.\n\nLoop Invariants:\n```\n/*\n    loop invariant 1: 0 <= i <= LARGE_INT*k\n    loop invariant 2: 0 <= k <= 10\n    loop invariant 3: i == j*k ==> i+j*k <= LARGE_INT*k\n*/\n```\nExplanation:\n\n- Loop invariant 1: `i` is initialized to 0 and incremented by `k` each time the loop runs, until it reaches `LARGE_INT*k`. Therefore, `0 <= i <= LARGE_INT*k` holds before, during, and after the loop execution.\n- Loop invariant 2: `k` is initialized with a non-deterministic value and checked to be between 0 and 10 (inclusive). Therefore, `0 <= k <= 10` holds before, during, and after the loop execution.\n- Loop invariant 3: We know that `i` is incremented by `k` in each iteration of the loop. Therefore, if `i == j*k` is true for some `j` (i.e., `i` is a multiple of `k`), then `i+j*k` should be less than or equal to `LARGE_INT*k` to satisfy the loop condition. This is because if `i+j*k` is greater than `LARGE_INT*k`, then the loop will not terminate. Therefore, `i == j*k ==> i+j*k <= LARGE_INT*k` holds before, during, and after the loop execution. We use implication to handle the conditional nature of the code.\n\nPost-conditions:\n\nThe assertion `i == LARGE_INT*k` is true after the loop execution. However, it is guarded by a condition that checks if `0 <= k <= 10`. Therefore, we use implication to handle this condition.\n```\n//@ assert (0 <= k <= 10) ==> i == LARGE_INT*k;\n```",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= k <= 10;\n    loop invariant i == 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= k <= 10 is partially proven to be inductive.\nloop invariant i == 0 is established but not preserved.\nAssertion i == 1000000 * k: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i;\n    int k;\n    k = unknown_int();\n    if (!(0 <= k && k <= 10)) return 0;\n    /*@\nloop invariant i1: 0 <= k <= 10;\n\n*/\nfor (i = 0; i < LARGE_INT*k; i += k) ;\n    {;\n//@ assert(i == LARGE_INT*k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant 0 <= k <= 10;\n    loop invariant 0 <= i <= LARGE_INT*k;\n    loop invariant i % k == 0;\n    loop invariant (k < 0 || k > 10) ==> (i == 0);\n    loop invariant (i == LARGE_INT*k) ==> (0 <= k <= 10);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= k <= 10 is partially proven to be inductive.\nloop invariant 0 <= i <= LARGE_INT*k is partially proven to be inductive.\nloop invariant i % k == 0 is preserved but not established.\nloop invariant (k < 0 || k > 10) ==> (i == 0) is partially proven to be inductive.\nloop invariant (i == LARGE_INT*k) ==> (0 <= k <= 10) is partially proven to be inductive.\nAssertion i == 1000000 * k: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i;\n    int k;\n    k = unknown_int();\n    if (!(0 <= k && k <= 10)) return 0;\n    /*@\nloop invariant i1: 0 <= k <= 10;\n\n\nloop invariant i4: (k < 0 || k > 10) ==> (i == 0);\nloop invariant i5: (i == LARGE_INT*k) ==> (0 <= k <= 10);\n*/\nfor (i = 0; i < LARGE_INT*k; i += k) ;\n    {;\n//@ assert(i == LARGE_INT*k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant i == 0 is partially proven to be inductive.\nloop invariant i % k == 0 is preserved but not established.\nloop invariant i == LARGE_INT*k is preserved but not established.\nloop invariant !(0 <= k && k <= 10) ==> i == 0 is partially proven to be inductive.\nloop invariant 0 <= k <= 10 is partially proven to be inductive.\nloop invariant 0 <= i <= LARGE_INT*k is partially proven to be inductive.\nloop invariant (k < 0 || k > 10) ==> (i == 0) is partially proven to be inductive.\nloop invariant (i == LARGE_INT*k) ==> (0 <= k <= 10) is partially proven to be inductive.\nAssertion i == 1000000 * k: Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i;\n    int k;\n    k = unknown_int();\n    if (!(0 <= k && k <= 10)) return 0;\n    /*@\nloop invariant i1: i == 0;\nloop invariant i2: i % k == 0;\nloop invariant i3: i == LARGE_INT*k;\nloop invariant i4: !(0 <= k && k <= 10) ==> i == 0;\nloop invariant i5: 0 <= k <= 10;\nloop invariant i6: 0 <= i <= LARGE_INT*k;\nloop invariant i7: (k < 0 || k > 10) ==> (i == 0);\nloop invariant i8: (i == LARGE_INT*k) ==> (0 <= k <= 10);\n*/\nfor (i = 0; i < LARGE_INT*k; i += k) ;\n    {;\n//@ assert(i == LARGE_INT*k);\n}\n\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 5,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i;\n    int k;\n    k = unknown_int();\n    if (!(0 <= k && k <= 10)) return 0;\n    /*@\n\n\n\nloop invariant i4: !(0 <= k && k <= 10) ==> i == 0;\nloop invariant i5: 0 <= k <= 10;\n\nloop invariant i7: (k < 0 || k > 10) ==> (i == 0);\nloop invariant i8: (i == LARGE_INT*k) ==> (0 <= k <= 10);\n*/\nfor (i = 0; i < LARGE_INT*k; i += k) ;\n    {;\n//@ assert(i == LARGE_INT*k);\n}\n\n    return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/const.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq1.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq2.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/afnp2014.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/css2003.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007b.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gsv2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/hhk2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_2.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../data/benchmarks/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/even.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/mod4.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/odd.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/id_trans.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/bhmr2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/ddlm2013.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gcnr2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gr2006.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_k.c"
        ],
        "skipped": [],
        "total": 304,
        "success_count": 145,
        "failure_count": 159,
        "success_rate": 0.4769736842105263
    }
}