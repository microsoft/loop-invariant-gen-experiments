{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i, x, y;\n  x = unknown_uint();\n  y = unknown_uint();\n  if (y <= 2) {\n    if (x < 0) {\n      x = 0;\n    }\n    i = 0;\n    while (i < 10) {\n      {;\n//@ assert(!( y > 2 ));\n}\n\n      i++;\n    }\n\n    {;\n//@ assert(!( x <= -1 ));\n}\n\n  }\n  return 0;\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i, x, y;\n  x = unknown_uint();\n  y = unknown_uint();\n  if (y <= 2) {\n    if (x < 0) {\n      x = 0;\n    }\n    i = 0;\n    while (i < 10) {\n      {;\n//@ assert(!( y > 2 ));\n}\n\n      i++;\n    }\n\n    {;\n//@ assert(!( x <= -1 ));\n}\n\n  }\n  return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- The function `unknown_uint()` returns an unsigned integer with an unknown value.\n- The variable `i` is an integer with an unknown initial value.\n- The variables `x` and `y` are integers with unknown initial values.\n\nLoop condition:\n- The loop continues as long as `i` is less than 10.\n\nPost-condition:\n- If `y` is less than or equal to 2, and if `x` is greater than or equal to 0, then the program executes the loop 10 times, and the assertion `!(x <= -1)` holds.\n\nLoop invariants:\n- Before the loop execution, the following invariant holds:\n```\n/*@ \n    loop invariant 0 <= i <= 10;\n    loop invariant x >= 0 ==> y <= 2;\n    loop invariant y > 2 ==> \\false;\n    loop invariant x <= -1 ==> \\false;\n*/\n```\n- In every iteration of the loop, the following invariant holds:\n```\n/*@ \n    loop invariant 0 <= i <= 10;\n    loop invariant x >= 0 ==> y <= 2;\n    loop invariant y > 2 ==> \\false;\n*/\n```\n- After the loop termination, the following invariant holds:\n```\n/*@ \n    loop invariant 0 <= i <= 10;\n    loop invariant x >= 0 ==> y <= 2;\n    loop invariant y > 2 ==> \\false;\n    loop invariant x <= -1 ==> \\false;\n    loop invariant !(x <= -1);\n*/\n```\n\nExplanation:\n- The first loop invariant specifies that `i` is always between 0 and 10, which is necessary for the loop to terminate after 10 iterations.\n- The second loop invariant specifies that if `x` is greater than or equal to 0, then `y` must be less than or equal to 2. This is necessary for the post-condition to hold.\n- The third loop invariant specifies that if `y` is greater than 2, then the loop cannot continue, so this condition must be false.\n- The fourth loop invariant specifies that if `x` is less than or equal to -1, then the loop cannot continue, so this condition must be false.\n- The fifth loop invariant specifies that after the loop terminates, the post-condition holds, which means that `x` must not be less than or equal to -1.",
            "Pre-conditions: None.\n\nVariable assignments:\n- `x = unknown_uint();`\n- `y = unknown_uint();`\n\nLoop condition: `i < 10`\n\nPost-condition: `!(y > 2) ==> (x > -1)`\n\nLoop invariants:\n- Before loop execution: None.\n- In every iteration of the loop: `i >= 0 && i <= 10`\n- After loop termination: `!(y > 2) ==> (x > -1)`\n\nExplanation:\n- The loop invariant `i >= 0 && i <= 10` is true before the first iteration of the loop and is preserved in every iteration because the loop only increments `i` and the loop condition `i < 10` ensures that the loop terminates when `i` becomes `10`.\n- The assertion `!(y > 2)` is guarded by the conditional statement `if (y <= 2)` in the program. Therefore, we can use implication to include the guard condition in the loop invariant. The loop invariant becomes `y <= 2 ==> !(y > 2)` which is always true and does not affect the verification of the post-condition.\n- The post-condition requires that if `!(y > 2)` is true, then `x > -1` is also true. Therefore, we can use implication to include this condition in the loop invariant. The loop invariant becomes `!(y > 2) ==> (x > -1)` which ensures that the post-condition is satisfied if the loop terminates with `!(y > 2)` being true.\n- There are no bounds on the variables `x` and `y`. Therefore, we cannot add any conjunctions that bound their maximum and minimum values.\n- There are no relations between the variables `x` and `y`. Therefore, we cannot add any conjunctions for their relation.\n- The variables `x` and `y` are non-deterministic at the beginning of the loop. Therefore, we can use implication to make the loop invariant trivially true at the beginning. The loop invariant becomes `true ==> !(y > 2)` which is always true. Similarly, the loop invariant after termination becomes `!(y > 2) ==> true` which is also always true.",
            "Pre-conditions:\n- None\n\nVariable assignments:\n- x = unknown_uint();\n- y = unknown_uint();\n\nLoop condition:\n- i < 10\n\nPost-condition:\n- !(y > 2) && !(x <= -1)\n\nLoop invariants:\n```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x >= -2147483647; // minimum value of int\nloop invariant x <= 2147483647; // maximum value of int\nloop invariant y >= 0; // minimum value of unsigned int\nloop invariant y <= 4294967295; // maximum value of unsigned int\nloop invariant !(y > 2) ==> !(x < 0);\nloop invariant !( y > 2 ) ==> (i == 10);\nloop invariant x >= -1 ==> !(y > 2); \nloop invariant i < 10 ==> !(y > 2);\nloop invariant i == 10 ==> !(y > 2) && !(x <= -1);\n*/\n```\nLet's explain each invariant:\n- The first invariant, `0 <= i <= 10`, specifies that `i` is within the range 0 to 10 (inclusive) throughout the loop execution.\n- The second and third invariants bound the minimum and maximum values that `x` can take to the minimum and maximum values of an `int` respectively. \n- The fourth and fifth invariants bound the minimum and maximum values that `y` can take to 0 and the maximum value of an `unsigned int` respectively. \n- The sixth invariant, `!(y > 2) ==> !(x < 0)`, states that if `y` is not greater than 2, then `x` must not be less than 0. This is derived from the conditional statement `if (y <= 2) { if (x < 0) { x = 0; } ...`.\n- The seventh invariant, `!( y > 2 ) ==> (i == 10)`, states that if `y` is not greater than 2, then `i` must be equal to 10. This follows from the loop condition `while (i < 10)`.\n- The eighth invariant, `x >= -1 ==> !(y > 2)`, states that if `x` is greater than or equal to -1, then `y` must not be greater than 2. This is derived from the post-condition `!(y > 2) && !(x <= -1)`.\n- The ninth invariant, `i < 10 ==> !(y > 2)`, states that if `i` is less than 10, then `y` must not be greater than 2. This is derived from the loop condition `while (i < 10)`.\n- The tenth invariant, `i == 10 ==> !(y > 2) && !(x <= -1)`, states that if `i` is equal to 10, then both `y` must not be greater than 2 and `x` must not be less than or equal to -1. This is derived from the post-condition `!(y > 2) && !(x <= -1)`. \n\nNote that since `x` and `y` are non-deterministic at the beginning of the loop, the invariants involving them are trivially true at the beginning of the loop. Similarly, since `y` is not used after the loop, the invariant involving `y` is trivially true after the loop.",
            "First, let's consider the pre-conditions and variable assignments in the program:\n- The program declares three integer variables `i`, `x`, and `y`.\n- `x` and `y` are assigned non-deterministic values using the function `unknown_uint()`.\n- The program has a conditional statement that checks if `y` is less than or equal to 2. If this condition is true, it checks if `x` is less than 0 and assigns it 0 if true. It then enters a while loop that executes 10 times and increments `i` in each iteration. \n- The while loop has an assertion that checks if `y` is greater than 2, and another assertion that checks if `x` is greater than or equal to -1. \n\nNext, let's analyze the loop condition: the loop executes while `i` is less than 10.\n\nBased on the above, we can come up with the following loop invariants:\n```\n/*@ \n    loop invariant 0 <= i <= 10;\n    loop invariant x >= -1;\n    loop invariant y <= 2 ==> x == 0;\n    loop invariant y > 2 ==> !(x < 0);\n*/\n```\n\nExplanation:\n- The first invariant ensures that `i` is always between 0 and 10 (inclusive) during the loop execution.\n- The second invariant ensures that `x` is always greater than or equal to -1 during the loop execution.\n- The third invariant is a conjunction of two implications. If `y` is less than or equal to 2, then `x` must be equal to 0. This is because the conditional statement before the loop assigns `x` a value of 0 if it is less than 0 when `y` is less than or equal to 2. If `y` is greater than 2, the implication is trivially true, and the invariant has no effect.\n- The fourth invariant is also a conjunction of two implications. If `y` is greater than 2, then `x` must not be less than 0. This is because the conditional statement before the loop assigns `x` a value of 0 if it is less than 0 when `y` is less than or equal to 2. If `y` is less than or equal to 2, the implication is trivially true, and the invariant has no effect.\n\nThese invariants are true before the loop execution, in every iteration of the loop, and after the loop termination. They also imply the post-condition (the two assertions in the program).",
            "Pre-conditions:\n- None\n\nVariable Assignments:\n- x = unknown_uint()\n- y = unknown_uint()\n\nLoop Invariants:\n- Before loop execution: None\n- In every iteration of the loop:\n  - 0 <= i <= 10  // i is bounded by 0 and 10\n  - !(y > 2) ==> !(y > 2)  // y does not change in the loop, so the implication is trivially true\n- After loop termination:\n  - !(y > 2) ==> !(y > 2)  // y does not change in the loop, so the implication is trivially true\n  - x >= -1  // x is non-negative, so it is at least -1\n  - x >= 0 ==> x >= 0  // if x was set to 0 in the conditional, it remains non-negative\n  - x < 0 ==> !(y > 2)  // if x is negative, then y must not be greater than 2, because of the conditional\n\nPutting it all together:\n```\n/*@ \n    loop invariant 0 <= i <= 10;\n    loop invariant !(y > 2) ==> !(y > 2);\n*/\n\nint i, x, y;\nx = unknown_uint();\ny = unknown_uint();\nif (y <= 2) {\n  if (x < 0) {\n    x = 0;\n  }\n  i = 0;\n  while (i < 10) {\n    {;\n      //@ assert !(y > 2) ==> !(y > 2);\n    }\n    i++;\n  }\n  {;\n    //@ assert !(y > 2) ==> !(y > 2);\n    //@ assert x >= -1;\n    //@ assert x >= 0 ==> x >= 0;\n    //@ assert x < 0 ==> !(y > 2);\n  }\n}\n```"
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant 0 <= i <= 10;\n    loop invariant x >= 0 ==> y <= 2;\n    loop invariant y > 2 ==> \\false;\n    loop invariant x <= -1 ==> \\false;\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions: None.\n\nVariable assignments:\n- `x = unknown_uint();`\n- `y = unknown_uint();`\n\nLoop condition: `i < 10`\n\nPost-condition: `!(y > 2) ==> (x > -1)`\n\nLoop invariants:\n- Before loop execution: None.\n- In every iteration of the loop: `i >= 0 && i <= 10`\n- After loop termination: `!(y > 2) ==> (x > -1)`\n\nExplanation:\n- The loop invariant `i >= 0 && i <= 10` is true before the first iteration of the loop and is preserved in every iteration because the loop only increments `i` and the loop condition `i < 10` ensures that the loop terminates when `i` becomes `10`.\n- The assertion `!(y > 2)` is guarded by the conditional statement `if (y <= 2)` in the program. Therefore, we can use implication to include the guard condition in the loop invariant. The loop invariant becomes `y <= 2 ==> !(y > 2)` which is always true and does not affect the verification of the post-condition.\n- The post-condition requires that if `!(y > 2)` is true, then `x > -1` is also true. Therefore, we can use implication to include this condition in the loop invariant. The loop invariant becomes `!(y > 2) ==> (x > -1)` which ensures that the post-condition is satisfied if the loop terminates with `!(y > 2)` being true.\n- There are no bounds on the variables `x` and `y`. Therefore, we cannot add any conjunctions that bound their maximum and minimum values.\n- There are no relations between the variables `x` and `y`. Therefore, we cannot add any conjunctions for their relation.\n- The variables `x` and `y` are non-deterministic at the beginning of the loop. Therefore, we can use implication to make the loop invariant trivially true at the beginning. The loop invariant becomes `true ==> !(y > 2)` which is always true. Similarly, the loop invariant after termination becomes `!(y > 2) ==> true` which is also always true."
            ],
            "/*@\nloop invariant 0 <= i <= 10;\nloop invariant x >= -2147483647; // minimum value of int\nloop invariant x <= 2147483647; // maximum value of int\nloop invariant y >= 0; // minimum value of unsigned int\nloop invariant y <= 4294967295; // maximum value of unsigned int\nloop invariant !(y > 2) ==> !(x < 0);\nloop invariant !( y > 2 ) ==> (i == 10);\nloop invariant x >= -1 ==> !(y > 2); \nloop invariant i < 10 ==> !(y > 2);\nloop invariant i == 10 ==> !(y > 2) && !(x <= -1);\n*/",
            "/*@ \n    loop invariant 0 <= i <= 10;\n    loop invariant x >= -1;\n    loop invariant y <= 2 ==> x == 0;\n    loop invariant y > 2 ==> !(x < 0);\n*/",
            "/*@ \n    loop invariant 0 <= i <= 10;\n    loop invariant !(y > 2) ==> !(y > 2);\n*/\n\nint i, x, y;\nx = unknown_uint();\ny = unknown_uint();\nif (y <= 2) {\n  if (x < 0) {\n    x = 0;\n  }\n  i = 0;\n  while (i < 10) {\n    {;\n      //@ assert !(y > 2) ==> !(y > 2);\n    }\n    i++;\n  }\n  {;\n    //@ assert !(y > 2) ==> !(y > 2);\n    //@ assert x >= -1;\n    //@ assert x >= 0 ==> x >= 0;\n    //@ assert x < 0 ==> !(y > 2);\n  }\n}"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant 0 <= i <= 10;\n    loop invariant x >= 0 ==> y <= 2;\n    loop invariant y > 2 ==> \\false;\n    loop invariant x <= -1 ==> \\false;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is inductive.\nloop invariant x >= 0 ==> y <= 2 is inductive.\nloop invariant y > 2 ==> \\false is inductive.\nloop invariant x <= -1 ==> \\false is inductive.\nAssertion !(y > 2): Valid\nAssertion !(x <= -1): Valid"
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions: None.\n\nVariable assignments:\n- `x = unknown_uint();`\n- `y = unknown_uint();`\n\nLoop condition: `i < 10`\n\nPost-condition: `!(y > 2) ==> (x > -1)`\n\nLoop invariants:\n- Before loop execution: None.\n- In every iteration of the loop: `i >= 0 && i <= 10`\n- After loop termination: `!(y > 2) ==> (x > -1)`\n\nExplanation:\n- The loop invariant `i >= 0 && i <= 10` is true before the first iteration of the loop and is preserved in every iteration because the loop only increments `i` and the loop condition `i < 10` ensures that the loop terminates when `i` becomes `10`.\n- The assertion `!(y > 2)` is guarded by the conditional statement `if (y <= 2)` in the program. Therefore, we can use implication to include the guard condition in the loop invariant. The loop invariant becomes `y <= 2 ==> !(y > 2)` which is always true and does not affect the verification of the post-condition.\n- The post-condition requires that if `!(y > 2)` is true, then `x > -1` is also true. Therefore, we can use implication to include this condition in the loop invariant. The loop invariant becomes `!(y > 2) ==> (x > -1)` which ensures that the post-condition is satisfied if the loop terminates with `!(y > 2)` being true.\n- There are no bounds on the variables `x` and `y`. Therefore, we cannot add any conjunctions that bound their maximum and minimum values.\n- There are no relations between the variables `x` and `y`. Therefore, we cannot add any conjunctions for their relation.\n- The variables `x` and `y` are non-deterministic at the beginning of the loop. Therefore, we can use implication to make the loop invariant trivially true at the beginning. The loop invariant becomes `true ==> !(y > 2)` which is always true. Similarly, the loop invariant after termination becomes `!(y > 2) ==> true` which is also always true.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@\nloop invariant 0 <= i <= 10;\nloop invariant x >= -2147483647; // minimum value of int\nloop invariant x <= 2147483647; // maximum value of int\nloop invariant y >= 0; // minimum value of unsigned int\nloop invariant y <= 4294967295; // maximum value of unsigned int\nloop invariant !(y > 2) ==> !(x < 0);\nloop invariant !( y > 2 ) ==> (i == 10);\nloop invariant x >= -1 ==> !(y > 2); \nloop invariant i < 10 ==> !(y > 2);\nloop invariant i == 10 ==> !(y > 2) && !(x <= -1);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant x >= -2147483647 is partially proven to be inductive.\nloop invariant x <= 2147483647 is partially proven to be inductive.\nloop invariant y >= 0 is preserved but not established.\nloop invariant y <= 4294967295 is partially proven to be inductive.\nloop invariant !(y > 2) ==> !(x < 0) is partially proven to be inductive.\nloop invariant !( y > 2 ) ==> (i == 10) is preserved but not established.\nloop invariant x >= -1 ==> !(y > 2) is partially proven to be inductive.\nloop invariant i < 10 ==> !(y > 2) is partially proven to be inductive.\nloop invariant i == 10 ==> !(y > 2) && !(x <= -1) is partially proven to be inductive.\nAssertion !(y > 2): Partially proven\nAssertion !(x <= -1): Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i, x, y;\n  x = unknown_uint();\n  y = unknown_uint();\n  if (y <= 2) {\n    if (x < 0) {\n      x = 0;\n    }\n    i = 0;\n    /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: x >= -2147483647;\nloop invariant i3: x <= 2147483647;\n\nloop invariant i5: y <= 4294967295;\nloop invariant i6: !(y > 2) ==> !(x < 0);\n\nloop invariant i8: x >= -1 ==> !(y > 2);\nloop invariant i9: i < 10 ==> !(y > 2);\nloop invariant i10: i == 10 ==> !(y > 2) && !(x <= -1);\n*/\nwhile (i < 10) {\n      {;\n//@ assert(!( y > 2 ));\n}\n\n      i++;\n    }\n\n    {;\n//@ assert(!( x <= -1 ));\n}\n\n  }\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= i <= 10;\n    loop invariant x >= -1;\n    loop invariant y <= 2 ==> x == 0;\n    loop invariant y > 2 ==> !(x < 0);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant x >= -1 is partially proven to be inductive.\nloop invariant y <= 2 ==> x == 0 is preserved but not established.\nloop invariant y > 2 ==> !(x < 0) is partially proven to be inductive.\nAssertion !(y > 2): Unproven\nAssertion !(x <= -1): Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i, x, y;\n  x = unknown_uint();\n  y = unknown_uint();\n  if (y <= 2) {\n    if (x < 0) {\n      x = 0;\n    }\n    i = 0;\n    /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: x >= -1;\n\nloop invariant i4: y > 2 ==> !(x < 0);\n*/\nwhile (i < 10) {\n      {;\n//@ assert(!( y > 2 ));\n}\n\n      i++;\n    }\n\n    {;\n//@ assert(!( x <= -1 ));\n}\n\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= i <= 10;\n    loop invariant !(y > 2) ==> !(y > 2);\n*/\n\nint i, x, y;\nx = unknown_uint();\ny = unknown_uint();\nif (y <= 2) {\n  if (x < 0) {\n    x = 0;\n  }\n  i = 0;\n  while (i < 10) {\n    {;\n      //@ assert !(y > 2) ==> !(y > 2);\n    }\n    i++;\n  }\n  {;\n    //@ assert !(y > 2) ==> !(y > 2);\n    //@ assert x >= -1;\n    //@ assert x >= 0 ==> x >= 0;\n    //@ assert x < 0 ==> !(y > 2);\n  }\n}",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant !(y > 2) ==> !(y > 2) is partially proven to be inductive.\nAssertion !(y > 2): Unproven\nAssertion !(x <= -1): Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i, x, y;\n  x = unknown_uint();\n  y = unknown_uint();\n  if (y <= 2) {\n    if (x < 0) {\n      x = 0;\n    }\n    i = 0;\n    /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: !(y > 2) ==> !(y > 2);\n*/\nwhile (i < 10) {\n      {;\n//@ assert(!( y > 2 ));\n}\n\n      i++;\n    }\n\n    {;\n//@ assert(!( x <= -1 ));\n}\n\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant x >= 0 ==> y <= 2 is partially proven to be inductive.\nloop invariant y > 2 ==> \\false is partially proven to be inductive.\nloop invariant x <= -1 ==> \\false is partially proven to be inductive.\nloop invariant x >= -2147483647 is partially proven to be inductive.\nloop invariant x <= 2147483647 is partially proven to be inductive.\nloop invariant y >= 0 is preserved but not established.\nloop invariant y <= 4294967295 is partially proven to be inductive.\nloop invariant !(y > 2) ==> !(x < 0) is partially proven to be inductive.\nloop invariant !( y > 2 ) ==> (i == 10) is preserved but not established.\nloop invariant x >= -1 ==> !(y > 2) is partially proven to be inductive.\nloop invariant i < 10 ==> !(y > 2) is partially proven to be inductive.\nloop invariant i == 10 ==> !(y > 2) && !(x <= -1) is partially proven to be inductive.\nloop invariant x >= -1 is partially proven to be inductive.\nloop invariant y <= 2 ==> x == 0 is partially proven to be inductive.\nloop invariant y > 2 ==> !(x < 0) is partially proven to be inductive.\nloop invariant !(y > 2) ==> !(y > 2) is partially proven to be inductive.\nAssertion !(y > 2): Partially proven\nAssertion !(x <= -1): Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i, x, y;\n  x = unknown_uint();\n  y = unknown_uint();\n  if (y <= 2) {\n    if (x < 0) {\n      x = 0;\n    }\n    i = 0;\n    /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: x >= 0 ==> y <= 2;\nloop invariant i3: y > 2 ==> \\false;\nloop invariant i4: x <= -1 ==> \\false;\nloop invariant i5: x >= -2147483647;\nloop invariant i6: x <= 2147483647;\nloop invariant i7: y >= 0;\nloop invariant i8: y <= 4294967295;\nloop invariant i9: !(y > 2) ==> !(x < 0);\nloop invariant i10: !( y > 2 ) ==> (i == 10);\nloop invariant i11: x >= -1 ==> !(y > 2);\nloop invariant i12: i < 10 ==> !(y > 2);\nloop invariant i13: i == 10 ==> !(y > 2) && !(x <= -1);\nloop invariant i14: x >= -1;\nloop invariant i15: y <= 2 ==> x == 0;\nloop invariant i16: y > 2 ==> !(x < 0);\nloop invariant i17: !(y > 2) ==> !(y > 2);\n*/\nwhile (i < 10) {\n      {;\n//@ assert(!( y > 2 ));\n}\n\n      i++;\n    }\n\n    {;\n//@ assert(!( x <= -1 ));\n}\n\n  }\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 3,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i, x, y;\n  x = unknown_uint();\n  y = unknown_uint();\n  if (y <= 2) {\n    if (x < 0) {\n      x = 0;\n    }\n    i = 0;\n    /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: x >= 0 ==> y <= 2;\nloop invariant i3: y > 2 ==> \\false;\nloop invariant i4: x <= -1 ==> \\false;\nloop invariant i5: x >= -2147483647;\nloop invariant i6: x <= 2147483647;\n\nloop invariant i8: y <= 4294967295;\nloop invariant i9: !(y > 2) ==> !(x < 0);\n\nloop invariant i11: x >= -1 ==> !(y > 2);\nloop invariant i12: i < 10 ==> !(y > 2);\nloop invariant i13: i == 10 ==> !(y > 2) && !(x <= -1);\nloop invariant i14: x >= -1;\n\nloop invariant i16: y > 2 ==> !(x < 0);\nloop invariant i17: !(y > 2) ==> !(y > 2);\n*/\nwhile (i < 10) {\n      {;\n//@ assert(!( y > 2 ));\n}\n\n      i++;\n    }\n\n    {;\n//@ assert(!( x <= -1 ));\n}\n\n  }\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c"
        ],
        "skipped": [],
        "total": 235,
        "success_count": 113,
        "failure_count": 122,
        "success_rate": 0.4808510638297872
    }
}