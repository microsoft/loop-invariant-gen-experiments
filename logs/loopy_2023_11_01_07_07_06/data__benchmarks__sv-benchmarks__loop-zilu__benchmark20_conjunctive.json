{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark20_conjunctive.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int n = unknown_int();\n  int sum = unknown_int();\n  \n  if (!(i==0 && n>=0 && n<=100 && sum==0)) return 0;\n  while (i<n) {\n    sum = sum + i;\n    i++;\n  }\n  {;\n//@ assert(sum>=0);\n}\n\n  return 0;\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int n = unknown_int();\n  int sum = unknown_int();\n  \n  if (!(i==0 && n>=0 && n<=100 && sum==0)) return 0;\n  while (i<n) {\n    sum = sum + i;\n    i++;\n  }\n  {;\n//@ assert(sum>=0);\n}\n\n  return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "First, let's analyze the pre-conditions and variable assignments in the program:\n\n- `i` is assigned the result of the function `unknown_int()`.\n- `n` is assigned the result of the function `unknown_int()`.\n- `sum` is assigned the result of the function `unknown_int()`.\n- The program checks that `i` is equal to 0, `n` is between 0 and 100 (inclusive), and `sum` is equal to 0. If any of these conditions are false, the program returns 0 and exits.\n\nNow let's analyze the loop body and make a note of the loop condition:\n\n- The loop condition is `i<n`.\n- The loop body adds the value of `i` to `sum` and increments `i` by 1.\n\nTo verify the post-condition `sum >= 0`, we can use the following loop invariants:\n\n```\n/*@\n    loop invariant 0 <= i <= 100; // i is between 0 and 100 inclusive\n    loop invariant 0 <= n <= 100; // n is between 0 and 100 inclusive\n    loop invariant sum >= 0; // sum is non-negative\n    loop invariant sum == (i*(i-1))/2; // sum is the sum of the first i natural numbers\n    loop invariant i <= n ==> sum <= (n*(n-1))/2; // if i is less than or equal to n, then sum is less than or equal to the sum of the first n natural numbers\n    loop invariant i >= n ==> sum >= (n*(n-1))/2; // if i is greater than or equal to n, then sum is greater than or equal to the sum of the first n natural numbers\n*/\n```\n\nLet's explain each of the loop invariants:\n\n- `0 <= i <= 100` and `0 <= n <= 100`: These invariants ensure that `i` and `n` are between 0 and 100 (inclusive).\n- `sum >= 0`: This invariant ensures that `sum` is non-negative.\n- `sum == (i*(i-1))/2`: This invariant expresses that `sum` is the sum of the first `i` natural numbers. This is derived from the formula for the sum of the first `n` natural numbers: `sum = 1 + 2 + ... + n = n*(n+1)/2`. Since we start with `i=0`, this formula becomes `sum = 0 + 1 + 2 + ... + (i-1) = (i*(i-1))/2`.\n- `i <= n ==> sum <= (n*(n-1))/2`: This invariant expresses that if `i` is less than or equal to `n`, then `sum` is less than or equal to the sum of the first `n` natural numbers. This is true because the sum of the first `n` natural numbers is always greater than or equal to the sum of the first `i` natural numbers when `i` is less than or equal to `n`.\n- `i >= n ==> sum >= (n*(n-1))/2`: This invariant expresses that if `i` is greater than or equal to `n`, then `sum` is greater than or equal to the sum of the first `n` natural numbers. This is true because the sum of the first `n` natural numbers is always less than or equal to the sum of the first `i` natural numbers when `i` is greater than or equal to `n`.\n\nNote that we do not need to use the guard condition of the assertion in an implication, since the assertion is already guarded by the loop condition `i<n`. \n\nAlso note that we do not need to add any bounds on the values of `i`, `n`, or `sum`, since they are all non-deterministic at the beginning of the program and their values can be arbitrary. However, we do need to add bounds on `i` and `n` in the loop invariants to ensure that they are within the range of valid inputs.\n\nFinally, we use the formula for the sum of the first `n` natural numbers in the loop invariant `sum == (i*(i-1))/2`. This formula is well-known and does not require any assumptions about functions whose definitions are not given.",
            "The pre-conditions of the program are:\n- i is an integer with an unknown value.\n- n is an integer with an unknown value.\n- sum is an integer with an unknown value.\n- i must be equal to 0.\n- n must be greater than or equal to 0 and less than or equal to 100.\n- sum must be equal to 0.\n\nThe loop condition is i < n.\n\nThe post-condition is sum >= 0.\n\nLoop Invariants:\n- Before the loop execution:\n  - i must be equal to 0.\n  - n must be greater than or equal to 0 and less than or equal to 100.\n  - sum must be equal to 0.\n- In every iteration of the loop:\n  - i must be greater than or equal to 0 and less than or equal to 100.\n  - n must be greater than or equal to 0 and less than or equal to 100.\n  - sum must be greater than or equal to 0.\n  - sum must be equal to the sum of the integers from 0 to i-1.\n- After the loop termination:\n  - sum must be greater than or equal to 0.\n  - sum must be equal to the sum of the integers from 0 to n-1.\n\nWe can use implication to take care of the conditional nature of the code. We can use the following loop invariants:\n\n```\n/*@ \n    loop invariant i >= 0 && i <= 100;\n    loop invariant n >= 0 && n <= 100;\n    loop invariant sum >= 0;\n    loop invariant sum == \\sum(int j = 0; j < i; j++);\n    loop invariant i <= n;\n    loop assigns i, sum;\n*/\nwhile (i < n) {\n  sum = sum + i;\n  i++;\n}\n{;\n  //@ assert sum >= 0;\n}\n```\n\nHere, we have added the necessary loop invariants for the while loop to verify the post-condition.",
            "First, let's analyze the pre-conditions and variable assignments in the program:\n- `i` is initialized to an unknown value.\n- `n` is initialized to an unknown value.\n- `sum` is initialized to an unknown value.\n- The program checks that `i` is equal to 0, `n` is between 0 and 100 (inclusive), and `sum` is equal to 0. If any of these conditions is false, the program returns 0.\n- The loop adds `i` to `sum` and increments `i` until `i` is equal to `n`.\n\nNext, let's analyze the loop condition. The loop continues as long as `i<n`.\n\nBased on this analysis, we can come up with the following loop invariants:\n```\n/*@\n  loop invariant 0 <= i <= 100;\n  loop invariant 0 <= n <= 100;\n  loop invariant 0 <= sum + i*(n-i) <= 100*99/2;\n  loop invariant i <= n ==> sum == i*(i-1)/2;\n  loop invariant i >= n ==> sum == n*(n-1)/2;\n*/\n```\nExplanation of each invariant:\n- The first two invariants bound the values of `i` and `n` between 0 and 100.\n- The third invariant bounds the value of `sum` between the minimum value it can take (0) and the maximum value it can take (the sum of all numbers from 0 to 99, which is 99*100/2=4950).\n- The fourth invariant states that if `i` is less than or equal to `n`, then `sum` is equal to the sum of all numbers from 0 to `i-1`. This is because the loop adds `i` to `sum` in each iteration, and `i` is incremented by 1 in each iteration. Therefore, after `i` iterations, `sum` is equal to the sum of all numbers from 0 to `i-1`.\n- The fifth invariant states that if `i` is greater than or equal to `n`, then `sum` is equal to the sum of all numbers from 0 to `n-1`. This is because the loop stops when `i` is equal to `n`, so `sum` contains the sum of all numbers from 0 to `n-1`.\n\nFinally, we need to check that these loop invariants imply the post-condition of the program, which is `sum>=0`. This is true, because `sum` is always bounded between 0 and 4950, and the loop invariants ensure that `sum` is the sum of a sequence of non-negative integers (either from 0 to `i-1`, or from 0 to `n-1`). Therefore, `sum` must be non-negative.",
            "Pre-conditions:\n- `i` is an integer with an unknown initial value.\n- `n` is an integer with an unknown initial value.\n- `sum` is an integer with an unknown initial value.\n- `i` must be equal to 0.\n- `n` must be between 0 and 100, inclusive.\n- `sum` must be equal to 0.\n\nLoop condition:\n- `i` is less than `n`.\n\nPost-condition:\n- `sum` must be greater than or equal to 0.\n\nLoop invariants:\n- `i >= 0`\n- `i <= n`\n- `sum >= 0`\n- `sum >= i*(i-1)/2`\n- `sum >= (i-1)*(i-2)/2`\n- `i < n ==> sum >= i*(i+1)/2`\n- `(i >= n && n >= 0 && n <= 100) ==> sum >= n*(n-1)/2`\n- `i >= 0 ==> sum >= 0`\n- `i >= 0 && i >= n ==> sum >= n*(n-1)/2`\n- `i < n && i < 0 ==> sum >= 0`\n\nWe can explain these loop invariants as follows:\n- `i >= 0` and `i <= n` ensure that `i` remains within the bounds of the loop.\n- `sum >= 0` ensures that `sum` remains non-negative.\n- `sum >= i*(i-1)/2` and `sum >= (i-1)*(i-2)/2` ensure that `sum` is always greater than or equal to the sum of the first `i-1` numbers.\n- `i < n ==> sum >= i*(i+1)/2` ensures that `sum` is always greater than or equal to the sum of the first `i` numbers when `i` is less than `n`.\n- `(i >= n && n >= 0 && n <= 100) ==> sum >= n*(n-1)/2` ensures that `sum` is always greater than or equal to the sum of the first `n-1` numbers when `i` is greater than or equal to `n`.\n- `i >= 0 ==> sum >= 0` ensures that `sum` is always non-negative.\n- `i >= 0 && i >= n ==> sum >= n*(n-1)/2` ensures that `sum` is always greater than or equal to the sum of the first `n-1` numbers when `i` is greater than or equal to `n`.\n- `i < n && i < 0 ==> sum >= 0` is a trivially true invariant, since `i` is always greater than or equal to 0.",
            "Pre-conditions:\n- The value of `i` is unknown and is assigned to `i`.\n- The value of `n` is unknown and is assigned to `n`.\n- The value of `sum` is unknown and is assigned to `sum`.\n- `i` must be equal to 0.\n- `n` must be greater than or equal to 0 and less than or equal to 100.\n- `sum` must be equal to 0.\n\n```\nassume(i==0 && n>=0 && n<=100 && sum==0);\n```\n\nLoop condition:\n- The loop continues as long as `i` is less than `n`.\n\n```\nwhile (i<n)\n```\n\nLoop invariants:\n- The value of `sum` is equal to the sum of the first `i` non-negative integers.\n- `i` is greater than or equal to 0 and less than or equal to 100.\n- `sum` is greater than or equal to 0.\n\n```\n/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant sum == (i*(i-1))/2;\n    loop invariant sum >= 0;\n*/\n```\n\nPost-condition:\n- `sum` is greater than or equal to 0.\n\n```\n//@ assert(sum>=0);\n```"
        ],
        "annotation_blocks": [
            "/*@\n    loop invariant 0 <= i <= 100; // i is between 0 and 100 inclusive\n    loop invariant 0 <= n <= 100; // n is between 0 and 100 inclusive\n    loop invariant sum >= 0; // sum is non-negative\n    loop invariant sum == (i*(i-1))/2; // sum is the sum of the first i natural numbers\n    loop invariant i <= n ==> sum <= (n*(n-1))/2; // if i is less than or equal to n, then sum is less than or equal to the sum of the first n natural numbers\n    loop invariant i >= n ==> sum >= (n*(n-1))/2; // if i is greater than or equal to n, then sum is greater than or equal to the sum of the first n natural numbers\n*/",
            "/*@ \n    loop invariant i >= 0 && i <= 100;\n    loop invariant n >= 0 && n <= 100;\n    loop invariant sum >= 0;\n    loop invariant sum == \\sum(int j = 0; j < i; j++);\n    loop invariant i <= n;\n    loop assigns i, sum;\n*/\nwhile (i < n) {\n  sum = sum + i;\n  i++;\n}\n{;\n  //@ assert sum >= 0;\n}",
            "/*@\n  loop invariant 0 <= i <= 100;\n  loop invariant 0 <= n <= 100;\n  loop invariant 0 <= sum + i*(n-i) <= 100*99/2;\n  loop invariant i <= n ==> sum == i*(i-1)/2;\n  loop invariant i >= n ==> sum == n*(n-1)/2;\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- `i` is an integer with an unknown initial value.\n- `n` is an integer with an unknown initial value.\n- `sum` is an integer with an unknown initial value.\n- `i` must be equal to 0.\n- `n` must be between 0 and 100, inclusive.\n- `sum` must be equal to 0.\n\nLoop condition:\n- `i` is less than `n`.\n\nPost-condition:\n- `sum` must be greater than or equal to 0.\n\nLoop invariants:\n- `i >= 0`\n- `i <= n`\n- `sum >= 0`\n- `sum >= i*(i-1)/2`\n- `sum >= (i-1)*(i-2)/2`\n- `i < n ==> sum >= i*(i+1)/2`\n- `(i >= n && n >= 0 && n <= 100) ==> sum >= n*(n-1)/2`\n- `i >= 0 ==> sum >= 0`\n- `i >= 0 && i >= n ==> sum >= n*(n-1)/2`\n- `i < n && i < 0 ==> sum >= 0`\n\nWe can explain these loop invariants as follows:\n- `i >= 0` and `i <= n` ensure that `i` remains within the bounds of the loop.\n- `sum >= 0` ensures that `sum` remains non-negative.\n- `sum >= i*(i-1)/2` and `sum >= (i-1)*(i-2)/2` ensure that `sum` is always greater than or equal to the sum of the first `i-1` numbers.\n- `i < n ==> sum >= i*(i+1)/2` ensures that `sum` is always greater than or equal to the sum of the first `i` numbers when `i` is less than `n`.\n- `(i >= n && n >= 0 && n <= 100) ==> sum >= n*(n-1)/2` ensures that `sum` is always greater than or equal to the sum of the first `n-1` numbers when `i` is greater than or equal to `n`.\n- `i >= 0 ==> sum >= 0` ensures that `sum` is always non-negative.\n- `i >= 0 && i >= n ==> sum >= n*(n-1)/2` ensures that `sum` is always greater than or equal to the sum of the first `n-1` numbers when `i` is greater than or equal to `n`.\n- `i < n && i < 0 ==> sum >= 0` is a trivially true invariant, since `i` is always greater than or equal to 0."
            ],
            "/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant sum == (i*(i-1))/2;\n    loop invariant sum >= 0;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "/*@\n    loop invariant 0 <= i <= 100; // i is between 0 and 100 inclusive\n    loop invariant 0 <= n <= 100; // n is between 0 and 100 inclusive\n    loop invariant sum >= 0; // sum is non-negative\n    loop invariant sum == (i*(i-1))/2; // sum is the sum of the first i natural numbers\n    loop invariant i <= n ==> sum <= (n*(n-1))/2; // if i is less than or equal to n, then sum is less than or equal to the sum of the first n natural numbers\n    loop invariant i >= n ==> sum >= (n*(n-1))/2; // if i is greater than or equal to n, then sum is greater than or equal to the sum of the first n natural numbers\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 100 is partially proven to be inductive.\nloop invariant 0 <= n <= 100 is partially proven to be inductive.\nloop invariant sum >= 0 is partially proven to be inductive.\nloop invariant sum == (i*(i-1))/2 is partially proven to be inductive.\nloop invariant i <= n ==> sum <= (n*(n-1))/2 is established but not preserved.\nloop invariant i >= n ==> sum >= (n*(n-1))/2 is partially proven to be inductive.\nAssertion sum >= 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int n = unknown_int();\n  int sum = unknown_int();\n  \n  if (!(i==0 && n>=0 && n<=100 && sum==0)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: 0 <= n <= 100;\nloop invariant i3: sum >= 0;\nloop invariant i4: sum == (i*(i-1))/2;\n\nloop invariant i6: i >= n ==> sum >= (n*(n-1))/2;\n*/\nwhile (i<n) {\n    sum = sum + i;\n    i++;\n  }\n  {;\n//@ assert(sum>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant i >= 0 && i <= 100;\n    loop invariant n >= 0 && n <= 100;\n    loop invariant sum >= 0;\n    loop invariant sum == \\sum(int j = 0; j < i; j++);\n    loop invariant i <= n;\n    loop assigns i, sum;\n*/\nwhile (i < n) {\n  sum = sum + i;\n  i++;\n}\n{;\n  //@ assert sum >= 0;\n}",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 16: unexpected token 'j'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int n = unknown_int();\n  int sum = unknown_int();\n  \n  if (!(i==0 && n>=0 && n<=100 && sum==0)) return 0;\n  /*@\nloop invariant i1: i >= 0 && i <= 100;\nloop invariant i2: n >= 0 && n <= 100;\nloop invariant i3: sum >= 0;\n\nloop invariant i5: i <= n;\n*/\nwhile (i<n) {\n    sum = sum + i;\n    i++;\n  }\n  {;\n//@ assert(sum>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@\n  loop invariant 0 <= i <= 100;\n  loop invariant 0 <= n <= 100;\n  loop invariant 0 <= sum + i*(n-i) <= 100*99/2;\n  loop invariant i <= n ==> sum == i*(i-1)/2;\n  loop invariant i >= n ==> sum == n*(n-1)/2;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 100 is partially proven to be inductive.\nloop invariant 0 <= n <= 100 is partially proven to be inductive.\nloop invariant 0 <= sum + i*(n-i) <= 100*99/2 is established but not preserved.\nloop invariant i <= n ==> sum == i*(i-1)/2 is partially proven to be inductive.\nloop invariant i >= n ==> sum == n*(n-1)/2 is partially proven to be inductive.\nAssertion sum >= 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int n = unknown_int();\n  int sum = unknown_int();\n  \n  if (!(i==0 && n>=0 && n<=100 && sum==0)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: 0 <= n <= 100;\n\nloop invariant i4: i <= n ==> sum == i*(i-1)/2;\nloop invariant i5: i >= n ==> sum == n*(n-1)/2;\n*/\nwhile (i<n) {\n    sum = sum + i;\n    i++;\n  }\n  {;\n//@ assert(sum>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- `i` is an integer with an unknown initial value.\n- `n` is an integer with an unknown initial value.\n- `sum` is an integer with an unknown initial value.\n- `i` must be equal to 0.\n- `n` must be between 0 and 100, inclusive.\n- `sum` must be equal to 0.\n\nLoop condition:\n- `i` is less than `n`.\n\nPost-condition:\n- `sum` must be greater than or equal to 0.\n\nLoop invariants:\n- `i >= 0`\n- `i <= n`\n- `sum >= 0`\n- `sum >= i*(i-1)/2`\n- `sum >= (i-1)*(i-2)/2`\n- `i < n ==> sum >= i*(i+1)/2`\n- `(i >= n && n >= 0 && n <= 100) ==> sum >= n*(n-1)/2`\n- `i >= 0 ==> sum >= 0`\n- `i >= 0 && i >= n ==> sum >= n*(n-1)/2`\n- `i < n && i < 0 ==> sum >= 0`\n\nWe can explain these loop invariants as follows:\n- `i >= 0` and `i <= n` ensure that `i` remains within the bounds of the loop.\n- `sum >= 0` ensures that `sum` remains non-negative.\n- `sum >= i*(i-1)/2` and `sum >= (i-1)*(i-2)/2` ensure that `sum` is always greater than or equal to the sum of the first `i-1` numbers.\n- `i < n ==> sum >= i*(i+1)/2` ensures that `sum` is always greater than or equal to the sum of the first `i` numbers when `i` is less than `n`.\n- `(i >= n && n >= 0 && n <= 100) ==> sum >= n*(n-1)/2` ensures that `sum` is always greater than or equal to the sum of the first `n-1` numbers when `i` is greater than or equal to `n`.\n- `i >= 0 ==> sum >= 0` ensures that `sum` is always non-negative.\n- `i >= 0 && i >= n ==> sum >= n*(n-1)/2` ensures that `sum` is always greater than or equal to the sum of the first `n-1` numbers when `i` is greater than or equal to `n`.\n- `i < n && i < 0 ==> sum >= 0` is a trivially true invariant, since `i` is always greater than or equal to 0.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant sum == (i*(i-1))/2;\n    loop invariant sum >= 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 100 is established but not preserved.\nloop invariant sum == (i*(i-1))/2 is partially proven to be inductive.\nloop invariant sum >= 0 is partially proven to be inductive.\nAssertion sum >= 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int n = unknown_int();\n  int sum = unknown_int();\n  \n  if (!(i==0 && n>=0 && n<=100 && sum==0)) return 0;\n  /*@\n\nloop invariant i2: sum == (i*(i-1))/2;\nloop invariant i3: sum >= 0;\n*/\nwhile (i<n) {\n    sum = sum + i;\n    i++;\n  }\n  {;\n//@ assert(sum>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 21: unexpected token 'j'",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int n = unknown_int();\n  int sum = unknown_int();\n  \n  if (!(i==0 && n>=0 && n<=100 && sum==0)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: 0 <= n <= 100;\nloop invariant i3: sum >= 0;\nloop invariant i4: sum == (i*(i-1))/2;\nloop invariant i5: i <= n ==> sum <= (n*(n-1))/2;\nloop invariant i6: i >= n ==> sum >= (n*(n-1))/2;\nloop invariant i7: i >= 0 && i <= 100;\nloop invariant i8: n >= 0 && n <= 100;\nloop invariant i9: sum == \\sum(int j = 0; j < i; j++);\nloop invariant i10: i <= n;\nloop invariant i11: 0 <= sum + i*(n-i) <= 100*99/2;\nloop invariant i12: i <= n ==> sum == i*(i-1)/2;\nloop invariant i13: i >= n ==> sum == n*(n-1)/2;\n*/\nwhile (i<n) {\n    sum = sum + i;\n    i++;\n  }\n  {;\n//@ assert(sum>=0);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 4,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int n = unknown_int();\n  int sum = unknown_int();\n  \n  if (!(i==0 && n>=0 && n<=100 && sum==0)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: 0 <= n <= 100;\nloop invariant i3: sum >= 0;\nloop invariant i4: sum == (i*(i-1))/2;\n\nloop invariant i6: i >= n ==> sum >= (n*(n-1))/2;\nloop invariant i7: i >= 0 && i <= 100;\nloop invariant i8: n >= 0 && n <= 100;\n\nloop invariant i10: i <= n;\n\nloop invariant i12: i <= n ==> sum == i*(i-1)/2;\nloop invariant i13: i >= n ==> sum == n*(n-1)/2;\n*/\nwhile (i<n) {\n    sum = sum + i;\n    i++;\n  }\n  {;\n//@ assert(sum>=0);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/const.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq1.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq2.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/afnp2014.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/css2003.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007b.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gsv2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/hhk2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_2.c",
            "../data/benchmarks/sv-benchmarks/loop-new/gauss_sum.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark10_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark11_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark13_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark14_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark15_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark16_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark17_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark18_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark20_conjunctive.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../data/benchmarks/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/even.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/mod4.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/odd.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/id_trans.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/bhmr2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/ddlm2013.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gcnr2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gr2006.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_k.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_nondet.c",
            "../data/benchmarks/sv-benchmarks/loop-new/half.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark07_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark12_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark19_conjunctive.c"
        ],
        "skipped": [],
        "total": 327,
        "success_count": 161,
        "failure_count": 166,
        "success_rate": 0.4923547400611621
    }
}