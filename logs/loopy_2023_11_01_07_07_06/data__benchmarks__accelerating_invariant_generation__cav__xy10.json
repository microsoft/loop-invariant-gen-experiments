{
    "logs": {
        "file": "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main ()\n{\n  int x = 0;\n  int y = 0;\n  int z;\n\n  while (unknown_int()){\n    x += 10;\n    y += 1;\n  }\n\n  if (x <= z && y >= z + 1)\n    goto ERROR;\n\nreturn 0;\n\n  { ERROR: {; \n//@ assert(\\false);\n}\n}\n}",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main ()\n{\n  int x = 0;\n  int y = 0;\n  int z;\n\n  while (unknown_int()){\n    x += 10;\n    y += 1;\n  }\n\n  if (x <= z && y >= z + 1)\n    goto ERROR;\n\nreturn 0;\n\n  { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- The program has no pre-conditions.\n\nVariable Assignments:\n- `int x = 0;`\n- `int y = 0;`\n- `int z;`\n\nLoop Condition:\n- `unknown_int()`\n\nLoop Invariants:\n- `x >= 0`\n- `y >= 0`\n- `z` is non-deterministic before the loop (i.e., `z` can take any value)\n- `(x <= z && y >= z + 1) ==> \\false` after the loop\n\nExplanation:\n- `x >= 0` and `y >= 0` are true before the loop because they are initialized to 0 and can only increase in the loop.\n- `z` is non-deterministic before the loop, so we cannot make any assumptions about its value. We need to use an implication to make the invariant trivially true before the loop. So, we can add the invariant `(z >= z) ==> z is non-deterministic` before the loop.\n- After the loop, we need to ensure that the condition `x <= z && y >= z + 1` does not hold because it would mean that the program has reached the error label and the assertion `\\false` would be violated. Therefore, we add the invariant `(x <= z && y >= z + 1) ==> \\false` after the loop.",
            "Pre-conditions: None.\n\nVariable assignments:\n- x is initialized to 0.\n- y is initialized to 0.\n\nLoop condition: unknown_int()\n\nLoop invariants:\n- Before the loop: None.\n- In every iteration: \n  - x >= 10 * k, where k is the number of iterations of the loop.\n  - y >= k\n- After the loop: \n  - x <= z ==> y >= z + 1\n\nVariable bounds:\n- x >= 0\n- y >= 0\n\nImplications:\n- At the beginning of the loop, since unknown_int() is a non-deterministic function, we can use the implication (unknown_int() == 1) ==> (x >= 0 && y >= 0).\n- At the end of the loop, we can use the implication !(unknown_int()) ==> (x <= z ==> y >= z + 1) to handle the conditional nature of the if statement.\n\nPutting all of this together, the loop invariants for the program are:\n```\n/*@ \n  loop invariant (unknown_int() == 1) ==> (x >= 0 && y >= 0);\n  loop invariant x >= 10 * \\at(\\loop_entry_count, Loop_Invariant);\n  loop invariant y >= \\at(\\loop_entry_count, Loop_Invariant);\n  loop invariant (x <= z ==> y >= z + 1);\n*/\n```",
            "Pre-conditions:\n- The program does not take any input.\n- The variable x, y are initialized to 0.\n\nLoop condition:\n- The loop runs while the result of the function call to unknown_int() is non-zero.\n\nPost-condition:\n- If the loop terminates, then the value of x is less than or equal to z, and the value of y is greater than or equal to z + 1.\n\nLoop invariants:\n- Before the loop execution:\n```\n/*@ \n    loop invariant x >= 0 && y >= 0 && z >= 0;\n*/\n```\n- In every iteration of the loop:\n```\n/*@ \n    loop invariant x >= 10*i && y >= i;\n*/\n```\n- After the loop termination:\n```\n/*@ \n    loop invariant (x <= z ==> y >= z + 1) && (y < z + 1 ==> x > z);\n*/\n```\nThe first loop invariant states that all variables are non-negative. \n\nThe second loop invariant states that after the i-th iteration, x has increased by at least 10*i, and y has increased by i.\n\nThe third loop invariant states that if x is less than or equal to z, then y is greater than or equal to z+1. Similarly, if y is less than z+1, then x is greater than z. \n\nThe loop invariants imply the post-condition because at the end of the loop, we know that x >= 10*i and y >= i. If x <= z, then i <= z/10, which implies that y >= z/10 + 1, and hence y >= z+1. Similarly, if y < z+1, then i > z/10, which implies that x > z. Therefore, the post-condition is satisfied.",
            "Pre-conditions:\n- None.\n\nVariable assignments:\n- `int x = 0;` initializes variable `x` to 0.\n- `int y = 0;` initializes variable `y` to 0.\n- `int z;` declares variable `z` without initializing it.\n\nLoop condition:\n- `while (unknown_int())` the loop will continue as long as `unknown_int()` returns a non-zero value.\n\nLoop invariants:\n- Before the loop: None.\n- In every iteration:\n  - `x % 10 == 0` - `x` is always a multiple of 10.\n  - `y >= 0` - `y` is always greater than or equal to 0.\n  - `y <= \\at(x, Pre) / 10 + 1` - `y` is always less than or equal to `x` divided by 10 plus 1.\n- After the loop:\n  - `(y <= 1 && x == 0) || (y > 1 && x == (y - 1) * 10)` - either `y` is less than or equal to 1 and `x` is 0, or `y` is greater than 1 and `x` is equal to `y` minus 1, multiplied by 10. This implies that `x` is always a multiple of 10 and that `y` is always greater than or equal to 0.\n\nImplications:\n- In the loop invariant `y <= \\at(x, Pre) / 10 + 1`, we can add the condition `x % 10 == 0 ==>` to make it true when `x` is not a multiple of 10.\n- In the post-condition, we can add the condition `y >= z + 1 ==>` to make it true when `y` is less than or equal to `z`.\n\nPutting it all together, the loop invariants for the program are:\n```\n/*@ \n  loop invariant x % 10 == 0;\n  loop invariant y >= 0;\n  loop invariant (x % 10 == 0 ==> y <= \\at(x, Pre) / 10 + 1);\n  loop invariant y <= \\at(x, Pre) / 10 + 1;\n*/\n\nwhile (unknown_int()){\n  x += 10;\n  y += 1;\n}\n\n/*@ \n  loop invariant (y <= 1 && x == 0) || (y > 1 && x == (y - 1) * 10);\n  loop variant unknown_int();\n*/\n\nassume(x <= z);\nassume(y >= z + 1);\n\nif (x <= z && y >= z + 1)\n  goto ERROR;\n\nreturn 0;\n\n{ ERROR:\n  {;\n    //@ assert(\\false);\n  }\n}\n```",
            "Pre-conditions: \n- `x`, `y` and `z` are integers initialized to 0.\n\nLoop condition: \n- `unknown_int()` returns a non-zero value.\n\nLoop invariants:\n- Before the loop execution:\n    - `x == 0`\n    - `y == 0`\n    - `z >= 0`\n- In every iteration of the loop:\n    - `x >= 0`\n    - `y >= 0`\n- After the loop termination:\n    - `x >= 0`\n    - `y >= 0`\n    - `x % 10 == 0`\n    - `y == x / 10`\n    - `z >= 0 ==> x <= z + y * 10`\n    - `z >= 0 ==> y >= z + 1 ==> x > z`\n\nExplanation:\n- Before the loop execution:\n    - `x == 0` and `y == 0` are true as per initialization.\n    - `z >= 0` is true as `z` is initialized to 0.\n- In every iteration of the loop:\n    - `x += 10` ensures that `x` is always a multiple of 10 and hence greater than or equal to 0.\n    - `y += 1` ensures that `y` is always greater than or equal to 0.\n- After the loop termination:\n    - `x >= 0` and `y >= 0` are true as per the loop invariants.\n    - `x % 10 == 0` is true as `x` is always a multiple of 10.\n    - `y == x / 10` is true as `y` is incremented by 1 in each iteration of the loop and `x` is incremented by 10 in each iteration of the loop.\n    - `z >= 0 ==> x <= z + y * 10` is true as `x` is a multiple of 10 and `z` is greater than or equal to 0.\n    - `z >= 0 ==> y >= z + 1 ==> x > z` is true as `y` is incremented by 1 in each iteration of the loop and `x` is incremented by 10 in each iteration of the loop. If `y >= z + 1`, then `x` is at least `10 * (z + 1)` which is greater than `z`."
        ],
        "annotation_blocks": [
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The program has no pre-conditions.\n\nVariable Assignments:\n- `int x = 0;`\n- `int y = 0;`\n- `int z;`\n\nLoop Condition:\n- `unknown_int()`\n\nLoop Invariants:\n- `x >= 0`\n- `y >= 0`\n- `z` is non-deterministic before the loop (i.e., `z` can take any value)\n- `(x <= z && y >= z + 1) ==> \\false` after the loop\n\nExplanation:\n- `x >= 0` and `y >= 0` are true before the loop because they are initialized to 0 and can only increase in the loop.\n- `z` is non-deterministic before the loop, so we cannot make any assumptions about its value. We need to use an implication to make the invariant trivially true before the loop. So, we can add the invariant `(z >= z) ==> z is non-deterministic` before the loop.\n- After the loop, we need to ensure that the condition `x <= z && y >= z + 1` does not hold because it would mean that the program has reached the error label and the assertion `\\false` would be violated. Therefore, we add the invariant `(x <= z && y >= z + 1) ==> \\false` after the loop."
            ],
            "/*@ \n  loop invariant (unknown_int() == 1) ==> (x >= 0 && y >= 0);\n  loop invariant x >= 10 * \\at(\\loop_entry_count, Loop_Invariant);\n  loop invariant y >= \\at(\\loop_entry_count, Loop_Invariant);\n  loop invariant (x <= z ==> y >= z + 1);\n*/",
            "/*@ \n    loop invariant x >= 0 && y >= 0 && z >= 0;\n*/",
            "/*@ \n  loop invariant x % 10 == 0;\n  loop invariant y >= 0;\n  loop invariant (x % 10 == 0 ==> y <= \\at(x, Pre) / 10 + 1);\n  loop invariant y <= \\at(x, Pre) / 10 + 1;\n*/\n\nwhile (unknown_int()){\n  x += 10;\n  y += 1;\n}\n\n/*@ \n  loop invariant (y <= 1 && x == 0) || (y > 1 && x == (y - 1) * 10);\n  loop variant unknown_int();\n*/\n\nassume(x <= z);\nassume(y >= z + 1);\n\nif (x <= z && y >= z + 1)\n  goto ERROR;\n\nreturn 0;\n\n{ ERROR:\n  {;\n    //@ assert(\\false);\n  }\n}",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions: \n- `x`, `y` and `z` are integers initialized to 0.\n\nLoop condition: \n- `unknown_int()` returns a non-zero value.\n\nLoop invariants:\n- Before the loop execution:\n    - `x == 0`\n    - `y == 0`\n    - `z >= 0`\n- In every iteration of the loop:\n    - `x >= 0`\n    - `y >= 0`\n- After the loop termination:\n    - `x >= 0`\n    - `y >= 0`\n    - `x % 10 == 0`\n    - `y == x / 10`\n    - `z >= 0 ==> x <= z + y * 10`\n    - `z >= 0 ==> y >= z + 1 ==> x > z`\n\nExplanation:\n- Before the loop execution:\n    - `x == 0` and `y == 0` are true as per initialization.\n    - `z >= 0` is true as `z` is initialized to 0.\n- In every iteration of the loop:\n    - `x += 10` ensures that `x` is always a multiple of 10 and hence greater than or equal to 0.\n    - `y += 1` ensures that `y` is always greater than or equal to 0.\n- After the loop termination:\n    - `x >= 0` and `y >= 0` are true as per the loop invariants.\n    - `x % 10 == 0` is true as `x` is always a multiple of 10.\n    - `y == x / 10` is true as `y` is incremented by 1 in each iteration of the loop and `x` is incremented by 10 in each iteration of the loop.\n    - `z >= 0 ==> x <= z + y * 10` is true as `x` is a multiple of 10 and `z` is greater than or equal to 0.\n    - `z >= 0 ==> y >= z + 1 ==> x > z` is true as `y` is incremented by 1 in each iteration of the loop and `x` is incremented by 10 in each iteration of the loop. If `y >= z + 1`, then `x` is at least `10 * (z + 1)` which is greater than `z`."
            ]
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The program has no pre-conditions.\n\nVariable Assignments:\n- `int x = 0;`\n- `int y = 0;`\n- `int z;`\n\nLoop Condition:\n- `unknown_int()`\n\nLoop Invariants:\n- `x >= 0`\n- `y >= 0`\n- `z` is non-deterministic before the loop (i.e., `z` can take any value)\n- `(x <= z && y >= z + 1) ==> \\false` after the loop\n\nExplanation:\n- `x >= 0` and `y >= 0` are true before the loop because they are initialized to 0 and can only increase in the loop.\n- `z` is non-deterministic before the loop, so we cannot make any assumptions about its value. We need to use an implication to make the invariant trivially true before the loop. So, we can add the invariant `(z >= z) ==> z is non-deterministic` before the loop.\n- After the loop, we need to ensure that the condition `x <= z && y >= z + 1` does not hold because it would mean that the program has reached the error label and the assertion `\\false` would be violated. Therefore, we add the invariant `(x <= z && y >= z + 1) ==> \\false` after the loop.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 5,
                "annotations": "/*@ \n  loop invariant (unknown_int() == 1) ==> (x >= 0 && y >= 0);\n  loop invariant x >= 10 * \\at(\\loop_entry_count, Loop_Invariant);\n  loop invariant y >= \\at(\\loop_entry_count, Loop_Invariant);\n  loop invariant (x <= z ==> y >= z + 1);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 16: unexpected token ')'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main ()\n{\n  int x = 0;\n  int y = 0;\n  int z;\n\n  /*@\n\n\n\n\n*/\nwhile (unknown_int()){\n    x += 10;\n    y += 1;\n  }\n\n  if (x <= z && y >= z + 1)\n    goto ERROR;\n\nreturn 0;\n\n  { ERROR: {; \n//@ assert(\\false);\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x >= 0 && y >= 0 && z >= 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 && y >= 0 && z >= 0 is preserved but not established.\nAssertion \\false: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main ()\n{\n  int x = 0;\n  int y = 0;\n  int z;\n\n  /*@\n\n*/\nwhile (unknown_int()){\n    x += 10;\n    y += 1;\n  }\n\n  if (x <= z && y >= z + 1)\n    goto ERROR;\n\nreturn 0;\n\n  { ERROR: {; \n//@ assert(\\false);\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "/*@ \n  loop invariant x % 10 == 0;\n  loop invariant y >= 0;\n  loop invariant (x % 10 == 0 ==> y <= \\at(x, Pre) / 10 + 1);\n  loop invariant y <= \\at(x, Pre) / 10 + 1;\n*/\n\nwhile (unknown_int()){\n  x += 10;\n  y += 1;\n}\n\n/*@ \n  loop invariant (y <= 1 && x == 0) || (y > 1 && x == (y - 1) * 10);\n  loop variant unknown_int();\n*/\n\nassume(x <= z);\nassume(y >= z + 1);\n\nif (x <= z && y >= z + 1)\n  goto ERROR;\n\nreturn 0;\n\n{ ERROR:\n  {;\n    //@ assert(\\false);\n  }\n}",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 18: unbound logic variable x. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main ()\n{\n  int x = 0;\n  int y = 0;\n  int z;\n\n  /*@\nloop invariant i1: x % 10 == 0;\nloop invariant i2: y >= 0;\n\n\n\n*/\nwhile (unknown_int()){\n    x += 10;\n    y += 1;\n  }\n\n  if (x <= z && y >= z + 1)\n    goto ERROR;\n\nreturn 0;\n\n  { ERROR: {; \n//@ assert(\\false);\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions: \n- `x`, `y` and `z` are integers initialized to 0.\n\nLoop condition: \n- `unknown_int()` returns a non-zero value.\n\nLoop invariants:\n- Before the loop execution:\n    - `x == 0`\n    - `y == 0`\n    - `z >= 0`\n- In every iteration of the loop:\n    - `x >= 0`\n    - `y >= 0`\n- After the loop termination:\n    - `x >= 0`\n    - `y >= 0`\n    - `x % 10 == 0`\n    - `y == x / 10`\n    - `z >= 0 ==> x <= z + y * 10`\n    - `z >= 0 ==> y >= z + 1 ==> x > z`\n\nExplanation:\n- Before the loop execution:\n    - `x == 0` and `y == 0` are true as per initialization.\n    - `z >= 0` is true as `z` is initialized to 0.\n- In every iteration of the loop:\n    - `x += 10` ensures that `x` is always a multiple of 10 and hence greater than or equal to 0.\n    - `y += 1` ensures that `y` is always greater than or equal to 0.\n- After the loop termination:\n    - `x >= 0` and `y >= 0` are true as per the loop invariants.\n    - `x % 10 == 0` is true as `x` is always a multiple of 10.\n    - `y == x / 10` is true as `y` is incremented by 1 in each iteration of the loop and `x` is incremented by 10 in each iteration of the loop.\n    - `z >= 0 ==> x <= z + y * 10` is true as `x` is a multiple of 10 and `z` is greater than or equal to 0.\n    - `z >= 0 ==> y >= z + 1 ==> x > z` is true as `y` is incremented by 1 in each iteration of the loop and `x` is incremented by 10 in each iteration of the loop. If `y >= z + 1`, then `x` is at least `10 * (z + 1)` which is greater than `z`.",
                "error": "Output does not contain at least 1 code block"
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 16: unexpected token ')'",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main ()\n{\n  int x = 0;\n  int y = 0;\n  int z;\n\n  /*@\nloop invariant i1: (unknown_int() == 1) ==> (x >= 0 && y >= 0);\nloop invariant i2: x >= 10 * \\at(\\loop_entry_count, Loop_Invariant);\nloop invariant i3: y >= \\at(\\loop_entry_count, Loop_Invariant);\nloop invariant i4: (x <= z ==> y >= z + 1);\nloop invariant i5: x >= 0 && y >= 0 && z >= 0;\nloop invariant i6: x % 10 == 0;\nloop invariant i7: y >= 0;\nloop invariant i8: (x % 10 == 0 ==> y <= \\at(x, Pre) / 10 + 1);\nloop invariant i9: y <= \\at(x, Pre) / 10 + 1;\nloop invariant i10: (y <= 1 && x == 0) || (y > 1 && x == (y - 1) * 10);\n*/\nwhile (unknown_int()){\n    x += 10;\n    y += 1;\n  }\n\n  if (x <= z && y >= z + 1)\n    goto ERROR;\n\nreturn 0;\n\n  { ERROR: {; \n//@ assert(\\false);\n}\n}\n}",
        "combined_annotation_num_solver_calls": 9,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main ()\n{\n  int x = 0;\n  int y = 0;\n  int z;\n\n  /*@\n\n\n\n\n\nloop invariant i6: x % 10 == 0;\nloop invariant i7: y >= 0;\n\n\n\n*/\nwhile (unknown_int()){\n    x += 10;\n    y += 1;\n  }\n\n  if (x <= z && y >= z + 1)\n    goto ERROR;\n\nreturn 0;\n\n  { ERROR: {; \n//@ assert(\\false);\n}\n}\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c"
        ],
        "skipped": [],
        "total": 13,
        "success_count": 5,
        "failure_count": 8,
        "success_rate": 0.38461538461538464
    }
}