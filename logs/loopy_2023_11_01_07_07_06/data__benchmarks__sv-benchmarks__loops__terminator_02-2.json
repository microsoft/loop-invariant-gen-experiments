{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loops/terminator_02-2.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n    int x=unknown_int();\n    int z=unknown_int();\n    if (!(x>-100)) return 0;\n    if (!(x<200)) return 0;\n    if (!(z>100)) return 0;\n    if (!(z<200)) return 0;\n    while(x<100 && z>100) \n    {\n        _Bool tmp=unknown_bool();\n        if (tmp) {\n            x++;\n        } else {\n            x--;\n            z--;\n        }\n    }                       \n\n    {;\n//@ assert(x>=100 || z<=100);\n}\n\n    return 0;\n}\n",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n    int x=unknown_int();\n    int z=unknown_int();\n    if (!(x>-100)) return 0;\n    if (!(x<200)) return 0;\n    if (!(z>100)) return 0;\n    if (!(z<200)) return 0;\n    while(x<100 && z>100) \n    {\n        _Bool tmp=unknown_bool();\n        if (tmp) {\n            x++;\n        } else {\n            x--;\n            z--;\n        }\n    }                       \n\n    {;\n//@ assert(x>=100 || z<=100);\n}\n\n    return 0;\n}\n\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- x and z are initialized with non-deterministic values.\n- x is greater than -100 and less than 200.\n- z is greater than 100 and less than 200.\n\nLoop condition:\n- x is less than 100 and z is greater than 100.\n\nPost-condition:\n- x is greater than or equal to 100 or z is less than or equal to 100.\n\nInvariants:\n- Before the loop execution, the post-condition is not necessarily true. So, we can start with the conjunction of pre-conditions.\n```\n/*@ loop invariant x > -100 && x < 200;\n    loop invariant z > 100 && z < 200;\n    loop invariant x < 100 ==> z > 100;\n*/\n```\n- In every iteration of the loop, x is less than 100 and z is greater than 100. We can add these conditions to the loop invariant.\n```\n/*@ loop invariant x > -100 && x < 200;\n    loop invariant z > 100 && z < 200;\n    loop invariant x < 100 ==> z > 100;\n\n    loop invariant x < 100 && z > 100;\n*/\n```\n- After the loop termination, x is greater than or equal to 100 or z is less than or equal to 100. We can use implication to add this condition to the loop invariant.\n```\n/*@ loop invariant x > -100 && x < 200;\n    loop invariant z > 100 && z < 200;\n    loop invariant x < 100 ==> z > 100;\n\n    loop invariant x < 100 && z > 100;\n\n    loop invariant !(x < 100 && z > 100) ==> (x >= 100 || z <= 100);\n*/\n```\n- Since x and z are non-deterministic, we can use an implication to make the loop invariant true at the beginning and end of the loop.\n```\n/*@ loop invariant x > -100 && x < 200;\n    loop invariant z > 100 && z < 200;\n    loop invariant x < 100 ==> z > 100;\n\n    loop invariant x < 100 && z > 100;\n\n    loop invariant !(x < 100 && z > 100) ==> (x >= 100 || z <= 100);\n\n    loop invariant (x < 100 && z > 100) ==> (x >= -99 && x < 200 && z > 100 && z <= 200);\n*/\n```\n- Finally, we can simplify the loop invariant by splitting it into multiple parts.\n```\n/*@ loop invariant -100 < x < 200;\n    loop invariant 100 < z < 200;\n\n    loop invariant x < 100 ==> z > 100;\n\n    loop invariant x < 100 && z > 100;\n\n    loop invariant !(x < 100 && z > 100) ==> (x >= 100 || z <= 100);\n\n    loop invariant (x < 100 && z > 100) ==> (x >= -99);\n\n    loop invariant (x < 100 && z > 100) ==> (z <= 200);\n\n*/\n```\nThese loop invariants are sufficient to help Frama-C verify the post-condition of the program.",
            "Pre-conditions:\n- x is an integer initialized with the return value of an unknown_int() function call\n- z is an integer initialized with the return value of an unknown_int() function call\n- x > -100\n- x < 200\n- z > 100\n- z < 200\n\nLoop condition:\n- x < 100 && z > 100\n\nPost-condition:\n- x >= 100 || z <= 100\n\nLoop invariants:\n- Before the loop execution:\n  - x > -100\n  - x < 200\n  - z > 100\n  - z < 200\n- In every iteration of the loop:\n  - x < 100 && z > 100\n  - x > -100 ==> z <= 200\n  - z < 200 ==> x >= -100\n  - x >= -100 && x < 100 ==> z >= 101\n  - z > 100 && z <= 200 ==> x >= -99\n- After the loop termination:\n  - x >= 100 || z <= 100\n\nExplanation:\n- The first four loop invariants are the bounds on x and z.\n- Invariant 2 states that if x is greater than or equal to -100, then z must be less than or equal to 200. This is because if x is greater than or equal to -100, the loop condition requires that z is greater than 100. Therefore, z must be less than or equal to 200.\n- Invariant 3 is the symmetric of invariant 2.\n- Invariant 4 states that if x is between -100 and 100 (inclusive), then z must be greater than or equal to 101. This is because if x is between -100 and 100 (inclusive), the loop condition requires that z is greater than 100.\n- Invariant 5 is the symmetric of invariant 4.\n- Invariant 6 is the post-condition of the program, which must hold after the loop termination.",
            "Pre-conditions:\n- Variables `x` and `z` contain integer values.\n- The values of `x` and `z` are bounded by `-100` and `200` respectively.\n\nLoop condition:\n- The loop executes while `x` is less than `100` and `z` is greater than `100`.\n\nPost-condition:\n- The assertion states that either `x` is greater than or equal to `100` or `z` is less than or equal to `100`.\n\nLoop invariants:\n- Since `x` is bounded by `-100` and `200`, and the loop only executes while `x` is less than `100`, we can infer that `x` is less than or equal to `99` at the beginning of each iteration of the loop. Thus, we can add the following loop invariant:\n```\n/*@ loop invariant -100 <= x <= 200;\n    loop invariant x <= 99;\n*/\n```\n- Similarly, `z` is bounded by `100` and `200`, and the loop only executes while `z` is greater than `100`. Thus, we can infer that `z` is greater than or equal to `101` at the beginning of each iteration of the loop. Thus, we can add the following loop invariant:\n```\n/*@ loop invariant 100 <= z <= 200;\n    loop invariant 101 <= z;\n*/\n```\n- We can infer from the loop condition that if the loop terminates, then `x` is greater than or equal to `100` or `z` is less than or equal to `100`. Thus, we can add the following loop invariant after the loop:\n```\n//@ assert !(x<100 && z>100) ==> (x>=100 || z<=100);\n```\n- Since `tmp` is a non-deterministic variable, we can add an implication to make the loop invariant trivially true at the end of each iteration of the loop:\n```\n/*@ loop invariant -100 <= x <= 200;\n    loop invariant x <= 99;\n    loop invariant 100 <= z <= 200;\n    loop invariant 101 <= z;\n    loop invariant !(x<100 && z>100) ==> (x>=100 || z<=100);\n    loop invariant \\forall int i; -100 <= i <= 200 ==> (i<x || i>z ==> !(x<100 && z>100));\n*/\n```\n- The last loop invariant states that for any integer `i` bounded by `-100` and `200`, if `i` is less than `x` or greater than `z`, then the loop condition is false. This is because `x` is incremented or decremented in each iteration, and `z` is decremented in some iterations. Thus, `x` can only be less than `i` or `z` can only be greater than `i` if the loop condition is false.",
            "Pre-conditions:\n- x is an integer initialized by an unknown value\n- z is an integer initialized by an unknown value\n- x is greater than -100\n- x is less than 200\n- z is greater than 100\n- z is less than 200\n\nLoop condition:\n- x is less than 100 and z is greater than 100\n\nPost-condition:\n- x is greater than or equal to 100 or z is less than or equal to 100\n\nLoop Invariants:\n- x is greater than -100\n- x is less than 200\n- z is greater than 100\n- z is less than 200\n- x is less than 100 or z is less than or equal to 100\n- x is greater than or equal to 100 or z is greater than 100\n\nExplanation:\n- The first four invariants are pre-conditions that must hold true before the loop.\n- The fifth invariant is derived from the loop condition and the post-condition. If x is less than 100, then the loop must terminate. In that case, the post-condition would be satisfied if z is less than or equal to 100. If z is greater than 100, then the loop condition must still be true, and x must be incremented or decremented. Hence, x is less than 100 or z is less than or equal to 100.\n- The sixth invariant is also derived from the loop condition and the post-condition. If x is greater than or equal to 100, then the loop terminates and the post-condition is satisfied. If z is less than or equal to 100, then the loop also terminates and the post-condition is satisfied.",
            "Pre-conditions:\n- x is an integer variable that may contain any value.\n- z is an integer variable that may contain any value.\n- x must be greater than -100.\n- x must be less than 200.\n- z must be greater than 100.\n- z must be less than 200.\n\nLoop Condition:\n- x must be less than 100.\n- z must be greater than 100.\n\nPost-condition:\n- Either x is greater than or equal to 100 or z is less than or equal to 100.\n\nLoop Invariants:\n- x is always greater than -100 and less than 200.\n- z is always greater than 100 and less than 200.\n- If the loop hasn't started yet, then the post-condition is trivially true.\n- In every iteration of the loop, either x increases by 1 or x decreases by 1 and z decreases by 1.\n- x is always less than 100 inside the loop.\n- z is always greater than 100 inside the loop.\n- If x is equal to 100 or z is equal to 100, then the loop terminates.\n- If x is equal to 100, then z is less than or equal to 100.\n- If z is equal to 100, then x is greater than or equal to 100.\n\nPutting all the loop invariants together:\n```\n/*@ \n    loop invariant -100 <= x <= 200;\n    loop invariant 100 <= z <= 200;\n    loop invariant (x >= 100 || z <= 100) ==> (x >= 100 || z <= 100);\n    loop invariant \\forall integer i; 0 <= i < \\at(x,LoopEntry) - x ==> (unknown_bool() ==> x + i + 1 <= 100) && (!unknown_bool() ==> x + i - \\at(z,Here) == 99);\n    loop invariant x < 100;\n    loop invariant z > 100;\n    loop invariant (x >= 100 || z <= 100);\n*/\n``` \n\nNote that the last loop invariant is just the post-condition written as a loop invariant."
        ],
        "annotation_blocks": [
            "/*@ loop invariant x > -100 && x < 200;\n    loop invariant z > 100 && z < 200;\n    loop invariant x < 100 ==> z > 100;\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- x is an integer initialized with the return value of an unknown_int() function call\n- z is an integer initialized with the return value of an unknown_int() function call\n- x > -100\n- x < 200\n- z > 100\n- z < 200\n\nLoop condition:\n- x < 100 && z > 100\n\nPost-condition:\n- x >= 100 || z <= 100\n\nLoop invariants:\n- Before the loop execution:\n  - x > -100\n  - x < 200\n  - z > 100\n  - z < 200\n- In every iteration of the loop:\n  - x < 100 && z > 100\n  - x > -100 ==> z <= 200\n  - z < 200 ==> x >= -100\n  - x >= -100 && x < 100 ==> z >= 101\n  - z > 100 && z <= 200 ==> x >= -99\n- After the loop termination:\n  - x >= 100 || z <= 100\n\nExplanation:\n- The first four loop invariants are the bounds on x and z.\n- Invariant 2 states that if x is greater than or equal to -100, then z must be less than or equal to 200. This is because if x is greater than or equal to -100, the loop condition requires that z is greater than 100. Therefore, z must be less than or equal to 200.\n- Invariant 3 is the symmetric of invariant 2.\n- Invariant 4 states that if x is between -100 and 100 (inclusive), then z must be greater than or equal to 101. This is because if x is between -100 and 100 (inclusive), the loop condition requires that z is greater than 100.\n- Invariant 5 is the symmetric of invariant 4.\n- Invariant 6 is the post-condition of the program, which must hold after the loop termination."
            ],
            "/*@ loop invariant -100 <= x <= 200;\n    loop invariant x <= 99;\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- x is an integer initialized by an unknown value\n- z is an integer initialized by an unknown value\n- x is greater than -100\n- x is less than 200\n- z is greater than 100\n- z is less than 200\n\nLoop condition:\n- x is less than 100 and z is greater than 100\n\nPost-condition:\n- x is greater than or equal to 100 or z is less than or equal to 100\n\nLoop Invariants:\n- x is greater than -100\n- x is less than 200\n- z is greater than 100\n- z is less than 200\n- x is less than 100 or z is less than or equal to 100\n- x is greater than or equal to 100 or z is greater than 100\n\nExplanation:\n- The first four invariants are pre-conditions that must hold true before the loop.\n- The fifth invariant is derived from the loop condition and the post-condition. If x is less than 100, then the loop must terminate. In that case, the post-condition would be satisfied if z is less than or equal to 100. If z is greater than 100, then the loop condition must still be true, and x must be incremented or decremented. Hence, x is less than 100 or z is less than or equal to 100.\n- The sixth invariant is also derived from the loop condition and the post-condition. If x is greater than or equal to 100, then the loop terminates and the post-condition is satisfied. If z is less than or equal to 100, then the loop also terminates and the post-condition is satisfied."
            ],
            "/*@ \n    loop invariant -100 <= x <= 200;\n    loop invariant 100 <= z <= 200;\n    loop invariant (x >= 100 || z <= 100) ==> (x >= 100 || z <= 100);\n    loop invariant \\forall integer i; 0 <= i < \\at(x,LoopEntry) - x ==> (unknown_bool() ==> x + i + 1 <= 100) && (!unknown_bool() ==> x + i - \\at(z,Here) == 99);\n    loop invariant x < 100;\n    loop invariant z > 100;\n    loop invariant (x >= 100 || z <= 100);\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "/*@ loop invariant x > -100 && x < 200;\n    loop invariant z > 100 && z < 200;\n    loop invariant x < 100 ==> z > 100;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x > -100 && x < 200 is established but not preserved.\nloop invariant z > 100 && z < 200 is established but not preserved.\nloop invariant x < 100 ==> z > 100 is partially proven to be inductive.\nAssertion x >= 100 || z <= 100: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n    int x=unknown_int();\n    int z=unknown_int();\n    if (!(x>-100)) return 0;\n    if (!(x<200)) return 0;\n    if (!(z>100)) return 0;\n    if (!(z<200)) return 0;\n    /*@\n\n\n\n*/\nwhile(x<100 && z>100) \n    {\n        _Bool tmp=unknown_bool();\n        if (tmp) {\n            x++;\n        } else {\n            x--;\n            z--;\n        }\n    }                       \n\n    {;\n//@ assert(x>=100 || z<=100);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- x is an integer initialized with the return value of an unknown_int() function call\n- z is an integer initialized with the return value of an unknown_int() function call\n- x > -100\n- x < 200\n- z > 100\n- z < 200\n\nLoop condition:\n- x < 100 && z > 100\n\nPost-condition:\n- x >= 100 || z <= 100\n\nLoop invariants:\n- Before the loop execution:\n  - x > -100\n  - x < 200\n  - z > 100\n  - z < 200\n- In every iteration of the loop:\n  - x < 100 && z > 100\n  - x > -100 ==> z <= 200\n  - z < 200 ==> x >= -100\n  - x >= -100 && x < 100 ==> z >= 101\n  - z > 100 && z <= 200 ==> x >= -99\n- After the loop termination:\n  - x >= 100 || z <= 100\n\nExplanation:\n- The first four loop invariants are the bounds on x and z.\n- Invariant 2 states that if x is greater than or equal to -100, then z must be less than or equal to 200. This is because if x is greater than or equal to -100, the loop condition requires that z is greater than 100. Therefore, z must be less than or equal to 200.\n- Invariant 3 is the symmetric of invariant 2.\n- Invariant 4 states that if x is between -100 and 100 (inclusive), then z must be greater than or equal to 101. This is because if x is between -100 and 100 (inclusive), the loop condition requires that z is greater than 100.\n- Invariant 5 is the symmetric of invariant 4.\n- Invariant 6 is the post-condition of the program, which must hold after the loop termination.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ loop invariant -100 <= x <= 200;\n    loop invariant x <= 99;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant -100 <= x <= 200 is established but not preserved.\nloop invariant x <= 99 is neither established nor preserved.\nAssertion x >= 100 || z <= 100: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n    int x=unknown_int();\n    int z=unknown_int();\n    if (!(x>-100)) return 0;\n    if (!(x<200)) return 0;\n    if (!(z>100)) return 0;\n    if (!(z<200)) return 0;\n    /*@\n\n\n*/\nwhile(x<100 && z>100) \n    {\n        _Bool tmp=unknown_bool();\n        if (tmp) {\n            x++;\n        } else {\n            x--;\n            z--;\n        }\n    }                       \n\n    {;\n//@ assert(x>=100 || z<=100);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- x is an integer initialized by an unknown value\n- z is an integer initialized by an unknown value\n- x is greater than -100\n- x is less than 200\n- z is greater than 100\n- z is less than 200\n\nLoop condition:\n- x is less than 100 and z is greater than 100\n\nPost-condition:\n- x is greater than or equal to 100 or z is less than or equal to 100\n\nLoop Invariants:\n- x is greater than -100\n- x is less than 200\n- z is greater than 100\n- z is less than 200\n- x is less than 100 or z is less than or equal to 100\n- x is greater than or equal to 100 or z is greater than 100\n\nExplanation:\n- The first four invariants are pre-conditions that must hold true before the loop.\n- The fifth invariant is derived from the loop condition and the post-condition. If x is less than 100, then the loop must terminate. In that case, the post-condition would be satisfied if z is less than or equal to 100. If z is greater than 100, then the loop condition must still be true, and x must be incremented or decremented. Hence, x is less than 100 or z is less than or equal to 100.\n- The sixth invariant is also derived from the loop condition and the post-condition. If x is greater than or equal to 100, then the loop terminates and the post-condition is satisfied. If z is less than or equal to 100, then the loop also terminates and the post-condition is satisfied.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant -100 <= x <= 200;\n    loop invariant 100 <= z <= 200;\n    loop invariant (x >= 100 || z <= 100) ==> (x >= 100 || z <= 100);\n    loop invariant \\forall integer i; 0 <= i < \\at(x,LoopEntry) - x ==> (unknown_bool() ==> x + i + 1 <= 100) && (!unknown_bool() ==> x + i - \\at(z,Here) == 99);\n    loop invariant x < 100;\n    loop invariant z > 100;\n    loop invariant (x >= 100 || z <= 100);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unexpected token ')'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n    int x=unknown_int();\n    int z=unknown_int();\n    if (!(x>-100)) return 0;\n    if (!(x<200)) return 0;\n    if (!(z>100)) return 0;\n    if (!(z<200)) return 0;\n    /*@\n\nloop invariant i2: 100 <= z <= 200;\nloop invariant i3: (x >= 100 || z <= 100) ==> (x >= 100 || z <= 100);\n\n\n\n\n*/\nwhile(x<100 && z>100) \n    {\n        _Bool tmp=unknown_bool();\n        if (tmp) {\n            x++;\n        } else {\n            x--;\n            z--;\n        }\n    }                       \n\n    {;\n//@ assert(x>=100 || z<=100);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 21: unexpected token ')'",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n    int x=unknown_int();\n    int z=unknown_int();\n    if (!(x>-100)) return 0;\n    if (!(x<200)) return 0;\n    if (!(z>100)) return 0;\n    if (!(z<200)) return 0;\n    /*@\nloop invariant i1: x > -100 && x < 200;\nloop invariant i2: z > 100 && z < 200;\nloop invariant i3: x < 100 ==> z > 100;\nloop invariant i4: -100 <= x <= 200;\nloop invariant i5: x <= 99;\nloop invariant i6: 100 <= z <= 200;\nloop invariant i7: (x >= 100 || z <= 100) ==> (x >= 100 || z <= 100);\nloop invariant i8: \\forall integer i; 0 <= i < \\at(x,LoopEntry) - x ==> (unknown_bool() ==> x + i + 1 <= 100) && (!unknown_bool() ==> x + i - \\at(z,Here) == 99);\nloop invariant i9: x < 100;\nloop invariant i10: z > 100;\nloop invariant i11: (x >= 100 || z <= 100);\n*/\nwhile(x<100 && z>100) \n    {\n        _Bool tmp=unknown_bool();\n        if (tmp) {\n            x++;\n        } else {\n            x--;\n            z--;\n        }\n    }                       \n\n    {;\n//@ assert(x>=100 || z<=100);\n}\n\n    return 0;\n}\n",
        "combined_annotation_num_solver_calls": 6,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n    int x=unknown_int();\n    int z=unknown_int();\n    if (!(x>-100)) return 0;\n    if (!(x<200)) return 0;\n    if (!(z>100)) return 0;\n    if (!(z<200)) return 0;\n    /*@\n\n\n\n\n\nloop invariant i6: 100 <= z <= 200;\nloop invariant i7: (x >= 100 || z <= 100) ==> (x >= 100 || z <= 100);\n\n\n\n\n*/\nwhile(x<100 && z>100) \n    {\n        _Bool tmp=unknown_bool();\n        if (tmp) {\n            x++;\n        } else {\n            x--;\n            z--;\n        }\n    }                       \n\n    {;\n//@ assert(x>=100 || z<=100);\n}\n\n    return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/const.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq1.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq2.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/afnp2014.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/css2003.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007b.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gsv2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/hhk2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_2.c",
            "../data/benchmarks/sv-benchmarks/loop-new/gauss_sum.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark10_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark11_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark13_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark14_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark15_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark16_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark17_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark18_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark20_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark21_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark22_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark23_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark25_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark26_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark27_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark29_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark30_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark31_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark32_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark33_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark34_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark35_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark36_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark37_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark38_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark39_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark40_polynomial.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark41_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark42_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark43_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark45_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark48_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark49_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark50_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark51_polynomial.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark52_polynomial.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark53_polynomial.c",
            "../data/benchmarks/sv-benchmarks/loops/count_up_down-1.c",
            "../data/benchmarks/sv-benchmarks/loops/for_infinite_loop_1.c",
            "../data/benchmarks/sv-benchmarks/loops/for_infinite_loop_2.c",
            "../data/benchmarks/sv-benchmarks/loops/sum04-2.c",
            "../data/benchmarks/sv-benchmarks/loops/terminator_02-2.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../data/benchmarks/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/even.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/mod4.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/odd.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/id_trans.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/bhmr2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/ddlm2013.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gcnr2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gr2006.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_k.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_nondet.c",
            "../data/benchmarks/sv-benchmarks/loop-new/half.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark07_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark12_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark19_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark24_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark28_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark44_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark46_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark47_linear.c",
            "../data/benchmarks/sv-benchmarks/loops/count_up_down-2.c",
            "../data/benchmarks/sv-benchmarks/loops/for_bounded_loop1.c",
            "../data/benchmarks/sv-benchmarks/loops/sum01-1.c",
            "../data/benchmarks/sv-benchmarks/loops/sum01-2.c",
            "../data/benchmarks/sv-benchmarks/loops/sum01_bug02.c",
            "../data/benchmarks/sv-benchmarks/loops/sum01_bug02_sum01_bug02_base.case.c",
            "../data/benchmarks/sv-benchmarks/loops/sum03-1.c",
            "../data/benchmarks/sv-benchmarks/loops/sum03-2.c",
            "../data/benchmarks/sv-benchmarks/loops/sum04-1.c",
            "../data/benchmarks/sv-benchmarks/loops/terminator_02-1.c"
        ],
        "skipped": [],
        "total": 375,
        "success_count": 194,
        "failure_count": 181,
        "success_rate": 0.5173333333333333
    }
}