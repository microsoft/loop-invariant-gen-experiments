{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-2.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  while (x < 99) {\n    if (y % 2 == 0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  while (x < 99) {\n    if (y % 2 == 0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "First, let's analyze the program and make a note of the pre-conditions and variable assignments:\n- The program defines a macro `assume` that takes a boolean expression and returns 0 if the expression is false.\n- The program declares an external function `unknown_uint` that returns an unsigned integer value.\n- The `main` function initializes an unsigned integer `x` to 0 and an unsigned integer `y` to the value returned by the `unknown_uint` function.\n- The program has a while loop that continues as long as `x` is less than 99.\n- Inside the loop, if `y` is even, `x` is incremented by 1. Otherwise, `x` is incremented by 2.\n- After the loop, the program has an assertion that checks if `x` modulo 2 is equal to `y` modulo 2.\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is `x < 99`.\n\nNow, let's find the necessary loop invariants:\n- Before the loop execution, `x` is 0 and `y` is non-deterministic. Thus, we can use the implication `0 <= x <= 0 && true` and `true` for `y`.\n- In every iteration of the loop, `x` is incremented by either 1 or 2 based on the value of `y`. Thus, we can use the conjunction `(x % 2 == y % 2) ==> (x' == x + 1)` and `(x % 2 != y % 2) ==> (x' == x + 2)` where `x'` is the value of `x` after the loop iteration.\n- After the loop termination, `x` is greater than or equal to 99. Thus, we can use the implication `x >= 99 ==> (x % 2 == y % 2)`.\n\nCombining all the loop invariants, we get:\n```\n/*@ \n    loop invariant 0 <= x <= 0 && true;\n    loop invariant (x % 2 == y % 2) ==> (x' == x + 1);\n    loop invariant (x % 2 != y % 2) ==> (x' == x + 2);\n    loop invariant x >= 99 ==> (x % 2 == y % 2);\n*/\n```",
            "Pre-conditions:\n- The function main takes no input arguments.\n- The function unknown_uint returns an unsigned integer value.\n\nVariable Assignments:\n- Variable x is initialized to 0.\n- Variable y is assigned the value returned by the function unknown_uint.\n\nLoop Condition:\n- The loop executes as long as the value of x is less than 99.\n\nLoop Invariants:\n- Before the loop execution: None needed.\n- In every iteration of the loop:\n  - x is less than or equal to 99.\n  - y is non-negative.\n  - If y is even, then x is greater than or equal to the value of x before the current iteration. If y is odd, then x is greater than or equal to the value of x before two iterations ago.\n- After the loop termination:\n  - (x % 2) == (y % 2)\n\nWe can represent the loop invariants in ACSL annotations as follows:\n```\n/*@ \n    loop invariant x <= 99;\n    loop invariant y >= 0;\n    loop invariant (y % 2 == 0 && x >= \\at(x, Pre) + 1) ==> (x % 2 == 0 && x >= \\at(x, Pre) + 1);\n    loop invariant (y % 2 != 0 && x >= \\at(x, Pre) + 2) ==> (x % 2 == 0 && x >= \\at(x, Pre) + 2);\n    loop invariant (y % 2 == 0 && x < \\at(x, Pre) + 1) ==> (x >= \\at(x, Pre));\n    loop invariant (y % 2 != 0 && x < \\at(x, Pre) + 2) ==> (x >= \\at(x, Pre));\n    loop invariant (x % 2) == (y % 2);\n*/\n``` \n\nWe have added four loop invariants to take care of the conditional nature of the code. The invariants use implication to ensure that x is updated correctly based on whether y is even or odd. We have also added pre-conditions for x and y and a post-condition for the assertion.",
            "Pre-conditions and variable assignments:\n- The program defines a macro `assume(e)` that returns 0 if `!(e)` is true.\n- The program declares an external function `unknown_uint()` that returns an unsigned integer value.\n- In `main()`, the program initializes `x` to 0 and assigns a non-deterministic value to `y`.\n\nLoop condition:\n- The while loop executes as long as `x` is less than 99.\n\nLoop invariants:\n- Before the loop execution, `x` is initialized to 0 and `y` has a non-deterministic value. Therefore, we can use an implication to make the invariant trivially true at the beginning of the loop:\n```\n/*@ loop invariant 0 <= x <= 99;\n    loop invariant y >= 0;\n    loop invariant y <= UINT_MAX;\n    loop invariant ((x % 2) == (y % 2)) ==> ((x % 2) == 0);\n*/\n```\n- In every iteration of the loop, the value of `x` is incremented by 1 or 2 based on the value of `y % 2`. Therefore, we can use an implication to relate the current value of `x` with the previous value of `x` and `y`:\n```\n/*@ loop invariant 0 <= x <= 99;\n    loop invariant y >= 0;\n    loop invariant y <= UINT_MAX;\n    loop invariant ((x % 2) == (y % 2)) ==> (((x - \\at(x, Pre)) == 1 && (\\at(y, Pre) % 2 == 0)) || ((x - \\at(x, Pre)) == 2 && (\\at(y, Pre) % 2 == 1)));\n*/\n```\n- After the loop termination, the value of `x` satisfies the assertion that `(x % 2) == (y % 2)`. Therefore, we can use an implication to relate the final value of `x` with the value of `y`:\n```\n{;\n  //@ assert ((x % 2) == (y % 2));\n  //@ assert ((x % 2) == 0) ==> ((y % 2) == 0);\n  //@ assert ((x % 2) == 1) ==> ((y % 2) == 1);\n}\n```\nNote that we used the guard condition `((x % 2) == 0)` and `((x % 2) == 1)` in the implications for the final loop invariant to handle the conditional nature of the code.\n\nCombining all the loop invariants, we get:\n```\n#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n    loop invariant 0 <= x <= 99;\n    loop invariant y >= 0;\n    loop invariant y <= UINT_MAX;\n    loop invariant ((x % 2) == (y % 2)) ==> ((x % 2) == 0);\n    loop invariant ((x % 2) == (y % 2)) ==> (((x - \\at(x, Pre)) == 1 && (\\at(y, Pre) % 2 == 0)) || ((x - \\at(x, Pre)) == 2 && (\\at(y, Pre) % 2 == 1)));\n  */\n  while (x < 99) {\n    /*@\n      loop invariant 0 <= x <= 99;\n      loop invariant y >= 0;\n      loop invariant y <= UINT_MAX;\n      loop invariant ((x % 2) == (y % 2)) ==> ((x % 2) == 0);\n      loop invariant ((x % 2) == (y % 2)) ==> (((x - \\at(x, Pre)) == 1 && (\\at(y, Pre) % 2 == 0)) || ((x - \\at(x, Pre)) == 2 && (\\at(y, Pre) % 2 == 1)));\n    */\n    if (y % 2 == 0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n    //@ assert ((x % 2) == (y % 2));\n    //@ assert ((x % 2) == 0) ==> ((y % 2) == 0);\n    //@ assert ((x % 2) == 1) ==> ((y % 2) == 1);\n  }\n}\n```",
            "Pre-conditions or variable assignments:\n- Variable `x` is initialized to 0.\n- Variable `y` is assigned the value returned by the function `unknown_uint()`.\n\nLoop condition:\n- The loop continues while `x` is less than 99.\n\nLoop invariants:\n- Before loop execution: `x >= 0 && x <= 99`\n- In every iteration: \n    - `(x % 2) == (y % 2) ==> x <= 99`\n    - `(x % 2) != (y % 2) ==> x <= 98`\n- After loop termination: `(x % 2) == (y % 2)`\n\nExplanation:\n- Before loop execution: Since the initial value of `x` is 0 and it can only be incremented by 1 or 2 in each iteration, its value will always be between 0 and 99 (inclusive) at the start of the loop.\n- In every iteration: If `y` is even, then `x` is incremented by 1, so its parity (even/odd) remains the same as `y`. If `y` is odd, then `x` is incremented by 2, so its parity is opposite to that of `y`. Therefore, in each iteration, either `(x % 2) == (y % 2)` or `(x % 2) != (y % 2)`. Also, since `x` can only be incremented by 1 or 2 in each iteration, its value will remain less than or equal to 99.\n- After loop termination: The loop terminates when `x` is no longer less than 99. Since the loop condition only allows `x` to be incremented by 1 or 2 in each iteration, its parity will be the same as `y` when the loop terminates. Therefore, `(x % 2) == (y % 2)` after the loop terminates.",
            "Pre-conditions: None\n\nVariable Assignments:\n- x = 0\n- y = unknown_uint()\n\nLoop condition: x < 99\n\nPost-condition: (x % 2) == (y % 2)\n\nLoop Invariants:\n1. x is always even or odd depending on the parity of y, i.e., (x % 2 == y % 2)\n2. x is always less than or equal to 99, i.e., (x <= 99)\n3. y is always non-negative, i.e., (y >= 0)\n\nExplanation:\n1. In each iteration of the loop, x is either incremented by 1 or 2 based on the parity of y. Hence, x will always have the same parity as y. This implies that (x % 2 == y % 2) is true in every iteration of the loop.\n2. The loop condition is x < 99. Hence, x will always be less than or equal to 99 when the loop terminates. This implies that (x <= 99) is true after the loop termination.\n3. The value of y is assigned using the function unknown_uint(), which returns a non-negative integer. Hence, y will always be non-negative. This implies that (y >= 0) is true before the loop execution.\n\nLoop Invariant Code Block:\n```\n/*@ \n    loop invariant x % 2 == y % 2;\n    loop invariant x <= 99;\n    loop invariant y >= 0;\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant 0 <= x <= 0 && true;\n    loop invariant (x % 2 == y % 2) ==> (x' == x + 1);\n    loop invariant (x % 2 != y % 2) ==> (x' == x + 2);\n    loop invariant x >= 99 ==> (x % 2 == y % 2);\n*/",
            "/*@ \n    loop invariant x <= 99;\n    loop invariant y >= 0;\n    loop invariant (y % 2 == 0 && x >= \\at(x, Pre) + 1) ==> (x % 2 == 0 && x >= \\at(x, Pre) + 1);\n    loop invariant (y % 2 != 0 && x >= \\at(x, Pre) + 2) ==> (x % 2 == 0 && x >= \\at(x, Pre) + 2);\n    loop invariant (y % 2 == 0 && x < \\at(x, Pre) + 1) ==> (x >= \\at(x, Pre));\n    loop invariant (y % 2 != 0 && x < \\at(x, Pre) + 2) ==> (x >= \\at(x, Pre));\n    loop invariant (x % 2) == (y % 2);\n*/",
            "/*@ loop invariant 0 <= x <= 99;\n    loop invariant y >= 0;\n    loop invariant y <= UINT_MAX;\n    loop invariant ((x % 2) == (y % 2)) ==> ((x % 2) == 0);\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions or variable assignments:\n- Variable `x` is initialized to 0.\n- Variable `y` is assigned the value returned by the function `unknown_uint()`.\n\nLoop condition:\n- The loop continues while `x` is less than 99.\n\nLoop invariants:\n- Before loop execution: `x >= 0 && x <= 99`\n- In every iteration: \n    - `(x % 2) == (y % 2) ==> x <= 99`\n    - `(x % 2) != (y % 2) ==> x <= 98`\n- After loop termination: `(x % 2) == (y % 2)`\n\nExplanation:\n- Before loop execution: Since the initial value of `x` is 0 and it can only be incremented by 1 or 2 in each iteration, its value will always be between 0 and 99 (inclusive) at the start of the loop.\n- In every iteration: If `y` is even, then `x` is incremented by 1, so its parity (even/odd) remains the same as `y`. If `y` is odd, then `x` is incremented by 2, so its parity is opposite to that of `y`. Therefore, in each iteration, either `(x % 2) == (y % 2)` or `(x % 2) != (y % 2)`. Also, since `x` can only be incremented by 1 or 2 in each iteration, its value will remain less than or equal to 99.\n- After loop termination: The loop terminates when `x` is no longer less than 99. Since the loop condition only allows `x` to be incremented by 1 or 2 in each iteration, its parity will be the same as `y` when the loop terminates. Therefore, `(x % 2) == (y % 2)` after the loop terminates."
            ],
            "/*@ \n    loop invariant x % 2 == y % 2;\n    loop invariant x <= 99;\n    loop invariant y >= 0;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= x <= 0 && true;\n    loop invariant (x % 2 == y % 2) ==> (x' == x + 1);\n    loop invariant (x % 2 != y % 2) ==> (x' == x + 2);\n    loop invariant x >= 99 ==> (x % 2 == y % 2);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 10: lexical error, illegal character '",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\nloop invariant i1: 0 <= x <= 0 && true;\n\nloop invariant i3: (x % 2 != y % 2) ==> (x' == x + 2);\nloop invariant i4: x >= 99 ==> (x % 2 == y % 2);\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "/*@ \n    loop invariant x <= 99;\n    loop invariant y >= 0;\n    loop invariant (y % 2 == 0 && x >= \\at(x, Pre) + 1) ==> (x % 2 == 0 && x >= \\at(x, Pre) + 1);\n    loop invariant (y % 2 != 0 && x >= \\at(x, Pre) + 2) ==> (x % 2 == 0 && x >= \\at(x, Pre) + 2);\n    loop invariant (y % 2 == 0 && x < \\at(x, Pre) + 1) ==> (x >= \\at(x, Pre));\n    loop invariant (y % 2 != 0 && x < \\at(x, Pre) + 2) ==> (x >= \\at(x, Pre));\n    loop invariant (x % 2) == (y % 2);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 11: unbound logic variable x. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: y >= 0;\n\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ loop invariant 0 <= x <= 99;\n    loop invariant y >= 0;\n    loop invariant y <= UINT_MAX;\n    loop invariant ((x % 2) == (y % 2)) ==> ((x % 2) == 0);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 11: unbound logic variable UINT_MAX. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: y >= 0;\n\nloop invariant i4: ((x % 2) == (y % 2)) ==> ((x % 2) == 0);\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions or variable assignments:\n- Variable `x` is initialized to 0.\n- Variable `y` is assigned the value returned by the function `unknown_uint()`.\n\nLoop condition:\n- The loop continues while `x` is less than 99.\n\nLoop invariants:\n- Before loop execution: `x >= 0 && x <= 99`\n- In every iteration: \n    - `(x % 2) == (y % 2) ==> x <= 99`\n    - `(x % 2) != (y % 2) ==> x <= 98`\n- After loop termination: `(x % 2) == (y % 2)`\n\nExplanation:\n- Before loop execution: Since the initial value of `x` is 0 and it can only be incremented by 1 or 2 in each iteration, its value will always be between 0 and 99 (inclusive) at the start of the loop.\n- In every iteration: If `y` is even, then `x` is incremented by 1, so its parity (even/odd) remains the same as `y`. If `y` is odd, then `x` is incremented by 2, so its parity is opposite to that of `y`. Therefore, in each iteration, either `(x % 2) == (y % 2)` or `(x % 2) != (y % 2)`. Also, since `x` can only be incremented by 1 or 2 in each iteration, its value will remain less than or equal to 99.\n- After loop termination: The loop terminates when `x` is no longer less than 99. Since the loop condition only allows `x` to be incremented by 1 or 2 in each iteration, its parity will be the same as `y` when the loop terminates. Therefore, `(x % 2) == (y % 2)` after the loop terminates.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant x % 2 == y % 2;\n    loop invariant x <= 99;\n    loop invariant y >= 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x % 2 == y % 2 is neither established nor preserved.\nloop invariant x <= 99 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\nloop invariant i3: y >= 0;\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 10: lexical error, illegal character '",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\nloop invariant i1: 0 <= x <= 0 && true;\nloop invariant i2: (x % 2 == y % 2) ==> (x' == x + 1);\nloop invariant i3: (x % 2 != y % 2) ==> (x' == x + 2);\nloop invariant i4: x >= 99 ==> (x % 2 == y % 2);\nloop invariant i5: x <= 99;\nloop invariant i6: y >= 0;\nloop invariant i7: (y % 2 == 0 && x >= \\at(x, Pre) + 1) ==> (x % 2 == 0 && x >= \\at(x, Pre) + 1);\nloop invariant i8: (y % 2 != 0 && x >= \\at(x, Pre) + 2) ==> (x % 2 == 0 && x >= \\at(x, Pre) + 2);\nloop invariant i9: (y % 2 == 0 && x < \\at(x, Pre) + 1) ==> (x >= \\at(x, Pre));\nloop invariant i10: (y % 2 != 0 && x < \\at(x, Pre) + 2) ==> (x >= \\at(x, Pre));\nloop invariant i11: (x % 2) == (y % 2);\nloop invariant i12: 0 <= x <= 99;\nloop invariant i13: y <= UINT_MAX;\nloop invariant i14: ((x % 2) == (y % 2)) ==> ((x % 2) == 0);\nloop invariant i15: x % 2 == y % 2;\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
        "combined_annotation_num_solver_calls": 3,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\nloop invariant i1: 0 <= x <= 0 && true;\n\nloop invariant i3: (x % 2 != y % 2) ==> (x' == x + 2);\nloop invariant i4: x >= 99 ==> (x % 2 == y % 2);\nloop invariant i5: x <= 99;\nloop invariant i6: y >= 0;\nloop invariant i7: (y % 2 == 0 && x >= \\at(x, Pre) + 1) ==> (x % 2 == 0 && x >= \\at(x, Pre) + 1);\nloop invariant i8: (y % 2 != 0 && x >= \\at(x, Pre) + 2) ==> (x % 2 == 0 && x >= \\at(x, Pre) + 2);\nloop invariant i9: (y % 2 == 0 && x < \\at(x, Pre) + 1) ==> (x >= \\at(x, Pre));\nloop invariant i10: (y % 2 != 0 && x < \\at(x, Pre) + 2) ==> (x >= \\at(x, Pre));\nloop invariant i11: (x % 2) == (y % 2);\nloop invariant i12: 0 <= x <= 99;\nloop invariant i13: y <= UINT_MAX;\nloop invariant i14: ((x % 2) == (y % 2)) ==> ((x % 2) == 0);\nloop invariant i15: x % 2 == y % 2;\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-1.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-2.c"
        ],
        "skipped": [],
        "total": 252,
        "success_count": 122,
        "failure_count": 130,
        "success_rate": 0.48412698412698413
    }
}