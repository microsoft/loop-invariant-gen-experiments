{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,count,n;\n  count = unknown_uint();\n  assume( count >= 0 );\n  i=0;\n\n  while (i < 100 ){\n      count++;\n      i++;\n  }\n\n  {;\n//@ assert(!( (i > 100 ) || count < 0 ));\n}\n\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,count,n;\n  count = unknown_uint();\n  assume( count >= 0 );\n  i=0;\n\n  while (i < 100 ){\n      count++;\n      i++;\n  }\n\n  {;\n//@ assert(!( (i > 100 ) || count < 0 ));\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- `count` is a non-negative integer.\n\nLoop condition:\n- The loop executes while `i` is less than 100.\n\nPost-condition:\n- `i` is greater than 100 or `count` is non-negative.\n\nLoop Invariants:\n- `count` is a non-negative integer throughout the loop execution.\n- `i` is less than or equal to 100 throughout the loop execution.\n- `i` is less than or equal to `count` throughout the loop execution.\n- `count` is greater than or equal to the initial value of `count` throughout the loop execution.\n- `i` is less than or equal to the initial value of `i` plus 100 throughout the loop execution.\n- The post-condition is satisfied when the loop terminates.\n\nPutting it all together, the loop invariants are:\n```\n/*@ \n    loop invariant 0 <= count;\n    loop invariant i <= 100;\n    loop invariant i <= count;\n    loop invariant \\old(count) <= count;\n    loop invariant i <= \\old(i) + 100;\n    loop invariant ((i > 100) || count >= 0);\n*/\n```",
            "Pre-conditions: \n- The variable `count` is non-negative.\n\nLoop condition:\n- The loop executes while `i` is less than 100.\n\nPost-condition:\n- The variable `count` is greater than or equal to 0 and `i` is greater than 100.\n\nLoop invariants:\n- `0 <= count`: `count` is non-negative.\n- `i <= 100`: `i` is always less than or equal to 100.\n- `count - i >= 0`: the difference between `count` and `i` is non-negative.\n- `count - i <= 100`: the difference between `count` and `i` is less than or equal to 100.\n- `(i < 100) ==> (count == \\old(count) + i + 1)`: if the loop has not terminated, `count` is equal to its previous value plus `i` plus 1.\n- `!(i < 100) ==> (count == \\old(count) + 100)`: if the loop has terminated, `count` is equal to its previous value plus 100.\n- `!(i < 100) ==> (i == 100)`: if the loop has terminated, `i` is equal to 100.\n\nPutting everything together, the loop invariants are:\n\n```\n/*@ \n    loop invariant 0 <= count;\n    loop invariant i <= 100;\n    loop invariant count - i >= 0;\n    loop invariant count - i <= 100;\n    loop invariant (i < 100) ==> (count == \\old(count) + i + 1);\n    loop invariant !(i < 100) ==> (count == \\old(count) + 100);\n    loop invariant !(i < 100) ==> (i == 100);\n*/\n```",
            "Pre-conditions:\n- The function `unknown_uint` returns a non-negative integer value for `count`.\n\nVariable assignments:\n- `count` is assigned the value returned by `unknown_uint`.\n- `i` is initialized to 0.\n\nLoop condition:\n- `i < 100`\n\nLoop body:\n- `count` is incremented by 1.\n- `i` is incremented by 1.\n\nPost-condition:\n- `!( (i > 100 ) || count < 0 )`\n\nLoop invariants:\n- `i >= 0`: `i` is initialized to 0 and is incremented by 1 in every iteration of the loop. Therefore, `i` is always greater than or equal to 0.\n- `i <= 100`: The loop condition is `i < 100`. Therefore, `i` is always less than or equal to 100.\n- `count >= 0`: `count` is assigned the value returned by `unknown_uint`, which is non-negative. Therefore, `count` is always greater than or equal to 0.\n- `count <= \\max_{j=1}^{101} (unknown\\_uint() + j)`: In every iteration of the loop, `count` is incremented by 1. Therefore, after `j` iterations, `count` will be `unknown_uint() + j`. Since the loop iterates at most 101 times (`i` goes up to 100), the maximum value of `count` can be `\\max_{j=1}^{101} (unknown\\_uint() + j)`.\n- `(i >= 100) ==> (count >= unknown\\_uint())`: If `i` is greater than or equal to 100, then the loop has iterated 100 times, and `count` has been incremented by 100. Therefore, `count` is greater than or equal to `unknown_uint()`.\n- `!( (i > 100 ) || count < 0 ) ==> ((i >= 100) ==> (count >= unknown\\_uint()))`: The post-condition is guarded by the condition `!( (i > 100 ) || count < 0 )`. Therefore, we can use this condition in an implication to obtain a loop invariant. If the condition is true, then the implication is trivially true. If the condition is false, then the implication reduces to `(i >= 100) ==> (count >= unknown\\_uint())`.",
            "Pre-conditions:\n- `count` is a non-negative integer.\n\nLoop condition:\n- `i < 100`\n\nLoop invariants:\n- Before the loop execution: `count >= 0`\n- In every iteration of the loop: \n    - `i >= 0`\n    - `i <= 100`\n    - `count >= 0`\n    - `count <= \\max_{j=0}^{i}(count_0 + j)` where `count_0` is the initial value of `count`.\n- After the loop termination: `i >= 100 ==> count >= count_0`\n\nNote: Since `unknown_uint()` is non-deterministic, we cannot make any assumption about the initial value of `count` and therefore cannot add any further bounds to the loop invariants. \n\nPutting everything together, we get the following loop invariants:\n```\n/*@ \n    loop invariant count >= 0;\n    loop invariant i >= 0;\n    loop invariant i <= 100;\n    loop invariant count <= \\max_{j=0}^{i}(count_0 + j);\n    loop invariant i < 100 ==> count >= count_0;\n*/\n```",
            "Pre-conditions:\n- The program takes no input.\n- The macro `assume(e)` takes a boolean expression `e` as input and returns 0 if `e` is false.\n- The function `unknown_uint()` returns an unsigned integer value that is not known at the time of annotation.\n- The function `errorFn()` is a dummy function that creates an infinite loop.\n\nVariable assignments:\n- `count` is assigned the value returned by `unknown_uint()`.\n- `i` is assigned the value 0.\n\nLoop condition:\n- The loop condition is `i < 100`.\n\nLoop body:\n- The loop body increments the value of `count` by 1 and the value of `i` by 1.\n\nPost-condition:\n- The assertion checks if the disjunction of `i > 100` and `count < 0` is false.\n\nNow let's find the loop invariants:\n\n- Before the loop execution:\n    - `count >= 0`\n    - `i == 0`\n    - `count <= UINT_MAX`\n    - `i <= 100`\n- In every iteration of the loop:\n    - `i < 100`\n    - `count >= 0`\n    - `count <= UINT_MAX`\n    - `i <= 100`\n- After the loop termination:\n    - `i == 100`\n    - `count >= 0`\n    - `count <= UINT_MAX`\n    - `i <= 100`\n    - `!(i > 100 || count < 0)` (using implication with the loop condition)\n\nPutting it all together, the loop invariants are:\n```\n/*@ \n    loop invariant count >= 0;\n    loop invariant i == 0;\n    loop invariant count <= UINT_MAX;\n    loop invariant i <= 100;\n\n    loop invariant i < 100 ==> count >= 0;\n    loop invariant i < 100 ==> count <= UINT_MAX;\n    loop invariant i < 100 ==> i <= 100;\n\n    loop invariant i == 100 ==> count >= 0;\n    loop invariant i == 100 ==> count <= UINT_MAX;\n    loop invariant i == 100 ==> i <= 100;\n    loop invariant !(i > 100 || count < 0);\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant 0 <= count;\n    loop invariant i <= 100;\n    loop invariant i <= count;\n    loop invariant \\old(count) <= count;\n    loop invariant i <= \\old(i) + 100;\n    loop invariant ((i > 100) || count >= 0);\n*/",
            "/*@ \n    loop invariant 0 <= count;\n    loop invariant i <= 100;\n    loop invariant count - i >= 0;\n    loop invariant count - i <= 100;\n    loop invariant (i < 100) ==> (count == \\old(count) + i + 1);\n    loop invariant !(i < 100) ==> (count == \\old(count) + 100);\n    loop invariant !(i < 100) ==> (i == 100);\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The function `unknown_uint` returns a non-negative integer value for `count`.\n\nVariable assignments:\n- `count` is assigned the value returned by `unknown_uint`.\n- `i` is initialized to 0.\n\nLoop condition:\n- `i < 100`\n\nLoop body:\n- `count` is incremented by 1.\n- `i` is incremented by 1.\n\nPost-condition:\n- `!( (i > 100 ) || count < 0 )`\n\nLoop invariants:\n- `i >= 0`: `i` is initialized to 0 and is incremented by 1 in every iteration of the loop. Therefore, `i` is always greater than or equal to 0.\n- `i <= 100`: The loop condition is `i < 100`. Therefore, `i` is always less than or equal to 100.\n- `count >= 0`: `count` is assigned the value returned by `unknown_uint`, which is non-negative. Therefore, `count` is always greater than or equal to 0.\n- `count <= \\max_{j=1}^{101} (unknown\\_uint() + j)`: In every iteration of the loop, `count` is incremented by 1. Therefore, after `j` iterations, `count` will be `unknown_uint() + j`. Since the loop iterates at most 101 times (`i` goes up to 100), the maximum value of `count` can be `\\max_{j=1}^{101} (unknown\\_uint() + j)`.\n- `(i >= 100) ==> (count >= unknown\\_uint())`: If `i` is greater than or equal to 100, then the loop has iterated 100 times, and `count` has been incremented by 100. Therefore, `count` is greater than or equal to `unknown_uint()`.\n- `!( (i > 100 ) || count < 0 ) ==> ((i >= 100) ==> (count >= unknown\\_uint()))`: The post-condition is guarded by the condition `!( (i > 100 ) || count < 0 )`. Therefore, we can use this condition in an implication to obtain a loop invariant. If the condition is true, then the implication is trivially true. If the condition is false, then the implication reduces to `(i >= 100) ==> (count >= unknown\\_uint())`."
            ],
            "/*@ \n    loop invariant count >= 0;\n    loop invariant i >= 0;\n    loop invariant i <= 100;\n    loop invariant count <= \\max_{j=0}^{i}(count_0 + j);\n    loop invariant i < 100 ==> count >= count_0;\n*/",
            "/*@ \n    loop invariant count >= 0;\n    loop invariant i == 0;\n    loop invariant count <= UINT_MAX;\n    loop invariant i <= 100;\n\n    loop invariant i < 100 ==> count >= 0;\n    loop invariant i < 100 ==> count <= UINT_MAX;\n    loop invariant i < 100 ==> i <= 100;\n\n    loop invariant i == 100 ==> count >= 0;\n    loop invariant i == 100 ==> count <= UINT_MAX;\n    loop invariant i == 100 ==> i <= 100;\n    loop invariant !(i > 100 || count < 0);\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= count;\n    loop invariant i <= 100;\n    loop invariant i <= count;\n    loop invariant \\old(count) <= count;\n    loop invariant i <= \\old(i) + 100;\n    loop invariant ((i > 100) || count >= 0);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: \\old undefined in this context. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,count,n;\n  count = unknown_uint();\n  assume( count >= 0 );\n  i=0;\n\n  /*@\nloop invariant i1: 0 <= count;\nloop invariant i2: i <= 100;\nloop invariant i3: i <= count;\n\n\nloop invariant i6: ((i > 100) || count >= 0);\n*/\nwhile (i < 100 ){\n      count++;\n      i++;\n  }\n\n  {;\n//@ assert(!( (i > 100 ) || count < 0 ));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant 0 <= count;\n    loop invariant i <= 100;\n    loop invariant count - i >= 0;\n    loop invariant count - i <= 100;\n    loop invariant (i < 100) ==> (count == \\old(count) + i + 1);\n    loop invariant !(i < 100) ==> (count == \\old(count) + 100);\n    loop invariant !(i < 100) ==> (i == 100);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 18: \\old undefined in this context. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,count,n;\n  count = unknown_uint();\n  assume( count >= 0 );\n  i=0;\n\n  /*@\nloop invariant i1: 0 <= count;\nloop invariant i2: i <= 100;\nloop invariant i3: count - i >= 0;\n\n\n\nloop invariant i7: !(i < 100) ==> (i == 100);\n*/\nwhile (i < 100 ){\n      count++;\n      i++;\n  }\n\n  {;\n//@ assert(!( (i > 100 ) || count < 0 ));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The function `unknown_uint` returns a non-negative integer value for `count`.\n\nVariable assignments:\n- `count` is assigned the value returned by `unknown_uint`.\n- `i` is initialized to 0.\n\nLoop condition:\n- `i < 100`\n\nLoop body:\n- `count` is incremented by 1.\n- `i` is incremented by 1.\n\nPost-condition:\n- `!( (i > 100 ) || count < 0 )`\n\nLoop invariants:\n- `i >= 0`: `i` is initialized to 0 and is incremented by 1 in every iteration of the loop. Therefore, `i` is always greater than or equal to 0.\n- `i <= 100`: The loop condition is `i < 100`. Therefore, `i` is always less than or equal to 100.\n- `count >= 0`: `count` is assigned the value returned by `unknown_uint`, which is non-negative. Therefore, `count` is always greater than or equal to 0.\n- `count <= \\max_{j=1}^{101} (unknown\\_uint() + j)`: In every iteration of the loop, `count` is incremented by 1. Therefore, after `j` iterations, `count` will be `unknown_uint() + j`. Since the loop iterates at most 101 times (`i` goes up to 100), the maximum value of `count` can be `\\max_{j=1}^{101} (unknown\\_uint() + j)`.\n- `(i >= 100) ==> (count >= unknown\\_uint())`: If `i` is greater than or equal to 100, then the loop has iterated 100 times, and `count` has been incremented by 100. Therefore, `count` is greater than or equal to `unknown_uint()`.\n- `!( (i > 100 ) || count < 0 ) ==> ((i >= 100) ==> (count >= unknown\\_uint()))`: The post-condition is guarded by the condition `!( (i > 100 ) || count < 0 )`. Therefore, we can use this condition in an implication to obtain a loop invariant. If the condition is true, then the implication is trivially true. If the condition is false, then the implication reduces to `(i >= 100) ==> (count >= unknown\\_uint())`.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant count >= 0;\n    loop invariant i >= 0;\n    loop invariant i <= 100;\n    loop invariant count <= \\max_{j=0}^{i}(count_0 + j);\n    loop invariant i < 100 ==> count >= count_0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unexpected token '='",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,count,n;\n  count = unknown_uint();\n  assume( count >= 0 );\n  i=0;\n\n  /*@\nloop invariant i1: count >= 0;\nloop invariant i2: i >= 0;\nloop invariant i3: i <= 100;\n\n\n*/\nwhile (i < 100 ){\n      count++;\n      i++;\n  }\n\n  {;\n//@ assert(!( (i > 100 ) || count < 0 ));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "/*@ \n    loop invariant count >= 0;\n    loop invariant i == 0;\n    loop invariant count <= UINT_MAX;\n    loop invariant i <= 100;\n\n    loop invariant i < 100 ==> count >= 0;\n    loop invariant i < 100 ==> count <= UINT_MAX;\n    loop invariant i < 100 ==> i <= 100;\n\n    loop invariant i == 100 ==> count >= 0;\n    loop invariant i == 100 ==> count <= UINT_MAX;\n    loop invariant i == 100 ==> i <= 100;\n    loop invariant !(i > 100 || count < 0);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 16: unbound logic variable UINT_MAX. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,count,n;\n  count = unknown_uint();\n  assume( count >= 0 );\n  i=0;\n\n  /*@\nloop invariant i1: count >= 0;\n\n\nloop invariant i4: i <= 100;\nloop invariant i5: i < 100 ==> count >= 0;\n\nloop invariant i7: i < 100 ==> i <= 100;\nloop invariant i8: i == 100 ==> count >= 0;\n\nloop invariant i10: i == 100 ==> i <= 100;\nloop invariant i11: !(i > 100 || count < 0);\n*/\nwhile (i < 100 ){\n      count++;\n      i++;\n  }\n\n  {;\n//@ assert(!( (i > 100 ) || count < 0 ));\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 27: unexpected token '='",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,count,n;\n  count = unknown_uint();\n  assume( count >= 0 );\n  i=0;\n\n  /*@\nloop invariant i1: 0 <= count;\nloop invariant i2: i <= 100;\nloop invariant i3: i <= count;\nloop invariant i4: \\old(count) <= count;\nloop invariant i5: i <= \\old(i) + 100;\nloop invariant i6: ((i > 100) || count >= 0);\nloop invariant i7: count - i >= 0;\nloop invariant i8: count - i <= 100;\nloop invariant i9: (i < 100) ==> (count == \\old(count) + i + 1);\nloop invariant i10: !(i < 100) ==> (count == \\old(count) + 100);\nloop invariant i11: !(i < 100) ==> (i == 100);\nloop invariant i12: count >= 0;\nloop invariant i13: i >= 0;\nloop invariant i14: count <= \\max_{j=0}^{i}(count_0 + j);\nloop invariant i15: i < 100 ==> count >= count_0;\nloop invariant i16: i == 0;\nloop invariant i17: count <= UINT_MAX;\nloop invariant i18: i < 100 ==> count >= 0;\nloop invariant i19: i < 100 ==> count <= UINT_MAX;\nloop invariant i20: i < 100 ==> i <= 100;\nloop invariant i21: i == 100 ==> count >= 0;\nloop invariant i22: i == 100 ==> count <= UINT_MAX;\nloop invariant i23: i == 100 ==> i <= 100;\nloop invariant i24: !(i > 100 || count < 0);\n*/\nwhile (i < 100 ){\n      count++;\n      i++;\n  }\n\n  {;\n//@ assert(!( (i > 100 ) || count < 0 ));\n}\n\n}",
        "combined_annotation_num_solver_calls": 11,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,count,n;\n  count = unknown_uint();\n  assume( count >= 0 );\n  i=0;\n\n  /*@\nloop invariant i1: 0 <= count;\nloop invariant i2: i <= 100;\nloop invariant i3: i <= count;\n\n\nloop invariant i6: ((i > 100) || count >= 0);\nloop invariant i7: count - i >= 0;\n\n\n\nloop invariant i11: !(i < 100) ==> (i == 100);\nloop invariant i12: count >= 0;\nloop invariant i13: i >= 0;\n\n\n\n\nloop invariant i18: i < 100 ==> count >= 0;\n\nloop invariant i20: i < 100 ==> i <= 100;\nloop invariant i21: i == 100 ==> count >= 0;\n\nloop invariant i23: i == 100 ==> i <= 100;\nloop invariant i24: !(i > 100 || count < 0);\n*/\nwhile (i < 100 ){\n      count++;\n      i++;\n  }\n\n  {;\n//@ assert(!( (i > 100 ) || count < 0 ));\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c"
        ],
        "skipped": [],
        "total": 227,
        "success_count": 106,
        "failure_count": 121,
        "success_rate": 0.4669603524229075
    }
}