{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
        "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\nvoid main()\n{\n  int x, m, N;\n  N = unknown_int();\n  if (N < 0)\n    \nreturn;\n\n  x = N;\n  while(x > 0)\n  {\n    x = x - 1;\n  }\n  {;\n//@ assert(x == 0);\n}\n    \n}\n",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\nvoid main()\n{\n  int x, m, N;\n  N = unknown_int();\n  if (N < 0)\n    \nreturn;\n\n  x = N;\n  while(x > 0)\n  {\n    x = x - 1;\n  }\n  {;\n//@ assert(x == 0);\n}\n    \n}\n\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions: None.\n\nVariable assignments: \n- `N` is assigned the value returned by `unknown_int()`. \n\nLoop condition: `x > 0`\n\nPost-condition: `x == 0`\n\nLoop invariants:\n- `0 <= x <= N` (to bound the value of `x` within the range of possible values)\n- `x >= 0` (to ensure that `x` remains non-negative throughout the loop)\n- `N >= 0` (since `N` is assigned the value returned by `unknown_int()`, which is non-negative)\n- `x < \\old(x)` (since `x` is decremented by 1 in each iteration, this ensures that `x` is decreasing at each iteration)\n- `x == 0 ==> \\old(x) == N` (since `x` is decremented by 1 in each iteration, it will eventually reach 0. This implication ensures that `x` reaches 0 after `N` iterations)\n- `x > 0 ==> x <= \\old(x)` (since `x` is decremented by 1 in each iteration, this ensures that `x` is decreasing at each iteration)\n\nCombining all the loop invariants, we get:\n\n```\n/*@ \n    loop invariant 0 <= x <= N;\n    loop invariant x >= 0;\n    loop invariant N >= 0;\n    loop invariant x < \\old(x);\n    loop invariant x == 0 ==> \\old(x) == N;\n    loop invariant x > 0 ==> x <= \\old(x);\n*/\n```",
            "Pre-conditions:\n- `N` is an integer variable that is initialized with a non-negative value returned by `unknown_int()` function.\n- All other integer variables are uninitialized and may contain garbage values.\n\nLoop condition:\n- `x > 0`\n\nPost-condition:\n- `x` should be equal to `0`.\n\nLoop Invariants:\n1. Before the loop execution: `x >= 0 && x <= N`\n   - Explanation: Since `x` is initialized with `N`, its minimum value is `0` and maximum value is `N`.\n2. In every iteration of the loop: `(x >= 0 && x <= N) && (x > 0 ==> x < \\old(x))`\n   - Explanation: The first part of the conjunction is same as the loop invariant before the loop execution. The second part ensures that `x` is strictly decreasing in every iteration of the loop. Since `x` is initialized with a non-negative value and decremented in every iteration, it will eventually become `0`.\n3. After the loop termination: `x == 0`\n   - Explanation: The loop invariant ensures that `x` is greater than or equal to `0` and less than or equal to `N`. Since the loop condition is `x > 0`, it implies that `x` is `0` when the loop terminates. Therefore, the post-condition is satisfied.\n\nNote: Since all variables are initialized within the program, there is no need to add any implication to make the loop invariants trivially true.",
            "Pre-conditions/Variable Assignments:\n- `N` is assigned a non-negative integer value returned by `unknown_int()`.\n\nLoop Condition:\n- The loop executes while `x` is greater than `0`.\n\nLoop Invariants:\n- Before the loop executes, `x` is equal to `N`. (`x == N`)\n- In every iteration of the loop, `x` is decremented by `1`. (`\\forall k \\in [0, N-x] : x == N-k`)\n- After the loop terminates, `x` is equal to `0`. (`x == 0`)\n- Since there are no non-deterministic variables, there is no need for implications to make the invariants trivially true. \n\nPutting it all together:\n```\n#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\nvoid main()\n{\n  int x, m, N;\n  N = unknown_int();\n  assume(N >= 0);\n  x = N;\n  /*@\n    loop invariant x == N;\n    loop invariant \\forall k \\in [0, N-x] : x == N-k;\n    loop variant x;\n  */\n  while(x > 0)\n  {\n    x = x - 1;\n  }\n  /*@\n    loop invariant x == 0;\n  */\n  {;\n    //@ assert x == 0;\n  }\n}\n```",
            "Pre-conditions:\n- The variable N is an integer and it is initialized to an unknown value.\n- N should be non-negative to proceed with the execution of the program.\n\nLoop condition:\n- The loop will execute as long as the value of x is greater than 0.\n\nPost-condition:\n- The value of x should be 0 after the loop termination.\n\nLoop invariants:\n- Before the loop execution, x is equal to N.\n- In every iteration of the loop, the value of x is decremented by 1 and it remains greater than or equal to 0.\n- After the loop termination, the value of x is equal to 0.\n\nPutting all the loop invariants together, we get:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant x <= N;\n    loop invariant x == \\old(N) - iteration_count;\n*/\nwhile(x > 0)\n{\n    x = x - 1;\n}\n\n//@ assert x == 0;\n```\n\nHere, `\\old(N)` represents the value of N before the loop execution and `iteration_count` represents the number of times the loop has executed so far. The last loop invariant is expressed in terms of `iteration_count` to show that the value of `x` is decremented by 1 in each iteration. The loop invariants ensure that the loop terminates and the post-condition is satisfied.",
            "Pre-conditions:\n- N is an integer variable which is initialized by an unknown integer value.\n- x is an integer variable.\n- m is an integer variable that is not used in the program.\n\nLoop condition:\n- The loop continues as long as x is greater than 0.\n\nPost-condition:\n- x is equal to 0.\n\nLoop invariant:\n- Before loop execution:\n```\n    N >= 0\n```\n- In every iteration of the loop:\n```\n    x >= 0\n```\n- After loop termination:\n```\n    x == 0\n```\nExplanation:\n- Before the loop starts, N needs to be non-negative as it is used to initialize x and the loop condition depends on x.\n- In every iteration of the loop, x needs to be non-negative, as it is decremented in each iteration. \n- After the loop terminates, x must be 0, as that is the post-condition.\n\nThe final loop invariants are:\n```\n/*@ \n    loop invariant N >= 0;\n    loop invariant x >= 0;\n    loop invariant x == 0;\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant 0 <= x <= N;\n    loop invariant x >= 0;\n    loop invariant N >= 0;\n    loop invariant x < \\old(x);\n    loop invariant x == 0 ==> \\old(x) == N;\n    loop invariant x > 0 ==> x <= \\old(x);\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- `N` is an integer variable that is initialized with a non-negative value returned by `unknown_int()` function.\n- All other integer variables are uninitialized and may contain garbage values.\n\nLoop condition:\n- `x > 0`\n\nPost-condition:\n- `x` should be equal to `0`.\n\nLoop Invariants:\n1. Before the loop execution: `x >= 0 && x <= N`\n   - Explanation: Since `x` is initialized with `N`, its minimum value is `0` and maximum value is `N`.\n2. In every iteration of the loop: `(x >= 0 && x <= N) && (x > 0 ==> x < \\old(x))`\n   - Explanation: The first part of the conjunction is same as the loop invariant before the loop execution. The second part ensures that `x` is strictly decreasing in every iteration of the loop. Since `x` is initialized with a non-negative value and decremented in every iteration, it will eventually become `0`.\n3. After the loop termination: `x == 0`\n   - Explanation: The loop invariant ensures that `x` is greater than or equal to `0` and less than or equal to `N`. Since the loop condition is `x > 0`, it implies that `x` is `0` when the loop terminates. Therefore, the post-condition is satisfied.\n\nNote: Since all variables are initialized within the program, there is no need to add any implication to make the loop invariants trivially true."
            ],
            "#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\nvoid main()\n{\n  int x, m, N;\n  N = unknown_int();\n  assume(N >= 0);\n  x = N;\n  /*@\n    loop invariant x == N;\n    loop invariant \\forall k \\in [0, N-x] : x == N-k;\n    loop variant x;\n  */\n  while(x > 0)\n  {\n    x = x - 1;\n  }\n  /*@\n    loop invariant x == 0;\n  */\n  {;\n    //@ assert x == 0;\n  }\n}",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant x <= N;\n    loop invariant x == \\old(N) - iteration_count;\n*/\nwhile(x > 0)\n{\n    x = x - 1;\n}\n\n//@ assert x == 0;",
            "/*@ \n    loop invariant N >= 0;\n    loop invariant x >= 0;\n    loop invariant x == 0;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant 0 <= x <= N;\n    loop invariant x >= 0;\n    loop invariant N >= 0;\n    loop invariant x < \\old(x);\n    loop invariant x == 0 ==> \\old(x) == N;\n    loop invariant x > 0 ==> x <= \\old(x);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: \\old undefined in this context. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\nvoid main()\n{\n  int x, m, N;\n  N = unknown_int();\n  if (N < 0)\n    \nreturn;\n\n  x = N;\n  /*@\nloop invariant i1: 0 <= x <= N;\nloop invariant i2: x >= 0;\nloop invariant i3: N >= 0;\n\n\n\n*/\nwhile(x > 0)\n  {\n    x = x - 1;\n  }\n  {;\n//@ assert(x == 0);\n}\n    \n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- `N` is an integer variable that is initialized with a non-negative value returned by `unknown_int()` function.\n- All other integer variables are uninitialized and may contain garbage values.\n\nLoop condition:\n- `x > 0`\n\nPost-condition:\n- `x` should be equal to `0`.\n\nLoop Invariants:\n1. Before the loop execution: `x >= 0 && x <= N`\n   - Explanation: Since `x` is initialized with `N`, its minimum value is `0` and maximum value is `N`.\n2. In every iteration of the loop: `(x >= 0 && x <= N) && (x > 0 ==> x < \\old(x))`\n   - Explanation: The first part of the conjunction is same as the loop invariant before the loop execution. The second part ensures that `x` is strictly decreasing in every iteration of the loop. Since `x` is initialized with a non-negative value and decremented in every iteration, it will eventually become `0`.\n3. After the loop termination: `x == 0`\n   - Explanation: The loop invariant ensures that `x` is greater than or equal to `0` and less than or equal to `N`. Since the loop condition is `x > 0`, it implies that `x` is `0` when the loop terminates. Therefore, the post-condition is satisfied.\n\nNote: Since all variables are initialized within the program, there is no need to add any implication to make the loop invariants trivially true.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 4,
                "annotations": "#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\nvoid main()\n{\n  int x, m, N;\n  N = unknown_int();\n  assume(N >= 0);\n  x = N;\n  /*@\n    loop invariant x == N;\n    loop invariant \\forall k \\in [0, N-x] : x == N-k;\n    loop variant x;\n  */\n  while(x > 0)\n  {\n    x = x - 1;\n  }\n  /*@\n    loop invariant x == 0;\n  */\n  {;\n    //@ assert x == 0;\n  }\n}",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: unexpected token 'k'",
                "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\nvoid main()\n{\n  int x, m, N;\n  N = unknown_int();\n  if (N < 0)\n    \nreturn;\n\n  x = N;\n  /*@\n\n\n\n*/\nwhile(x > 0)\n  {\n    x = x - 1;\n  }\n  {;\n//@ assert(x == 0);\n}\n    \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant x <= N;\n    loop invariant x == \\old(N) - iteration_count;\n*/\nwhile(x > 0)\n{\n    x = x - 1;\n}\n\n//@ assert x == 0;",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 16: \\old undefined in this context. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\nvoid main()\n{\n  int x, m, N;\n  N = unknown_int();\n  if (N < 0)\n    \nreturn;\n\n  x = N;\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: x <= N;\n\n*/\nwhile(x > 0)\n  {\n    x = x - 1;\n  }\n  {;\n//@ assert(x == 0);\n}\n    \n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant N >= 0;\n    loop invariant x >= 0;\n    loop invariant x == 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant N >= 0 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x == 0 is preserved but not established.\nAssertion x == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\nvoid main()\n{\n  int x, m, N;\n  N = unknown_int();\n  if (N < 0)\n    \nreturn;\n\n  x = N;\n  /*@\nloop invariant i1: N >= 0;\nloop invariant i2: x >= 0;\n\n*/\nwhile(x > 0)\n  {\n    x = x - 1;\n  }\n  {;\n//@ assert(x == 0);\n}\n    \n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 21: unexpected token 'k'",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\nvoid main()\n{\n  int x, m, N;\n  N = unknown_int();\n  if (N < 0)\n    \nreturn;\n\n  x = N;\n  /*@\nloop invariant i1: 0 <= x <= N;\nloop invariant i2: x >= 0;\nloop invariant i3: N >= 0;\nloop invariant i4: x < \\old(x);\nloop invariant i5: x == 0 ==> \\old(x) == N;\nloop invariant i6: x > 0 ==> x <= \\old(x);\nloop invariant i7: x == N;\nloop invariant i8: \\forall k \\in [0, N-x] : x == N-k;\nloop invariant i9: x == 0;\nloop invariant i10: x <= N;\nloop invariant i11: x == \\old(N) - iteration_count;\n*/\nwhile(x > 0)\n  {\n    x = x - 1;\n  }\n  {;\n//@ assert(x == 0);\n}\n    \n}\n",
        "combined_annotation_num_solver_calls": 8,
        "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\nvoid main()\n{\n  int x, m, N;\n  N = unknown_int();\n  if (N < 0)\n    \nreturn;\n\n  x = N;\n  /*@\nloop invariant i1: 0 <= x <= N;\nloop invariant i2: x >= 0;\nloop invariant i3: N >= 0;\n\n\n\n\n\n\nloop invariant i10: x <= N;\n\n*/\nwhile(x > 0)\n  {\n    x = x - 1;\n  }\n  {;\n//@ assert(x == 0);\n}\n    \n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c"
        ],
        "skipped": [],
        "total": 191,
        "success_count": 82,
        "failure_count": 109,
        "success_rate": 0.4293193717277487
    }
}