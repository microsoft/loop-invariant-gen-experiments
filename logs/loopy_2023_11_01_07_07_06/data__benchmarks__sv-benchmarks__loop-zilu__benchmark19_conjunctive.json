{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark19_conjunctive.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  if (!((j==n) && (k==n) && (n>0))) return 0;\n  while (j>0 && n>0) {\n    j--;k--;\n  }\n  {;\n//@ assert((k == 0));\n}\n\n  return 0;\n}",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  if (!((j==n) && (k==n) && (n>0))) return 0;\n  while (j>0 && n>0) {\n    j--;k--;\n  }\n  {;\n//@ assert((k == 0));\n}\n\n  return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Let's start by analyzing the program and making note of the pre-conditions and variable assignments:\n\nPre-conditions:\n- `j`, `k`, and `n` are integers.\n- `j`, `k`, and `n` are assigned values returned by `unknown_int()`.\n- `n` is greater than 0.\n- `j` and `k` are equal to `n`.\n\nLoop Condition:\n- `j` is greater than 0 and `n` is greater than 0.\n\nPost-condition:\n- `k` is equal to 0.\n\nNext, let's analyze the loop body. The loop body is a simple decrement of `j` and `k`.\n\nNow, let's output the necessary loop invariants:\n\n```\n/*@\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant j + k == 2 * n;\nloop invariant j <= \\old(j);\nloop invariant k <= \\old(k);\nloop invariant n == \\old(n);\nloop invariant (j > 0 && n > 0) ==> (j - 1) + k == 2 * n;\nloop invariant (j <= 0 || n <= 0) ==> k == 0;\n*/\n```\n\nExplanation of Loop Invariants:\n- `0 <= j <= n` and `0 <= k <= n` make sure that `j` and `k` are always between 0 and `n`.\n- `j + k == 2 * n` ensures that the sum of `j` and `k` is always equal to twice `n`.\n- `j <= \\old(j)`, `k <= \\old(k)`, and `n == \\old(n)` ensure that `j`, `k`, and `n` do not increase or change during the loop execution.\n- `(j > 0 && n > 0) ==> (j - 1) + k == 2 * n` ensures that the loop body correctly decrements `j` and `k` by 1 in each iteration while maintaining the sum of `j` and `k` as `2 * n`.\n- `(j <= 0 || n <= 0) ==> k == 0` ensures that `k` becomes 0 when `j` or `n` become 0, which implies that the loop has terminated. This makes sure that the post-condition is satisfied.",
            "Before the loop execution, the following loop invariants hold:\n```\n/*@ \n    loop invariant j >= 0 && k >= 0 && n > 0 && j == \\old(j) && k == \\old(k) && n == \\old(n);\n*/\n```\nHere, `\\old(j)`, `\\old(k)` and `\\old(n)` represent the values of `j`, `k` and `n` before the loop execution.\n\nIn every iteration of the loop, the following loop invariants hold:\n```\n/*@ \n    loop invariant j >= 0 && k >= 0 && n > 0 && j + k == \\at(j, Pre) + \\at(k, Pre) && n == \\at(n, Pre);\n*/\n```\nHere, `\\at(j, Pre)` and `\\at(k, Pre)` represent the values of `j` and `k` before the current iteration of the loop.\n\nAfter the loop termination, the following loop invariants hold:\n```\n/*@ \n    loop invariant j >= 0 && k >= 0 && n > 0 && j + k == \\at(j, Pre) + \\at(k, Pre) && n == \\at(n, Pre);\n    loop invariant (j == 0 ==> k == 0);\n*/\n```\nThe second invariant implies that if `j` becomes zero at any point during the loop execution, then `k` must also become zero at that point. This is because `j` and `k` are decremented by the same amount in each iteration of the loop.\n\nUsing implication, we can combine the guard condition of the assertion and the final loop invariant as follows:\n```\n/*@ \n    loop invariant j >= 0 && k >= 0 && n > 0 && j + k == \\at(j, Pre) + \\at(k, Pre) && n == \\at(n, Pre);\n    loop invariant (j == 0 ==> (k == 0 ==> (k == 0 && n == \\at(n, Pre))));\n    loop invariant (\\forall integer i; 0 <= i < j ==> (k-i) == (n-i));\n*/\n```\nHere, the first implication covers the case where `j` becomes zero before `n` becomes zero, and the second implication covers the case where `n` becomes zero before `j` becomes zero. The third invariant is derived from the fact that `j` and `k` are decremented by the same amount in each iteration of the loop, so the difference between `k` and `n` should remain constant.\n\nFinally, we can add conjunctions that bound the maximum and minimum values that `j`, `k` and `n` can take:\n```\n/*@ \n    loop invariant j >= 0 && j <= \\at(j, Pre) && k >= 0 && k <= \\at(k, Pre) && n > 0 && n <= \\at(n, Pre);\n    loop invariant j + k == \\at(j, Pre) + \\at(k, Pre) && n == \\at(n, Pre);\n    loop invariant (j == 0 ==> (k == 0 ==> (k == 0 && n == \\at(n, Pre))));\n    loop invariant (\\forall integer i; 0 <= i < j ==> (k-i) == (n-i));\n*/\n```\nHere, we use the assumption that `n` is greater than zero in the first loop invariant. Note that we also added the condition `j <= \\at(j, Pre)` and `k <= \\at(k, Pre)` to ensure that `j` and `k` do not increase during the loop execution.",
            "Let's start by analyzing the program and noting down the pre-conditions and variable assignments:\n```\nPre-conditions:\n- j, k, and n are integers with unknown values.\n- j == n && k == n && n > 0\n\nVariable assignments:\n- j = unknown_int()\n- k = unknown_int()\n- n = unknown_int()\n```\nThe loop condition is `j>0 && n>0`. \n\nNow, let's find the necessary loop invariants:\n```\nLoop Invariants:\n1. j >= 0\n2. k >= 0\n3. n > 0\n4. j + k == 2*n\n5. (j>0 && n>0) ==> (j+k == 2*n)\n6. (j==0 && n>0) ==> (k == n)\n7. (k==0) ==> ((j==0) || (n==0))\n```\nExplanation of loop invariants:\n1. `j` is decremented by 1 in each iteration of the loop and starts with an unknown value. Hence, `j` can be any non-negative integer.\n2. `k` is decremented by 1 in each iteration of the loop and starts with an unknown value. Hence, `k` can be any non-negative integer.\n3. `n` starts with an unknown positive value and is not changed inside the loop. Hence, `n` is always greater than 0.\n4. `j+k` is the sum of two unknown non-negative integers, which is equal to twice the unknown value of `n`. Hence, `j+k` is always equal to `2*n`.\n5. This invariant states that `j+k` is always equal to `2*n`, whenever `j` and `n` are both greater than 0. This is true because in each iteration, both `j` and `n` are decremented by 1, and hence, the sum `j+k` is reduced by 2. Since `j+k` is initially equal to `2*n`, it remains equal to `2*n` throughout the loop.\n6. This invariant states that if `j` becomes 0 before `n` becomes 0, then `k` must be equal to `n`. This is true because when `j` becomes 0, `j+k` is equal to `n+n`, which is equal to `2*n`. Hence, `k` must be equal to `2*n - j`, which is equal to `n` since `j` is 0.\n7. This invariant states that if `k` becomes 0, then either `j` becomes 0 or `n` becomes 0. This is true because `j+k` is initially equal to `2*n` and is decremented by 2 in each iteration. Hence, when `k` becomes 0, `j+k` is equal to `j`, which implies that either `j` becomes 0 or `n` becomes 0 (since `j+k` is always equal to `2*n`).",
            "Pre-conditions:\n- The variables `j`, `k`, and `n` are initialized with values returned by `unknown_int()` function.\n- The values of `j`, `k`, and `n` are such that `j = n`, `k = n`, and `n > 0`.\n\nLoop condition:\n- The loop continues as long as `j > 0` and `n > 0`.\n\nPost-condition:\n- `k` should be equal to 0 after the loop terminates.\n\nLoop invariants:\n- Before the loop execution, `k = n` and `j = n`.\n- In every iteration of the loop, `j >= 0`, `k >= 0`, and `j + k = 2n`.\n- After the loop termination, `k = 0`.\n\nExplanation:\n- Before the loop starts, `j` and `k` are equal to `n` because of the precondition. \n- In every iteration of the loop, both `j` and `k` are decremented by 1, so their sum `j + k` is always equal to `2n`. Also, `j` and `k` are always non-negative because of the loop condition. \n- After the loop terminates, `j` is equal to 0 because of the loop condition, so `k` must be equal to 0 as well, which is the post-condition. \n\nTherefore, the loop invariants are:\n```\n/*@ \n    loop invariant k == n;\n    loop invariant j == n;\n    loop invariant j >= 0 && k >= 0 && j + k == 2*n;\n    loop invariant (j > 0 && n > 0) ==> (j-1 >= 0 && k-1 >= 0 && (j-1)+(k-1) == 2*n);\n    loop invariant k == 0;\n*/\n```",
            "Pre-conditions:\n- The program assumes that `j`, `k` and `n` are integers initialized by `unknown_int()` function calls.\n- The program assumes that `n` is greater than 0 and `j` and `k` are equal to `n`.\n\nLoop condition:\n- The loop continues while `j` and `n` are greater than 0.\n\nPost-condition:\n- The assertion states that `k` is equal to 0.\n\nLoop invariants:\n- Since the loop modifies the values of `j` and `k`, we need to find an invariant that relates them to `n` and `k` to the post-condition. \n- Before the loop execution, we need to ensure that `k` is equal to `n`.\n- During each iteration of the loop, we need to ensure that `j` and `k` are both greater than or equal to 0.\n- After the loop termination, we need to ensure that `k` is equal to 0 and that `j` is less than or equal to 0.\n\nPutting this all together, the loop invariants are:\n```\n/*@ \n    loop invariant j >= 0;\n    loop invariant k >= 0;\n    loop invariant k <= n;\n    loop invariant j <= n;\n    loop invariant j + k == 2 * n;\n    loop invariant (j > 0 && n > 0) ==> (j + k == 2 * n);\n    loop invariant (j <= 0 || n <= 0) ==> (k == 0);\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant j + k == 2 * n;\nloop invariant j <= \\old(j);\nloop invariant k <= \\old(k);\nloop invariant n == \\old(n);\nloop invariant (j > 0 && n > 0) ==> (j - 1) + k == 2 * n;\nloop invariant (j <= 0 || n <= 0) ==> k == 0;\n*/",
            "/*@ \n    loop invariant j >= 0 && k >= 0 && n > 0 && j == \\old(j) && k == \\old(k) && n == \\old(n);\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Let's start by analyzing the program and noting down the pre-conditions and variable assignments:\n```\nPre-conditions:\n- j, k, and n are integers with unknown values.\n- j == n && k == n && n > 0\n\nVariable assignments:\n- j = unknown_int()\n- k = unknown_int()\n- n = unknown_int()\n```\nThe loop condition is `j>0 && n>0`. \n\nNow, let's find the necessary loop invariants:\n```\nLoop Invariants:\n1. j >= 0\n2. k >= 0\n3. n > 0\n4. j + k == 2*n\n5. (j>0 && n>0) ==> (j+k == 2*n)\n6. (j==0 && n>0) ==> (k == n)\n7. (k==0) ==> ((j==0) || (n==0))\n```\nExplanation of loop invariants:\n1. `j` is decremented by 1 in each iteration of the loop and starts with an unknown value. Hence, `j` can be any non-negative integer.\n2. `k` is decremented by 1 in each iteration of the loop and starts with an unknown value. Hence, `k` can be any non-negative integer.\n3. `n` starts with an unknown positive value and is not changed inside the loop. Hence, `n` is always greater than 0.\n4. `j+k` is the sum of two unknown non-negative integers, which is equal to twice the unknown value of `n`. Hence, `j+k` is always equal to `2*n`.\n5. This invariant states that `j+k` is always equal to `2*n`, whenever `j` and `n` are both greater than 0. This is true because in each iteration, both `j` and `n` are decremented by 1, and hence, the sum `j+k` is reduced by 2. Since `j+k` is initially equal to `2*n`, it remains equal to `2*n` throughout the loop.\n6. This invariant states that if `j` becomes 0 before `n` becomes 0, then `k` must be equal to `n`. This is true because when `j` becomes 0, `j+k` is equal to `n+n`, which is equal to `2*n`. Hence, `k` must be equal to `2*n - j`, which is equal to `n` since `j` is 0.\n7. This invariant states that if `k` becomes 0, then either `j` becomes 0 or `n` becomes 0. This is true because `j+k` is initially equal to `2*n` and is decremented by 2 in each iteration. Hence, when `k` becomes 0, `j+k` is equal to `j`, which implies that either `j` becomes 0 or `n` becomes 0 (since `j+k` is always equal to `2*n`)."
            ],
            "/*@ \n    loop invariant k == n;\n    loop invariant j == n;\n    loop invariant j >= 0 && k >= 0 && j + k == 2*n;\n    loop invariant (j > 0 && n > 0) ==> (j-1 >= 0 && k-1 >= 0 && (j-1)+(k-1) == 2*n);\n    loop invariant k == 0;\n*/",
            "/*@ \n    loop invariant j >= 0;\n    loop invariant k >= 0;\n    loop invariant k <= n;\n    loop invariant j <= n;\n    loop invariant j + k == 2 * n;\n    loop invariant (j > 0 && n > 0) ==> (j + k == 2 * n);\n    loop invariant (j <= 0 || n <= 0) ==> (k == 0);\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 8,
                "annotations": "/*@\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant j + k == 2 * n;\nloop invariant j <= \\old(j);\nloop invariant k <= \\old(k);\nloop invariant n == \\old(n);\nloop invariant (j > 0 && n > 0) ==> (j - 1) + k == 2 * n;\nloop invariant (j <= 0 || n <= 0) ==> k == 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: \\old undefined in this context. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  if (!((j==n) && (k==n) && (n>0))) return 0;\n  /*@\nloop invariant i1: 0 <= j <= n;\n\n\n\n\n\n\n\n*/\nwhile (j>0 && n>0) {\n    j--;k--;\n  }\n  {;\n//@ assert((k == 0));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant j >= 0 && k >= 0 && n > 0 && j == \\old(j) && k == \\old(k) && n == \\old(n);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: \\old undefined in this context. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  if (!((j==n) && (k==n) && (n>0))) return 0;\n  /*@\n\n*/\nwhile (j>0 && n>0) {\n    j--;k--;\n  }\n  {;\n//@ assert((k == 0));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Let's start by analyzing the program and noting down the pre-conditions and variable assignments:\n```\nPre-conditions:\n- j, k, and n are integers with unknown values.\n- j == n && k == n && n > 0\n\nVariable assignments:\n- j = unknown_int()\n- k = unknown_int()\n- n = unknown_int()\n```\nThe loop condition is `j>0 && n>0`. \n\nNow, let's find the necessary loop invariants:\n```\nLoop Invariants:\n1. j >= 0\n2. k >= 0\n3. n > 0\n4. j + k == 2*n\n5. (j>0 && n>0) ==> (j+k == 2*n)\n6. (j==0 && n>0) ==> (k == n)\n7. (k==0) ==> ((j==0) || (n==0))\n```\nExplanation of loop invariants:\n1. `j` is decremented by 1 in each iteration of the loop and starts with an unknown value. Hence, `j` can be any non-negative integer.\n2. `k` is decremented by 1 in each iteration of the loop and starts with an unknown value. Hence, `k` can be any non-negative integer.\n3. `n` starts with an unknown positive value and is not changed inside the loop. Hence, `n` is always greater than 0.\n4. `j+k` is the sum of two unknown non-negative integers, which is equal to twice the unknown value of `n`. Hence, `j+k` is always equal to `2*n`.\n5. This invariant states that `j+k` is always equal to `2*n`, whenever `j` and `n` are both greater than 0. This is true because in each iteration, both `j` and `n` are decremented by 1, and hence, the sum `j+k` is reduced by 2. Since `j+k` is initially equal to `2*n`, it remains equal to `2*n` throughout the loop.\n6. This invariant states that if `j` becomes 0 before `n` becomes 0, then `k` must be equal to `n`. This is true because when `j` becomes 0, `j+k` is equal to `n+n`, which is equal to `2*n`. Hence, `k` must be equal to `2*n - j`, which is equal to `n` since `j` is 0.\n7. This invariant states that if `k` becomes 0, then either `j` becomes 0 or `n` becomes 0. This is true because `j+k` is initially equal to `2*n` and is decremented by 2 in each iteration. Hence, when `k` becomes 0, `j+k` is equal to `j`, which implies that either `j` becomes 0 or `n` becomes 0 (since `j+k` is always equal to `2*n`).",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 6,
                "annotations": "/*@ \n    loop invariant k == n;\n    loop invariant j == n;\n    loop invariant j >= 0 && k >= 0 && j + k == 2*n;\n    loop invariant (j > 0 && n > 0) ==> (j-1 >= 0 && k-1 >= 0 && (j-1)+(k-1) == 2*n);\n    loop invariant k == 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant k == n is partially proven to be inductive.\nloop invariant j == n is partially proven to be inductive.\nloop invariant j >= 0 && k >= 0 && j + k == 2*n is partially proven to be inductive.\nloop invariant (j > 0 && n > 0) ==> (j-1 >= 0 && k-1 >= 0 && (j-1)+(k-1) == 2*n) is preserved but not established.\nloop invariant k == 0 is partially proven to be inductive.\nAssertion k == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  if (!((j==n) && (k==n) && (n>0))) return 0;\n  /*@\n\n\n\n\n\n*/\nwhile (j>0 && n>0) {\n    j--;k--;\n  }\n  {;\n//@ assert((k == 0));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "/*@ \n    loop invariant j >= 0;\n    loop invariant k >= 0;\n    loop invariant k <= n;\n    loop invariant j <= n;\n    loop invariant j + k == 2 * n;\n    loop invariant (j > 0 && n > 0) ==> (j + k == 2 * n);\n    loop invariant (j <= 0 || n <= 0) ==> (k == 0);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant j >= 0 is partially proven to be inductive.\nloop invariant k >= 0 is partially proven to be inductive.\nloop invariant k <= n is partially proven to be inductive.\nloop invariant j <= n is partially proven to be inductive.\nloop invariant j + k == 2 * n is established but not preserved.\nloop invariant (j > 0 && n > 0) ==> (j + k == 2 * n) is partially proven to be inductive.\nloop invariant (j <= 0 || n <= 0) ==> (k == 0) is partially proven to be inductive.\nAssertion k == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  if (!((j==n) && (k==n) && (n>0))) return 0;\n  /*@\nloop invariant i1: j >= 0;\n\nloop invariant i3: k <= n;\nloop invariant i4: j <= n;\n\n\n\n*/\nwhile (j>0 && n>0) {\n    j--;k--;\n  }\n  {;\n//@ assert((k == 0));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 15: \\old undefined in this context. Ignoring loop annotation",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  if (!((j==n) && (k==n) && (n>0))) return 0;\n  /*@\nloop invariant i1: 0 <= j <= n;\nloop invariant i2: 0 <= k <= n;\nloop invariant i3: j + k == 2 * n;\nloop invariant i4: j <= \\old(j);\nloop invariant i5: k <= \\old(k);\nloop invariant i6: n == \\old(n);\nloop invariant i7: (j > 0 && n > 0) ==> (j - 1) + k == 2 * n;\nloop invariant i8: (j <= 0 || n <= 0) ==> k == 0;\nloop invariant i9: j >= 0 && k >= 0 && n > 0 && j == \\old(j) && k == \\old(k) && n == \\old(n);\nloop invariant i10: k == n;\nloop invariant i11: j == n;\nloop invariant i12: j >= 0 && k >= 0 && j + k == 2*n;\nloop invariant i13: (j > 0 && n > 0) ==> (j-1 >= 0 && k-1 >= 0 && (j-1)+(k-1) == 2*n);\nloop invariant i14: k == 0;\nloop invariant i15: j >= 0;\nloop invariant i16: k >= 0;\nloop invariant i17: k <= n;\nloop invariant i18: j <= n;\nloop invariant i19: (j > 0 && n > 0) ==> (j + k == 2 * n);\nloop invariant i20: (j <= 0 || n <= 0) ==> (k == 0);\n*/\nwhile (j>0 && n>0) {\n    j--;k--;\n  }\n  {;\n//@ assert((k == 0));\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 16,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  if (!((j==n) && (k==n) && (n>0))) return 0;\n  /*@\nloop invariant i1: 0 <= j <= n;\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i15: j >= 0;\n\nloop invariant i17: k <= n;\nloop invariant i18: j <= n;\n\n\n*/\nwhile (j>0 && n>0) {\n    j--;k--;\n  }\n  {;\n//@ assert((k == 0));\n}\n\n  return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/const.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq1.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq2.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/afnp2014.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/css2003.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007b.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gsv2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/hhk2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_2.c",
            "../data/benchmarks/sv-benchmarks/loop-new/gauss_sum.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark10_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark11_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark13_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark14_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark15_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark16_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark17_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark18_conjunctive.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../data/benchmarks/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/even.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/mod4.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/odd.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/id_trans.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/bhmr2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/ddlm2013.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gcnr2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gr2006.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_k.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_nondet.c",
            "../data/benchmarks/sv-benchmarks/loop-new/half.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark07_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark12_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark19_conjunctive.c"
        ],
        "skipped": [],
        "total": 326,
        "success_count": 160,
        "failure_count": 166,
        "success_rate": 0.49079754601226994
    }
}