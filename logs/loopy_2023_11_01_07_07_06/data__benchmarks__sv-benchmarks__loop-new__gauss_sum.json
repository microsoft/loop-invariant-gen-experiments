{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loop-new/gauss_sum.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int n, sum, i;\n    n = unknown_int();\n    if (!(1 <= n && n <= 1000)) return 0;\n    sum = 0;\n    for(i = 1; i <= n; i++) {\n        sum = sum + i;\n    }\n    {;\n//@ assert(2*sum == n*(n+1));\n}\n\n    return 0;\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int n, sum, i;\n    n = unknown_int();\n    if (!(1 <= n && n <= 1000)) return 0;\n    sum = 0;\n    for(i = 1; i <= n; i++) {\n        sum = sum + i;\n    }\n    {;\n//@ assert(2*sum == n*(n+1));\n}\n\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "First, let's analyze the program and make some notes:\n- Pre-condition: `1 <= n <= 1000`\n- Loop variable: `i`\n- Loop condition: `i <= n`\n- Loop body: `sum = sum + i`\n- Post-condition: `2*sum == n*(n+1)`\n\nNow, let's find the necessary loop invariants:\n- Before loop execution, we know that `sum = 0` and `i = 1`, so the following loop invariant is true:\n```\n/*@ loop invariant 1 <= i <= n+1;\n    loop invariant sum == \\sum(int j = 1; j <= i-1; j);\n*/\n```\n- In every iteration of the loop, we update `sum` by adding `i` to it. So, we need to update the loop invariant for `sum`:\n```\n/*@ loop invariant 1 <= i <= n+1;\n    loop invariant sum == \\sum(int j = 1; j <= i-1; j);\n*/\n```\nbecomes\n```\n/*@ loop invariant 1 <= i <= n+1;\n    loop invariant sum == \\sum(int j = 1; j <= i-1; j);\n    loop invariant sum == (i-1)*i/2;\n*/\n```\n- After loop termination, we have `i = n+1`, so we need to update the loop invariant for `i` and use implication to take care of the conditional nature of the code:\n```\n/*@ loop invariant 1 <= i <= n+2;\n    loop invariant sum == \\sum(int j = 1; j <= i-1; j);\n    loop invariant sum == (i-1)*i/2;\n    loop invariant (i == n+2) ==> (2*sum == n*(n+1));\n*/\n```\n\nFinally, we need to add conjunctions that bound the maximum and minimum values for `n`:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int n, sum, i;\n    n = unknown_int();\n    assume(1 <= n && n <= 1000);\n    sum = 0;\n    for(i = 1; i <= n; i++) {\n        sum = sum + i;\n    }\n    {;\n    //@ assert (2*sum == n*(n+1));\n    }\n\n    return 0;\n}\n/*@ \n    loop invariant 1 <= i <= n+2;\n    loop invariant sum == \\sum(int j = 1; j <= i-1; j);\n    loop invariant sum == (i-1)*i/2;\n    loop invariant (i == n+2) ==> (2*sum == n*(n+1));\n*/\n```",
            "First, let's analyze the given program and make a note of the pre-conditions or variable assignments:\n\n- The program takes an input 'n' using the non-deterministic function 'unknown_int()'.\n- The program checks whether 'n' is between 1 and 1000 (inclusive).\n- The program initializes 'sum' to 0 and 'i' to 1.\n\nNow, let's analyze the loop body:\n\n- The loop adds 'i' to 'sum' in each iteration.\n- The loop iterates 'n' times, with 'i' starting from 1 and incrementing by 1 in each iteration.\n\nBased on this analysis, we can derive the necessary loop invariants as follows:\n\n1. Before the loop execution:\n- 'n' is between 1 and 1000 (inclusive).\n- 'sum' is equal to 0.\n- 'i' is equal to 1.\n\n2. In every iteration of the loop:\n- 'i' is between 1 and 'n' (inclusive).\n- 'sum' is equal to the sum of the first 'i-1' positive integers.\n- 'sum' is less than or equal to the sum of the first 'i' positive integers.\n- 'sum' is greater than or equal to the sum of the first 'i-2' positive integers.\n\n3. After the loop termination:\n- 'i' is equal to 'n+1'.\n- 'sum' is equal to the sum of the first 'n' positive integers.\n- '2*sum' is equal to 'n*(n+1)'.\n\nWe can write the loop invariants in ACSL annotations as follows:\n\n```\n/*@ \n    loop invariant 1 <= n <= 1000;\n    loop invariant sum == 0;\n    loop invariant i == 1;\n\n    loop invariant 1 <= i <= n;\n    loop invariant sum == \\sum(int j = 1; j <= i-1; j) j;\n    loop invariant sum <= \\sum(int j = 1; j <= i; j) j;\n    loop invariant sum >= \\sum(int j = 1; j <= i-2; j) j;\n\n    loop invariant i == n+1;\n    loop invariant sum == \\sum(int j = 1; j <= n; j) j;\n    loop invariant 2*sum == n*(n+1);\n*/\n``` \n\nNote that we have used a loop invariant to express the summation of the first 'k' positive integers as '\\sum(int j = 1; j <= k; j) j' in the loop invariants.",
            "First, let's analyze the program and identify the pre-conditions and variable assignments:\n\n- The program defines a macro `assume` and an external function `unknown_int`.\n- The `main` function initializes three integer variables `n`, `sum`, and `i`.\n- The program checks that `n` is between 1 and 1000 (inclusive) using the condition `!(1 <= n && n <= 1000)`.\n- The loop initializes `i` to 1 and increments it by 1 until it reaches `n`.\n- The loop adds `i` to `sum` in each iteration.\n- The program then asserts that `2*sum` equals `n*(n+1)`.\n\nNext, let's find the necessary loop invariants to help Frama-C verify the post-condition:\n\n- Before the loop execution, we need to ensure that `sum` is initialized to 0 and that `i` is initialized to 1. Therefore, we can add the following loop invariants:\n```\n/*@ loop invariant sum == 0;\n    loop invariant i == 1;\n*/\n```\n- In every iteration of the loop, we need to ensure that `i` is between 1 and `n` (inclusive) and that `sum` equals the sum of the first `i-1` positive integers. Therefore, we can add the following loop invariants:\n```\n/*@ loop invariant 1 <= i && i <= n+1;\n    loop invariant sum == (\\sum int j; 1 <= j < i; j++);\n*/\n```\n- After the loop termination, we need to ensure that `i` equals `n+1` and that `sum` equals the sum of the first `n` positive integers. Therefore, we can add the following loop invariants:\n```\n/*@ loop invariant i == n+1;\n    loop invariant sum == (\\sum int j; 1 <= j <= n; j);\n*/\n```\n- Finally, we can use implication to take care of the conditional nature of the assertion. Since the assertion is true only if `1 <= n && n <= 1000`, we can add the following loop invariant:\n```\n/*@ loop invariant 1 <= n && n <= 1000 ==> 2*sum == n*(n+1);\n*/\n```\n\nPutting everything together, we get the following program with loop invariants:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int n, sum, i;\n    n = unknown_int();\n    assume(1 <= n && n <= 1000);\n    sum = 0;\n    //@ loop invariant sum == 0;\n    //@ loop invariant i == 1;\n    //@ loop invariant 1 <= n && n <= 1000 ==> 2*sum == n*(n+1);\n    //@ loop invariant 1 <= i && i <= n+1;\n    //@ loop invariant sum == (\\sum int j; 1 <= j < i; j++);\n    for(i = 1; i <= n; i++) {\n        //@ loop invariant 1 <= i && i <= n+1;\n        //@ loop invariant sum == (\\sum int j; 1 <= j < i; j++);\n        sum = sum + i;\n    }\n    //@ loop invariant i == n+1;\n    //@ loop invariant sum == (\\sum int j; 1 <= j <= n; j);\n    {;\n        //@ assert 2*sum == n*(n+1);\n    }\n\n    return 0;\n}\n```",
            "Step 1: Pre-conditions and variable assignments\n```\nPre-conditions:\n    - None\n    \nVariable assignments:\n    - n = unknown_int()\n    - sum = 0\n```\n\nStep 2: Loop condition\n```\nfor(i = 1; i <= n; i++)\n```\n\nStep 3: Loop invariants\n```\n/*@\nloop invariant 1 <= i <= n+1;\nloop invariant sum == (i-1)*i/2;\nloop invariant 2*sum == (i-1)*i;\nloop assigns i, sum;\n*/\n```\nExplanation:\n- Loop invariant 1 <= i <= n+1 is true before the first iteration of the loop, and is preserved in every iteration of the loop. It implies that i is always between 1 and n+1.\n- Loop invariant sum == (i-1)*i/2 is true before the first iteration of the loop, and is preserved in every iteration of the loop. It implies that sum is always the sum of integers from 1 to i-1.\n- Loop invariant 2*sum == (i-1)*i is true before the first iteration of the loop, and is preserved in every iteration of the loop. It implies that 2 times the sum is always equal to i times (i-1), which is the sum of even numbers from 2 to i*2-2.\n- The loop assigns i and sum, which means that i and sum may change in every iteration of the loop.\n\nStep 4: Implications\nSince there are no non-deterministic variables in this program, we do not need to use any implications.\n\nStep 5: Verify the post-condition using loop invariants\nThe post-condition is `2*sum == n*(n+1)`. We can verify this post-condition using the third loop invariant by substituting i = n+1. We get:\n```\n2*sum == (n+1-1)*(n+1) = n*(n+1)\n```\nTherefore, the loop invariants imply the post-condition.",
            "Let's start by analyzing the program and making note of the pre-conditions and variable assignments.\n\nPre-conditions:\n- `n` is an integer input from an external function `unknown_int()`.\n- `n` is between 1 and 1000, inclusive.\n\nVariable assignments:\n- `sum` is initialized to 0.\n- `i` is initialized to 1.\n\nNow let's analyze the loop body and make note of the loop condition. The loop condition is `i <= n`.\n\nTo verify the post-condition `2*sum == n*(n+1)`, we need to find loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination such that the loop invariants imply the post-condition.\n\nLoop invariants:\n- Before the loop execution:\n    - `sum == 0`\n    - `1 <= i <= n+1`\n    - `n <= 1000`\n- In every iteration of the loop:\n    - `sum == i*(i-1)/2`\n    - `1 <= i <= n+1`\n    - `n <= 1000`\n- After the loop termination:\n    - `2*sum == n*(n+1)`\n    - `1 <= i <= n+1`\n    - `n <= 1000`\n\nLet's explain each loop invariant:\n- Before the loop execution:\n    - `sum == 0`: This is true because `sum` is initialized to 0 before the loop.\n    - `1 <= i <= n+1`: This is true because `i` is initialized to 1 and the loop condition is `i <= n`.\n    - `n <= 1000`: This is true because of the pre-condition that `n` is between 1 and 1000, inclusive.\n- In every iteration of the loop:\n    - `sum == i*(i-1)/2`: This is true because `sum` is updated in each iteration by adding `i` to the previous `sum`. Therefore, after `i` iterations, `sum` would be the sum of the first `i` integers, which is `i*(i-1)/2`.\n    - `1 <= i <= n+1`: This is true because the loop condition is `i <= n` and `i` is incremented by 1 in each iteration.\n    - `n <= 1000`: This is true because of the pre-condition that `n` is between 1 and 1000, inclusive.\n- After the loop termination:\n    - `2*sum == n*(n+1)`: This is true because the loop computes the sum of the first `n` integers, which is `n*(n+1)/2`. Multiplying both sides by 2 gives `2*sum == n*(n+1)`.\n    - `1 <= i <= n+1`: This is true because the loop terminates when `i > n`.\n    - `n <= 1000`: This is true because of the pre-condition that `n` is between 1 and 1000, inclusive.\n\nPutting it all together, the loop invariants are:\n\n```\n/*@ \n    loop invariant sum == 0;\n    loop invariant 1 <= i <= n+1;\n    loop invariant n <= 1000;\n    \n    loop invariant sum == i*(i-1)/2;\n    loop invariant 1 <= i <= n+1;\n    loop invariant n <= 1000;\n    \n    loop invariant 2*sum == n*(n+1);\n    loop invariant 1 <= i <= n+1;\n    loop invariant n <= 1000;\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@ loop invariant 1 <= i <= n+1;\n    loop invariant sum == \\sum(int j = 1; j <= i-1; j);\n*/",
            "/*@ \n    loop invariant 1 <= n <= 1000;\n    loop invariant sum == 0;\n    loop invariant i == 1;\n\n    loop invariant 1 <= i <= n;\n    loop invariant sum == \\sum(int j = 1; j <= i-1; j) j;\n    loop invariant sum <= \\sum(int j = 1; j <= i; j) j;\n    loop invariant sum >= \\sum(int j = 1; j <= i-2; j) j;\n\n    loop invariant i == n+1;\n    loop invariant sum == \\sum(int j = 1; j <= n; j) j;\n    loop invariant 2*sum == n*(n+1);\n*/",
            "/*@ loop invariant sum == 0;\n    loop invariant i == 1;\n*/",
            "/*@\nloop invariant 1 <= i <= n+1;\nloop invariant sum == (i-1)*i/2;\nloop invariant 2*sum == (i-1)*i;\nloop assigns i, sum;\n*/",
            "/*@ \n    loop invariant sum == 0;\n    loop invariant 1 <= i <= n+1;\n    loop invariant n <= 1000;\n    \n    loop invariant sum == i*(i-1)/2;\n    loop invariant 1 <= i <= n+1;\n    loop invariant n <= 1000;\n    \n    loop invariant 2*sum == n*(n+1);\n    loop invariant 1 <= i <= n+1;\n    loop invariant n <= 1000;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "/*@ loop invariant 1 <= i <= n+1;\n    loop invariant sum == \\sum(int j = 1; j <= i-1; j);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 11: unexpected token 'j'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int n, sum, i;\n    n = unknown_int();\n    if (!(1 <= n && n <= 1000)) return 0;\n    sum = 0;\n    /*@\nloop invariant i1: 1 <= i <= n+1;\n\n*/\nfor(i = 1; i <= n; i++) {\n        sum = sum + i;\n    }\n    {;\n//@ assert(2*sum == n*(n+1));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 11,
                "annotations": "/*@ \n    loop invariant 1 <= n <= 1000;\n    loop invariant sum == 0;\n    loop invariant i == 1;\n\n    loop invariant 1 <= i <= n;\n    loop invariant sum == \\sum(int j = 1; j <= i-1; j) j;\n    loop invariant sum <= \\sum(int j = 1; j <= i; j) j;\n    loop invariant sum >= \\sum(int j = 1; j <= i-2; j) j;\n\n    loop invariant i == n+1;\n    loop invariant sum == \\sum(int j = 1; j <= n; j) j;\n    loop invariant 2*sum == n*(n+1);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: unexpected token 'j'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int n, sum, i;\n    n = unknown_int();\n    if (!(1 <= n && n <= 1000)) return 0;\n    sum = 0;\n    /*@\nloop invariant i1: 1 <= n <= 1000;\n\n\n\n\n\n\n\n\n\n*/\nfor(i = 1; i <= n; i++) {\n        sum = sum + i;\n    }\n    {;\n//@ assert(2*sum == n*(n+1));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ loop invariant sum == 0;\n    loop invariant i == 1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant sum == 0 is established but not preserved.\nloop invariant i == 1 is partially proven to be inductive.\nAssertion 2 * sum == n * (n + 1): Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int n, sum, i;\n    n = unknown_int();\n    if (!(1 <= n && n <= 1000)) return 0;\n    sum = 0;\n    /*@\n\n\n*/\nfor(i = 1; i <= n; i++) {\n        sum = sum + i;\n    }\n    {;\n//@ assert(2*sum == n*(n+1));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@\nloop invariant 1 <= i <= n+1;\nloop invariant sum == (i-1)*i/2;\nloop invariant 2*sum == (i-1)*i;\nloop assigns i, sum;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant 1 <= i <= n+1 is inductive.\nloop invariant sum == (i-1)*i/2 is inductive.\nloop invariant 2*sum == (i-1)*i is inductive.\nAssertion 2 * sum == n * (n + 1): Valid"
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant sum == 0;\n    loop invariant 1 <= i <= n+1;\n    loop invariant n <= 1000;\n    \n    loop invariant sum == i*(i-1)/2;\n    loop invariant 1 <= i <= n+1;\n    loop invariant n <= 1000;\n    \n    loop invariant 2*sum == n*(n+1);\n    loop invariant 1 <= i <= n+1;\n    loop invariant n <= 1000;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant sum == 0 is partially proven to be inductive.\nloop invariant 1 <= i <= n+1 is partially proven to be inductive.\nloop invariant n <= 1000 is partially proven to be inductive.\nloop invariant sum == i*(i-1)/2 is partially proven to be inductive.\nloop invariant 2*sum == n*(n+1) is preserved but not established.\nAssertion 2 * sum == n * (n + 1): Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int n, sum, i;\n    n = unknown_int();\n    if (!(1 <= n && n <= 1000)) return 0;\n    sum = 0;\n    /*@\n\nloop invariant i2: 1 <= i <= n+1;\nloop invariant i3: n <= 1000;\nloop invariant i4: sum == i*(i-1)/2;\n\n*/\nfor(i = 1; i <= n; i++) {\n        sum = sum + i;\n    }\n    {;\n//@ assert(2*sum == n*(n+1));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 11: unexpected token 'j'",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int n, sum, i;\n    n = unknown_int();\n    if (!(1 <= n && n <= 1000)) return 0;\n    sum = 0;\n    /*@\nloop invariant i1: 1 <= i <= n+1;\nloop invariant i2: sum == \\sum(int j = 1; j <= i-1; j);\nloop invariant i3: 1 <= n <= 1000;\nloop invariant i4: sum == 0;\nloop invariant i5: i == 1;\nloop invariant i6: 1 <= i <= n;\nloop invariant i7: sum == \\sum(int j = 1; j <= i-1; j) j;\nloop invariant i8: sum <= \\sum(int j = 1; j <= i; j) j;\nloop invariant i9: sum >= \\sum(int j = 1; j <= i-2; j) j;\nloop invariant i10: i == n+1;\nloop invariant i11: sum == \\sum(int j = 1; j <= n; j) j;\nloop invariant i12: 2*sum == n*(n+1);\nloop invariant i13: sum == (i-1)*i/2;\nloop invariant i14: 2*sum == (i-1)*i;\nloop invariant i15: n <= 1000;\nloop invariant i16: sum == i*(i-1)/2;\n*/\nfor(i = 1; i <= n; i++) {\n        sum = sum + i;\n    }\n    {;\n//@ assert(2*sum == n*(n+1));\n}\n\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 11,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n    int n, sum, i;\n    n = unknown_int();\n    if (!(1 <= n && n <= 1000)) return 0;\n    sum = 0;\n    /*@\nloop invariant i1: 1 <= i <= n+1;\n\nloop invariant i3: 1 <= n <= 1000;\n\n\n\n\n\n\n\n\n\nloop invariant i13: sum == (i-1)*i/2;\nloop invariant i14: 2*sum == (i-1)*i;\nloop invariant i15: n <= 1000;\nloop invariant i16: sum == i*(i-1)/2;\n*/\nfor(i = 1; i <= n; i++) {\n        sum = sum + i;\n    }\n    {;\n//@ assert(2*sum == n*(n+1));\n}\n\n    return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/const.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq1.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq2.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/afnp2014.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/css2003.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007b.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gsv2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/hhk2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_2.c",
            "../data/benchmarks/sv-benchmarks/loop-new/gauss_sum.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../data/benchmarks/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/even.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/mod4.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/odd.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/id_trans.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/bhmr2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/ddlm2013.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gcnr2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gr2006.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_k.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_nondet.c"
        ],
        "skipped": [],
        "total": 306,
        "success_count": 146,
        "failure_count": 160,
        "success_rate": 0.477124183006536
    }
}