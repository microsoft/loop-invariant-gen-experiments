{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loop-industry-pattern/mod3.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main(){\n  unsigned int x = unknown_int();\n  unsigned int y = 1;\n  \n  while(unknown_int()){\n    if(x % 3 == 1){\n      x += 2; y = 0;}\n    else{\n      if(x % 3 == 2){\n\tx += 1; y = 0;}\n      else{\n\tif(unknown_int()){\n\t  x += 4; y = 1;}\n\telse{\n\t  x += 5; y = 1;}\n      }\n    }\n  }\n  if(y == 0)\n    {;\n//@ assert(x % 3 == 0);\n}\n\n  return 0;\n}\n",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main(){\n  unsigned int x = unknown_int();\n  unsigned int y = 1;\n  \n  while(unknown_int()){\n    if(x % 3 == 1){\n      x += 2; y = 0;}\n    else{\n      if(x % 3 == 2){\n\tx += 1; y = 0;}\n      else{\n\tif(unknown_int()){\n\t  x += 4; y = 1;}\n\telse{\n\t  x += 5; y = 1;}\n      }\n    }\n  }\n  if(y == 0)\n    {;\n//@ assert(x % 3 == 0);\n}\n\n  return 0;\n}\n\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- The program takes no input.\n- The function `unknown_int()` returns an integer value.\n\nVariable assignments:\n- `x` is assigned the value returned by `unknown_int()`.\n- `y` is assigned the value 1.\n\nLoop condition:\n- The loop executes as long as the function `unknown_int()` returns a non-zero value.\n\nLoop invariants:\n- `x % 3 == 1 ==> y == 0`\n- `x % 3 == 2 ==> y == 0`\n- `x % 3 == 0 || x % 3 == 1 || x % 3 == 2 || x % 3 == 3`\n- `y == 0 || y == 1`\n\nExplanation:\n- Since the loop condition depends on a non-deterministic function, we cannot determine the exact number of iterations that the loop will execute. Hence, we need to come up with loop invariants that hold true for all possible iterations.\n- The first two loop invariants can be derived from the conditional statements inside the loop. If `x % 3 == 1`, then `x` is incremented by 2 and `y` is set to 0. Similarly, if `x % 3 == 2`, then `x` is incremented by 1 and `y` is set to 0. Therefore, we can deduce that if `x % 3 == 1` or `x % 3 == 2`, then `y` must be equal to 0.\n- The third loop invariant is derived from the fact that `x` is incremented by 1, 2, 4 or 5 in each iteration of the loop. Therefore, `x % 3` can only take the values 0, 1, 2 or 3.\n- The fourth loop invariant is a trivial one that simply states that `y` can only take the values 0 or 1.\n- Finally, we can use the guard condition `y == 0` to imply the post-condition `x % 3 == 0`. This is because the post-condition is only checked if `y == 0`, so we can assume that if `y` is not equal to 0, then the post-condition does not need to hold.",
            "Pre-conditions:\n- The function `unknown_int()` returns a non-negative integer.\n\nVariable assignments:\n- `x` is assigned the value returned by `unknown_int()`.\n- `y` is assigned the value 1.\n\nLoop condition:\n- The loop continues as long as `unknown_int()` returns a non-zero value.\n\nLoop invariants:\n- `x % 3 == 0 ==> y == 0` (before loop execution)\n- `x % 3 == 0 || x % 3 == 1 || x % 3 == 2` (before loop execution)\n- `x % 3 == 0 ==> y == 0` (after loop termination)\n- `x % 3 == 0` (after loop termination, if `y` is 0)\n\nExplanation:\n- Before the loop starts, `x` can have any non-negative value, so we cannot make any assumptions about it. However, we know that `y` is initially 1, so we add the condition `x % 3 == 0 ==> y == 0` to our loop invariants.\n- We also know that `x` can have a remainder of 0, 1, or 2 when divided by 3. Therefore, we add the condition `x % 3 == 0 || x % 3 == 1 || x % 3 == 2` to our loop invariants.\n- During each iteration of the loop, the value of `x` can change based on the conditions in the loop body. However, we know that if `x` has a remainder of 0 when divided by 3, then `y` must be 0. Therefore, we add the condition `x % 3 == 0 ==> y == 0` to our loop invariants.\n- After the loop terminates, `y` can have either the value 0 or 1. However, if `y` is 0, then we know that `x` must have a remainder of 0 when divided by 3. Therefore, we add the condition `x % 3 == 0` to our loop invariants.\n- We do not need to add any loop invariants for the minimum or maximum values that `x` or `y` can take, as there are no explicit bounds given in the program.",
            "Pre-conditions:\n- None\n\nVariable assignments:\n- x is assigned the value of unknown_int(), which is an external function that returns an integer value. We don't know anything about the range of values that x can take.\n- y is initialized to 1.\n\nLoop condition:\n- The loop condition is unknown_int(), which means the loop will keep iterating as long as the function unknown_int() returns a non-zero value.\n\nLoop invariants:\n- Before the loop execution, we don't know anything about the value of x. Therefore, we cannot add any loop invariant before the loop execution.\n- In every iteration of the loop, we can add the following loop invariants:\n```\n/*@ \n    loop invariant (x % 3 == 0 || x % 3 == 1 || x % 3 == 2);\n    loop invariant (y == 0 || y == 1);\n*/\n```\nThe first invariant ensures that x is always divisible by 3, or leaves a remainder of 1 or 2 when divided by 3. This is because in each iteration of the loop, x is modified in a way that preserves this property. The second invariant ensures that y is always either 0 or 1, which is because in each iteration of the loop, y is modified in a way that preserves this property.\n- After the loop termination, we can add the following loop invariant:\n```\n/*@ \n    loop invariant (y == 0 ==> x % 3 == 0);\n*/\n```\nThis invariant ensures that if y is 0 at the end of the loop, then x is divisible by 3. This is because the post-condition asserts that x % 3 == 0 if y is 0, and the invariant implies the post-condition.\n\nBounds:\n- We don't know anything about the range of values that x can take, so we cannot add any bounds on x.\n- y is always either 0 or 1, so we can add the following bounds:\n```\n/*@ \n    loop invariant (y >= 0 && y <= 1);\n*/\n```\n\nRelations:\n- There are no relations between variables in this program, so we cannot add any relations.\n\nGuarded assertion:\n- The post-condition assertion is guarded by the condition y == 0, so we can use this condition in an implication to make the invariant true only when y is 0:\n```\n/*@ \n    loop invariant (y == 0 ==> x % 3 == 0);\n*/\n```\n\nNon-deterministic variables:\n- The variable x is assigned the value of the external function unknown_int(), which can return any integer value. Therefore, we cannot add any non-deterministic variable implications to make the invariant trivially true at the beginning or end of the loop.",
            "Pre-conditions and variable assignments:\n- The program declares two unsigned integers `x` and `y`.\n- The value of `x` is obtained from an external function `unknown_int()`.\n- The value of `y` is initialized to 1.\n\nLoop condition:\n- The loop condition is `unknown_int()`.\n\nLoop invariants:\n- Before the loop execution, `x` can take any value, so we cannot make any assumptions about it.\n- Before the loop execution, `y` is initialized to 1.\n```\n/*@ \n  loop invariant y == 1;\n*/\n```\n- In each iteration of the loop, the value of `x` changes based on its current value and some conditions. However, since the loop condition is `unknown_int()`, we cannot make any assumptions about the number of iterations of the loop. Therefore, we cannot find any loop invariant that holds in every iteration of the loop.\n- After the loop termination, `y` can either be 0 or 1 depending on the last value of `x`. Therefore, we need to consider two cases:\n  - If `y` is 0, then `x` was last modified by the `if` block inside the loop that checks if `x % 3 == 1`. In this case, the loop invariant that `x % 3 == 0` implies the post-condition. Since `x % 3 == 0` is the negation of `x % 3 == 1 || x % 3 == 2`, we can use the implication:\n```\n  /*@ \n    loop invariant y == 0 ==> x % 3 == 0;\n  */\n```\n  - If `y` is 1, then `x` was last modified by the `else` block inside the loop that checks if `unknown_int()` is true or false. In this case, we cannot make any assumptions about the value of `x` after the loop termination, since the loop condition depends on a non-deterministic function call. Therefore, we cannot find any loop invariant that implies the post-condition. However, we can use the implication:\n```\n  /*@ \n    loop invariant y == 1 ==> \\true;\n  */\n```\nThis implication makes the loop invariant trivially true when `y` is 1, since it implies that any statement is true when `y` is true. \n\nPutting everything together, we get:\n```\n/*@ \n  loop invariant y == 1;\n  loop invariant y == 0 ==> x % 3 == 0;\n  loop invariant y == 1 ==> \\true;\n*/\n```",
            "Pre-conditions:\n- None.\n\nVariable Assignments:\n- x is assigned an unknown value returned by the function `unknown_int()`.\n- y is assigned the value 1.\n\nLoop Condition:\n- The while loop runs as long as the function `unknown_int()` returns a non-zero value.\n\nLoop Invariants:\n- Before the loop execution:\n    - x is a non-negative integer.\n    - y is either 0 or 1.\n- In every iteration of the loop:\n    - x is a non-negative integer.\n    - y is either 0 or 1.\n    - If x % 3 == 1, then x is odd.\n    - If x % 3 == 2, then x is even.\n- After the loop termination:\n    - If y == 0, then x % 3 == 0.\n\nExplanation:\n- Before the loop starts, x can have any non-negative integer value. We do not know anything about the value of y.\n- In each iteration of the loop, x is modified by adding a fixed value to it. Therefore, x remains a non-negative integer throughout the loop. The value of y is also updated in each iteration. The if-else conditions make sure that either y becomes 0 or 1 in each iteration.\n- We can observe that if x % 3 == 1, then adding 2 to it will make it odd. Similarly, if x % 3 == 2, then adding 1 to it will make it even. Therefore, we can add these conditions as loop invariants.\n- Finally, after the loop terminates, we check the value of y. If y is 0, then x must have been modified by the first or the second if condition in each iteration of the loop. In both these cases, x % 3 would be 0. Therefore, we can add this condition as the loop invariant after the loop termination.\n\nLoop Invariants:\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y == 0 || y == 1;\n    loop invariant x % 3 == 1 ==> x % 2 == 1;\n    loop invariant x % 3 == 2 ==> x % 2 == 0;\n    loop invariant (y == 0 && x % 3 == 0) ==> (x % 3 == 0);\n*/\n```"
        ],
        "annotation_blocks": [
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The program takes no input.\n- The function `unknown_int()` returns an integer value.\n\nVariable assignments:\n- `x` is assigned the value returned by `unknown_int()`.\n- `y` is assigned the value 1.\n\nLoop condition:\n- The loop executes as long as the function `unknown_int()` returns a non-zero value.\n\nLoop invariants:\n- `x % 3 == 1 ==> y == 0`\n- `x % 3 == 2 ==> y == 0`\n- `x % 3 == 0 || x % 3 == 1 || x % 3 == 2 || x % 3 == 3`\n- `y == 0 || y == 1`\n\nExplanation:\n- Since the loop condition depends on a non-deterministic function, we cannot determine the exact number of iterations that the loop will execute. Hence, we need to come up with loop invariants that hold true for all possible iterations.\n- The first two loop invariants can be derived from the conditional statements inside the loop. If `x % 3 == 1`, then `x` is incremented by 2 and `y` is set to 0. Similarly, if `x % 3 == 2`, then `x` is incremented by 1 and `y` is set to 0. Therefore, we can deduce that if `x % 3 == 1` or `x % 3 == 2`, then `y` must be equal to 0.\n- The third loop invariant is derived from the fact that `x` is incremented by 1, 2, 4 or 5 in each iteration of the loop. Therefore, `x % 3` can only take the values 0, 1, 2 or 3.\n- The fourth loop invariant is a trivial one that simply states that `y` can only take the values 0 or 1.\n- Finally, we can use the guard condition `y == 0` to imply the post-condition `x % 3 == 0`. This is because the post-condition is only checked if `y == 0`, so we can assume that if `y` is not equal to 0, then the post-condition does not need to hold."
            ],
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The function `unknown_int()` returns a non-negative integer.\n\nVariable assignments:\n- `x` is assigned the value returned by `unknown_int()`.\n- `y` is assigned the value 1.\n\nLoop condition:\n- The loop continues as long as `unknown_int()` returns a non-zero value.\n\nLoop invariants:\n- `x % 3 == 0 ==> y == 0` (before loop execution)\n- `x % 3 == 0 || x % 3 == 1 || x % 3 == 2` (before loop execution)\n- `x % 3 == 0 ==> y == 0` (after loop termination)\n- `x % 3 == 0` (after loop termination, if `y` is 0)\n\nExplanation:\n- Before the loop starts, `x` can have any non-negative value, so we cannot make any assumptions about it. However, we know that `y` is initially 1, so we add the condition `x % 3 == 0 ==> y == 0` to our loop invariants.\n- We also know that `x` can have a remainder of 0, 1, or 2 when divided by 3. Therefore, we add the condition `x % 3 == 0 || x % 3 == 1 || x % 3 == 2` to our loop invariants.\n- During each iteration of the loop, the value of `x` can change based on the conditions in the loop body. However, we know that if `x` has a remainder of 0 when divided by 3, then `y` must be 0. Therefore, we add the condition `x % 3 == 0 ==> y == 0` to our loop invariants.\n- After the loop terminates, `y` can have either the value 0 or 1. However, if `y` is 0, then we know that `x` must have a remainder of 0 when divided by 3. Therefore, we add the condition `x % 3 == 0` to our loop invariants.\n- We do not need to add any loop invariants for the minimum or maximum values that `x` or `y` can take, as there are no explicit bounds given in the program."
            ],
            "/*@ \n    loop invariant (x % 3 == 0 || x % 3 == 1 || x % 3 == 2);\n    loop invariant (y == 0 || y == 1);\n*/",
            "/*@ \n  loop invariant y == 1;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y == 0 || y == 1;\n    loop invariant x % 3 == 1 ==> x % 2 == 1;\n    loop invariant x % 3 == 2 ==> x % 2 == 0;\n    loop invariant (y == 0 && x % 3 == 0) ==> (x % 3 == 0);\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The program takes no input.\n- The function `unknown_int()` returns an integer value.\n\nVariable assignments:\n- `x` is assigned the value returned by `unknown_int()`.\n- `y` is assigned the value 1.\n\nLoop condition:\n- The loop executes as long as the function `unknown_int()` returns a non-zero value.\n\nLoop invariants:\n- `x % 3 == 1 ==> y == 0`\n- `x % 3 == 2 ==> y == 0`\n- `x % 3 == 0 || x % 3 == 1 || x % 3 == 2 || x % 3 == 3`\n- `y == 0 || y == 1`\n\nExplanation:\n- Since the loop condition depends on a non-deterministic function, we cannot determine the exact number of iterations that the loop will execute. Hence, we need to come up with loop invariants that hold true for all possible iterations.\n- The first two loop invariants can be derived from the conditional statements inside the loop. If `x % 3 == 1`, then `x` is incremented by 2 and `y` is set to 0. Similarly, if `x % 3 == 2`, then `x` is incremented by 1 and `y` is set to 0. Therefore, we can deduce that if `x % 3 == 1` or `x % 3 == 2`, then `y` must be equal to 0.\n- The third loop invariant is derived from the fact that `x` is incremented by 1, 2, 4 or 5 in each iteration of the loop. Therefore, `x % 3` can only take the values 0, 1, 2 or 3.\n- The fourth loop invariant is a trivial one that simply states that `y` can only take the values 0 or 1.\n- Finally, we can use the guard condition `y == 0` to imply the post-condition `x % 3 == 0`. This is because the post-condition is only checked if `y == 0`, so we can assume that if `y` is not equal to 0, then the post-condition does not need to hold.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The function `unknown_int()` returns a non-negative integer.\n\nVariable assignments:\n- `x` is assigned the value returned by `unknown_int()`.\n- `y` is assigned the value 1.\n\nLoop condition:\n- The loop continues as long as `unknown_int()` returns a non-zero value.\n\nLoop invariants:\n- `x % 3 == 0 ==> y == 0` (before loop execution)\n- `x % 3 == 0 || x % 3 == 1 || x % 3 == 2` (before loop execution)\n- `x % 3 == 0 ==> y == 0` (after loop termination)\n- `x % 3 == 0` (after loop termination, if `y` is 0)\n\nExplanation:\n- Before the loop starts, `x` can have any non-negative value, so we cannot make any assumptions about it. However, we know that `y` is initially 1, so we add the condition `x % 3 == 0 ==> y == 0` to our loop invariants.\n- We also know that `x` can have a remainder of 0, 1, or 2 when divided by 3. Therefore, we add the condition `x % 3 == 0 || x % 3 == 1 || x % 3 == 2` to our loop invariants.\n- During each iteration of the loop, the value of `x` can change based on the conditions in the loop body. However, we know that if `x` has a remainder of 0 when divided by 3, then `y` must be 0. Therefore, we add the condition `x % 3 == 0 ==> y == 0` to our loop invariants.\n- After the loop terminates, `y` can have either the value 0 or 1. However, if `y` is 0, then we know that `x` must have a remainder of 0 when divided by 3. Therefore, we add the condition `x % 3 == 0` to our loop invariants.\n- We do not need to add any loop invariants for the minimum or maximum values that `x` or `y` can take, as there are no explicit bounds given in the program.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant (x % 3 == 0 || x % 3 == 1 || x % 3 == 2);\n    loop invariant (y == 0 || y == 1);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant (x % 3 == 0 || x % 3 == 1 || x % 3 == 2) is inductive.\nloop invariant (y == 0 || y == 1) is inductive.\nAssertion x % 3 == 0: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main(){\n  unsigned int x = unknown_int();\n  unsigned int y = 1;\n  \n  /*@\nloop invariant i1: (x % 3 == 0 || x % 3 == 1 || x % 3 == 2);\nloop invariant i2: (y == 0 || y == 1);\n*/\nwhile(unknown_int()){\n    if(x % 3 == 1){\n      x += 2; y = 0;}\n    else{\n      if(x % 3 == 2){\n\tx += 1; y = 0;}\n      else{\n\tif(unknown_int()){\n\t  x += 4; y = 1;}\n\telse{\n\t  x += 5; y = 1;}\n      }\n    }\n  }\n  if(y == 0)\n    {;\n//@ assert(x % 3 == 0);\n}\n\n  return 0;\n}\n",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n  loop invariant y == 1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant y == 1 is established but not preserved.\nAssertion x % 3 == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main(){\n  unsigned int x = unknown_int();\n  unsigned int y = 1;\n  \n  /*@\n\n*/\nwhile(unknown_int()){\n    if(x % 3 == 1){\n      x += 2; y = 0;}\n    else{\n      if(x % 3 == 2){\n\tx += 1; y = 0;}\n      else{\n\tif(unknown_int()){\n\t  x += 4; y = 1;}\n\telse{\n\t  x += 5; y = 1;}\n      }\n    }\n  }\n  if(y == 0)\n    {;\n//@ assert(x % 3 == 0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y == 0 || y == 1;\n    loop invariant x % 3 == 1 ==> x % 2 == 1;\n    loop invariant x % 3 == 2 ==> x % 2 == 0;\n    loop invariant (y == 0 && x % 3 == 0) ==> (x % 3 == 0);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is partially proven to be inductive.\nloop invariant y == 0 || y == 1 is partially proven to be inductive.\nloop invariant x % 3 == 1 ==> x % 2 == 1 is neither established nor preserved.\nloop invariant x % 3 == 2 ==> x % 2 == 0 is neither established nor preserved.\nloop invariant (y == 0 && x % 3 == 0) ==> (x % 3 == 0) is partially proven to be inductive.\nAssertion x % 3 == 0: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main(){\n  unsigned int x = unknown_int();\n  unsigned int y = 1;\n  \n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y == 0 || y == 1;\n\n\nloop invariant i5: (y == 0 && x % 3 == 0) ==> (x % 3 == 0);\n*/\nwhile(unknown_int()){\n    if(x % 3 == 1){\n      x += 2; y = 0;}\n    else{\n      if(x % 3 == 2){\n\tx += 1; y = 0;}\n      else{\n\tif(unknown_int()){\n\t  x += 4; y = 1;}\n\telse{\n\t  x += 5; y = 1;}\n      }\n    }\n  }\n  if(y == 0)\n    {;\n//@ assert(x % 3 == 0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant (x % 3 == 0 || x % 3 == 1 || x % 3 == 2) is partially proven to be inductive.\nloop invariant (y == 0 || y == 1) is partially proven to be inductive.\nloop invariant y == 1 is established but not preserved.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant y == 0 || y == 1 is partially proven to be inductive.\nloop invariant x % 3 == 1 ==> x % 2 == 1 is neither established nor preserved.\nloop invariant x % 3 == 2 ==> x % 2 == 0 is neither established nor preserved.\nloop invariant (y == 0 && x % 3 == 0) ==> (x % 3 == 0) is partially proven to be inductive.\nAssertion x % 3 == 0: Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main(){\n  unsigned int x = unknown_int();\n  unsigned int y = 1;\n  \n  /*@\nloop invariant i1: (x % 3 == 0 || x % 3 == 1 || x % 3 == 2);\nloop invariant i2: (y == 0 || y == 1);\nloop invariant i3: y == 1;\nloop invariant i4: x >= 0;\nloop invariant i5: y == 0 || y == 1;\nloop invariant i6: x % 3 == 1 ==> x % 2 == 1;\nloop invariant i7: x % 3 == 2 ==> x % 2 == 0;\nloop invariant i8: (y == 0 && x % 3 == 0) ==> (x % 3 == 0);\n*/\nwhile(unknown_int()){\n    if(x % 3 == 1){\n      x += 2; y = 0;}\n    else{\n      if(x % 3 == 2){\n\tx += 1; y = 0;}\n      else{\n\tif(unknown_int()){\n\t  x += 4; y = 1;}\n\telse{\n\t  x += 5; y = 1;}\n      }\n    }\n  }\n  if(y == 0)\n    {;\n//@ assert(x % 3 == 0);\n}\n\n  return 0;\n}\n",
        "combined_annotation_num_solver_calls": 3,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main(){\n  unsigned int x = unknown_int();\n  unsigned int y = 1;\n  \n  /*@\nloop invariant i1: (x % 3 == 0 || x % 3 == 1 || x % 3 == 2);\nloop invariant i2: (y == 0 || y == 1);\n\nloop invariant i4: x >= 0;\nloop invariant i5: y == 0 || y == 1;\n\n\nloop invariant i8: (y == 0 && x % 3 == 0) ==> (x % 3 == 0);\n*/\nwhile(unknown_int()){\n    if(x % 3 == 1){\n      x += 2; y = 0;}\n    else{\n      if(x % 3 == 2){\n\tx += 1; y = 0;}\n      else{\n\tif(unknown_int()){\n\t  x += 4; y = 1;}\n\telse{\n\t  x += 5; y = 1;}\n      }\n    }\n  }\n  if(y == 0)\n    {;\n//@ assert(x % 3 == 0);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_2.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../data/benchmarks/sv-benchmarks/loop-industry-pattern/mod3.c"
        ],
        "skipped": [],
        "total": 275,
        "success_count": 131,
        "failure_count": 144,
        "success_rate": 0.4763636363636364
    }
}